{
  "type": "issue",
  "issue": {
    "id": 64231118,
    "node_id": "MDU6SXNzdWU2NDIzMTExOA==",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5944",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5944/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5944/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5944/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/5944",
    "number": 5944,
    "state": "closed",
    "state_reason": "completed",
    "title": "Warnings compiling current master",
    "body": "Few new warnings since the merges last night\n\n```\n  CXX      libbitcoin_server_a-init.o\nIn file included from init.cpp:22:\n./txdb.h:19:1: warning: class 'CDiskTxPos' was previously declared as a struct [-Wmismatched-tags]\nclass CDiskTxPos;\n^\n./main.h:209:8: note: previous use is here\nstruct CDiskTxPos : public CDiskBlockPos\n       ^\n./txdb.h:19:1: note: did you mean struct here?\nclass CDiskTxPos;\n^~~~~\nstruct\nIn file included from init.cpp:26:\n./validationinterface.h:12:1: warning: class 'CBlockLocator' was previously declared as a struct [-Wmismatched-tags]\nclass CBlockLocator;\n^\n./primitives/block.h:140:8: note: previous use is here\nstruct CBlockLocator\n       ^\n./validationinterface.h:12:1: note: did you mean struct here?\nclass CBlockLocator;\n^~~~~\nstruct\n2 warnings generated.\n  CXX      libbitcoin_server_a-leveldbwrapper.o\n```\n\n```\n  CXX      test/test_test_bitcoin-hash_tests.o\nIn file included from test/hash_tests.cpp:11:\nIn file included from /usr/local/include/boost/test/unit_test.hpp:19:\n/usr/local/include/boost/test/test_tools.hpp:536:17: warning: comparison of integers of different signs: 'const unsigned int' and\n      'const int' [-Wsign-compare]\n    return left == right;\n           ~~~~ ^  ~~~~~\n/usr/local/include/boost/test/test_tools.hpp:560:16: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::equal_impl<unsigned int, int>' requested here\n        return equal_impl( left, right );\n               ^\n/usr/local/include/boost/test/test_tools.hpp:575:16: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned int, int>' requested here\n        return call_impl( left, right, left_is_array() );\n               ^\n/usr/local/include/boost/test/test_tools.hpp:523:50: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned int, int>' requested here\nBOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                 ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:38:60: note: expanded from macro 'BOOST_PP_REPEAT_1'\n# define BOOST_PP_REPEAT_1(c, m, d) BOOST_PP_REPEAT_1_I(c, m, d)\n                                                           ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:43:63: note: expanded from macro 'BOOST_PP_REPEAT_1_I'\n# define BOOST_PP_REPEAT_1_I(c, m, d) BOOST_PP_REPEAT_1_ ## c(m, d)\n                                                              ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:56:56: note: expanded from macro 'BOOST_PP_REPEAT_1_5'\n# define BOOST_PP_REPEAT_1_5(m, d) BOOST_PP_REPEAT_1_4(m, d) m(2, 4, d)\n                                                       ^\nnote: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:54:56: note: expanded from macro 'BOOST_PP_REPEAT_1_3'\n# define BOOST_PP_REPEAT_1_3(m, d) BOOST_PP_REPEAT_1_2(m, d) m(2, 2, d)\n                                                       ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:53:62: note: expanded from macro 'BOOST_PP_REPEAT_1_2'\n# define BOOST_PP_REPEAT_1_2(m, d) BOOST_PP_REPEAT_1_1(m, d) m(2, 1, d)\n                                                             ^\n/usr/local/include/boost/test/test_tools.hpp:511:17: note: expanded from macro 'IMPL_FRWD'\n    check_impl( P( BOOST_PP_REPEAT_ ## z( BOOST_PP_ADD( n, 1 ), PRED_PARAMS, _ ) ), \\\n                ^\ntest/hash_tests.cpp:30:5: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned int, int>' requested here\n    T(0x00000000, 0x00000000, \"\");\n    ^\ntest/hash_tests.cpp:20:33: note: expanded from macro 'T'\n#define T(expected, seed, data) BOOST_CHECK_EQUAL(MurmurHash3(seed, ParseHex(data)), expected)\n                                ^\n/usr/local/include/boost/test/test_tools.hpp:169:5: note: expanded from macro 'BOOST_CHECK_EQUAL'\n    BOOST_CHECK_WITH_ARGS_IMPL( ::boost::test_tools::tt_detail::equal_impl_frwd(), \"\", CHECK, CHECK_EQUAL, (L)(R) )\n    ^\n/usr/local/include/boost/test/test_tools.hpp:102:27: note: expanded from macro 'BOOST_CHECK_WITH_ARGS_IMPL'\n    BOOST_TEST_TOOL_IMPL( check_frwd, P, check_descr, TL, CT )      \\\n                          ^\n/usr/local/include/boost/test/test_tools.hpp:77:37: note: expanded from macro 'BOOST_TEST_TOOL_IMPL'\n    ::boost::test_tools::tt_detail::func(                               \\\n                                    ^\n1 warning generated.\n  CXX      test/test_test_bitcoin-key_tests.o\n```\n\n```\nIn file included from ./test/test_bitcoin.h:4:\n./txdb.h:19:1: warning: class 'CDiskTxPos' was previously declared as a struct [-Wmismatched-tags]\nclass CDiskTxPos;\n^\n./main.h:209:8: note: previous use is here\nstruct CDiskTxPos : public CDiskBlockPos\n       ^\n./txdb.h:19:1: note: did you mean struct here?\nclass CDiskTxPos;\n^~~~~\nstruct\nIn file included from test/miner_tests.cpp:13:\nIn file included from /usr/local/include/boost/test/unit_test.hpp:19:\n/usr/local/include/boost/test/test_tools.hpp:536:17: warning: comparison of integers of different signs: 'const unsigned long' and\n      'const int' [-Wsign-compare]\n    return left == right;\n           ~~~~ ^  ~~~~~\n/usr/local/include/boost/test/test_tools.hpp:560:16: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::equal_impl<unsigned long, int>' requested here\n        return equal_impl( left, right );\n               ^\n/usr/local/include/boost/test/test_tools.hpp:575:16: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned long, int>' requested here\n        return call_impl( left, right, left_is_array() );\n               ^\n/usr/local/include/boost/test/test_tools.hpp:523:50: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned long, int>' requested here\nBOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                 ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:38:60: note: expanded from macro 'BOOST_PP_REPEAT_1'\n# define BOOST_PP_REPEAT_1(c, m, d) BOOST_PP_REPEAT_1_I(c, m, d)\n                                                           ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:43:63: note: expanded from macro 'BOOST_PP_REPEAT_1_I'\n# define BOOST_PP_REPEAT_1_I(c, m, d) BOOST_PP_REPEAT_1_ ## c(m, d)\n                                                              ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:56:56: note: expanded from macro 'BOOST_PP_REPEAT_1_5'\n# define BOOST_PP_REPEAT_1_5(m, d) BOOST_PP_REPEAT_1_4(m, d) m(2, 4, d)\n                                                       ^\nnote: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:54:56: note: expanded from macro 'BOOST_PP_REPEAT_1_3'\n# define BOOST_PP_REPEAT_1_3(m, d) BOOST_PP_REPEAT_1_2(m, d) m(2, 2, d)\n                                                       ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:53:62: note: expanded from macro 'BOOST_PP_REPEAT_1_2'\n# define BOOST_PP_REPEAT_1_2(m, d) BOOST_PP_REPEAT_1_1(m, d) m(2, 1, d)\n                                                             ^\n/usr/local/include/boost/test/test_tools.hpp:511:17: note: expanded from macro 'IMPL_FRWD'\n    check_impl( P( BOOST_PP_REPEAT_ ## z( BOOST_PP_ADD( n, 1 ), PRED_PARAMS, _ ) ), \\\n                ^\ntest/miner_tests.cpp:244:5: note: in instantiation of function template specialization\n      'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned long, int>' requested here\n    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n    ^\n/usr/local/include/boost/test/test_tools.hpp:169:5: note: expanded from macro 'BOOST_CHECK_EQUAL'\n    BOOST_CHECK_WITH_ARGS_IMPL( ::boost::test_tools::tt_detail::equal_impl_frwd(), \"\", CHECK, CHECK_EQUAL, (L)(R) )\n    ^\n/usr/local/include/boost/test/test_tools.hpp:102:27: note: expanded from macro 'BOOST_CHECK_WITH_ARGS_IMPL'\n    BOOST_TEST_TOOL_IMPL( check_frwd, P, check_descr, TL, CT )      \\\n                          ^\n/usr/local/include/boost/test/test_tools.hpp:77:37: note: expanded from macro 'BOOST_TEST_TOOL_IMPL'\n    ::boost::test_tools::tt_detail::func(                               \\\n                                    ^\n2 warnings generated.\n  CXX      test/test_test_bitcoin-mruset_tests.o\n```\n\n```\n  CXX      qt/qt_libbitcoinqt_a-csvmodelwriter.o\n  CXX      qt/qt_libbitcoinqt_a-guiutil.o\nIn file included from qt/guiutil.cpp:41:\nIn file included from /usr/local/include/boost/filesystem/detail/utf8_codecvt_facet.hpp:18:\n/usr/local/include/boost/detail/utf8_codecvt_facet.hpp:176:17: warning: 'boost::filesystem::detail::utf8_codecvt_facet::do_length' hides\n      overloaded virtual function [-Woverloaded-virtual]\n    virtual int do_length(\n                ^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:952:17: note: hidden\n      overloaded virtual function 'std::__1::codecvt<wchar_t, char, __mbstate_t>::do_length' declared here: type mismatch at 1st parameter\n      ('state_type &' (aka '__mbstate_t &') vs 'const std::mbstate_t &' (aka 'const __mbstate_t &'))\n    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;\n                ^\n1 warning generated.\n```\n",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": true,
    "active_lock_reason": "resolved",
    "comments": 0,
    "closed_at": "2015-03-30T11:57:02Z",
    "created_at": "2015-03-25T09:52:28Z",
    "updated_at": "2021-09-08T12:21:57Z"
  },
  "events": [
    {
      "event": "closed",
      "id": 268407278,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjY4NDA3Mjc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/268407278",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-03-30T11:57:02Z"
    },
    {
      "event": "locked",
      "id": 5271946435,
      "node_id": "LOE_lADOABII584D1BbOzwAAAAE6O4TD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271946435",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T12:21:57Z",
      "lock_reason": "resolved"
    }
  ]
}