{
  "type": "issue",
  "issue": {
    "id": 1712437859,
    "node_id": "I_kwDOABII585mEbpj",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/27677",
    "number": 27677,
    "state": "open",
    "state_reason": null,
    "title": "Proposal for a new mempool design",
    "body": "@sipa and I gave a presentation to some other developers recently about some work we've been doing to redesign how the mempool works, and I wanted to share a writeup outlining our thoughts with a broader audience to further the discussion.  I've also attached a PDF of slides that go along with this: [Reinventing the Mempool.pdf](https://github.com/bitcoin/bitcoin/files/11490409/Reinventing.the.Mempool.pdf).\r\n\r\n--------\r\n\r\n# Summary\r\n\r\nThe current mempool is primarily designed around maintaining two different sort orders, where for each transaction we keep track of its position in an ancestor-feerate-sort and in a descendant-feerate-sort.  We then use those two cached sort orders in order to implement eviction and mining.\r\n\r\nThose algorithms are deficient in several ways. In particular, the eviction algorithm (which removes the transaction with lowest descendant feerate, along with its descendants) does not guarantee that the first transaction evicted would be the last transaction mined, and there exist situations where we could evict a transaction that would otherwise actually be mined in the next block.\r\n\r\nFurthermore, the mining algorithm is more complex than the ancestor feerate sort we maintain, and it is insufficient to merely do lookups into our ancestor feerate index to determine which of two transactions will be mined from the mempool first. This lack of a total ordering on mempool transactions makes RBF calculations difficult to align with miner incentives, and creates distortions where we sometimes can replace transactions via RBF that would actually be better for a miner than the replacement.\r\n\r\nTo solve all these problems, we propose maintaining a total ordering on mempool transactions, which we use to implement a mining and eviction algorithm that are symmetrically opposite and provide better RBF rules for determining when to allow a replacement to occur.\r\n\r\n# Background\r\n\r\n## Eviction and mining are not opposite\r\n\r\nSometimes our eviction criteria might remove something that would be mined in the next block from our mempool. Consider the following transaction graph _(with (ancestor, descendant) feerates in sat/byte in parentheses)_:\r\n\r\n```mermaid\r\ngraph TD;\r\n    A[\"Tx A: size 250, fee 250 (1, 2)\"]-->B;\r\n    A-->C;\r\n    A-->E[\"Tx E: size 250, fee 49750 (100, 199)\"];\r\n    B[\"Tx B: size 50000, fee 50000 (1, 2.02)\"]-->D[\"Tx D: size 500, fee 52000 (1.51, 104)\"];\r\n    C[\"Tx C: size 50000, fee 50000 (1, 2.02)\"]-->D;\r\n```\r\n\r\nNote that the ancestor feerate of E is 100 sat/byte, while the descendant feerate of A is 2 sat/byte.  In particular, the descendant feerate of A is lowest among all transactions in this diagram, so if it were also the lowest descendant feerate package in the mempool, then we might evict A, and therefore E, even though (A, E) might otherwise be selected for the next block.\r\n\r\n## RBF is not incentive compatible\r\n\r\nThere are many forms of incentive incompatibility baked into the BIP 125 replacement rules:\r\n * The \"no-new-parents\" rule doesn't consider the replacement transaction's desirability to a miner -- it might be better than all the to-be-replaced transactions, despite the new unconfirmed parent.\r\n * The rule requiring that a new transaction pays a higher feerate than its direct conflicts is insufficient to ensure that the new transaction is more desirable than what is being evicted. One of the direct conflicts could have a smaller set of unconfirmed parents than the new transaction, resulting in a higher ancestor feerate. Moreover, because we don't compare feerates of any indirect conflicts -- that is, descendants of direct conflicts -- with the feerate of the new transaction, it's possible that we're evicting a child transaction that would otherwise be mined in the next block with something that will not be mined for a long time.\r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/26451 for more discussion of the second point.\r\n\r\n# Proposed solution\r\n\r\nIf we're able to maintain a total ordering on the mempool, then we can design efficient algorithms that will solve these problems.\r\n\r\n## How to maintain a total ordering\r\n\r\nWith the current algorithm and rules, it is infeasible to continuously maintain a fully-ordered mempool at all times. Ordering an $n$-transaction mempool from scratch scales with $O(d n \\log n)$, where $d$ is the descendant limit (default 25), which quickly becomes too much when the mempool grows beyond a trivial size. And unfortunately, doing this incrementally (just re-ordering affected transactions whenever updates happen) does not help, because even a single added transaction can change the ordering of all remaining ones.\r\n\r\n[_Edited to use a better example_] As an example of this effect, consider the following transaction graph (all transactions are same size, with ancestor feerates of children in parentheses):\r\n\r\n```mermaid\r\ngraph TD;\r\n    A[Tx A: fee 16]-->D[\"Tx D: fee 17 (16.5)\"];\r\n    A-->E[\"Tx E: fee 19 (16)\"];\r\n    B[Tx B: fee 13]-->E;\r\n    B-->F[\"Tx F: fee 23 (14.67)\"];\r\n    C[Tx C: fee 8]-->F;\r\n```\r\n\r\nWith these ancestor feerates, Tx D should be included first along with its parent Tx A. Once Tx A is included, Tx E will have the next highest ancestor feerate and it is included next with its parent, and so on to produce the ordering: [A, D, B, E, C, F].\r\n\r\nNow consider a single transaction being added, Tx G:\r\n\r\n```mermaid\r\ngraph TD;\r\n    A[Tx A: fee 16]-->D[\"Tx D: fee 17 (16.5)\"];\r\n    A-->E[\"Tx E: fee 19 (16)\"];\r\n    B[Tx B: fee 13]-->E;\r\n    B-->F[\"Tx F: fee 23 (14.67)\"];\r\n    C[Tx C: fee 8]-->F;\r\n    C-->G[\"Tx G: fee 29 (18.5)\"]\r\n```\r\n\r\nTransaction G now has the highest ancestor feerate, and so it would be chosen first in our ancestor-feerate-based ordering. Once Tx G and its parent Tx C are included, Tx F will see its ancestor feerate increase (as it only has one remaining ancestor) to 18, making it the next best to include (along with its parent Tx B). Once Tx B is in, Tx E has the next highest ancestor feerate and we can see that the final ordering of transactions is: [C, G, B, F, A, E, D]. Note that the order in which the child transactions appear has been reversed, and moreover, the number of transactions in this graph could be extended arbitrarily while retaining this behavior.\r\n\r\nFundamentally this means that we need to bound the number of transactions whose ordering can be affected by individual changes to the mempool. Our main insight is that this number is exactly the size of the largest \"cluster\" of transactions that we might have in the mempool, where a \"cluster\" is a maximal set of transactions that are connected via ancestor/descendant relationships in the transaction graph.\r\n\r\nOur proposal is thus to introduce a limit on the size of clusters in the mempool. It then becomes feasible to maintain an ordering for all the individual clusters at all times, and perform a quick merge sort over all of them whenever a total ordering of the entire mempool is needed.\r\n\r\n### Definitions\r\n\r\n#### Clusters\r\n\r\nWe associate the transactions in the mempool with a graph, where each transaction corresponds to a vertex and two transactions are adjacent (ie have an edge between them) if one spends any outputs of the other. We say that two transactions are in the same cluster if there exists a path of edges between them. The overall graph of transactions is partitioned into disjoint clusters, where each transaction is in exactly one cluster. \r\n\r\n#### Linearizations\r\n\r\nWe introduce the term \"linearization\" to refer to any topologically valid ordering of transactions, that is, any ordering of transactions that would be valid in a block under Bitcoin's consensus rules. This could be an ancestor-feerate-based ordering of transactions (like we use in the mining code today), or it could be the optimal ordering (one where we choose amongst all possible subsets of transactions the topologically valid subset that maximizes feerate, and repeat until all transactions are selected).  Or it could be something in between; for the purposes of discussion we abstract away the details of the cluster ordering algorithm, or \"linearization\", that we might settle on.\r\n\r\n#### Chunks\r\n\r\nOur intuition for cluster linearization algorithms is that we often will choose transactions with lower feerate before we choose transactions with higher feerate, because of topology constraints. This is a consequence of behaviors like \"child- pays-for-parent\".  So when thinking about how we might compare transactions from two different clusters to determine which  one is \"better\" (eg for mining) or \"worse\" (eg for eviction), we don't just want to look at the first or last transaction in the cluster. Instead, our intuition is that we want to look at the same package of transactions that our ordering algorithm would have used in coming up with the ordering in the first place.\r\n\r\nThis concept, that transactions should be looked at in some aggregate with other transactions, can be generalized in a way that is indifferent to the underlying linearization algorithm that is used. For a given linearized cluster  $[tx_1, ..., tx_n]$, we can partition the cluster into a series of disjoint \"chunks\" $[c_1, c_2, ..., c_j]$ where $c_1 = [tx_1, ..., tx_{i_1}]$, $c_2 = [tx_{i_1+1}, ..., tx_{i_2}]$ ,..., $c_j = [tx_{i_{j-1}+1}, ..., tx_n]$, such that the feerate of each chunk is no greater than the feerate of the chunk that precedes it. \r\n\r\nAnother way of putting it: chunks are the partitioning of a cluster that respects the linearization in a way that ensures that feerates from one chunk to the next are monotonically decreasing.\r\n\r\n(_Note that due to ties there can be more than one chunking that is compatible with the given definition; generally we'll prefer smaller chunks and therefore not merge together chunks with the same feerate._)\r\n\r\nGiven any cluster linearization, it turns out that it's possible to construct the chunks for the cluster in linear time, and this operation is independent of the linearization algorithm that may have been used.\r\n\r\n### Implementing fundamental mempool operations\r\n\r\nFor the sake of discussion below, let's now imagine that our mempool is grouped into its different clusters, and each cluster is linearized using some algorithm (perhaps the ancestor-feerate-based mining algorithm in use today, or perhaps an optimal ordering), and those linearized clusters are each chunked into their monotonically decreasing feerate order.  Given such a mempool, we can design algorithms to implement the fundamental mempool operations.\r\n\r\n#### Mining\r\n\r\nOur goal with mining is to maximize the fees in a block template, and we do so by applying a greedy algorithm. \r\n\r\n1. Make a highest-feerate-sorted heap consisting of the first chunk from each cluster.  Note that these will be each cluster's highest feerate chunk.\r\n2. While the candidate block is not yet full:\r\n    i. Remove the top of the heap and add to the block candidate.\r\n    ii. If the cluster from which the selection was made has more chunks left, insert the next best chunk from that cluster into the heap.\r\n\r\nNote that when we approach the end of a block, we run into a knapsack problem where chunks may not fit. How we might optimize the end of a block is deferred for later discussion.\r\n\r\n#### Eviction\r\n\r\nOur goal with eviction is to remove the transactions that would be the last ones selected by our mining algorithm. With a  fully ordered mempool, this calculation is straightforward and mirrors the mining algorithm.\r\n\r\n1. Make a lowest-feerate-sorted heap consisting of the last chunk from each cluster. Note that these will be each cluster's lowest feerate chunk.\r\n2. While the mempool is over its size limit:\r\n    i. Remove the top of the heap and evict from the mempool.\r\n    ii. If the cluster from which the selection was made has more chunks left, insert the next lowest feerate chunk from that cluster into the heap.\r\n\r\nAs with our current eviction algorithm, we will also bump up the mempool's minimum fee to be an increment above the highest feerate chunk that was evicted.\r\n\r\n#### RBF\r\n\r\nOur goal with RBF is to allow a \"better\" transaction (something a miner would prefer to have) to evict some existing, conflicting transactions in a way that is DoS-resistant but is otherwise as permissible as practical.\r\n\r\nGiven a mempool where all clusters are ordered and chunked, we can assign a score to a transaction which is the chunk feerate of the chunk to which it belongs.  Then our main RBF incentive compatibility rule just becomes:\r\n\r\n1. A replacement transaction must have a chunk feerate greater than that of all transactions which it would evict.\r\n\r\nThis would eliminate the BIP 125 rule against replacements introducing new unconfirmed parents and replaces the BIP 125 feerate rule in which a replacement transaction must have a higher individual feerate than all direct conflicts.\r\n\r\nHowever, at least for now, we would retain some of the additional anti-DoS rules:\r\n\r\n1. A replacement transaction must pay more total fees than the sum of fees paid by all evicted transactions.\r\n2. A replacement transaction must not evict more than (100?) existing transactions.\r\n\r\nThe first of those rules prevents free-relay attacks, while some version of the second rule is necessary to prevent us from needing to re-cluster/re-order too much of the mempool while processing a single transaction.\r\n\r\n## Some open questions\r\n\r\n1. Philosophically, is it problematic for RBF rules to be even more of a \"black box\" than the BIP 125 algorithm?\r\n2. Are there usage patterns for wallets or other protocols that would be fundamentally harmed by cluster size limits? Do we know what values would be acceptable or what values would be insufficient?\r\n3. What can we do if a high feerate transaction arrives that would violate the cluster limit? Can we design some sort of \"cluster-sibling eviction\" algorithm that is DoS-resistant and would help reduce the downsides of cluster size limits?\r\n4. Is it problematic if linearization algorithms used on the network are non-deterministic?\r\n   * We could imagine using a variety of linearization algorithms at any given moment -- perhaps for small clusters we use an exponential run-time optimal ordering algorithm, while for medium sized clusters we do something different, like an ancestor-feerate-based ordering, or an optimal ordering with some bounded computation limits.\r\n   * Are there situations where different nodes having different orders causes meaningful user-facing issues with transactions not relaying effectively, eg because of the use of chunk feerates in the RBF algorithm?\r\n6. Chunk sizes should be bounded in vbytes, so that we don't exacerbate the knapsack problem during mining. However, what is the best way to do that?\r\n   * We could just bound the vbytes allowed in a single cluster, which would guarantee that chunks are not too big.\r\n   * Or we could design linearization algorithms and adapt our chunking logic to never produce chunks bigger than a certain size -- but this would come at the expense of chunks within a cluster no longer having monotonically decreasing feerates. This may be possible to do, but is the need for large clusters (measured in vbytes) great enough to warrant the complexity that this would introduce in our algorithms?\r\n\r\n# Current status and next steps\r\n\r\n1. First draft implementation of this logic is done (link to be added).\r\n2. Analyzing effects of this logic on historical transaction data is in process, to try to answer questions like:\r\n   * How big are the clusters we've historically seen / what is the cluster size distribution on the network today\r\n   * How would the network have been affected if we'd had cluster sizes bounded at various different values in the past\r\n3. Performance analysis of all the mempool operations (particularly as a function of cluster size) to ensure that mempool operations are optimized with this approach.\r\n4. The information gathered will (eventually) inform a concrete proposal for what cluster size limits we might consider (along with chunk vbyte and/or cluster vbyte limits).\r\n",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 64584,
        "node_id": "MDU6TGFiZWw2NDU4NA==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
        "name": "Brainstorming",
        "color": "ebd775",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 12,
    "created_at": "2023-05-16T17:29:33Z",
    "updated_at": "2023-06-01T20:23:39Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 9260719798,
      "node_id": "MEE_lADOABII585mEbpjzwAAAAIn-162",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9260719798",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T17:29:34Z"
    },
    {
      "event": "subscribed",
      "id": 9260719803,
      "node_id": "SE_lADOABII585mEbpjzwAAAAIn-167",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9260719803",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T17:29:34Z"
    },
    {
      "event": "commented",
      "id": 1551056767,
      "node_id": "IC_kwDOABII585ccz9_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551056767",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T09:25:59Z",
      "updated_at": "2023-05-17T09:26:34Z",
      "author_association": "MEMBER",
      "body": "Nice! Here's the transcript of the above mentioned presentation: https://btctranscripts.com/bitcoin-core-dev-tech/2023-04-25-mempool-clustering/\r\n\r\n It's also worth noting that although this proposal introduces a new limit, for the cluster size, it could potentially supersede some other limits (e.g. `-limitancestorcount`, `-limitancestorsize`, `-limitdescendantcount`, `-limitdescendantsize`) if the maximum cluster size is large enough. Though if the limit is in vbytes, then someone assuming a limit in count might still hit a non backwards compatible policy limit.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551056767",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1551620933,
      "node_id": "IC_kwDOABII585ce9tF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551620933",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T15:34:36Z",
      "updated_at": "2023-05-17T15:34:36Z",
      "author_association": "MEMBER",
      "body": "Thanks for sharing all those details, this is great!\r\nI can only comment as someone who relies a lot on mempool/transaction relay for lightning: my opinion may thus be biased.\r\nI believe that lightning's security will *always* depend on the ability to get specific transactions confirmed before a given block, so anything that can help transaction propagation is important for us (and I believe this will be true for most L2 contracts).\r\n\r\n> Philosophically, is it problematic for RBF rules to be even more of a \"black box\" than the BIP 125 algorithm?\r\n\r\nIt isn't for me, as long as we can *somehow* RBF once we're ready to pay the price.\r\nThe way lightning implementations currently RBF is via trial-and-error, not by trying to abide by the BIP 125 rules.\r\nWe simply lower the change output of the transaction we're trying to RBF and/or add another input, try broadcasting, and try again with more fees if `bitcoind` rejects it (or if we still don't see our transaction confirming).\r\nSo we're already treating RBF as a black box, and don't care about making it \"more\" of a black box.\r\n\r\n> Are there usage patterns for wallets or other protocols that would be fundamentally harmed by cluster size limits? Do we know what values would be acceptable or what values would be insufficient?\r\n\r\nMost L2 contracts will only start once the \"contract transaction\" (channel funding transaction in the lightning case) is confirmed.\r\nIn the lightning case, the cluster we generate currently consists of:\r\n\r\n- a commitment transaction (no unconfirmed ancestors)\r\n- a CPFP child for that commitment transaction (which may bring its set of unconfirmed ancestors)\r\n\r\nThe commitment transaction may be as large as `MAX_STANDARD_TX_WEIGHT`, so we want the cluster size to allow that (but it's obvious that the limit needs to be higher than that anyway). Since L2 contracts generate trees of transactions, I believe they should always be able to get away with confirming each level of that tree independently, which means they only ever need one transaction and one CPFP child, nothing more (but we can probably make those contracts more fee-efficient if the cluster size allows more than that). @instagibbs does that fundamentally change with Eltoo? I guess not.\r\n\r\nThe CPFP child brings its own cluster with it, so the larger the cluster size limit is, the more of our utxos we're able to use to create our CPFP transaction. The limits chosen here will have to be arbitrary, and wallets will simply have to make sure their utxos confirm to be able to use them for CPFP. This is already the case because of the descendant limits, so it shouldn't be fundamentally more harmful?\r\n",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551620933",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "mentioned",
      "id": 9271041848,
      "node_id": "MEE_lADOABII585mEbpjzwAAAAIomN84",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9271041848",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T15:34:36Z"
    },
    {
      "event": "subscribed",
      "id": 9271041893,
      "node_id": "SE_lADOABII585mEbpjzwAAAAIomN9l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9271041893",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T15:34:36Z"
    },
    {
      "event": "commented",
      "id": 1551776409,
      "node_id": "IC_kwDOABII585cfjqZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551776409",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T17:10:18Z",
      "updated_at": "2023-05-17T17:10:18Z",
      "author_association": "MEMBER",
      "body": "> does that fundamentally change with Eltoo? I guess not.\r\n\r\nNo, all pin-avoiding designs I've thought of are 0-fee parent, CPFP-ing child.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551776409",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1551970982,
      "node_id": "IC_kwDOABII585cgTKm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551970982",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T19:59:25Z",
      "updated_at": "2023-05-17T19:59:25Z",
      "author_association": "MEMBER",
      "body": "> The commitment transaction may be as large as `MAX_STANDARD_TX_WEIGHT`, so we want the cluster size to allow that (but it's obvious that the limit needs to be higher than that anyway).\r\n\r\n`MAX_STANDARD_TX_WEIGHT` is 400,000 weight units. If 65 byte transactions are (made) standard, and assuming those are at least 100 weight units, that's a maximum of ~4000 per cluster. My understanding was that doing an optimal sort for a given cluster, requires it to have a few dozen transactions. Though less than perfect sort may be fine. 1/10th of a block sounds a fairly big though.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551970982",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1551974824,
      "node_id": "IC_kwDOABII585cgUGo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551974824",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T20:02:48Z",
      "updated_at": "2023-05-17T20:03:37Z",
      "author_association": "MEMBER",
      "body": ">  My understanding was that doing an optimal sort for a given cluster, requires it to have a few dozen transactions. \r\n\r\nIt's the opposite really. A cluster with 1 transaction is always optimally ordered (because only one order exists). The bigger a cluster (in number of transactions) is, the harder it is to find the optimal ordering. Up to 15-20 transactions we may be able to find it using an exponential-time algorithm; above that we need to either just use the ancestor-feerate based order, or some heuristical algorithm that may approach optimality.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551974824",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1551974872,
      "node_id": "IC_kwDOABII585cgUHY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551974872",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T20:02:51Z",
      "updated_at": "2023-05-17T20:02:51Z",
      "author_association": "MEMBER",
      "body": "@t-bast Thanks for your comments!\r\n\r\n> The commitment transaction may be as large as MAX_STANDARD_TX_WEIGHT, so we want the cluster size to allow that (but it's obvious that the limit needs to be higher than that anyway).\r\n\r\nFYI -- I was thinking that the easiest approach here would be if we can cap cluster vbytes to the ancestor/descendant size limits of 101kvB, or just above the max standard transaction weight.  This would have the benefit of not making block construction any less efficient (due to the knapsack problem that occurs as we approach the end of a block).\r\n\r\n> The limits chosen here will have to be arbitrary, and wallets will simply have to make sure their utxos confirm to be able to use them for CPFP. This is already the case because of the descendant limits, so it shouldn't be fundamentally more harmful?\r\n\r\nYes, the comparison to descendant limits is appropriate I think -- my belief is that any use case that would be impacted by a limit on the number of transactions in the same cluster would also have been affected by the descendant count limit, which is outside a single user's control (ie if you're trying to spend the output of an unconfirmed transaction, unless the transaction's outputs are all under your control, you can't be sure that someone else hasn't chained a bunch of transactions to bump up against the descendant limit and prevent your spend from being relayed). So fundamentally I don't _think_ a limit on number of transactions in a cluster ought to be raising any issues that don't already exist...",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1551974872",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "mentioned",
      "id": 9273257077,
      "node_id": "MEE_lADOABII585mEbpjzwAAAAIouqx1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9273257077",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T20:02:51Z"
    },
    {
      "event": "subscribed",
      "id": 9273257093,
      "node_id": "SE_lADOABII585mEbpjzwAAAAIouqyF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9273257093",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T20:02:51Z"
    },
    {
      "event": "commented",
      "id": 1553565821,
      "node_id": "IC_kwDOABII585cmYh9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553565821",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T19:50:10Z",
      "updated_at": "2023-05-18T19:57:43Z",
      "author_association": "MEMBER",
      "body": "Having the number of allowed evictions be a function of the descendant limit makes replacements easier to reason about from a pinning perspective. e.g., limit of 25/100 means that you can batch CPFP 4 transactions safely, ignoring other pinning vectors(we'll get around to those!). Another smaller point is currently people opting into larger descendant limits for whatever reason can cause this to fall to possibly 0. i.e. a chain of 101 txns that can't have eldest tx evicted.\r\n\r\n> \"cluster-sibling eviction\" algorithm that is DoS-resistant and would help reduce the downsides of cluster size limits?\r\n\r\ngoing to call this \"cluster limit pinning\" to parallel package limit pinning, which is already a pinning problem today, which is what Ephemeral Anchors are intended to solve. Will think on this...",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1553565821",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1553666857,
      "node_id": "IC_kwDOABII585cmxMp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553666857",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T21:26:44Z",
      "updated_at": "2023-05-18T21:26:44Z",
      "author_association": "MEMBER",
      "body": "> Having the number of allowed evictions be a function of the descendant limit makes replacements easier to reason about from a pinning perspective. e.g., limit of 25/100 means that you can batch CPFP 4 transactions safely, ignoring other pinning vectors(we'll get around to those!). Another smaller point is currently people opting into larger descendant limits for whatever reason can cause this to fall to possibly 0. i.e. a chain of 101 txns that can't have eldest tx evicted.\r\n\r\nThanks for mentioning this.  If indeed the only concern with a lot of evictions is due to the number of clusters that would need to be re-sorted, then we could either have the limit be a maximum number of **direct** conflicts (since indirect conflicts are always in the same cluster as one of the direct conflicts), or we could just have the limit explicitly be in terms of the number of **clusters** that would be affected, rather than the number of transactions that are in conflict.  \r\n\r\nRight now I'm imagining that the descendant limits (on count and vbytes) would go away entirely.  I tend to think that we should continue to enforce that no transaction have more than 101kvb of size-with-ancestors (either explicitly, or as a consequence of a maximum cluster size if that gets set to the same value).  It's unclear to me whether we should retain the ancestor count limit, because I think it might have an impact on the runtime of the ancestor-feerate-based linearization algorithm that I suspect will be part of the initial implementation, so this will be something to revisit in the future.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1553666857",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "labeled",
      "id": 9288471098,
      "node_id": "LE_lADOABII585mEbpjzwAAAAIpotI6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9288471098",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-19T11:28:28Z",
      "label": {
        "name": "Brainstorming",
        "color": "ebd775"
      }
    },
    {
      "event": "labeled",
      "id": 9288471103,
      "node_id": "LE_lADOABII585mEbpjzwAAAAIpotI_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9288471103",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-19T11:28:28Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "commented",
      "id": 1554708843,
      "node_id": "IC_kwDOABII585cqvlr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554708843",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-19T14:51:21Z",
      "updated_at": "2023-05-19T14:57:31Z",
      "author_association": "MEMBER",
      "body": "Either conflict limit sounds good to me. N direct conflicts or N clusters has the same result: Someone trying to avoid \"rule#5\" type pinning will only try to CPFP up to N transactions, I believe.\r\n\r\nIt also means there's a fundamental tension here between CPFP/RBF strategies and how large we allow clusters to be. Smaller clusters means we can allow more clusters to be modified, likely?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1554708843",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1555806652,
      "node_id": "IC_kwDOABII585cu7m8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1555806652",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-20T07:40:13Z",
      "updated_at": "2023-05-20T07:40:13Z",
      "author_association": "MEMBER",
      "body": "> > My understanding was that doing an optimal sort for a given cluster, requires it to have a few dozen transactions.\r\n> \r\n> It's the opposite really. [...] Up to 15-20 transactions we may be able to find it using an exponential-time algorithm; above that [...]\r\n\r\nI meant to say \"no more than a few dozen transactions\".\r\n\r\nSo I guess we're ok with falling back to less than optimal sorting _within_ each cluster?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1555806652",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1572647968,
      "node_id": "IC_kwDOABII585dvLQg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572647968",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T19:21:52Z",
      "updated_at": "2023-06-01T19:23:42Z",
      "author_association": "MEMBER",
      "body": "From my understanding of the proposal, there is an intuition of aligning mining (i.e the maximum fees in a block template)\r\nand transactions evicted from our local mempools. The proposed changes goals would be to make the transactions that would be the last ones selected by our mining algorithm, the first ones to be removed from the mempool based e.g on an ancestor-feerate-based mining algorithm.\r\n\r\nWhile this symmetrization of block template construction and mempool eviction should work in light of today mining algorithms, I don't know if this will bind in considerations of other changes in the ecosystem. In the past, there have been [discussion](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019846.html) on the mailing list if our RBF algorithm was the most income-maximising in face of different transactions traffic. Namely, high-feerate evictated/replaced chunks of transactions could be kept in a buffer of transactions ordered by their last descendants outputs. When a new package comes in, in case of missing parents outputs, a lookup is realized in the buffer to see if the package attached to evicted/replaced chunks ancestor-feerate is above the cluster spending the same utxo or above the bottom mempool chunks.\r\n\r\nWhile this type of broadcast pattern can seem odd today, as new chunks should have been broadcast by the same transaction issuer, and therefore the fee bidding monotonically increasing, this assumption might not be true with more deployment of multi-party applications or contracting protocols, where counterparties are competing for the spend of utxos with packages offering different absolutes fees/feerates (e.g Lightning commitment transactions). Further, you might have\r\nnew flows where the first component of the package is shared (e.g a [dual-funding/splicing](https://bitcoinops.org/en/topics/splicing/) between N parties) though where each party attaches a different CPFP due to asymmetries in liquidity preferences.\r\n\r\nBased on cluster pattern analysis, future mining algorithms might attach a prediction weight to each chunk part of the\r\nevicted/replaced chunks and decide which to keep in the space-limited buffer in case of eviction needed there too. Note,\r\nwhile the issue can be alleviated by bumping the size of both your mempool and hypothetical future replacement buffers\r\n(i.e `-maxmempool`), there will still be a need to efficiently traverse them, as you need to provide one block template to your mining devices due to the probabilistic nature of mining.\r\n\r\nSo do we have a separation of concerns between the proposed total ordering and a future hypothetical replacement cache\r\noptimizing block template construction, or turning the question differently is the proposed total ordering approach going\r\nto work well for mining algorithms optimizations buffering replaced transactions ?\r\n\r\nThere is a second line of thinking about this proposal, namely the workload in term of CPU cycles and what is the worst-case\r\nworkload we're designing for in term of incoming transaction-relay traffic. I think the main risk we're aiming to hedge against\r\nis huge payload of transactions being injected on a miner mempool forcing computationally-expensive replacement or eviction traversals on the clusters and therefore delaying the construction of a block template, a latency sensitive operation in the mining arm race.\r\n\r\nI think we're certaintly bounded on the transaction-relay download limits here, i.e `MAX_PEER_TX_ANNOUNCEMENTS`,\r\n`MAX_PEER_TX_REQUEST_IN_FLIGHT` and the default number of transaction-relay peers (though we can probably reason by reduction to a single peer for the purpose of DoS analysis) and should we adopt them for the worst-case perfomance\r\nanalysis of all the mempool operations ? \r\n\r\nBeyond transaction-relay performance heavy events to consider, I think we have to encompass block-relay related events such as shallow reorgs.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1572647968",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    },
    {
      "event": "commented",
      "id": 1572728184,
      "node_id": "IC_kwDOABII585dve14",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572728184",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T20:23:39Z",
      "updated_at": "2023-06-01T20:23:39Z",
      "author_association": "MEMBER",
      "body": "> Namely, high-feerate evictated/replaced chunks of transactions could be kept in a buffer of transactions ordered by their last descendants outputs. When a new package comes in, in case of missing parents outputs, a lookup is realized in the buffer to see if the package attached to evicted/replaced chunks ancestor-feerate is above the cluster spending the same utxo or above the bottom mempool chunks.\r\n\r\n[snip additional comments related to this]\r\n\r\nIf I'm understanding your post correctly, you're asking whether the mempool design I'm proposing is consistent with having some sort of external-to-the-mempool cache of transactions?  That really sounds like a p2p optimization and not a mempool issue, and I think there are a lot of questions you'd have to answer in designing such a cache, including how to make it DoS resistant so that an adversary can't overrun it, but fundamentally I don't think anything I'm proposing would make designing such a thing any harder than our current mempool design does.  Really I think what you're describing is orthogonal to how the mempool operates.\r\n\r\nOverall the new mempool design should make it easier to reason about RBF, so that in situations where an RBF attempt is competing with a CPFP attempt we'll do the right thing more often.  Moreover I think a total mempool ordering will allow for future new policy rules that could make this even better in the future, as (unlike today) we might be able to consider rules in  that would involve where a transaction sorts in the global mempool as a condition for transaction acceptance -- something which is computationally impractical to use in today's mempool design.  (Such a rule has been proposed in the past as a way to potentially eliminate RBF-pinning while still permitting legitimate CPFP attempts.)\r\n\r\n> There is a second line of thinking about this proposal, namely the workload in term of CPU cycles and what is the worst-case workload we're designing for in term of incoming transaction-relay traffic. \r\n\r\nYes, I'm definitely concerned with CPU usage required to sort a single cluster, and coming up with policy limits that ensure this is a fast-enough operation.  I don't think the concern will be with transaction acceptance or block construction, which should be very fast in this design, but instead the concern will be around how expensive it is to update the mempool after a block is found (as that can cause thousands of clusters to be re-sorted, in the worst case).  However, as our primary goal when a block is found is to update the mempool in such a way that a new block template can be generated as quickly as possible, I think there are optimizations we can make that take advantage of this new design, even before we've finished fully updating the mempool and re-sorting all the affected clusters.  (One possible idea: we might pre-compute 2 or 3 blocks worth of transactions, instead of just 1, when getblocktemplate is called.  Then, when a block is found, we only need to remove conflicts and confirmed transactions from our precomputed blocks in order to be able to return a reasonably good block template while the mempool finishes re-sorting.)\r\n\r\nI think similar optimizations are possible after a re-org; in theory we could defer fully re-sorting clusters when transactions are added back from disconnected blocks and instead do a simple topological sort or merge-sort of newly created clusters in order to optimize for producing a valid block as quickly as possible.  Note also that the current mempool is already pretty slow to update during a reorg, due to the caching of ancestor and descendant state, which I believe we'll be able to completely remove in the new design (resulting in improvements to CPU usage, memory, and -- perhaps best of all -- code simplification!).",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/27677#issuecomment-1572728184",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27677"
    }
  ]
}