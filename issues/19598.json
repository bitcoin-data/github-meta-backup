{
  "type": "issue",
  "issue": {
    "id": 666227827,
    "node_id": "MDU6SXNzdWU2NjYyMjc4Mjc=",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/19598",
    "number": 19598,
    "state": "closed",
    "state_reason": "completed",
    "title": "CVE-2012-2459, possible code and performance improvement",
    "body": "ok so, in my effort to create a fullnode from scratch both for learning purpose and need (not a topic for discussion, thanks), I was looking at the code that check Merkle Root to not be vulnerable to CVE-2012-2459.\r\n\r\nThat vulnerability basically allows you to create a block that has a valid merkle root but contains duplicate transactions, causing a node that receive such block before the correct one, to be stuck on a fork (because that block will be flagged as incorrect and having the same hash of a correct block will prevent the node to ask again for that block, causing a node to be stuck.\r\n\r\nAnyway, this is an old CVE that was fixed back in 2012 and code changed during time.\r\nNow in bitcoin core the code is not that pretty and the method to compute merkle root are polluted from a boolean parameter that when read back reflects if the block has been mutated (malleated) or not.\r\n\r\nThe code is this\r\n```\r\nuint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\r\n    bool mutation = false;\r\n    while (hashes.size() > 1) {\r\n        if (mutated) {\r\n            for (size_t pos = 0; pos + 1 < hashes.size(); pos += 2) {\r\n                if (hashes[pos] == hashes[pos + 1]) mutation = true;\r\n            }\r\n        }\r\n        if (hashes.size() & 1) {\r\n            hashes.push_back(hashes.back());\r\n        }\r\n        SHA256D64(hashes[0].begin(), hashes[0].begin(), hashes.size() / 2);\r\n        hashes.resize(hashes.size() / 2);\r\n    }\r\n    if (mutated) *mutated = mutation;\r\n    if (hashes.size() == 0) return uint256();\r\n    return hashes[0];\r\n}\r\n```\r\n\r\nnow thinking about the problem, I think I found a better approach that is O(log n) and allows to have a better code too (without having to pass the `mutated` flag around)... if it works and the logic isn't flawled... so I'd like to know your thought about this.\r\nmy paint skill can show you some of the logic:\r\n\r\n[![\\[12:37\\]][1]][1]\r\nA, B, C... etc... are transactions\r\n\r\nthe vertical line is what I call \"safe point\", basically all transactions before that safe point are guaranteed to be not duplicable (this is one of the assumption I do and one thing to check if it's correct)\r\n\r\nthen, based on how merkle root is computed and how the CVE uses that to do nasty things, you can see some example of malleated blocks\r\n\r\nI created then a gist, containing a LINQPad code that can be run as it is and produce outputs to see if the logc is correct and can spot malleated blocks.\r\n\r\n\r\nhttps://gist.github.com/MithrilMan/27985e4f5bcc3853e792aa39631b9647\r\n\r\n\r\nthis is an output example of that gist\r\n\r\n[![enter image description here][2]][2]\r\n\r\nThe core logic relies into checking the last transaction against the previous, moving exponentially to the left at each iteration (see the picture with the vertical blue arrows showing which element it checks, or see the linqpad result where it's explicitly detailed)\r\n\r\nI handle both the cases where the tx count is even or odd.\r\nTo me it seems to work but would like to have some more eyes on that to see if the logic sounds correct or not.\r\nNote how for 9000 tx I have just to compare 14 transactions instead of thousands like current bitcoin code is doing.\r\nApart from that in my case it has another pros that allow me to split the markle computation and markle cve check in two different places, without having to use a solution like that `mutated` boolean parameter\r\n\r\n(actually I can't setup an environment to check if my intuition is correct and benchmark it so I can't provide numbers, but I'm more interested about the check logic itself)\r\n\r\n  [1]: https://i.stack.imgur.com/b6BuM.png\r\n  [2]: https://i.stack.imgur.com/go0WH.png",
    "user": {
      "login": "MithrilMan",
      "id": 5107375,
      "node_id": "MDQ6VXNlcjUxMDczNzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MithrilMan",
      "html_url": "https://github.com/MithrilMan",
      "followers_url": "https://api.github.com/users/MithrilMan/followers",
      "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
      "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
      "repos_url": "https://api.github.com/users/MithrilMan/repos",
      "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "NONE",
    "locked": true,
    "active_lock_reason": "resolved",
    "comments": 8,
    "closed_at": "2020-09-20T13:19:30Z",
    "created_at": "2020-07-27T11:40:09Z",
    "updated_at": "2022-02-15T11:04:22Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 3589452887,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1ODk0NTI4ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3589452887",
      "actor": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T11:40:09Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "commented",
      "id": 664405965,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDQwNTk2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664405965",
      "actor": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T13:45:29Z",
      "updated_at": "2020-07-27T13:45:29Z",
      "author_association": "NONE",
      "body": "for those who doesn't have linqpad I adapted the script to be run on dotnetfiddle here\r\n\r\nhttps://dotnetfiddle.net/wT87D2",
      "user": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-664405965",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "commented",
      "id": 693212439,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzIxMjQzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693212439",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-16T06:55:20Z",
      "updated_at": "2020-09-16T06:55:20Z",
      "author_association": "MEMBER",
      "body": "* I think you're right that an O(log n) solution is possible.\r\n\r\n* I don't understand what you mean by \"without having to use a solution like that `mutated` boolean parameter\". That's just an interface question - a different algorithm would still need a way to report malleation back to the caller. It could do that in the same way, or a different way, but that shouldn't depend on the algorithm.\r\n\r\n* The performance of the malleability check in the existing code is absolutely negligible. It's one extra 32-byte comparison (~nanoseconds) added per inner hash (~100s of nanoseconds at the very least). Even if a better solution is available, I don't think we should touch this critical piece of code unless benchmarks show a significant improvement (which I doubt).\r\n\r\n* I can't follow your code, but I think this observation captures is: if the malleability trick is exploited, it must mean that at some level in the tree there is an even number of nodes where the real tree had an odd number - and the last entry was duplicated. This means that at every level we should only check the last two nodes for equality, rather than all pairs of two nodes.\r\n\r\nThis *should* do it (untested):\r\n\r\n```c++\r\nuint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\r\n    bool mutation = false;\r\n    while (hashes.size() > 1) {\r\n        if (mutated && !mutation && hashes.size() % 2 == 0) {\r\n            if (hashes[hashes.size() - 1] == hashes[hashes.size() - 2]) mutation = true;\r\n        }\r\n        if (hashes.size() & 1) {\r\n            hashes.push_back(hashes.back());\r\n        }\r\n        SHA256D64(hashes[0].begin(), hashes[0].begin(), hashes.size() / 2);\r\n        hashes.resize(hashes.size() / 2);\r\n    }\r\n    if (mutated) *mutated = mutation;\r\n    if (hashes.size() == 0) return uint256();\r\n    return hashes[0];\r\n}\r\n```\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-693212439",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "commented",
      "id": 693224011,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzIyNDAxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693224011",
      "actor": {
        "login": "tryphe",
        "id": 8435003,
        "node_id": "MDQ6VXNlcjg0MzUwMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8435003?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tryphe",
        "html_url": "https://github.com/tryphe",
        "followers_url": "https://api.github.com/users/tryphe/followers",
        "following_url": "https://api.github.com/users/tryphe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tryphe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tryphe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tryphe/subscriptions",
        "organizations_url": "https://api.github.com/users/tryphe/orgs",
        "repos_url": "https://api.github.com/users/tryphe/repos",
        "events_url": "https://api.github.com/users/tryphe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tryphe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-16T07:21:17Z",
      "updated_at": "2020-09-16T07:21:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, wrt sipa's fourth bullet point.",
      "user": {
        "login": "tryphe",
        "id": 8435003,
        "node_id": "MDQ6VXNlcjg0MzUwMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8435003?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tryphe",
        "html_url": "https://github.com/tryphe",
        "followers_url": "https://api.github.com/users/tryphe/followers",
        "following_url": "https://api.github.com/users/tryphe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tryphe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tryphe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tryphe/subscriptions",
        "organizations_url": "https://api.github.com/users/tryphe/orgs",
        "repos_url": "https://api.github.com/users/tryphe/repos",
        "events_url": "https://api.github.com/users/tryphe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tryphe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-693224011",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "commented",
      "id": 693513884,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzUxMzg4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693513884",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-16T16:19:14Z",
      "updated_at": "2020-09-16T16:19:14Z",
      "author_association": "MEMBER",
      "body": "FWIW, my point is that we *shouldn't* change anything; I'm just showing something that I think could work in the 4th point.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-693513884",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "commented",
      "id": 694851356,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDg1MTM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694851356",
      "actor": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-18T12:57:03Z",
      "updated_at": "2020-09-18T13:07:34Z",
      "author_association": "NONE",
      "body": "> * The performance of the malleability check in the existing code is absolutely negligible. It's one extra 32-byte comparison (~nanoseconds) added per inner hash (~100s of nanoseconds at the very least). Even if a better solution is available, I don't think we should touch this critical piece of code unless benchmarks show a significant improvement (which I doubt).\r\n> * I can't follow your code, but I think this observation captures is: if the malleability trick is exploited, it must mean that at some level in the tree there is an even number of nodes where the real tree had an odd number - and the last entry was duplicated. This means that at every level we should only check the last two nodes for equality, rather than all pairs of two nodes.\r\n\r\nNo, implication is bigger.\r\nIn my implementation I check only the lower level of the tree saving lot of checks and the checks isn't about having even/odd node numbers\r\nthis is the copy&pasted code from my gist\r\n\r\n```\r\n// not a bitcoin double hash, not important for POC code\r\npublic string ComputeMerkleRoot(IList<string> hashes)\r\n{\r\n\tif (hashes.Count == 0) return String.Empty;\r\n\r\n\tbool oddHashes = (hashes.Count & 1) == 1;\r\n\t//ensure to allocate one more item if hashes are odd.\r\n\tList<string> hashesList = new List<string>(oddHashes ? hashes.Count + 1 : hashes.Count);\r\n\r\n\tfor (int i = 0; i < hashes.Count; i++)\r\n\t{\r\n\t\thashesList.Add(hashes[i]);\r\n\t}\r\n\r\n\t// if odd, duplicate last element\r\n\tif (oddHashes)\r\n\t{\r\n\t\thashesList.Add(hashes[hashes.Count - 1]);\r\n\t}\r\n\r\n\tvar hashAlgo = HashAlgorithm.Create(\"SHA256\");\r\n\tint elementsCount = hashesList.Count;\r\n\twhile (elementsCount > 1)\r\n\t{\r\n\t\tint newHashPosition = 0;\r\n\t\tfor (int pos = 0; pos + 1 < elementsCount; pos += 2)\r\n\t\t{\r\n\t\t\tstring pairOfHashes = hashesList[pos] + hashesList[pos + 1];\r\n\r\n\t\t\thashesList[newHashPosition++] = ASCIIEncoding.Unicode.GetString(hashAlgo.ComputeHash(ASCIIEncoding.Unicode.GetBytes(pairOfHashes)));\r\n\t\t}\r\n\r\n\t\tif (newHashPosition > 1 && (newHashPosition & 1) == 1)\r\n\t\t{\r\n\t\t\thashesList[newHashPosition] = hashesList[newHashPosition - 1];\r\n\t\t\tnewHashPosition++;\r\n\t\t}\r\n\r\n\t\thashesList.RemoveRange(newHashPosition, elementsCount - newHashPosition);\r\n\t\telementsCount = newHashPosition;\r\n\t}\r\n\r\n\treturn BitConverter.ToString(ASCIIEncoding.Unicode.GetBytes(hashesList[0])).Replace(\"-\", \"\");\r\n}\r\n```\r\n\r\nI can comment/explain the code if it's not easy to follow.\r\nThis code that computes merklee tree is implemented without the boolean flag that return if it's malleated or not (separation of concerns)",
      "user": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-694851356",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "commented",
      "id": 694855746,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDg1NTc0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694855746",
      "actor": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-18T13:05:41Z",
      "updated_at": "2020-09-18T13:10:53Z",
      "author_association": "NONE",
      "body": "and this is the code that can check if there is a malleability in place (thus no need to have ComputeMerkleRoot polluted with that boolean flag like I said in point 2\r\n\r\n```\r\nList<string> transactions = GetTransactions(transactionSet).Select(c => c.ToString()).ToList();\r\nuint transactionsCount = ((uint)transactions.Count);\r\nbool transactionCountIsOdd = (transactionsCount & 1) == 1;\r\nuint higherBitPosition = (uint)(sizeof(uint) * 8 - (BitOperations.LeadingZeroCount(transactionsCount - 1) + 1));\r\nuint safePoint = ((uint)Math.Pow(2, higherBitPosition));\r\nuint itemsToConsider = transactionsCount - safePoint;\r\n\r\nstring transactionToFind = transactions.Last();\r\nint transactionIndexToCompare = transactions.Count - 2;\r\nint expStep = transactionCountIsOdd ? 2 : 1;\r\n\r\nint numberOfChecks = 0;\r\nwhile (expStep < itemsToConsider)\r\n{\r\n\tnumberOfChecks++;\r\n\t$\"comparing {transactionToFind} with {transactions[transactionIndexToCompare]}\".Dump();\r\n\tif (transactions[transactionIndexToCompare] == transactionToFind)\r\n\t{\r\n\t\t\"\".PadRight(120, '-').Dump($\"FOUND MALLEABLE BLOCK: {transactionToFind} found both on last position and at position {transactionIndexToCompare}. Checks performed: {numberOfChecks})\");\r\n\t\treturn;\r\n\t}\r\n\r\n\ttransactionIndexToCompare -= expStep;\r\n\texpStep <<= 1;\r\n}\r\n```",
      "user": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-694855746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "commented",
      "id": 694864631,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDg2NDYzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694864631",
      "actor": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-18T13:22:18Z",
      "updated_at": "2020-09-18T13:26:31Z",
      "author_association": "NONE",
      "body": "let me try to summarize some concept behind this (sorry if I fail to use correct terminology here and there):\r\n\r\n- it's impossible to malleate a block duplicating less than the max pow of 2 transaction count (this is why I visualized the vertical line that I named \"safe point\".\r\ne.g. if you have a block that have 10 transactions, you know that it can be malleable just by duplicating the last 2 (because the first 8 belongs to a different node up in the hierarchy\r\n\r\n- In order to not have to check every level of the tree, I do a simple (smart?) thing: I choose a specific element of comparison that may indicate that a duplication took place and it's the last transaction hash.\r\n`string transactionToFind = transactions.Last();`\r\n\r\nOnce I have it, I start then a loop where, at each iteration, I check if that element is the same as the one at a different index int `transactionIndexToCompare` where transactionIndexToCompare starts from the second last transaction and move exponentially backward at each iteration (there is a caveat if the number of transaction is odd or even, handled by `int expStep = transactionCountIsOdd ? 2 : 1;` before start the loop\r\n\r\nof course if I find these 2 elements that are equal it means a malleability took place\r\n\r\nalso note that I stop the loop when the index pass the so called \"safe point\", saving even more comparisons.\r\n\r\nTLTR: my implementation is O(Log n) over a list of transaction hashes, doesn't need to be part of the merkle tree computation method and save lot of checks other than applying the separation of concerns",
      "user": {
        "login": "MithrilMan",
        "id": 5107375,
        "node_id": "MDQ6VXNlcjUxMDczNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5107375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MithrilMan",
        "html_url": "https://github.com/MithrilMan",
        "followers_url": "https://api.github.com/users/MithrilMan/followers",
        "following_url": "https://api.github.com/users/MithrilMan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MithrilMan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MithrilMan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MithrilMan/subscriptions",
        "organizations_url": "https://api.github.com/users/MithrilMan/orgs",
        "repos_url": "https://api.github.com/users/MithrilMan/repos",
        "events_url": "https://api.github.com/users/MithrilMan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MithrilMan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-694864631",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "commented",
      "id": 695786455,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTc4NjQ1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695786455",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-20T13:19:30Z",
      "updated_at": "2020-09-20T13:19:30Z",
      "author_association": "MEMBER",
      "body": "> The performance of the malleability check in the existing code is absolutely negligible. It's one extra 32-byte comparison (~nanoseconds) added per inner hash (~100s of nanoseconds at the very least). Even if a better solution is available, I don't think we should touch this critical piece of code unless benchmarks show a significant improvement (which I doubt).\r\n\r\n\r\nTend to agree with this. Will close this for now until there is a proven (wall-clock) time performance improvement on IBD or some other real-world load.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-695786455",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19598"
    },
    {
      "event": "closed",
      "id": 3786086607,
      "node_id": "MDExOkNsb3NlZEV2ZW50Mzc4NjA4NjYwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3786086607",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-20T13:19:30Z"
    },
    {
      "event": "locked",
      "id": 6074015324,
      "node_id": "LOE_lADOABII584ntdRzzwAAAAFqCh5c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6074015324",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T11:04:22Z",
      "lock_reason": "resolved"
    }
  ]
}