{
  "type": "issue",
  "issue": {
    "id": 952337432,
    "node_id": "MDU6SXNzdWU5NTIzMzc0MzI=",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22548",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22548/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22548/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22548/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/22548",
    "number": 22548,
    "state": "closed",
    "state_reason": "completed",
    "title": "CheckQueue_Correct_Random data race",
    "body": "**Compiler:** \r\nclang 12.0.0\r\n\r\n**OS:**\r\nArch Linux\r\n\r\n**Optimization flags:** \r\noccurs under `-O0`, `-O1`, or `-Os` but not the default of `-O2`\r\n\r\n**Sanitizer:** \r\n`thread`\r\n\r\n**Bitcoin commit:** \r\n1488f55\r\n\r\n**Configure command:** \r\n`CC=clang CXX=clang++ CFLAGS=\"-O0\" CXXFLAGS=\"-O0\" ./configure --disable-wallet --with-sanitizers=thread`\r\n\r\n<details closed>\r\n<summary>TSAN output</summary>\r\n<br>\r\n\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=1655626)\r\n  Read of size 4 at 0x7b6000000e38 by thread T4 (mutexes: write M131995):\r\n    #0 CConnman::GetExtraBlockRelayCount() const <null> (test_bitcoin+0xd338c6)\r\n    #1 (anonymous namespace)::PeerManagerImpl::EvictExtraOutboundPeers(long) <null> (test_bitcoin+0xde5ec7)\r\n    #2 (anonymous namespace)::PeerManagerImpl::CheckForStaleTipAndEvictPeers() <null> (test_bitcoin+0xdb7cac)\r\n    #3 (anonymous namespace)::PeerManagerImpl::PeerManagerImpl(CChainParams const&, CConnman&, CAddrMan&, BanMan*, CScheduler&, ChainstateManager&, CTxMemPool&, bool)::$_2::operator()() const <null> (test_bitcoin+0xddb062)\r\n    #4 void std::__invoke_impl<void, (anonymous namespace)::PeerManagerImpl::PeerManagerImpl(CChainParams const&, CConnman&, CAddrMan&, BanMan*, CScheduler&, ChainstateManager&, CTxMemPool&, bool)::$_2&>(std::__invoke_other, (anonymous namespace)::PeerManagerImpl::PeerManagerImpl(CChainParams const&, CConnman&, CAddrMan&, BanMan*, CScheduler&, ChainstateManager&, CTxMemPool&, bool)::$_2&) <null> (test_bitcoin+0xddaf8a)\r\n    #5 std::enable_if<is_invocable_r_v<void, (anonymous namespace)::PeerManagerImpl::PeerManagerImpl(CChainParams const&, CConnman&, CAddrMan&, BanMan*, CScheduler&, ChainstateManager&, CTxMemPool&, bool)::$_2&>, void>::type std::__invoke_r<void, (anonymous namespace)::PeerManagerImpl::PeerManagerImpl(CChainParams const&, CConnman&, CAddrMan&, BanMan*, CScheduler&, ChainstateManager&, CTxMemPool&, bool)::$_2&>((anonymous namespace)::PeerManagerImpl::PeerManagerImpl(CChainParams const&, CConnman&, CAddrMan&, BanMan*, CScheduler&, ChainstateManager&, CTxMemPool&, bool)::$_2&) <null> (test_bitcoin+0xddae6a)\r\n    #6 std::_Function_handler<void (), (anonymous namespace)::PeerManagerImpl::PeerManagerImpl(CChainParams const&, CConnman&, CAddrMan&, BanMan*, CScheduler&, ChainstateManager&, CTxMemPool&, bool)::$_2>::_M_invoke(std::_Any_data const&) <null> (test_bitcoin+0xddac2b)\r\n    #7 std::function<void ()>::operator()() const <null> (test_bitcoin+0x9492c8)\r\n    #8 Repeat(CScheduler&, std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >) <null> (test_bitcoin+0x141431a)\r\n    #9 CScheduler::scheduleEvery(std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0::operator()() const <null> (test_bitcoin+0x141422d)\r\n    #10 void std::__invoke_impl<void, CScheduler::scheduleEvery(std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0&>(std::__invoke_other, CScheduler::scheduleEvery(std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0&) <null> (test_bitcoin+0x141411a)\r\n    #11 std::enable_if<is_invocable_r_v<void, CScheduler::scheduleEvery(std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0&>, void>::type std::__invoke_r<void, CScheduler::scheduleEvery(std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0&>(CScheduler::scheduleEvery(std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0&) <null> (test_bitcoin+0x141401a)\r\n    #12 std::_Function_handler<void (), CScheduler::scheduleEvery(std::function<void ()>, std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0>::_M_invoke(std::_Any_data const&) <null> (test_bitcoin+0x1413c6b)\r\n    #13 std::function<void ()>::operator()() const <null> (test_bitcoin+0x9492c8)\r\n    #14 CScheduler::serviceQueue() <null> (test_bitcoin+0x1412362)\r\n    #15 ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0::operator()() const <null> (test_bitcoin+0xbb5b6e)\r\n    #16 void std::__invoke_impl<void, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0&>(std::__invoke_other, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0&) <null> (test_bitcoin+0xbb5a8a)\r\n    #17 std::enable_if<is_invocable_r_v<void, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0&>, void>::type std::__invoke_r<void, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0&>(ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0&) <null> (test_bitcoin+0xbb596a)\r\n    #18 std::_Function_handler<void (), ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0>::_M_invoke(std::_Any_data const&) <null> (test_bitcoin+0xbb572b)\r\n    #19 std::function<void ()>::operator()() const <null> (test_bitcoin+0x9492c8)\r\n    #20 util::TraceThread(char const*, std::function<void ()>) <null> (test_bitcoin+0x1546098)\r\n    #21 void std::__invoke_impl<void, void (*)(char const*, std::function<void ()>), char const*, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0>(std::__invoke_other, void (*&&)(char const*, std::function<void ()>), char const*&&, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0&&) <null> (test_bitcoin+0xbb53e0)\r\n    #22 std::__invoke_result<void (*)(char const*, std::function<void ()>), char const*, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0>::type std::__invoke<void (*)(char const*, std::function<void ()>), char const*, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0>(void (*&&)(char const*, std::function<void ()>), char const*&&, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0&&) <null> (test_bitcoin+0xbb5124)\r\n    #23 void std::thread::_Invoker<std::tuple<void (*)(char const*, std::function<void ()>), char const*, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0> >::_M_invoke<0ul, 1ul, 2ul>(std::_Index_tuple<0ul, 1ul, 2ul>) <null> (test_bitcoin+0xbb5068)\r\n    #24 std::thread::_Invoker<std::tuple<void (*)(char const*, std::function<void ()>), char const*, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0> >::operator()() <null> (test_bitcoin+0xbb4fa2)\r\n    #25 std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(char const*, std::function<void ()>), char const*, ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&)::$_0> > >::_M_run() <null> (test_bitcoin+0xbb4c4a)\r\n    #26 execute_native_thread_routine /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:82:18 (libstdc++.so.6+0xd33c3)\r\n\r\n  Previous write of size 4 at 0x7b6000000e38 by main thread:\r\n    [failed to restore the stack]\r\n\r\n  Location is heap block of size 952 at 0x7b6000000c00 allocated by main thread:\r\n    #0 operator new(unsigned long) <null> (test_bitcoin+0x18da0e)\r\n    #1 std::_MakeUniq<CConnman>::__single_object std::make_unique<CConnman, int, int, CAddrMan&>(int&&, int&&, CAddrMan&) <null> (test_bitcoin+0x460d55)\r\n    #2 TestingSetup::TestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&) <null> (test_bitcoin+0xbb2234)\r\n    #3 checkqueue_tests::test_CheckQueue_Correct_Random::test_CheckQueue_Correct_Random() <null> (test_bitcoin+0x3a0456)\r\n    #4 checkqueue_tests::test_CheckQueue_Correct_Random_invoker() <null> (test_bitcoin+0x386593)\r\n    #5 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0x21af3b)\r\n    #6 <null> <null> (libboost_unit_test_framework.so.1.76.0+0x3266d)\r\n    #7 __libc_start_main <null> (libc.so.6+0x27b24)\r\n\r\n  Mutex M131995 (0x564a0fd62388) created at:\r\n    #0 pthread_mutex_lock <null> (test_bitcoin+0x130f28)\r\n    #1 __gthread_mutex_lock(pthread_mutex_t*) <null> (test_bitcoin+0x1db5f0)\r\n    #2 __gthread_recursive_mutex_lock(pthread_mutex_t*) <null> (test_bitcoin+0x1db922)\r\n    #3 std::recursive_mutex::lock() <null> (test_bitcoin+0x1e0c26)\r\n    #4 std::unique_lock<std::recursive_mutex>::lock() <null> (test_bitcoin+0x1e0b86)\r\n    #5 UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) <null> (test_bitcoin+0x1e0680)\r\n    #6 UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) <null> (test_bitcoin+0x1e0369)\r\n    #7 ChainstateManager::ActiveChainstate() const <null> (test_bitcoin+0x127d67c)\r\n    #8 TestingSetup::TestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&) <null> (test_bitcoin+0xbb1bc9)\r\n    #9 checkqueue_tests::test_CheckQueue_Correct_Zero::test_CheckQueue_Correct_Zero() <null> (test_bitcoin+0x3955e6)\r\n    #10 checkqueue_tests::test_CheckQueue_Correct_Zero_invoker() <null> (test_bitcoin+0x3841cb)\r\n    #11 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0x21af3b)\r\n    #12 <null> <null> (libboost_unit_test_framework.so.1.76.0+0x3266d)\r\n    #13 __libc_start_main <null> (libc.so.6+0x27b24)\r\n\r\n  Thread T4 'b-scheduler' (tid=1655646, running) created by main thread at:\r\n    #0 pthread_create <null> (test_bitcoin+0x14574e)\r\n    #1 __gthread_create /build/gcc/src/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/x86_64-pc-linux-gnu/bits/gthr-default.h:663:35 (libstdc++.so.6+0xd36aa)\r\n    #2 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) /build/gcc/src/gcc/libstdc++-v3/src/c++11/thread.cc:147:37 (libstdc++.so.6+0xd36aa)\r\n    #3 ChainTestingSetup::ChainTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&) <null> (test_bitcoin+0xbb1423)\r\n    #4 TestingSetup::TestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&) <null> (test_bitcoin+0xbb1b14)\r\n    #5 checkqueue_tests::test_CheckQueue_Correct_Random::test_CheckQueue_Correct_Random() <null> (test_bitcoin+0x3a0456)\r\n    #6 checkqueue_tests::test_CheckQueue_Correct_Random_invoker() <null> (test_bitcoin+0x386593)\r\n    #7 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0x21af3b)\r\n    #8 <null> <null> (libboost_unit_test_framework.so.1.76.0+0x3266d)\r\n    #9 __libc_start_main <null> (libc.so.6+0x27b24)\r\n\r\nSUMMARY: ThreadSanitizer: data race (/root/bitcoin/src/test/test_bitcoin+0xd338c6) in CConnman::GetExtraBlockRelayCount() const\r\n```\r\n</details>\r\n\r\nTSAN warns on the following functions for data race:\r\n- `GetExtraBlockRelayCount`\r\n- `GetExtraFullOutboundCount`\r\n- `GetUseAddrmanOutgoing`\r\n\r\nI believe this is because a call to `PeerManager::make` will schedule `CheckForStaleTipAndEvictPeers` (with a delay of 45 seconds) which reads the variables and the call to `CConnman::Init` will write the variables specified in the passed `connOptions` reference.  There is no locking.  TSAN only warns on this specific test.  It seems to me that this race could also happen during normal bitcoind operation (if startup was *very* slow), but maybe I'm mistaken.",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": true,
    "active_lock_reason": "resolved",
    "comments": 1,
    "closed_at": "2021-08-04T15:50:07Z",
    "created_at": "2021-07-25T19:12:41Z",
    "updated_at": "2022-08-18T19:53:42Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 892771170,
      "node_id": "IC_kwDOABII5841Npti",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892771170",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-04T15:50:05Z",
      "updated_at": "2021-08-04T15:50:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closed with 5b2d8661c906ea1bc7afd904aad9b04a691d86cd",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22548#issuecomment-892771170",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22548"
    },
    {
      "event": "closed",
      "id": 5112120891,
      "node_id": "MDExOkNsb3NlZEV2ZW50NTExMjEyMDg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5112120891",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-04T15:50:07Z"
    },
    {
      "event": "locked",
      "id": 7217170450,
      "node_id": "LOE_lADOABII5844w4QYzwAAAAGuLUgS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7217170450",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T19:53:41Z",
      "lock_reason": "resolved"
    }
  ]
}