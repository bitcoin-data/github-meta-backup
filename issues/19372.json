{
  "type": "issue",
  "issue": {
    "id": 644632652,
    "node_id": "MDU6SXNzdWU2NDQ2MzI2NTI=",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/19372",
    "number": 19372,
    "state": "closed",
    "state_reason": "completed",
    "title": "Some recently introduced Coverity warnings (WRAPPER_ESCAPE, UNINIT and FORWARD_NULL)",
    "body": "> DISCLAIMER: These results have not been thoroughly confirmed, and may be improbable or flat out invalid, but it's worth having a list of these somewhere.\r\n\r\nDisclaimer stolen from kallewoof's issue #9573 (\"6696b46: Clang Static Analyzer Report\") :)\r\n\r\n---\r\n\r\nBelow are some recently introduced Coverity warnings of type `WRAPPER_ESCAPE` (Memory - illegal accesses), `UNINIT` (Uninitialized variables) and `FORWARD_NULL` (Null pointer dereferences) that might be investigating. I've excluded warnings in GUI code.\r\n\r\n**Note that a static analyzer warning does not necessarily imply a defect: it is just a warning from an automated tool that something _might_ be worth investigating manually. Don't panic :)**\r\n \r\n```\r\n*** CID 360095:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n/src/test/pow_tests.cpp: 121 in pow_tests::GetBlockProofEquivalentTime_test::test_method()()\r\n115     \r\n116     BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\r\n117     {\r\n118         const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\r\n119         std::vector<CBlockIndex> blocks(10000);\r\n120         for (int i = 0; i < 10000; i++) {\r\n>>>     CID 360095:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n>>>     The internal representation of local \"blocks\" escapes into \"blocks[i].pprev\", but is destroyed when it exits scope.\r\n121             blocks[i].pprev = i ? &blocks[i - 1] : nullptr;\r\n122             blocks[i].nHeight = i;\r\n123             blocks[i].nTime = 1269211443 + i * chainParams->GetConsensus().nPowTargetSpacing;\r\n124             blocks[i].nBits = 0x207fffff; /* target 0x7fffff000... */\r\n125             blocks[i].nChainWork = i ? blocks[i - 1].nChainWork + GetBlockProof(blocks[i - 1]) : arith_uint256(0);\r\n126         }\r\n```\r\n\r\n```\r\n*** CID 360094:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n/src/test/skiplist_tests.cpp: 66 in skiplist_tests::getlocator_test::test_method()()\r\n60         // Build a branch that splits off at block 49999, 50000 blocks long.\r\n61         std::vector<uint256> vHashSide(50000);\r\n62         std::vector<CBlockIndex> vBlocksSide(50000);\r\n63         for (unsigned int i=0; i<vBlocksSide.size(); i++) {\r\n64             vHashSide[i] = ArithToUint256(i + 50000 + (arith_uint256(1) << 128)); // Add 1<<128 to the hashes, so GetLow64() still returns the height.\r\n65             vBlocksSide[i].nHeight = i + 50000;\r\n>>>     CID 360094:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n>>>     The internal representation of local \"vBlocksSide\" escapes into \"vBlocksSide[i].pprev\", but is destroyed when it exits scope.\r\n66             vBlocksSide[i].pprev = i ? &vBlocksSide[i - 1] : (vBlocksMain.data()+49999);\r\n67             vBlocksSide[i].phashBlock = &vHashSide[i];\r\n68             vBlocksSide[i].BuildSkip();\r\n69             BOOST_CHECK_EQUAL((int)UintToArith256(vBlocksSide[i].GetBlockHash()).GetLow64(), vBlocksSide[i].nHeight);\r\n70             BOOST_CHECK(vBlocksSide[i].pprev == nullptr || vBlocksSide[i].nHeight == vBlocksSide[i].pprev->nHeight + 1);\r\n71         }\r\n```\r\n\r\n```\r\n*** CID 360089:  Uninitialized variables  (UNINIT)\r\n/src/bench/hashpadding.cpp: 40 in RegularPadded(benchmark::State &)()\r\n34     \r\n35         // Setup the salted hasher\r\n36         uint256 nonce = GetRandHash();\r\n37         uint256 data = GetRandHash();\r\n38         while (state.KeepRunning()) {\r\n39             unsigned char out[32];\r\n>>>     CID 360089:  Uninitialized variables  (UNINIT)\r\n>>>     Using uninitialized value \"hasher\". Field \"hasher.buf\" is uninitialized.\r\n40             CSHA256 h = hasher;\r\n41             h.Write(nonce.begin(), 32);\r\n42             h.Write(data.begin(), 32);\r\n43             h.Finalize(out);\r\n44         }\r\n45     }\r\n46     \r\n```\r\n\r\n```\r\n*** CID 360085:    (WRAPPER_ESCAPE)\r\n/src/wallet/wallet.cpp: 4350 in CWallet::SetupLegacyScriptPubKeyMan()()\r\n4344             return;\r\n4345         }\r\n4346     \r\n4347         auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan(*this));\r\n4348         for (const auto& type : OUTPUT_TYPES) {\r\n4349             m_internal_spk_managers[type] = spk_manager.get();\r\n>>>     CID 360085:    (WRAPPER_ESCAPE)\r\n>>>     The internal representation of local \"spk_manager\" escapes into \"this->m_external_spk_managers[type]\", but is destroyed when it exits scope.\r\n4350             m_external_spk_managers[type] = spk_manager.get();\r\n4351         }\r\n4352         m_spk_managers[spk_manager->GetID()] = std::move(spk_manager);\r\n4353     }\r\n4354     \r\n4355     const CKeyingMaterial& CWallet::GetEncryptionKey() const\r\n/src/wallet/wallet.cpp: 4349 in CWallet::SetupLegacyScriptPubKeyMan()()\r\n4343         if (!m_internal_spk_managers.empty() || !m_external_spk_managers.empty() || !m_spk_managers.empty() || IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\r\n4344             return;\r\n4345         }\r\n4346     \r\n4347         auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan(*this));\r\n4348         for (const auto& type : OUTPUT_TYPES) {\r\n>>>     CID 360085:    (WRAPPER_ESCAPE)\r\n>>>     The internal representation of local \"spk_manager\" escapes into \"this->m_internal_spk_managers[type]\", but is destroyed when it exits scope.\r\n4349             m_internal_spk_managers[type] = spk_manager.get();\r\n4350             m_external_spk_managers[type] = spk_manager.get();\r\n4351         }\r\n4352         m_spk_managers[spk_manager->GetID()] = std::move(spk_manager);\r\n4353     }\r\n4354     \r\n```\r\n\r\n```\r\n*** CID 360079:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n/src/test/skiplist_tests.cpp: 152 in skiplist_tests::findearliestatleast_edge_test::test_method()()\r\n146     {\r\n147         std::list<CBlockIndex> blocks;\r\n148         for (const unsigned int timeMax : {100, 100, 100, 200, 200, 200, 300, 300, 300}) {\r\n149             CBlockIndex* prev = blocks.empty() ? nullptr : &blocks.back();\r\n150             blocks.emplace_back();\r\n151             blocks.back().nHeight = prev ? prev->nHeight + 1 : 0;\r\n>>>     CID 360079:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n>>>     The internal representation of local \"blocks\" escapes into \"blocks.back().pprev\", but is destroyed when it exits scope.\r\n152             blocks.back().pprev = prev;\r\n153             blocks.back().BuildSkip();\r\n154             blocks.back().nTimeMax = timeMax;\r\n155         }\r\n156     \r\n157         CChain chain;\r\n```\r\n\r\n```\r\n*** CID 360078:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n/src/test/skiplist_tests.cpp: 53 in skiplist_tests::getlocator_test::test_method()()\r\n47         // Build a main chain 100000 blocks long.\r\n48         std::vector<uint256> vHashMain(100000);\r\n49         std::vector<CBlockIndex> vBlocksMain(100000);\r\n50         for (unsigned int i=0; i<vBlocksMain.size(); i++) {\r\n51             vHashMain[i] = ArithToUint256(i); // Set the hash equal to the height, so we can quickly check the distances.\r\n52             vBlocksMain[i].nHeight = i;\r\n>>>     CID 360078:  Memory - illegal accesses  (WRAPPER_ESCAPE)\r\n>>>     The internal representation of local \"vBlocksMain\" escapes into \"vBlocksMain[i].pprev\", but is destroyed when it exits scope.\r\n53             vBlocksMain[i].pprev = i ? &vBlocksMain[i - 1] : nullptr;\r\n54             vBlocksMain[i].phashBlock = &vHashMain[i];\r\n55             vBlocksMain[i].BuildSkip();\r\n56             BOOST_CHECK_EQUAL((int)UintToArith256(vBlocksMain[i].GetBlockHash()).GetLow64(), vBlocksMain[i].nHeight);\r\n57             BOOST_CHECK(vBlocksMain[i].pprev == nullptr || vBlocksMain[i].nHeight == vBlocksMain[i].pprev->nHeight + 1);\r\n58         }\r\n```\r\n\r\n```\r\n*** CID 360077:  Null pointer dereferences  (FORWARD_NULL)\r\n/src/net_processing.cpp: 1862 in ProcessHeadersMessage(CNode &, CConnman *, ChainstateManager &, CTxMemPool &, const std::vector<CBlockHeader, std::allocator<CBlockHeader>> &, const CChainParams &, bool)()\r\n1856                     pindexWalk = pindexWalk->pprev;\r\n1857                 }\r\n1858                 // If pindexWalk still isn't on our main chain, we're looking at a\r\n1859                 // very large reorg at a time we think we're close to caught up to\r\n1860                 // the main chain -- this shouldn't really happen.  Bail out on the\r\n1861                 // direct fetch and rely on parallel download instead.\r\n>>>     CID 360077:  Null pointer dereferences  (FORWARD_NULL)\r\n>>>     Passing null pointer \"pindexWalk\" to \"Contains\", which dereferences it.\r\n1862                 if (!::ChainActive().Contains(pindexWalk)) {\r\n1863                     LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\r\n1864                             pindexLast->GetBlockHash().ToString(),\r\n1865                             pindexLast->nHeight);\r\n1866                 } else {\r\n1867                     std::vector<CInv> vGetData;\r\n```",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": true,
    "active_lock_reason": "resolved",
    "comments": 4,
    "closed_at": "2021-06-30T09:05:47Z",
    "created_at": "2020-06-24T13:51:47Z",
    "updated_at": "2022-08-18T19:53:33Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 648841597,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODg0MTU5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648841597",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-24T14:04:57Z",
      "updated_at": "2020-06-24T14:04:57Z",
      "author_association": "MEMBER",
      "body": "Not sure what to do here. Except for the last one they seem all bugs in the static analyser. I recommend filing bugs upstream.\r\n\r\nFor the last one, it might be preferable to `assert` on the pindex to avoid forwarding a nullptr",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-648841597",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372"
    },
    {
      "event": "commented",
      "id": 671824167,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTgyNDE2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671824167",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T09:01:15Z",
      "updated_at": "2020-08-11T09:01:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Below are some recent Coverity warnings. I've excluded warnings in GUI code. Usual disclaimers apply :)\r\n\r\n```\r\n*** CID 360898:  Uninitialized members  (UNINIT_CTOR)\r\n/src/rpc/util.cpp: 436 in RPCHelpMan::RPCHelpMan(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::vector<RPCArg, std::allocator<RPCArg>>, RPCResults, RPCExamples)()\r\n430             }\r\n431             return ret;\r\n432         }\r\n433     };\r\n434     \r\n435     RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples)\r\n>>>     CID 360898:  Uninitialized members  (UNINIT_CTOR)\r\n>>>     Non-static class member field \"m_results.m_results\" is not initialized in this constructor nor in any functions that it calls.\r\n436         : RPCHelpMan{std::move(name), std::move(description), std::move(args), std::move(results), std::move(examples), nullptr} {}\r\n437     \r\n438     RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples, RPCMethodImpl fun)\r\n439         : m_name{std::move(name)},\r\n440           m_fun{std::move(fun)},\r\n441           m_description{std::move(description)},\r\n```\r\n\r\n```\r\n*** CID 361023:  Uninitialized members  (UNINIT_CTOR)\r\n/src/net.cpp: 2275 in CConnman::CConnman(unsigned long, unsigned long, bool)()\r\n2269     {\r\n2270         SetTryNewOutboundPeer(false);\r\n2271     \r\n2272         Options connOptions;\r\n2273         Init(connOptions);\r\n2274         SetNetworkActive(network_active);\r\n>>>     CID 361023:  Uninitialized members  (UNINIT_CTOR)\r\n>>>     Non-static class member \"fMsgProcWake\" is not initialized in this constructor nor in any functions that it calls.\r\n2275     }\r\n2276     \r\n2277     NodeId CConnman::GetNewNodeId()\r\n2278     {\r\n2279         return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\r\n2280     }\r\n```",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-671824167",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372"
    },
    {
      "event": "commented",
      "id": 671830646,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTgzMDY0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671830646",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T09:14:16Z",
      "updated_at": "2020-08-11T09:14:16Z",
      "author_association": "MEMBER",
      "body": "The first one is another false positive and the second one is never read uninitialized. Though, it could be initialized to the same value that it is set in `Start()`",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-671830646",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372"
    },
    {
      "event": "commented",
      "id": 671859320,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTg1OTMyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671859320",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T10:14:09Z",
      "updated_at": "2020-08-11T10:43:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke I should probably add that these are unfiltered Coverity reports so false positives are unfortunately expected (as with most static analyzer tools).\r\n\r\nMy idea is to make this issue a tracking issue where new static analyser warnings are posted say once per month effectively mimicking [how the static analyser part works in Intel's 0-DAY CI Kernel Test Service](https://01.org/lkp/documentation/0-day-test-service) (used in the Linux kernel project). With the difference that this would be low volume and monthly (instead of the super high volume and immediate `kbuild-all@lists.01.org` list :)).\r\n\r\nWe would have caught some nasty bugs in our code base earlier if we'd gotten more eyes on the Coverity reports. Anecdotal evidence: I've *tried* to keep track of Coverity reports for the past three/four years, but despite that I've sometimes accidentally skipped some reports only to find out that an issue I later found using another method (say fuzzing, manual review, dynamic analysis, another static analysis tool, etc.) was reported in my inbox all along thanks to Coverity :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-671859320",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19372"
    },
    {
      "event": "mentioned",
      "id": 3642446353,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY0MjQ0NjM1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3642446353",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T10:14:10Z"
    },
    {
      "event": "subscribed",
      "id": 3642446356,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NDI0NDYzNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3642446356",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T10:14:10Z"
    },
    {
      "event": "closed",
      "id": 4958264761,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDk1ODI2NDc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4958264761",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-30T09:05:47Z"
    },
    {
      "event": "locked",
      "id": 7217169484,
      "node_id": "LOE_lADOABII584mbFBMzwAAAAGuLURM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7217169484",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T19:53:33Z",
      "lock_reason": "resolved"
    }
  ]
}