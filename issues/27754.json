{
  "type": "issue",
  "issue": {
    "id": 1725836113,
    "node_id": "I_kwDOABII585m3itR",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27754",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27754/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27754/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27754/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/27754",
    "number": 27754,
    "state": "open",
    "state_reason": null,
    "title": "`coinselector_tests` use non-representative CoinSelectionParams and UTXO costs",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Current behaviour\r\n\r\nMost test cases in the `coinselector_tests` have `effective_feerate`, `long_term_feerate`, `discard_feerate`, and `cost_of_change` in the corresponding CoinSelectionParams set to 0 which is not accepted during production use of the wallet with the default configuration—we require transactions to at least pay `minRelayTxFee` (1 ṩ/vB). Under a minimum feerate of 1 ṩ/vB, a (standard) change output will always incur a `cost_of_change` of at least 31 ṩ.\r\n\r\nSimilarly, the `add_coin()` functions uses values for the UTXOs that are not encountered in production use. The UTXOs are created with `feerate`, `input_bytes`, `custom_size`, and `fees` set to 0. Inputs can never be smaller than 41 bytes, and thus must incur a fee of at least 41 ṩ during production use.\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/4060799/eb2b286b-502c-4f62-9185-7d9120290ae3)\r\n\r\nThe main purpose of the coinselector_tests is to test that coin selection behaves as expected for production use. While it is also necessary to test edge cases and outliers, the strange values for CoinSelectionParams and UTXOs cause coin selection to behave differently than in production which means that production behavior is not well-reflected in the tests. It is also confusing to developers trying to reason about coin selection behavior.\r\n\r\nE.g. our coin selection works by creating multiple input set candidates and then picking the one that scores lowest on “waste”. In the case of multiple input sets tying on waste, we pick the one using more inputs. When `cost_of_change` is set to 0, our waste calculation surmises that we created a changeless transaction and any overselection will be dropped to fees. This is incorrect when we are actually comparing input sets produced by coin selection algorithms that produce change (e.g. SRD vs Knapsack in the `check_max_weight` test case) which then has an unexpected outcome.\r\n\r\n### Expected behaviour\r\n\r\nCoin selection tests should be tested with values encountered during production.\r\n\r\n- We should test feerates from the range of commonly encountered feerates: e.g. `[1000, 5000, 40_000, 500_000]`. As edge cases we may also want to have some tests for feerate=0 (permitted by consensus but non-standard), feerate=2_000_000 (should trigger extreme feerate warning).\r\n- Long_term_feerate should be set to the default value of 10_000 except in cases where it is explicit focus of the tests\r\n- discard_feerate should be set to 3000 except in cases where it is explicit focus of the tests\r\n- UTXOs should be created using representative conditions for the `coinselector_tests`. Preferably they would be calculated from the feerate in the CSParams and a representative input weight. Inputs should be assumed to weigh between ~57.5–148 vB by default, perhaps with an edge cases testing for 41 vB (minimum input size). Inputs should incur fees of at least 58 ṩ (P2TR at 1 ṩ/vB).\r\n- Change should be assumed to cost fees of at least 31 ṩ (P2WPKH at 1 ṩ/vB).\r\n\r\nThe CoinSelectionParams should be set up in the `SETUP` for the test cases once, and only CSP that are explicitly relevant to the test should be amended in the individual test cases.\r\nThe `add_coin()` functions should use values corresponding to the test case’s CSP, unless they are explicitly set differently to test something.\r\n\r\n### Steps to reproduce\r\n\r\nI was looking at `coinselector_tests.cpp` and came upon the `check_max_weight` test case. In Scenario 1 there are 1515 coins of 0.033 ₿ and one coin of 50 ₿. A solution only composed of the smaller coins would exceed the allowed weight, and it is checking whether a valid solution is found.\r\n\r\nWhat surprised me was that the expected outcome was supposed to be that only one input is picked; the 50 ₿ input. This was surprising to me because SRD now uses a heap to kick out the lowest value UTXOs if it exceeds the allowed max_weight, so I would expect SRD always to find a solution if there is one.\r\n\r\nSince the test sets long-term-feerate, and feerate to 0, and both a lowest_larger solution per Knapsack and a solution with many inputs per SRD would have change, I would expect their waste to be just the cost_of_change which should be the same for either (and at feerate of 0 should be zero). So I would expect both input sets to tie on waste.\r\n\r\nChooseSelection breaks ties on waste by preferring the input set with more inputs.\r\n\r\nYet, the test consistently picks the single input solution by knapsack while I would have expected it to pick the SRD solution because they should be tied for waste and the latter uses more inputs.\r\n\r\nSo, I added some print statements to `ChooseSelection` and learned that the input sets in this test _do have non-zero_ waste. I had a hard time explaining where the waste score for these input sets came from until I realized that our transaction building assumes that no change is created when `cost_of_change` is set to 0, and thus any overshoot during the selection is presumed to be excess and added to the waste score.\r\n\r\nAt production feerates and costs the SRD solution would be preferred, because both input sets produce change and the SRD solution would produce a lower waste score.\r\n\r\n### What version of Bitcoin Core are you using?\r\n\r\nmaster@fa53611cf1b2ab2f49470ba75ee29a94a7b89105",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 0,
    "created_at": "2023-05-25T13:29:55Z",
    "updated_at": "2023-05-25T13:34:34Z"
  },
  "events": []
}