{
  "type": "issue",
  "issue": {
    "id": 996573480,
    "node_id": "I_kwDOABII5847ZoEo",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/22978",
    "number": 22978,
    "state": "open",
    "state_reason": null,
    "title": "RFC: ArgsManager type and range checking",
    "body": "_Originally posted by @ryanofsky in https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969613_\r\n\r\nThe way I would like range checking to work in the future would be to rely more on C++ types and `std::numeric_limits`. The idea is arguments would be registered using explicit C++ types:\r\n\r\n```c++\r\nconst Setting<int> SETTING_myint(\"-myint\", \"description\");\r\nconst Setting<std::string> SETTING_mystring(\"-mystring\", \"description\");\r\nconst Setting<std::vector<std::string>> SETTING_mylist(\"-mylist\", \"description\");\r\nconst Setting<std::optional<std::uint16_t>> SETTING_myopt(\"-myopt\", \"description\");\r\nconst Setting<SettingsValue> SETTING_mylegacy(\"-mylegacy\", \"description\");\r\n\r\nvoid RegisterArgs(ArgsManager& args)\r\n{\r\n    args.Register({SETTING_myint, SETTING_mystring, SETTING_mylist, SETTING_myopt, SETTING_mylegacy});\r\n}\r\n```\r\n\r\nand then they could be retrieved in a type safe way:\r\n\r\n```\r\nargs.Get(SETTING_myint);    // returns int\r\nargs.Get(SETTING_mystring); // returns std::string\r\nargs.Get(SETTING_mylist);   // returns std::vector<std::string>\r\nargs.Get(SETTING_myopt);    // returns std::optional<uint16_t>\r\nargs.GetArg/GetArgs/GetIntArg/GetBoolArg(SETTING_mylegacy); // returns requested type\r\n```\r\n\r\nTo get to this point, this PR cleans up existing misused flags and misnamed functions. PR #16545 adds type validation and runtime semantics without changing the ArgsManager API, and a followup PR can improve the API and update call sites without changing the semantics. (There is a direct correspondence between the `ALLOW_` flags from #16545 and the useful C++ settings types `bool`/`int`/`std::string`/`std::optional`/`std::variant`/`std::vector`)\r\n\r\n---\r\n\r\najtowns https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701448785\r\n\r\nI think I finally figured out how you can go a little bit further than the above, ending up with something like:\r\n\r\n```c++\r\nstruct NetSettings\r\n{\r\n    int64_t blockreconstructionextratxn;\r\n    int64_t maxorphantx;\r\n    bool capturemessages;\r\n\r\n    template<typename C, typename... Args>\r\n    static inline void F(Args&... args) {\r\n        return C::Do(args...,\r\n            C::Defn( &NetSettings::blockreconstructionextratxn, \"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS, DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN ),\r\n            C::Defn( &NetSettings::maxorphantx, \"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS, DEFAULT_MAX_ORPHAN_TRANSACTIONS ),\r\n            C::Defn( &NetSettings::capturemessages, \"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST, false )\r\n        );\r\n    }\r\n};\r\n\r\nvoid RegisterNetProcessingArgs(ArgsManager& args)\r\n{\r\n    SettingsRegister<NetSettings>::Register(args);\r\n}\r\n\r\nNetSettings GetNetSettings(const ArgsManager& args)\r\n{\r\n    return SettingsRegister<NetSettings>::Get(args);\r\n}\r\n\r\nclass PeerManagerImpl\r\n{\r\nprivate:\r\n    const NetSettings m_settings;\r\n    PeerManagerImpl(..., const ArgsManager& args) : m_settings{GetNetSettings(args)), ... { ... }\r\n    ...\r\n};\r\n```\r\n\r\nThe idea being that this way:\r\n * it can infer the argument type directly from the type of the struct member so that you can't accidentally specify different types between `args.AddArg<int>` and `Get<bool>`\r\n  * that the settings are const at runtime so can be accessed without any additional locks\r\n  * you only have to access the ArgsManager (and do string parsing) at setup time\r\n  * you don't have to make up lots of new names for everything or add too much boilerplate\r\n\r\nBranch built on top of this PR that has the above working at https://github.com/ajtowns/bitcoin/tree/202109-settings_struct",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 3,
    "created_at": "2021-09-15T01:42:09Z",
    "updated_at": "2022-09-28T02:33:48Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 5302933698,
      "node_id": "MEE_lADOABII5847ZoEozwAAAAE8FFjC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5302933698",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-15T01:42:09Z"
    },
    {
      "event": "subscribed",
      "id": 5302933700,
      "node_id": "SE_lADOABII5847ZoEozwAAAAE8FFjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5302933700",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-15T01:42:09Z"
    },
    {
      "event": "commented",
      "id": 927114728,
      "node_id": "IC_kwDOABII5843QqXo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927114728",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-25T12:32:45Z",
      "updated_at": "2021-09-25T12:32:45Z",
      "author_association": "MEMBER",
      "body": "> The way I would like range checking to work in the future would be to rely more on C++ types and `std::numeric_limits`.\r\n\r\nConcept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-927114728",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "referenced",
      "id": 5365526361,
      "node_id": "REFE_lADOABII5847ZoEozwAAAAE_z29Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5365526361",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "825f4a64e612dab62cd0a73b2afe32dac5e0c69f",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/825f4a64e612dab62cd0a73b2afe32dac5e0c69f",
      "created_at": "2021-09-27T13:15:09Z"
    },
    {
      "event": "commented",
      "id": 1004136876,
      "node_id": "IC_kwDOABII58472ems",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004136876",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-03T14:38:50Z",
      "updated_at": "2022-01-03T14:38:50Z",
      "author_association": "MEMBER",
      "body": "Possibly related: https://github.com/bitcoin/bitcoin/issues/23843",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1004136876",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "commented",
      "id": 1260310040,
      "node_id": "IC_kwDOABII585LHs4Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260310040",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-28T02:33:47Z",
      "updated_at": "2022-09-28T02:33:47Z",
      "author_association": "MEMBER",
      "body": "Had a go at revisiting this with #26177 in mind. Here's a branch, https://github.com/ajtowns/bitcoin/commits/202209-chainstate-argsman-types and here's [an example](https://github.com/ajtowns/bitcoin/blob/08ebff304747ff9386cd4c6048fc4fc9a9301877/src/chainparams.cpp#L94) of what it might look like:\r\n\r\n```c++\r\nclass SigNetOptionsRegistration\r\n{\r\npublic:\r\n    using T = CChainParams::SigNetOptions;\r\n\r\n    static inline void GetChallenge(std::vector<uint8_t>& challenge, const std::string& hex)\r\n    {\r\n        challenge = ParseHex(hex);\r\n    }\r\n\r\n    template<typename C, typename Op>\r\n    static inline void Register(Op& op)\r\n    {\r\n        return C::Do(op,\r\n            C::Defn(&T::challenge, GetChallenge, \"-signetchallenge\", \"\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS),\r\n            C::Defn(&T::seeds, \"-signetseednode\", \"\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS)\r\n        );\r\n    }\r\n};\r\n...\r\nvoid RegisterChainParamsOptions(ArgsManager& args)\r\n{\r\n    SettingsRegister<SigNetOptionsRegistration>::Register(args);\r\n    SettingsRegister<RegTestOptionsRegistration>::Register(args);\r\n}\r\n\r\nCChainParams::SigNetOptions GetSigNetOptions(const ArgsManager& args)\r\n{\r\n    return SettingsRegister<SigNetOptionsRegistration>::Get(args);\r\n}\r\n```\r\n\r\nIdea is you make a container for the options (`T = SigNetOptions`), provide a `Register` function that associates the options with the field in that structure (and a conversion function like `GetChallenge` if needed), then use `SettingsRegister<>::Register(args)` to register the args, then parse them, then get the results with `SettingsRegister<>::Get(args)`, and you're done.\r\n",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1260310040",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    }
  ]
}