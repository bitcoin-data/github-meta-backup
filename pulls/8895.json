{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895",
    "id": 88164174,
    "node_id": "MDExOlB1bGxSZXF1ZXN0ODgxNjQxNzQ=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8895",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/8895.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/8895.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/67dac4e1937b9835d2c09402d35e0050467fbc6d",
    "number": 8895,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Better SigCache Implementation",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "edited: This PR has been squashed with a few revisions from the initial PR. The unsquashed version is still available here https://github.com/bitcoin/bitcoin/compare/master...JeremyRubin:cuckoocache-pull-request-not-squashed. The PR message has also been updated to reflect the current squashed version more closely.\n# Summary\n\nThis PR replaces the boost::unordered_set in sigcache with CuckooCache::cache.\n# Benefits\n- Better memory utilization (no pointers/linked lists/stored hashes)\n- Lock Free concurrent reads and erases\n- Lazy Deletion of entries (potentially beneficial in case of re-orgs)\n- Low cache thrashing -- a standard lookup and erase should only require ~9 cache lines (Hash 0..Hash 7, and erase flag)\n- Allocation free design\n- Insert guaranteed to terminate\n- Generations smartly delete older entries before newer ones\n# Design\n\nThe CuckooCache uses a design similar to a [Cuckoo Hash Table](https://en.wikipedia.org/wiki/Cuckoo_hashing). Each key inserted has a hash function 0 through hash function 7 (h0..h7).\n- Lookup(k) is a matter of examining location h0(k)..h7(k).\n- Insert(k) first sees if h0(k)..h7(k) is empty, and insets to one if so. If not, insert swaps k with the key at one more than the last hash location (so it goes in a cycle through h0..h7) and attempts to insert the swapped out key at it's other location, repeating (up to a limit) if necessary. At that limit, the last entry is dropped. Insert also checks a heuristic (described below) to age a generation before trying to insert.\n- Delete(k) first does a Lookup(k), then marks the corresponding bit in an std::atomic<uint8_t> as set as a relaxed atomic operation.\n\nMore information about the synchronization specification is in the code documentation.\n## Generation Heuristic\n\nA bit vector is used to track if the element belongs to the current or prior generation. Once the number of the current generation's non-deleted elements exceeds ~45%, the generation is retired. The previously retired generation is marked deleted. Because the cache deletes lazily, these entries are still present but are more likely to be overwritten than elements in the currently retired generation. Generations are scanned to see if they should be retired using a heuristic of how many inserts would need to occur since the last scan to exceed the generation size.\n\nThere is a slight (1-bit per entry) memory overhead to this approach. This does not negatively impact this cache because the trade off is worth it for intelligently deleting older entries. Only one bit is used for simplicity, as we get three represented states (deleted, old, current). Using more generations (lets say, 1 more bit) would allow for more granular freeing of only the oldest quarter and not half per scan. This has advantages, but also an additional memory cost and two generations was sufficient for this use case.\n# Simulation\n\nThese simulation results are slightly outdated, @morcos will chime in below with some updated figures. It should be better/the same as below.\n~~This can overall be seen as a 40% improvement on validation times over master on a 16 core machine simulated over a month. The simulation methodology sends relayed transactions and blocks to the node in the order they were received historically. On 4 and 1 core simulations, the improvement is not significant (but no worse). Our tests didn't really hit hard saturation on the cache, which suggests that the megabytes allocated to the cache could be reduced.~~\n# Testing\n\nThe PR includes a test suite which checks a few key properties:\n1. Check that values not inserted are never readable\n2. Check that a reasonable hit rate is achieved\n3. Check that erased elements are inserted on reasonably well rather than replacing fresh contents\n4. Test that (3) holds when erases are in parallel.\n# Future Work\n\nThere are future optimizations which may be able to bring some of the advantages seen with 16 cores to 4 and 1 cores, but this PR is focused on a minimal complexity patch with a demonstrable improvement over main as a base for future work in this direction.\n\nThere are also a few cleanup related items (such as cache initialization) which are not done in this patch to make it a minimal code change. These can be fixed in a later PR if this is accepted.\n# Acknowledgements\n\nThanks to @morcos, @sdaftuar, and @TheBlueMatt for their assistance and review on this patch.\n",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      },
      {
        "id": 326918230,
        "node_id": "MDU6TGFiZWwzMjY5MTgyMzA=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage",
        "name": "Resource usage",
        "color": "981023",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/21",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/21",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/21/labels",
      "id": 1823680,
      "node_id": "MDk6TWlsZXN0b25lMTgyMzY4MA==",
      "number": 21,
      "state": "closed",
      "title": "0.14.0",
      "description": "",
      "creator": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 156,
      "created_at": "2016-06-13T14:18:51Z",
      "updated_at": "2017-03-08T16:39:44Z",
      "closed_at": "2017-03-08T16:39:44Z"
    },
    "active_lock_reason": "resolved",
    "created_at": "2016-10-05T21:51:18Z",
    "updated_at": "2021-09-08T11:23:37Z",
    "closed_at": "2016-12-15T02:14:18Z",
    "mergeable_state": "unknown",
    "merged_at": "2016-12-15T02:14:18Z",
    "merge_commit_sha": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "JeremyRubin:cuckoocache-pull-request",
      "ref": "cuckoocache-pull-request",
      "sha": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 53111803,
        "node_id": "MDEwOlJlcG9zaXRvcnk1MzExMTgwMw==",
        "name": "bitcoin",
        "full_name": "JeremyRubin/bitcoin",
        "owner": {
          "login": "JeremyRubin",
          "id": 886523,
          "node_id": "MDQ6VXNlcjg4NjUyMw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/JeremyRubin",
          "html_url": "https://github.com/JeremyRubin",
          "followers_url": "https://api.github.com/users/JeremyRubin/followers",
          "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
          "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
          "repos_url": "https://api.github.com/users/JeremyRubin/repos",
          "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/JeremyRubin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/JeremyRubin/bitcoin",
        "archive_url": "https://api.github.com/repos/JeremyRubin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/JeremyRubin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/JeremyRubin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/JeremyRubin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/JeremyRubin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/JeremyRubin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/JeremyRubin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/JeremyRubin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/JeremyRubin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/JeremyRubin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/JeremyRubin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/JeremyRubin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/JeremyRubin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/JeremyRubin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/JeremyRubin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/JeremyRubin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/JeremyRubin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/JeremyRubin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/JeremyRubin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/JeremyRubin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/JeremyRubin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/JeremyRubin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:JeremyRubin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/JeremyRubin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/JeremyRubin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/JeremyRubin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/JeremyRubin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/JeremyRubin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/JeremyRubin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/JeremyRubin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/JeremyRubin/bitcoin/hooks",
        "svn_url": "https://github.com/JeremyRubin/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 7,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 203232,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-01-04T19:39:36Z",
        "created_at": "2016-03-04T06:06:13Z",
        "updated_at": "2023-01-05T18:14:42Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b68685a16a81729f4d10975171c23c407cd332e3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 901,
    "deletions": 41,
    "changed_files": 7,
    "commits": 2,
    "review_comments": 40,
    "comments": 22
  },
  "events": [
    {
      "event": "mentioned",
      "id": 813961254,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODEzOTYxMjU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/813961254",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-05T21:51:18Z"
    },
    {
      "event": "subscribed",
      "id": 813961256,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDgxMzk2MTI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/813961256",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-05T21:51:18Z"
    },
    {
      "event": "mentioned",
      "id": 813961257,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODEzOTYxMjU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/813961257",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-05T21:51:18Z"
    },
    {
      "event": "subscribed",
      "id": 813961258,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDgxMzk2MTI1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/813961258",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-05T21:51:18Z"
    },
    {
      "event": "mentioned",
      "id": 813961259,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODEzOTYxMjU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/813961259",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-05T21:51:18Z"
    },
    {
      "event": "subscribed",
      "id": 813961260,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDgxMzk2MTI2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/813961260",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-05T21:51:18Z"
    },
    {
      "event": "labeled",
      "id": 814192960,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDgxNDE5Mjk2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/814192960",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-06T03:19:29Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "labeled",
      "id": 814342682,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDgxNDM0MjY4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/814342682",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-06T07:28:12Z",
      "label": {
        "name": "Resource usage",
        "color": "981023"
      }
    },
    {
      "event": "commented",
      "id": 252478919,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQ3ODkxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/252478919",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-09T10:40:35Z",
      "updated_at": "2016-10-09T10:40:35Z",
      "author_association": "MEMBER",
      "body": "Compiling on OS X, with Xcode 8\n\n```\n  CXX      test/test_test_bitcoin-cuckoocache_tests.o\nIn file included from test/cuckoocache_tests.cpp:4:\nIn file included from /usr/local/include/boost/test/unit_test.hpp:18:\nIn file included from /usr/local/include/boost/test/test_tools.hpp:46:\nIn file included from /usr/local/include/boost/test/tools/old/impl.hpp:19:\nIn file included from /usr/local/include/boost/test/unit_test_log.hpp:24:\nIn file included from /usr/local/include/boost/test/utils/wrap_stringstream.hpp:26:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:18:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/mutex:177:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:992:39: error: \n      type 'float' cannot be used prior to '::' because it has no members\n    : public binary_function<typename _Predicate::first_argument_type,\n                                      ^\n./cuckoocache.h:206:65: note: in instantiation of template class\n      'std::__1::binary_negate<float>' requested here\n        depth_limit = std::max((uint8_t)1, static_cast<uint8_t>(std::log...\n                                                                ^\nIn file included from test/cuckoocache_tests.cpp:4:\nIn file included from /usr/local/include/boost/test/unit_test.hpp:18:\nIn file included from /usr/local/include/boost/test/test_tools.hpp:46:\nIn file included from /usr/local/include/boost/test/tools/old/impl.hpp:19:\nIn file included from /usr/local/include/boost/test/unit_test_log.hpp:24:\nIn file included from /usr/local/include/boost/test/utils/wrap_stringstream.hpp:26:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:18:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/mutex:177:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1002:36: error: \n      type 'float' cannot be used prior to '::' because it has no members\n    bool operator()(const typename _Predicate::first_argument_type& __x,\n                                   ^\nIn file included from test/cuckoocache_tests.cpp:5:\n./cuckoocache.h:206:70: error: no member named 'log2' in namespace 'std'\n        depth_limit = std::max((uint8_t)1, static_cast<uint8_t>(std::log2(static...\n                                                                ~~~~~^\n3 errors generated.\n```\n",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-252478919",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 817356473,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODE3MzU2NDcz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/817356473",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-09T13:43:49Z"
    },
    {
      "event": "subscribed",
      "id": 817356474,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDgxNzM1NjQ3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/817356474",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-09T13:43:49Z"
    },
    {
      "event": "commented",
      "id": 252487581,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQ4NzU4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/252487581",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-09T13:52:26Z",
      "updated_at": "2016-10-09T13:52:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fanquake should be fixed, <cmath> wasn't included for some reason.\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-252487581",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 817358276,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODE3MzU4Mjc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/817358276",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-09T13:52:26Z"
    },
    {
      "event": "subscribed",
      "id": 817358277,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDgxNzM1ODI3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/817358277",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-09T13:52:26Z"
    },
    {
      "event": "commented",
      "id": 252683343,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjY4MzM0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/252683343",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-10T17:17:44Z",
      "updated_at": "2016-10-10T17:17:44Z",
      "author_association": "MEMBER",
      "body": "Concept ACK and code review ACK.\n\nI still need to read up on the security/performance guarantees to understand better, but the implementation looks sane.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-252683343",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 254050628,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDA1MDYyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/254050628",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-16T14:38:01Z",
      "updated_at": "2016-10-16T14:38:01Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, if nothing else the increase in entries-per-byte should be a big win for memory usage.\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-254050628",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 255239670,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTIzOTY3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255239670",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-20T21:56:39Z",
      "updated_at": "2016-10-20T21:56:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "I just pushed up 4 commits which further improve the cuckoo cache. These commits add epochs/generations for the cache entries which improves the hit rate. Below is a brief description of the changes, for more detail, see the code & code documentation.\n\nThe first 2 commits are changes to the tests. The first commit simplifies what is checked in the existing tests (it was over specific to that Cache's design). The second adds a new test which fails under the existing code because the code does not prioritize newer entries.\n\nThe third patch adds generations to cache which work as follows: a bit vector is used to track if the element belongs to the current or prior generation. Once the number of the current generation's non-deleted elements exceeds ~45%, the generation is retired. The previously retired generation is marked deleted. Because the cache deletes lazily, these entries are still present but are more likely to be overwritten than elements in the currently retired generation. Generations are scanned to see if they should be retired using a heuristic of how many inserts would need to occur since the last scan to exceed the generation size.\n\nThe fourth commit increases the number of hashes used per element from 2 to 8. The benefit of this change is that it permits using a large generation size (e.g., 45%) compared to 2 hashes (30%). A larger generation size is the \"effective size\" of the cache, i.e., new entries stay in the current generation for longer.\n\nPerformance is markedly better, especially under attack scenarios. @morcos has run several simulations which back up this claim. \n\nThere is a slight (1-bit per entry) memory overhead to this approach. This does not negatively impact this cache because the trade off is worth it for intelligently deleting older entries. Only one bit is used for simplicity, as we get three represented states (deleted, old, current). Using more generations (lets say, 1 more bit) would allow for more granular freeing of only the oldest quarter and not half per scan. This has advantages, but also an additional memory cost and two generations was sufficient for this use case.\n\nOn a slightly separate note, another side benefit of this cache that I failed to mention when I opened the PR (before these added commits) is that inserts are guaranteed to terminate (in the sigcache currently in master, insert may run forever if GetRand is \"unlucky\").\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-255239670",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 831294883,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODMxMjk0ODgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/831294883",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-20T21:56:39Z"
    },
    {
      "event": "subscribed",
      "id": 831294884,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDgzMTI5NDg4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/831294884",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-20T21:56:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 831310654,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODMxMzEwNjU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/831310654",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-20T22:11:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 832339648,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODMyMzM5NjQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/832339648",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-21T18:07:24Z"
    },
    {
      "event": "commented",
      "id": 255441541,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQ0MTU0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255441541",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-21T18:56:05Z",
      "updated_at": "2016-10-21T18:56:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've squashed all the commits (unsquashed still available here if you've already looked at this. https://github.com/bitcoin/bitcoin/compare/master...JeremyRubin:cuckoocache-pull-request-not-squashed). I've also edited the PR message.\n\nThe current Travis failed build seems to be related to the ongoing Dyn DDoS attack, as Travis is telling me variants of \n`The repository at JeremyRubin/bitcoin was not found.` and `The repository at bitcoin/bitcoin was not found.`. When that attack eases, I'll make travis retry.\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-255441541",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 832661277,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODMyNjYxMjc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/832661277",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-22T00:51:29Z"
    },
    {
      "event": "reviewed",
      "id": 5340391,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDM5MQ==",
      "url": null,
      "actor": null,
      "commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#pullrequestreview-5340391",
      "submitted_at": "2016-10-22T01:22:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
    },
    {
      "event": "reviewed",
      "id": 5352886,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Mjg4Ng==",
      "url": null,
      "actor": null,
      "commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#pullrequestreview-5352886",
      "submitted_at": "2016-10-22T17:15:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
    },
    {
      "event": "reviewed",
      "id": 5353120,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzEyMA==",
      "url": null,
      "actor": null,
      "commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#pullrequestreview-5353120",
      "submitted_at": "2016-10-22T17:31:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
    },
    {
      "event": "commented",
      "id": 256931331,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjkzMTMzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256931331",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-28T14:13:59Z",
      "updated_at": "2016-10-28T14:13:59Z",
      "author_association": "MEMBER",
      "body": "Tested ACK either 3ba2bf4ecca453e926754db35fb6ca3b8141c4e7 or 121dfcd798bda9998dda13fa304be2d0afb7ec82 \n\nI gave some nits about the comments offline.\nI am ambivalent about the change to eliminate modulo. \n\nI have extensively tested the performance of this patch.  Lock contention on the sig cache is a serious bottleneck to ConnectBlock performance with 8 or more cores.  This patch appears to all but eliminate that contention and leads to a 40% improvement in ConnectBlock time for 16 cores.  It also allows for further performance improvements that would not see any benefit until this bottleneck was removed.\n\nI have also tested the hit rate performance and it is a significant improvement over the existing sigcache in the event of a spam attack, for a long running node, or in the event of a reorg.\n\nIn addition to reviewing the included tests, I've also run my own tests and done code review to be sure that there are no false positives.\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-256931331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 257583560,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzU4MzU2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/257583560",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-01T14:40:19Z",
      "updated_at": "2016-11-01T14:40:19Z",
      "author_association": "MEMBER",
      "body": "ACK 453aef4\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-257583560",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 259433117,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTQzMzExNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/259433117",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-09T14:55:05Z",
      "updated_at": "2016-11-09T14:55:05Z",
      "author_association": "MEMBER",
      "body": "Testing this (OSX 10.12, XCode 8.1):\nCompiling threw 1 new warning:\n\n```\nIn file included from script/sigcache.cpp:14:\n./cuckoocache.h:220:17: warning: suggest braces around initialization of subobject [-Wmissing-braces]\n        return {hash_function.template operator()<0>(e) & hash_mask,\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n./cuckoocache.h:438:40: note: in instantiation of member function 'CuckooCache::cache<uint256, (anonymous\n      namespace)::SignatureCacheHasher>::compute_hashes' requested here\n        std::array<uint32_t, 8> locs = compute_hashes(e);\n                                       ^\nscript/sigcache.cpp:70:25: note: in instantiation of member function 'CuckooCache::cache<uint256,\n      (anonymous namespace)::SignatureCacheHasher>::contains' requested here\n        return setValid.contains(entry, erase);\n```\n\nErrors trying to compile the tests:\n\n```\nIn file included from test/cuckoocache_tests.cpp:5:\n./cuckoocache.h:218:36: error: implicit instantiation of undefined template 'std::__1::array<unsigned int, 8>'\n    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n                                   ^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__tuple:116:65: note: template is declared here\ntemplate <class _Tp, size_t _Size> struct _LIBCPP_TYPE_VIS_ONLY array;\n                                                                ^\nIn file included from test/cuckoocache_tests.cpp:5:\n./cuckoocache.h:368:33: error: implicit instantiation of undefined template 'std::__1::array<unsigned int, 8>'\n        std::array<uint32_t, 8> locs = compute_hashes(e);\n                                ^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__tuple:116:65: note: template is declared here\ntemplate <class _Tp, size_t _Size> struct _LIBCPP_TYPE_VIS_ONLY array;\n                                                                ^\nIn file included from test/cuckoocache_tests.cpp:5:\n./cuckoocache.h:438:33: error: implicit instantiation of undefined template 'std::__1::array<unsigned int, 8>'\n        std::array<uint32_t, 8> locs = compute_hashes(e);\n                                ^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__tuple:116:65: note: template is declared here\ntemplate <class _Tp, size_t _Size> struct _LIBCPP_TYPE_VIS_ONLY array;\n```\n\n```\n  CXX      test/test_test_bitcoin-key_tests.o\nIn file included from test/cuckoocache_tests.cpp:4:\nIn file included from /usr/local/include/boost/test/unit_test.hpp:18:\nIn file included from /usr/local/include/boost/test/test_tools.hpp:46:\nIn file included from /usr/local/include/boost/test/tools/old/impl.hpp:19:\nIn file included from /usr/local/include/boost/test/unit_test_log.hpp:18:\nIn file included from /usr/local/include/boost/test/tree/observer.hpp:17:\nIn file included from /usr/local/include/boost/test/detail/global_typedef.hpp:15:\nIn file included from /usr/local/include/boost/test/utils/basic_cstring/basic_cstring.hpp:21:\nIn file included from /usr/local/include/boost/test/utils/basic_cstring/bcs_char_traits.hpp:25:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/string:439:\nIn file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/algorithm:628:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/memory:1740:31: error: no matching constructor\n      for initialization of 'block_activity'\n            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);\n                              ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/memory:1656:18: note: in instantiation of\n      function template specialization 'std::__1::allocator<block_activity>::construct<block_activity, const unsigned int &, CuckooCache::cache<uint256,\n      cuckoocache_tests::uint256Hasher> &>' requested here\n            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}\n                 ^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/memory:1502:14: note: in instantiation of\n      function template specialization 'std::__1::allocator_traits<std::__1::allocator<block_activity> >::__construct<block_activity, const unsigned int\n      &, CuckooCache::cache<uint256, cuckoocache_tests::uint256Hasher> &>' requested here\n            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),\n             ^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/deque:1801:21: note: in instantiation of\n      function template specialization 'std::__1::allocator_traits<std::__1::allocator<block_activity> >::construct<block_activity, const unsigned int &,\n      CuckooCache::cache<uint256, cuckoocache_tests::uint256Hasher> &>' requested here\n    __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()), _VSTD::forward<_Args>(__args)...);\n                    ^\ntest/cuckoocache_tests.cpp:368:18: note: in instantiation of function template specialization 'std::__1::deque<block_activity,\n      std::__1::allocator<block_activity> >::emplace_back<const unsigned int &, CuckooCache::cache<uint256, cuckoocache_tests::uint256Hasher> &>'\n      requested here\n        last_few.emplace_back(BLOCK_SIZE, set);\n                 ^\ntest/cuckoocache_tests.cpp:391:5: note: in instantiation of function template specialization\n      'cuckoocache_tests::test_cache_generations<CuckooCache::cache<uint256, cuckoocache_tests::uint256Hasher> >' requested here\n    test_cache_generations<CuckooCache::cache<uint256, uint256Hasher>>();\n    ^\ntest/cuckoocache_tests.cpp:324:12: note: candidate constructor (the implicit move constructor) not viable: requires 1 argument, but 2 were provided\n    struct block_activity {\n           ^\ntest/cuckoocache_tests.cpp:324:12: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 2 were provided\n4 errors generated.\n```\n",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259433117",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 259529310,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTUyOTMxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/259529310",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-09T21:18:19Z",
      "updated_at": "2016-11-09T21:18:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fanquake I think I can fix the warnings but I'm curious as to how much that's a goal given that that flag should be deprecated & there are lots of build errors. Happy to push a squashme if you think so.\n\nThe build errors should be fixable, must be a different include order or something, I need to add a `#include<array>`.\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259529310",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 853604749,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODUzNjA0NzQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853604749",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-09T21:18:19Z"
    },
    {
      "event": "subscribed",
      "id": 853604750,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg1MzYwNDc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853604750",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-09T21:18:19Z"
    },
    {
      "event": "commented",
      "id": 259555316,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTU1NTMxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/259555316",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-09T23:19:56Z",
      "updated_at": "2016-11-09T23:19:56Z",
      "author_association": "MEMBER",
      "body": "@JeremyRubin The warning isn't so much of an issue, was just making a note of it.\n",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259555316",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 853739763,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODUzNzM5NzYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853739763",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-09T23:19:56Z"
    },
    {
      "event": "subscribed",
      "id": 853739764,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg1MzczOTc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853739764",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-09T23:19:56Z"
    },
    {
      "event": "commented",
      "id": 259587267,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTU4NzI2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/259587267",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-10T02:39:48Z",
      "updated_at": "2016-11-10T02:39:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fanquake please confirm fix when you have a moment.\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259587267",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 853897972,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODUzODk3OTcy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853897972",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-10T02:39:48Z"
    },
    {
      "event": "subscribed",
      "id": 853897973,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg1Mzg5Nzk3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853897973",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-10T02:39:48Z"
    },
    {
      "event": "commented",
      "id": 259588355,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTU4ODM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/259588355",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-10T02:48:06Z",
      "updated_at": "2016-11-10T02:48:06Z",
      "author_association": "MEMBER",
      "body": "@JeremyRubin Everything compiling file now. \n\nCan you suggest tests/benchmarks that reviewers can run to test the performance increase here, or is that going to be hard for anyone without a-lot of cores?\n",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259588355",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 853903355,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODUzOTAzMzU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853903355",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-10T02:48:06Z"
    },
    {
      "event": "subscribed",
      "id": 853903357,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg1MzkwMzM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/853903357",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-10T02:48:06Z"
    },
    {
      "event": "milestoned",
      "id": 855181729,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDg1NTE4MTcyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/855181729",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-10T22:03:27Z",
      "milestone": {
        "title": "0.14.0"
      }
    },
    {
      "event": "reviewed",
      "id": 8693054,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY5MzA1NA==",
      "url": null,
      "actor": null,
      "commit_id": "5ec14c8b4a4d00ee654bb342d3f37f09e0264cfa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#pullrequestreview-8693054",
      "submitted_at": "2016-11-15T22:25:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
    },
    {
      "event": "commented",
      "id": 261355688,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTM1NTY4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261355688",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T20:10:24Z",
      "updated_at": "2016-11-17T20:10:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fanquake yeah it'll be tough, there's not much speed improvement from losing the erase locks until ~8 cores. What you could test is better memory efficiency by allocating smaller caches (2 4 8 16...) and comparing performance to a node running with that size and the old cache. I'd recommend running one node and peering your test nodes exclusively thought that to ensure nodes are getting the same messages for a given time. But if you're hardware limited that will be hard.\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-261355688",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 863400715,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODYzNDAwNzE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/863400715",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T20:10:24Z"
    },
    {
      "event": "subscribed",
      "id": 863400716,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg2MzQwMDcxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/863400716",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T20:10:24Z"
    },
    {
      "event": "reviewed",
      "id": 7513925,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUxMzkyNQ==",
      "url": null,
      "actor": null,
      "commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A few minor nits on the code, but I'd be fine with it as-is...more of my comments were about your comments :+1:.\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#pullrequestreview-7513925",
      "submitted_at": "2016-11-18T07:33:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
    },
    {
      "event": "commented",
      "id": 263995253,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzk5NTI1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/263995253",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-30T21:06:18Z",
      "updated_at": "2016-11-30T21:06:18Z",
      "author_association": "MEMBER",
      "body": "@JeremyRubin Care to have a look at @TheBlueMatt's comments above?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-263995253",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 877527829,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODc3NTI3ODI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/877527829",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-30T21:06:18Z"
    },
    {
      "event": "subscribed",
      "id": 877527830,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg3NzUyNzgzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/877527830",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-30T21:06:18Z"
    },
    {
      "event": "mentioned",
      "id": 877527831,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODc3NTI3ODMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/877527831",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-30T21:06:18Z"
    },
    {
      "event": "subscribed",
      "id": 877527832,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg3NzUyNzgzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/877527832",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-30T21:06:18Z"
    },
    {
      "event": "commented",
      "id": 264032672,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDAzMjY3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264032672",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-30T23:41:55Z",
      "updated_at": "2016-11-30T23:41:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Should be all addressed.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-264032672",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 264061238,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDA2MTIzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264061238",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-01T02:27:44Z",
      "updated_at": "2016-12-01T02:27:44Z",
      "author_association": "MEMBER",
      "body": "LGTM at 88b58d3c8d840924c8cfb556db994f71dfe6ad13",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-264061238",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 264913529,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDkxMzUyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264913529",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-05T17:09:41Z",
      "updated_at": "2016-12-05T17:09:41Z",
      "author_association": "MEMBER",
      "body": "reACK \t\t\t88b58d3",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-264913529",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "reviewed",
      "id": 11885055,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE4ODUwNTU=",
      "url": null,
      "actor": null,
      "commit_id": "88b58d3c8d840924c8cfb556db994f71dfe6ad13",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK, will test.  Few comment nits/questions below.\r\n\r\nAlso, it would be nice if we had a unit test for the sigcache itself...",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#pullrequestreview-11885055",
      "submitted_at": "2016-12-07T20:45:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
    },
    {
      "event": "commented",
      "id": 266555389,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjU1NTM4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266555389",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-12T21:17:24Z",
      "updated_at": "2016-12-12T21:17:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sdaftuar, https://github.com/bitcoin/bitcoin/pull/8895/commits/d4294ad41044eb9447de884736e8d45d8387b04f should fix your documentation concerns.\r\n\r\nRE: sigcache unit tests, I could whip something up, but I think it's a little bit hard to test meaningfully (i.e., beyond what other tests using the `CachingTransactionSignatureChecker` already cover) without opening up the anonymous namespace in `script/sigcache.cpp`. We can't detect actual cache hits v.s. misses with just the `CachingTransactionSignatureChecker::VerifySignature` as it just returns a `bool`. As this would require a bit of restructuring, it's probably easiest review that as a separate PR, if needed.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-266555389",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 891045483,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODkxMDQ1NDgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/891045483",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-12T21:17:24Z"
    },
    {
      "event": "subscribed",
      "id": 891045484,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg5MTA0NTQ4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/891045484",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-12T21:17:24Z"
    },
    {
      "event": "commented",
      "id": 266862211,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2Njg2MjIxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266862211",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-13T21:07:29Z",
      "updated_at": "2016-12-13T21:07:29Z",
      "author_association": "MEMBER",
      "body": "Tested ACK 88b58d3, and the comments in d4294ad look good too, thanks.\r\n\r\nRe: sigcache tests, I don't know the best way to address.  If I could come up with a test suite that exercised the logic sufficiently to make changes like this safer, then I'd happily suggest that, but it seems like a hard problem.  Still, after reviewing I'm comfortable enough with this PR to proceed without additional sigcache tests (and it's great that we have tests for the cuckoocache at least).\r\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-266862211",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "commented",
      "id": 266956223,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2Njk1NjIyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266956223",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-14T06:44:05Z",
      "updated_at": "2016-12-14T06:44:05Z",
      "author_association": "MEMBER",
      "body": "utACK. Please squash? :)",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-266956223",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWU2OWZiZjM5MTVmZTExODdiNGMyZTc3YmU1YWU2YjE2MTIxMTk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e69fbf3915fe1187b4c2e77be5ae6b16121194",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e69fbf3915fe1187b4c2e77be5ae6b16121194",
      "tree": {
        "sha": "44f74b2355ce7c2618be7c2ba60c4fecbbfd4776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44f74b2355ce7c2618be7c2ba60c4fecbbfd4776"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
          "sha": "7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7942d31d5fa0c78136fc51d4746d6d61eeb587a7"
        }
      ],
      "message": "Add CuckooCache implementation and replace the sigcache map_type with it\n\nSQUASHME: Change cuckoocache to only work for powers of two, to avoid mod operator\nSQUASHME: Update Documentation and simplify logarithm logic\nSQUASHME: OSX Build Errors\nSQUASHME: minor Feedback from sipa + bluematt\nSQUASHME: DOCONLY: Clarify a few comments.",
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-12-14T21:02:05Z"
      },
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-10-05T20:58:47Z"
      },
      "sha": "c9e69fbf3915fe1187b4c2e77be5ae6b16121194"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2RhYzRlMTkzN2I5ODM1ZDJjMDk0MDJkMzVlMDA1MDQ2N2ZiYzZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "tree": {
        "sha": "7bb00ce68b10a6e65c44516595df3861675125c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bb00ce68b10a6e65c44516595df3861675125c5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e69fbf3915fe1187b4c2e77be5ae6b16121194",
          "sha": "c9e69fbf3915fe1187b4c2e77be5ae6b16121194",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e69fbf3915fe1187b4c2e77be5ae6b16121194"
        }
      ],
      "message": "Add unit tests for the CuckooCache\n\nSQUASHME: Update Tests for other SQUASHMEs",
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-12-14T21:02:22Z"
      },
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-10-05T20:59:18Z"
      },
      "sha": "67dac4e1937b9835d2c09402d35e0050467fbc6d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 894293780,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk0MjkzNzgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/894293780",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-14T21:03:27Z"
    },
    {
      "event": "commented",
      "id": 267156841,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzE1Njg0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267156841",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-14T21:07:15Z",
      "updated_at": "2016-12-14T21:07:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa Squashed down to just cache and testing commits.\r\n\r\nunsquashed version preserved at https://github.com/JeremyRubin/bitcoin/tree/cuckoocache-pull-request-unsquashed ",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-267156841",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8895"
    },
    {
      "event": "mentioned",
      "id": 894298616,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODk0Mjk4NjE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/894298616",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-14T21:07:15Z"
    },
    {
      "event": "subscribed",
      "id": 894298617,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg5NDI5ODYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/894298617",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-14T21:07:15Z"
    },
    {
      "event": "merged",
      "id": 894611675,
      "node_id": "MDExOk1lcmdlZEV2ZW50ODk0NjExNjc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/894611675",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "created_at": "2016-12-15T02:14:18Z"
    },
    {
      "event": "closed",
      "id": 894611678,
      "node_id": "MDExOkNsb3NlZEV2ZW50ODk0NjExNjc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/894611678",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T02:14:18Z"
    },
    {
      "event": "referenced",
      "id": 894611785,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDg5NDYxMTc4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/894611785",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b83264d9c7a8ddb79f64bd9540caddc8632ef31f",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83264d9c7a8ddb79f64bd9540caddc8632ef31f",
      "created_at": "2016-12-15T02:14:25Z"
    },
    {
      "event": "referenced",
      "id": 1429829547,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0Mjk4Mjk1NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1429829547",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c1811e5661be2bb3cfbeb18d8de98a670e504e11",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/c1811e5661be2bb3cfbeb18d8de98a670e504e11",
      "created_at": "2018-01-18T07:37:38Z"
    },
    {
      "event": "referenced",
      "id": 1488760860,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0ODg3NjA4NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1488760860",
      "actor": {
        "login": "Warrows",
        "id": 835098,
        "node_id": "MDQ6VXNlcjgzNTA5OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/835098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Warrows",
        "html_url": "https://github.com/Warrows",
        "followers_url": "https://api.github.com/users/Warrows/followers",
        "following_url": "https://api.github.com/users/Warrows/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Warrows/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Warrows/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Warrows/subscriptions",
        "organizations_url": "https://api.github.com/users/Warrows/orgs",
        "repos_url": "https://api.github.com/users/Warrows/repos",
        "events_url": "https://api.github.com/users/Warrows/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Warrows/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3568fbeed6a5a5070b2f1fa32617346f036c01fb",
      "commit_url": "https://api.github.com/repos/Warrows/PIVX/commits/3568fbeed6a5a5070b2f1fa32617346f036c01fb",
      "created_at": "2018-02-23T09:58:45Z"
    },
    {
      "event": "referenced",
      "id": 1808924032,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE4MDg5MjQwMzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1808924032",
      "actor": {
        "login": "216k155",
        "id": 32459326,
        "node_id": "MDQ6VXNlcjMyNDU5MzI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32459326?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/216k155",
        "html_url": "https://github.com/216k155",
        "followers_url": "https://api.github.com/users/216k155/followers",
        "following_url": "https://api.github.com/users/216k155/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/216k155/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/216k155/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/216k155/subscriptions",
        "organizations_url": "https://api.github.com/users/216k155/orgs",
        "repos_url": "https://api.github.com/users/216k155/repos",
        "events_url": "https://api.github.com/users/216k155/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/216k155/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "29ffaf9ad7f41c1cffe7940d7bf725504751c99a",
      "commit_url": "https://api.github.com/repos/LUX-Core/lux/commits/29ffaf9ad7f41c1cffe7940d7bf725504751c99a",
      "created_at": "2018-08-25T09:05:15Z"
    },
    {
      "event": "referenced",
      "id": 2056235341,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIwNTYyMzUzNDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2056235341",
      "actor": {
        "login": "andvgal",
        "id": 6080632,
        "node_id": "MDQ6VXNlcjYwODA2MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6080632?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andvgal",
        "html_url": "https://github.com/andvgal",
        "followers_url": "https://api.github.com/users/andvgal/followers",
        "following_url": "https://api.github.com/users/andvgal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andvgal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andvgal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andvgal/subscriptions",
        "organizations_url": "https://api.github.com/users/andvgal/orgs",
        "repos_url": "https://api.github.com/users/andvgal/repos",
        "events_url": "https://api.github.com/users/andvgal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andvgal/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8de527d7d33dd16d4c3d916296c39540869b34ac",
      "commit_url": "https://api.github.com/repos/energicryptocurrency/gen2-energi/commits/8de527d7d33dd16d4c3d916296c39540869b34ac",
      "created_at": "2019-01-06T10:40:16Z"
    },
    {
      "event": "referenced",
      "id": 2165033957,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIxNjUwMzM5NTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2165033957",
      "actor": {
        "login": "CryptoCentric",
        "id": 38781794,
        "node_id": "MDQ6VXNlcjM4NzgxNzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38781794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptoCentric",
        "html_url": "https://github.com/CryptoCentric",
        "followers_url": "https://api.github.com/users/CryptoCentric/followers",
        "following_url": "https://api.github.com/users/CryptoCentric/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptoCentric/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptoCentric/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptoCentric/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptoCentric/orgs",
        "repos_url": "https://api.github.com/users/CryptoCentric/repos",
        "events_url": "https://api.github.com/users/CryptoCentric/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptoCentric/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e75257fdba9f2241086682400134ec1ed7c79710",
      "commit_url": "https://api.github.com/repos/absolute-community/absolute/commits/e75257fdba9f2241086682400134ec1ed7c79710",
      "created_at": "2019-02-26T14:34:15Z"
    },
    {
      "event": "referenced",
      "id": 3511168759,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MTExNjg3NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3511168759",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c072659135de79c3e617484e5a9aa689fe5aaf92",
      "commit_url": "https://api.github.com/repos/PIVX-Project/PIVX/commits/c072659135de79c3e617484e5a9aa689fe5aaf92",
      "created_at": "2020-07-03T14:01:29Z"
    },
    {
      "event": "referenced",
      "id": 4618123114,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2MTgxMjMxMTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4618123114",
      "actor": {
        "login": "zkbot",
        "id": 17032253,
        "node_id": "MDQ6VXNlcjE3MDMyMjUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/17032253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zkbot",
        "html_url": "https://github.com/zkbot",
        "followers_url": "https://api.github.com/users/zkbot/followers",
        "following_url": "https://api.github.com/users/zkbot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zkbot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zkbot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zkbot/subscriptions",
        "organizations_url": "https://api.github.com/users/zkbot/orgs",
        "repos_url": "https://api.github.com/users/zkbot/repos",
        "events_url": "https://api.github.com/users/zkbot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zkbot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bb6e5fad4c57864874b83e996e419f9efa82f681",
      "commit_url": "https://api.github.com/repos/zcash/zcash/commits/bb6e5fad4c57864874b83e996e419f9efa82f681",
      "created_at": "2021-04-20T09:47:44Z"
    },
    {
      "event": "locked",
      "id": 5271656642,
      "node_id": "LOE_lADOABII584KzgqLzwAAAAE6NxjC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271656642",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:23:37Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84566874",
      "pull_request_review_id": 5340391,
      "id": 84566874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTY2ODc0",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+    static_assert((sizeof(Element) % 32) == 0, \"Invalid Element Size.\");\n+\n+public:\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 60%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) % size,",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 216,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of size, store the log2 of the size, and use a bitshift or mask here. Modulus operations are very slow.\n",
      "created_at": "2016-10-22T01:22:50Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84566874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84566874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581083",
      "pull_request_review_id": 5352833,
      "id": 84581083,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTgxMDgz",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+    static_assert((sizeof(Element) % 32) == 0, \"Invalid Element Size.\");\n+\n+public:\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 60%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) % size,",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 216,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "in_reply_to_id": 84566874,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, this is a rather slow operation, but I don't quite fully understand your operation... doesn't that only work if you're at power of two size?\n",
      "created_at": "2016-10-22T17:12:03Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581083",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581146",
      "pull_request_review_id": 5352886,
      "id": 84581146,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTgxMTQ2",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+    static_assert((sizeof(Element) % 32) == 0, \"Invalid Element Size.\");\n+\n+public:\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 60%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) % size,",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 216,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes.\n",
      "created_at": "2016-10-22T17:15:12Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581354",
      "pull_request_review_id": 5353078,
      "id": 84581354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTgxMzU0",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+    static_assert((sizeof(Element) % 32) == 0, \"Invalid Element Size.\");\n+\n+public:\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 60%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) % size,",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 216,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "in_reply_to_id": 84581146,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unfortunately the size currently isn't restricted to be a power of two, and by default is not a power of two. Are you suggesting we limit it to be a power of two?\n",
      "created_at": "2016-10-22T17:28:25Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581401",
      "pull_request_review_id": 5353120,
      "id": 84581401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTgxNDAx",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+    static_assert((sizeof(Element) % 32) == 0, \"Invalid Element Size.\");\n+\n+public:\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 60%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) % size,",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 216,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes :) Sorry if that wasn't obvious. We could benchmark whether it matters compared to other operations of course, but restricting to a power of two means you at most get something that's a factor sqrt(2) off of your desired size, which seems acceptable for a cache.\n",
      "created_at": "2016-10-22T17:31:08Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581867",
      "pull_request_review_id": 5353560,
      "id": 84581867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTgxODY3",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+    static_assert((sizeof(Element) % 32) == 0, \"Invalid Element Size.\");\n+\n+public:\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 60%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) % size,",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 216,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "3ba2bf4ecca453e926754db35fb6ca3b8141c4e7",
      "in_reply_to_id": 84581401,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Apologies, long rambly response below:\n\nOverall, I think it's a reasonable idea to do this. Modulo is slow. It's not the bottleneck, but it's a low cost way to make this code faster.\n\nThere are a couple of weird things though. You have currently about 2 bits of bookkeeping overhead per entry (one bit for erasure, one bit for epoch). If you're restricting to a power of two size for the main cache memory, you also may as well do some of the following if the user specifies more space: more generations for finer grained generations; additional fee tracking to preferentially evict low fee items; some kind of mempool pointer/index map to evict signatures on mempool eviction. (preface: I don't like this idea, but for sake of discussion) You could also keep a large and a small cache and look up from both; letting you target size = 2^m + 2^n.\n\nAlso, power of two works reasonably well low in the series (1,2,4,8,16,32,64,128) but it seems to be kind of uncomfortably that at say a 1GB cache you have to choose between 1 and 2 GB if you want to increase a little bit. Yes, sqrt, but people have fixed memory sizes so it does kind of matter.\n\nMaybe a better inbetween would be to do as (roughly) follows (should work on GCC, clang, and msvc):\n\n```\nDEFAULT_MAX_SIGCACHE_SIZE = 32;\n#ifdef __MSC_VER\n#include <intrin.h>\n#define __builtin_popcount __popcnt\n#endif\nbool fast_mod = __builtin_popcount(size) == 1;\ncompute_hash(E e) {\n    if (fast_mod)\n        // compute hash with masks\n    else\n       // compute hash with mod\n}\n```\n\nand by default not count the bookkeeping bits in the size computation. That way if you pass in a power of two megabytes as the parameter, you get this magic boost in performance, and if you pass in a non power of two if you get what you asked for. The branch shouldn't hurt because it should be easily predicted.\n",
      "created_at": "2016-10-22T17:57:51Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84581867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86878082",
      "pull_request_review_id": 7513925,
      "id": 86878082,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2ODc4MDgy",
      "diff_hunk": "@@ -0,0 +1,451 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. ",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 84,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: You have some trailing whitespace on 3 lines in this file, including this one.\n",
      "created_at": "2016-11-07T21:53:25Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r86878082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86878082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86878499",
      "pull_request_review_id": 7513925,
      "id": 86878499,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2ODc4NDk5",
      "diff_hunk": "@@ -0,0 +1,451 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must",
      "path": "src/cuckoocache.h",
      "position": 33,
      "original_position": 32,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not use release/acquire - its identical instructions on x86 and wont require a full flush anywhere else to be correct (indeed, relaxed is maybe better the way its implemented now, but if we want the read/write locks in the sigcache to be more effecient we might not want to have a full flush there).\n",
      "created_at": "2016-11-07T21:55:26Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r86878499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86878499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87071931",
      "pull_request_review_id": 7513925,
      "id": 87071931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MDcxOTMx",
      "diff_hunk": "@@ -0,0 +1,451 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) & hash_mask,\n+                hash_function.template operator()<1>(e) & hash_mask,\n+                hash_function.template operator()<2>(e) & hash_mask,\n+                hash_function.template operator()<3>(e) & hash_mask,\n+                hash_function.template operator()<4>(e) & hash_mask,\n+                hash_function.template operator()<5>(e) & hash_mask,\n+                hash_function.template operator()<6>(e) & hash_mask,\n+                hash_function.template operator()<7>(e) & hash_mask};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)\n+            return;\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - std::min(epoch_size, epoch_unused_count)));\n+    }\n+\n+public:\n+    /** You must always construct a cache with some elements via a subsequent\n+     * call to setup or setup_bytes, otherwise operations may segfault.\n+     */\n+    cache() : table(), size(), collection_flags(0), epoch_flags(),\n+    epoch_heuristic_counter(), epoch_size(), depth_limit(0), hash_function()\n+    {\n+    }\n+\n+    /** setup initializes the container to store no more than new_size\n+     * elements. setup rounds down to a power of two size.\n+     *\n+     * setup should only be called once.\n+     *\n+     * @param new_size the desired number of elements to store\n+     * @returns the maximum number of elements storable\n+     **/\n+    uint32_t setup(uint32_t new_size)\n+    {\n+        // depth_limit must be at least one otherwise errors can occur.\n+        depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n+        size = 1 << depth_limit;\n+        hash_mask = size-1;\n+        table.resize(size);\n+        collection_flags.setup(size);\n+        epoch_flags.resize(size);\n+        // Set to 45% as described above\n+        epoch_size = std::max((uint32_t)1, (45 * size) / 100);\n+        // Initially set to wait for a whole epoch\n+        epoch_heuristic_counter = epoch_size;\n+        return size;\n+    }\n+\n+    /** setup_bytes is a convenience function which accounts for internal memory\n+     * usage when deciding how many elements to store. It isn't perfect because\n+     * it doesn't account for any overhead (struct size, MallocUsage, collection\n+     * and epoch flags). This was done to simplify selecting a power of two\n+     * size. In the expected use case, an extra two bits per entry should be\n+     * negligible compared to the size of the elements.\n+     *\n+     * @param bytes the approximate number of bytes to use for this data\n+     * structure.\n+     * @returns the maximum number of elements storable (see setup()\n+     * documentation for more detail)\n+     */\n+    uint32_t setup_bytes(size_t bytes)\n+    {\n+        return setup(bytes/sizeof(Element));\n+    }\n+\n+    /** insert loops at most depth_limit times trying to insert a hash\n+     * at various locations in the table via a variant of the Cuckoo Algorithm\n+     * with two hash locations.\n+     *\n+     * It drops the last tried element if it runs out of depth before\n+     * encountering an open slot.\n+     *\n+     * Thus\n+     *\n+     * insert(x);\n+     * return contains(x, false);\n+     *\n+     * is not guaranteed to return true.\n+     *\n+     * @param e the element to insert\n+     * @post one of the following: All previously inserted elements and e are\n+     * now in the table, one previously inserted element is evicted from the\n+     * table, the entry attempted to be inserted is evicted.\n+     *\n+     */\n+    inline void insert(Element e)",
      "path": "src/cuckoocache.h",
      "position": 368,
      "original_position": 363,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems to be a strange api to require that a copy be made as the parameter in the function, and then rely on std::move to make insertion effecient (which we cant do for uint256, since it doesnt have any non-POD memory). Seems just as good (and much more common) to pass in a const-reference and then just let operator=() handle the copy.\n",
      "created_at": "2016-11-08T20:03:22Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r87071931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87071931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 368,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88109729",
      "pull_request_review_id": 8693054,
      "id": 88109729,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTA5NzI5",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 152,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "5ec14c8b4a4d00ee654bb342d3f37f09e0264cfa",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where does the requirement for POD come from?\n",
      "created_at": "2016-11-15T20:49:36Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88109729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88109729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88128072",
      "pull_request_review_id": 8693054,
      "id": 88128072,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTI4MDcy",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)",
      "path": "src/cuckoocache.h",
      "position": 144,
      "original_position": 143,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason why these locks aren't integrated into the cache class? It isn't obvious to be how to correctly synchronize the erase method with the rest.\n",
      "created_at": "2016-11-15T22:24:38Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88128072",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88128072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88169538",
      "pull_request_review_id": 8750626,
      "id": 88169538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTY5NTM4",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)",
      "path": "src/cuckoocache.h",
      "position": 144,
      "original_position": 143,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88128072,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes there is a reason.\n\nThe locks aren't actually needed at all how the cache is currently used. All that needs to happen is per thread: at the beginning of a block processing, a memory acquire; at the end of block processing a memory release. Additionally, one more lock must be acquired before block processing by the master to ensure that there are no concurrent writers (from addtomempool) and that master must not release until all slaves release as well. This is much better than the repeated acquire/release of locking/unlocking on every single signature operation.\n\nI have written a version of the code which has this semantics, but some feedback from others felt that it was fragile & prone to someone else breaking that behavior down the line (bad for maintainability). In the interest of keeping that optimization available and not introducing a maintenance hazard, I kept the locking where it was in the \"layer up\".\n",
      "created_at": "2016-11-16T05:11:24Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88169538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88169538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88169799",
      "pull_request_review_id": 8750868,
      "id": 88169799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTY5Nzk5",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 152,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "5ec14c8b4a4d00ee654bb342d3f37f09e0264cfa",
      "in_reply_to_id": 88109729,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose the way it is currently written (using swap and move) it should be safe to remove both requirements (POD and 32-alignable). \n\nPrior versions of the code I think were unsafe for that use case.\n",
      "created_at": "2016-11-16T05:15:35Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88169799",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88169799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88169876",
      "pull_request_review_id": 8750929,
      "id": 88169876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTY5ODc2",
      "diff_hunk": "@@ -0,0 +1,450 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 152,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "5ec14c8b4a4d00ee654bb342d3f37f09e0264cfa",
      "in_reply_to_id": 88109729,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(I can do a squashme with just that unless you have other small feedbacks)\n",
      "created_at": "2016-11-16T05:16:43Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88169876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88169876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88608234",
      "pull_request_review_id": 7513925,
      "id": 88608234,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjA4MjM0",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)\n+            return;\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - std::min(epoch_size, epoch_unused_count)));",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 291,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The std::min should be a NOP. we're in an else(epoch_size > epoch_unused_count).\n",
      "created_at": "2016-11-18T07:03:44Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88608234",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88608234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609415",
      "pull_request_review_id": 7513925,
      "id": 88609415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjA5NDE1",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 121,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: technically it can hold up to (~(uint32_t) 1) - 1, because invalid() uses ~(uint32_t) 1, though I think you meant to use 0.\n",
      "created_at": "2016-11-18T07:18:25Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609480",
      "pull_request_review_id": 7513925,
      "id": 88609480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjA5NDgw",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 135,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "rehash has been removed in this version of the patch (and you might only list public methods? up to you).\n",
      "created_at": "2016-11-18T07:19:21Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609545",
      "pull_request_review_id": 7513925,
      "id": 88609545,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjA5NTQ1",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 146,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe this also refers to an old/different version of this patch.\n",
      "created_at": "2016-11-18T07:20:20Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609605",
      "pull_request_review_id": 7513925,
      "id": 88609605,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjA5NjA1",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 156,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also now out-of-date: you're using 8 hashes.\n",
      "created_at": "2016-11-18T07:21:01Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609668",
      "pull_request_review_id": 7513925,
      "id": 88609668,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjA5NjY4",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 180,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/incremented/decremented/\n",
      "created_at": "2016-11-18T07:21:47Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609668",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609959",
      "pull_request_review_id": 7513925,
      "id": 88609959,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjA5OTU5",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 267,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: technically this is an off-by-one: because you check this prior to actually doing the insert you'll always do an \"expensive\" scan twice for the first (and all) epochs. Practically, you might just want to set epoch_heuristic_count to something like epoch_size + 10 by default, though I suppose it doesnt matter all that much.\n",
      "created_at": "2016-11-18T07:25:36Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88609959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88610039",
      "pull_request_review_id": 7513925,
      "id": 88610039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjEwMDM5",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)\n+            return;\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - std::min(epoch_size, epoch_unused_count)));\n+    }\n+\n+public:\n+    /** You must always construct a cache with some elements via a subsequent\n+     * call to setup or setup_bytes, otherwise operations may segfault.\n+     */\n+    cache() : table(), size(), collection_flags(0), epoch_flags(),\n+    epoch_heuristic_counter(), epoch_size(), depth_limit(0), hash_function()\n+    {\n+    }\n+\n+    /** setup initializes the container to store no more than new_size\n+     * elements. setup rounds down to a power of two size.\n+     *\n+     * setup should only be called once.\n+     *\n+     * @param new_size the desired number of elements to store\n+     * @returns the maximum number of elements storable\n+     **/\n+    uint32_t setup(uint32_t new_size)\n+    {\n+        // depth_limit must be at least one otherwise errors can occur.\n+        depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n+        size = 1 << depth_limit;\n+        hash_mask = size-1;\n+        table.resize(size);\n+        collection_flags.setup(size);\n+        epoch_flags.resize(size);\n+        // Set to 45% as described above\n+        epoch_size = std::max((uint32_t)1, (45 * size) / 100);\n+        // Initially set to wait for a whole epoch\n+        epoch_heuristic_counter = epoch_size;\n+        return size;\n+    }\n+\n+    /** setup_bytes is a convenience function which accounts for internal memory\n+     * usage when deciding how many elements to store. It isn't perfect because\n+     * it doesn't account for any overhead (struct size, MallocUsage, collection\n+     * and epoch flags). This was done to simplify selecting a power of two\n+     * size. In the expected use case, an extra two bits per entry should be\n+     * negligible compared to the size of the elements.\n+     *\n+     * @param bytes the approximate number of bytes to use for this data\n+     * structure.\n+     * @returns the maximum number of elements storable (see setup()\n+     * documentation for more detail)\n+     */\n+    uint32_t setup_bytes(size_t bytes)\n+    {\n+        return setup(bytes/sizeof(Element));\n+    }\n+\n+    /** insert loops at most depth_limit times trying to insert a hash\n+     * at various locations in the table via a variant of the Cuckoo Algorithm\n+     * with two hash locations.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 346,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/two/eight/\n",
      "created_at": "2016-11-18T07:26:36Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88610039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88610039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90349719",
      "pull_request_review_id": 10870128,
      "id": 90349719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzQ5NzE5",
      "diff_hunk": "@@ -0,0 +1,451 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must",
      "path": "src/cuckoocache.h",
      "position": 33,
      "original_position": 32,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "in_reply_to_id": 86878499,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right it's the same on x86, but it isn't for ARM. We want the operation to be relaxed, so release or acquire are over constrained.\r\n\r\nIf later changes want to change the memory model, they should do so then. It's hard to say if a full flush is better or worse than lots of release/acquires; that would require benchmarking.\r\n\r\natomic instruction mappings: https://www.cl.cam.ac.uk/~pes20/cpp/cpp0xmappings.html",
      "created_at": "2016-11-30T23:05:43Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90349719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90349719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350020",
      "pull_request_review_id": 10870434,
      "id": 90350020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUwMDIw",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 121,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88609415,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought there was a reason I used `~(uint32_t) 1` rather than `~(uint32_t) 0`, but for the life of me can't recall it. Will change it to be that, but would appreciate you to review that there was no reason.",
      "created_at": "2016-11-30T23:07:36Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350121",
      "pull_request_review_id": 10870541,
      "id": 90350121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUwMTIx",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)\n+            return;\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - std::min(epoch_size, epoch_unused_count)));\n+    }\n+\n+public:\n+    /** You must always construct a cache with some elements via a subsequent\n+     * call to setup or setup_bytes, otherwise operations may segfault.\n+     */\n+    cache() : table(), size(), collection_flags(0), epoch_flags(),\n+    epoch_heuristic_counter(), epoch_size(), depth_limit(0), hash_function()\n+    {\n+    }\n+\n+    /** setup initializes the container to store no more than new_size\n+     * elements. setup rounds down to a power of two size.\n+     *\n+     * setup should only be called once.\n+     *\n+     * @param new_size the desired number of elements to store\n+     * @returns the maximum number of elements storable\n+     **/\n+    uint32_t setup(uint32_t new_size)\n+    {\n+        // depth_limit must be at least one otherwise errors can occur.\n+        depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n+        size = 1 << depth_limit;\n+        hash_mask = size-1;\n+        table.resize(size);\n+        collection_flags.setup(size);\n+        epoch_flags.resize(size);\n+        // Set to 45% as described above\n+        epoch_size = std::max((uint32_t)1, (45 * size) / 100);\n+        // Initially set to wait for a whole epoch\n+        epoch_heuristic_counter = epoch_size;\n+        return size;\n+    }\n+\n+    /** setup_bytes is a convenience function which accounts for internal memory\n+     * usage when deciding how many elements to store. It isn't perfect because\n+     * it doesn't account for any overhead (struct size, MallocUsage, collection\n+     * and epoch flags). This was done to simplify selecting a power of two\n+     * size. In the expected use case, an extra two bits per entry should be\n+     * negligible compared to the size of the elements.\n+     *\n+     * @param bytes the approximate number of bytes to use for this data\n+     * structure.\n+     * @returns the maximum number of elements storable (see setup()\n+     * documentation for more detail)\n+     */\n+    uint32_t setup_bytes(size_t bytes)\n+    {\n+        return setup(bytes/sizeof(Element));\n+    }\n+\n+    /** insert loops at most depth_limit times trying to insert a hash\n+     * at various locations in the table via a variant of the Cuckoo Algorithm\n+     * with two hash locations.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 346,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88610039,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 ",
      "created_at": "2016-11-30T23:08:17Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350176",
      "pull_request_review_id": 10870593,
      "id": 90350176,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUwMTc2",
      "diff_hunk": "@@ -0,0 +1,451 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. ",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 84,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "in_reply_to_id": 86878082,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍\r\n",
      "created_at": "2016-11-30T23:08:35Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350192",
      "pull_request_review_id": 10870610,
      "id": 90350192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUwMTky",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 135,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88609480,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 ",
      "created_at": "2016-11-30T23:08:43Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350192",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350215",
      "pull_request_review_id": 10870631,
      "id": 90350215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUwMjE1",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 156,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88609605,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 ",
      "created_at": "2016-11-30T23:08:54Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90350215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90351639",
      "pull_request_review_id": 10871980,
      "id": 90351639,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUxNjM5",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 146,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88609545,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's correct? I'll try to clarify.",
      "created_at": "2016-11-30T23:19:06Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90351639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90351639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90352042",
      "pull_request_review_id": 10872345,
      "id": 90352042,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUyMDQy",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 180,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88609668,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 ",
      "created_at": "2016-11-30T23:21:55Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90352042",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90352042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90353115",
      "pull_request_review_id": 10873311,
      "id": 90353115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUzMTE1",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 267,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88609959,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 -- I fixed it, I think, by decrementing inside the if block. (didn't want to do postfix to stop the counter from underflowing)",
      "created_at": "2016-11-30T23:28:35Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90353115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90353115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90353967",
      "pull_request_review_id": 10874116,
      "id": 90353967,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzUzOTY3",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)\n+            return;\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - std::min(epoch_size, epoch_unused_count)));",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 291,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88608234,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 ",
      "created_at": "2016-11-30T23:34:46Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90353967",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90353967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90354121",
      "pull_request_review_id": 10874268,
      "id": 90354121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzU0MTIx",
      "diff_hunk": "@@ -0,0 +1,451 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) & hash_mask,\n+                hash_function.template operator()<1>(e) & hash_mask,\n+                hash_function.template operator()<2>(e) & hash_mask,\n+                hash_function.template operator()<3>(e) & hash_mask,\n+                hash_function.template operator()<4>(e) & hash_mask,\n+                hash_function.template operator()<5>(e) & hash_mask,\n+                hash_function.template operator()<6>(e) & hash_mask,\n+                hash_function.template operator()<7>(e) & hash_mask};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)\n+            return;\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - std::min(epoch_size, epoch_unused_count)));\n+    }\n+\n+public:\n+    /** You must always construct a cache with some elements via a subsequent\n+     * call to setup or setup_bytes, otherwise operations may segfault.\n+     */\n+    cache() : table(), size(), collection_flags(0), epoch_flags(),\n+    epoch_heuristic_counter(), epoch_size(), depth_limit(0), hash_function()\n+    {\n+    }\n+\n+    /** setup initializes the container to store no more than new_size\n+     * elements. setup rounds down to a power of two size.\n+     *\n+     * setup should only be called once.\n+     *\n+     * @param new_size the desired number of elements to store\n+     * @returns the maximum number of elements storable\n+     **/\n+    uint32_t setup(uint32_t new_size)\n+    {\n+        // depth_limit must be at least one otherwise errors can occur.\n+        depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n+        size = 1 << depth_limit;\n+        hash_mask = size-1;\n+        table.resize(size);\n+        collection_flags.setup(size);\n+        epoch_flags.resize(size);\n+        // Set to 45% as described above\n+        epoch_size = std::max((uint32_t)1, (45 * size) / 100);\n+        // Initially set to wait for a whole epoch\n+        epoch_heuristic_counter = epoch_size;\n+        return size;\n+    }\n+\n+    /** setup_bytes is a convenience function which accounts for internal memory\n+     * usage when deciding how many elements to store. It isn't perfect because\n+     * it doesn't account for any overhead (struct size, MallocUsage, collection\n+     * and epoch flags). This was done to simplify selecting a power of two\n+     * size. In the expected use case, an extra two bits per entry should be\n+     * negligible compared to the size of the elements.\n+     *\n+     * @param bytes the approximate number of bytes to use for this data\n+     * structure.\n+     * @returns the maximum number of elements storable (see setup()\n+     * documentation for more detail)\n+     */\n+    uint32_t setup_bytes(size_t bytes)\n+    {\n+        return setup(bytes/sizeof(Element));\n+    }\n+\n+    /** insert loops at most depth_limit times trying to insert a hash\n+     * at various locations in the table via a variant of the Cuckoo Algorithm\n+     * with two hash locations.\n+     *\n+     * It drops the last tried element if it runs out of depth before\n+     * encountering an open slot.\n+     *\n+     * Thus\n+     *\n+     * insert(x);\n+     * return contains(x, false);\n+     *\n+     * is not guaranteed to return true.\n+     *\n+     * @param e the element to insert\n+     * @post one of the following: All previously inserted elements and e are\n+     * now in the table, one previously inserted element is evicted from the\n+     * table, the entry attempted to be inserted is evicted.\n+     *\n+     */\n+    inline void insert(Element e)",
      "path": "src/cuckoocache.h",
      "position": 368,
      "original_position": 363,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "in_reply_to_id": 87071931,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We also do a std::swap on e so that's why we have a mutable copy.",
      "created_at": "2016-11-30T23:36:00Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90354121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90354121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 368,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90372345",
      "pull_request_review_id": 10891633,
      "id": 90372345,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzcyMzQ1",
      "diff_hunk": "@@ -0,0 +1,451 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a POD type that is 32-alignable\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) and h<1>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch\n+     * might be aged & an expensive scan should be done.\n+     * epoch_heuristic_counter is incremented on insert and reset to the\n+     * new number of inserts which would cause the epoch to reach\n+     * epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1 \n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {hash_function.template operator()<0>(e) & hash_mask,\n+                hash_function.template operator()<1>(e) & hash_mask,\n+                hash_function.template operator()<2>(e) & hash_mask,\n+                hash_function.template operator()<3>(e) & hash_mask,\n+                hash_function.template operator()<4>(e) & hash_mask,\n+                hash_function.template operator()<5>(e) & hash_mask,\n+                hash_function.template operator()<6>(e) & hash_mask,\n+                hash_function.template operator()<7>(e) & hash_mask};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)1;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if ((--epoch_heuristic_counter) != 0)\n+            return;\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - std::min(epoch_size, epoch_unused_count)));\n+    }\n+\n+public:\n+    /** You must always construct a cache with some elements via a subsequent\n+     * call to setup or setup_bytes, otherwise operations may segfault.\n+     */\n+    cache() : table(), size(), collection_flags(0), epoch_flags(),\n+    epoch_heuristic_counter(), epoch_size(), depth_limit(0), hash_function()\n+    {\n+    }\n+\n+    /** setup initializes the container to store no more than new_size\n+     * elements. setup rounds down to a power of two size.\n+     *\n+     * setup should only be called once.\n+     *\n+     * @param new_size the desired number of elements to store\n+     * @returns the maximum number of elements storable\n+     **/\n+    uint32_t setup(uint32_t new_size)\n+    {\n+        // depth_limit must be at least one otherwise errors can occur.\n+        depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n+        size = 1 << depth_limit;\n+        hash_mask = size-1;\n+        table.resize(size);\n+        collection_flags.setup(size);\n+        epoch_flags.resize(size);\n+        // Set to 45% as described above\n+        epoch_size = std::max((uint32_t)1, (45 * size) / 100);\n+        // Initially set to wait for a whole epoch\n+        epoch_heuristic_counter = epoch_size;\n+        return size;\n+    }\n+\n+    /** setup_bytes is a convenience function which accounts for internal memory\n+     * usage when deciding how many elements to store. It isn't perfect because\n+     * it doesn't account for any overhead (struct size, MallocUsage, collection\n+     * and epoch flags). This was done to simplify selecting a power of two\n+     * size. In the expected use case, an extra two bits per entry should be\n+     * negligible compared to the size of the elements.\n+     *\n+     * @param bytes the approximate number of bytes to use for this data\n+     * structure.\n+     * @returns the maximum number of elements storable (see setup()\n+     * documentation for more detail)\n+     */\n+    uint32_t setup_bytes(size_t bytes)\n+    {\n+        return setup(bytes/sizeof(Element));\n+    }\n+\n+    /** insert loops at most depth_limit times trying to insert a hash\n+     * at various locations in the table via a variant of the Cuckoo Algorithm\n+     * with two hash locations.\n+     *\n+     * It drops the last tried element if it runs out of depth before\n+     * encountering an open slot.\n+     *\n+     * Thus\n+     *\n+     * insert(x);\n+     * return contains(x, false);\n+     *\n+     * is not guaranteed to return true.\n+     *\n+     * @param e the element to insert\n+     * @post one of the following: All previously inserted elements and e are\n+     * now in the table, one previously inserted element is evicted from the\n+     * table, the entry attempted to be inserted is evicted.\n+     *\n+     */\n+    inline void insert(Element e)",
      "path": "src/cuckoocache.h",
      "position": 368,
      "original_position": 363,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "453aef404b8692294d9e659f456cc8370174432c",
      "in_reply_to_id": 87071931,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "std::swap is just as slow for uint256, though. Since there is no dynamically-allocated memory we cant speed it up, really.",
      "created_at": "2016-12-01T02:23:05Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90372345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90372345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 368,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90372617",
      "pull_request_review_id": 10891900,
      "id": 90372617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzcyNjE3",
      "diff_hunk": "@@ -0,0 +1,452 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable. \n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten  \n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t) 1) elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read/Erase Operations:\n+ *      - contains(*, true)\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *      - rehash()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Eraser must release all Erases before allowing a new Writer.",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 146,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "78f1c92e5c363725ed1d1a9e47a9e27bb0c7c073",
      "in_reply_to_id": 88609545,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, indeed, I believe I was mistaken.",
      "created_at": "2016-12-01T02:26:17Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90372617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90372617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91376264",
      "pull_request_review_id": 11885055,
      "id": 91376264,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMzc2MjY0",
      "diff_hunk": "@@ -0,0 +1,457 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable.\n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten\n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t)0) - 1 elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read+Erase Operations:\n+ *      - contains(*, true)\n+ *\n+ *  Erase Operations:\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Erase caller must release all memory before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a movable and copyable type\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) ... h<7>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch might be aged\n+     * & an expensive scan should be done.  epoch_heuristic_counter is\n+     * decremented on insert and reset to the new number of inserts which would\n+     * cause the epoch to reach epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1\n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)0;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if (epoch_heuristic_counter != 0) {\n+            --epoch_heuristic_counter;\n+            return;\n+        }\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            // Ordinarily, we would have to sanity check std::min(epoch_size,\n+            // epoch_unused_count), but we already know that `epoch_unused_count\n+            // < epoch_size` in this branch\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - epoch_unused_count));\n+    }\n+\n+public:\n+    /** You must always construct a cache with some elements via a subsequent\n+     * call to setup or setup_bytes, otherwise operations may segfault.\n+     */\n+    cache() : table(), size(), collection_flags(0), epoch_flags(),\n+    epoch_heuristic_counter(), epoch_size(), depth_limit(0), hash_function()\n+    {\n+    }\n+\n+    /** setup initializes the container to store no more than new_size\n+     * elements. setup rounds down to a power of two size.\n+     *\n+     * setup should only be called once.\n+     *\n+     * @param new_size the desired number of elements to store\n+     * @returns the maximum number of elements storable\n+     **/\n+    uint32_t setup(uint32_t new_size)\n+    {\n+        // depth_limit must be at least one otherwise errors can occur.\n+        depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n+        size = 1 << depth_limit;\n+        hash_mask = size-1;\n+        table.resize(size);\n+        collection_flags.setup(size);\n+        epoch_flags.resize(size);\n+        // Set to 45% as described above\n+        epoch_size = std::max((uint32_t)1, (45 * size) / 100);\n+        // Initially set to wait for a whole epoch\n+        epoch_heuristic_counter = epoch_size;\n+        return size;\n+    }\n+\n+    /** setup_bytes is a convenience function which accounts for internal memory\n+     * usage when deciding how many elements to store. It isn't perfect because\n+     * it doesn't account for any overhead (struct size, MallocUsage, collection\n+     * and epoch flags). This was done to simplify selecting a power of two\n+     * size. In the expected use case, an extra two bits per entry should be\n+     * negligible compared to the size of the elements.\n+     *\n+     * @param bytes the approximate number of bytes to use for this data\n+     * structure.\n+     * @returns the maximum number of elements storable (see setup()\n+     * documentation for more detail)\n+     */\n+    uint32_t setup_bytes(size_t bytes)\n+    {\n+        return setup(bytes/sizeof(Element));\n+    }\n+\n+    /** insert loops at most depth_limit times trying to insert a hash\n+     * at various locations in the table via a variant of the Cuckoo Algorithm\n+     * with eight hash locations.\n+     *\n+     * It drops the last tried element if it runs out of depth before\n+     * encountering an open slot.\n+     *\n+     * Thus\n+     *\n+     * insert(x);\n+     * return contains(x, false);\n+     *\n+     * is not guaranteed to return true.\n+     *\n+     * @param e the element to insert\n+     * @post one of the following: All previously inserted elements and e are\n+     * now in the table, one previously inserted element is evicted from the\n+     * table, the entry attempted to be inserted is evicted.\n+     *\n+     */\n+    inline void insert(Element e)\n+    {\n+        epoch_check();\n+        uint32_t last_loc = invalid();\n+        bool last_epoch = true;\n+        std::array<uint32_t, 8> locs = compute_hashes(e);\n+        // Make sure we have not already inserted this element\n+        // If we have, make sure that it does not get deleted\n+        for (uint32_t loc : locs)\n+            if (table[loc] == e) {\n+                please_keep(loc);\n+                epoch_flags[loc] = last_epoch;\n+                return;\n+            }\n+        for (uint8_t depth = 0; depth < depth_limit; ++depth) {\n+            // First try to insert to an empty slot, if one exists\n+            for (uint32_t loc : locs) {\n+                if (!collection_flags.bit_is_set(loc))\n+                    continue;\n+                table[loc] = std::move(e);\n+                please_keep(loc);\n+                epoch_flags[loc] = last_epoch;\n+                return;\n+            }\n+            /** Swap with the element at the location that was\n+            * not the last one looked at. Example:\n+            *\n+            * 1) On first iter, always false so defaults to locs[0]\n+            * 2) Second iter, last_loc == locs[0] so will go to locs[1]\n+            *",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 398,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "88b58d3c8d840924c8cfb556db994f71dfe6ad13",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this comment needs to be updated now that we have more than 2 hashes, right?  If I understand right, the algorithm now is:\r\n```\r\nSwap with the element one past the last one looked at.  Example:\r\n\r\n1) On first iter, always false so defaults to locs[0].\r\n2) Second iter, last_loc == locs[k] for some k, so will go to locs[k+1] (wrapping back to 0 if necessary).\r\n```",
      "created_at": "2016-12-07T20:08:03Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91376264",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91376264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 400,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91377235",
      "pull_request_review_id": 11885055,
      "id": 91377235,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMzc3MjM1",
      "diff_hunk": "@@ -0,0 +1,457 @@\n+// Copyright (c) 2016 Jeremy Rubin\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOIN_CUCKOOCACHE_H_\n+#define _BITCOIN_CUCKOOCACHE_H_\n+\n+#include <array>\n+#include <algorithm>\n+#include <atomic>\n+#include <cstring>\n+#include <cmath>\n+#include <memory>\n+#include <vector>\n+\n+\n+/** namespace CuckooCache provides high performance cache primitives\n+ *\n+ * Summary:\n+ *\n+ * 1) bit_packed_atomic_flags is bit-packed atomic flags for garbage collection\n+ *\n+ * 2) cache is a cache which is performant in memory usage and lookup speed. It\n+ * is lockfree for erase operations. Elements are lazily erased on the next\n+ * insert.\n+ */\n+namespace CuckooCache\n+{\n+/** bit_packed_atomic_flags implements a container for garbage collection flags\n+ * that is only thread unsafe on calls to setup. This class bit-packs collection\n+ * flags for memory efficiency.\n+ *\n+ * All operations are std::memory_order_relaxed so external mechanisms must\n+ * ensure that writes and reads are properly synchronized.\n+ *\n+ * On setup(n), all bits up to n are marked as collected.\n+ *\n+ * Under the hood, because it is an 8-bit type, it makes sense to use a multiple\n+ * of 8 for setup, but it will be safe if that is not the case as well.\n+ *\n+ */\n+class bit_packed_atomic_flags\n+{\n+    std::unique_ptr<std::atomic<uint8_t>[]> mem;\n+\n+public:\n+    /** No default constructor as there must be some size */\n+    bit_packed_atomic_flags() = delete;\n+\n+    /**\n+     * bit_packed_atomic_flags constructor creates memory to sufficiently\n+     * keep track of garbage collection information for size entries.\n+     *\n+     * @param size the number of elements to allocate space for\n+     *\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * size\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    bit_packed_atomic_flags(uint32_t size)\n+    {\n+        // pad out the size if needed\n+        size = (size + 7) / 8;\n+        mem.reset(new std::atomic<uint8_t>[size]);\n+        for (uint32_t i = 0; i < size; ++i)\n+            mem[i].store(0xFF);\n+    };\n+\n+    /** setup marks all entries and ensures that bit_packed_atomic_flags can store\n+     * at least size entries\n+     *\n+     * @param b the number of elements to allocate space for\n+     * @post bit_set, bit_unset, and bit_is_set function properly forall x. x <\n+     * b\n+     * @post All calls to bit_is_set (without subsequent bit_unset) will return\n+     * true.\n+     */\n+    inline void setup(uint32_t b)\n+    {\n+        bit_packed_atomic_flags d(b);\n+        std::swap(mem, d.mem);\n+    }\n+\n+    /** bit_set sets an entry as discardable.\n+     *\n+     * @param s the index of the entry to bit_set.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == true.\n+     *\n+     */\n+    inline void bit_set(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);\n+    }\n+\n+    /**  bit_unset marks an entry as something that should not be overwritten\n+     *\n+     * @param s the index of the entry to bit_unset.\n+     * @post immediately subsequent call (assuming proper external memory\n+     * ordering) to bit_is_set(s) == false.\n+     */\n+    inline void bit_unset(uint32_t s)\n+    {\n+        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);\n+    }\n+\n+    /** bit_is_set queries the table for discardability at s\n+     *\n+     * @param s the index of the entry to read.\n+     * @returns if the bit at index s was set.\n+     * */\n+    inline bool bit_is_set(uint32_t s) const\n+    {\n+        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);\n+    }\n+};\n+\n+/** cache implements a cache with properties similar to a cuckoo-set\n+ *\n+ *  The cache is able to hold up to (~(uint32_t)0) - 1 elements.\n+ *\n+ *  Read Operations:\n+ *      - contains(*, false)\n+ *\n+ *  Read+Erase Operations:\n+ *      - contains(*, true)\n+ *\n+ *  Erase Operations:\n+ *      - allow_erase()\n+ *\n+ *  Write Operations:\n+ *      - setup()\n+ *      - setup_bytes()\n+ *      - insert()\n+ *      - please_keep()\n+ *\n+ *  Synchronization Free Operations:\n+ *      - invalid()\n+ *      - compute_hashes()\n+ *\n+ * User Must Guarantee:\n+ *\n+ * 1) Write Requires synchronized access (e.g., a lock)\n+ * 2) Read Requires no concurrent Write, synchronized with the last insert.\n+ * 3) Erase requires no concurrent Write, synchronized with last insert.\n+ * 4) An Erase caller must release all memory before allowing a new Writer.\n+ *\n+ *\n+ * Note on function names:\n+ *   - The name \"allow_erase\" is used because the real discard happens later.\n+ *   - The name \"please_keep\" is used because elements may be erased anyways on insert.\n+ *\n+ * @tparam Element should be a movable and copyable type\n+ * @tparam Hash should be a function/callable which takes a template parameter\n+ * hash_select and an Element and extracts a hash from it. Should return\n+ * high-entropy hashes for `Hash h; h<0>(e) ... h<7>(e)`.\n+ */\n+template <typename Element, typename Hash>\n+class cache\n+{\n+private:\n+    /** table stores all the elements */\n+    std::vector<Element> table;\n+\n+    /** size stores the total available slots in the hash table */\n+    uint32_t size;\n+\n+    /** The bit_packed_atomic_flags array is marked mutable because we want\n+     * garbage collection to be allowed to occur from const methods */\n+    mutable bit_packed_atomic_flags collection_flags;\n+\n+    /** epoch_flags tracks how recently an element was inserted into\n+     * the cache. true denotes recent, false denotes not-recent. See insert()\n+     * method for full semantics.\n+     */\n+    mutable std::vector<bool> epoch_flags;\n+\n+    /** epoch_heuristic_counter is used to determine when a epoch might be aged\n+     * & an expensive scan should be done.  epoch_heuristic_counter is\n+     * decremented on insert and reset to the new number of inserts which would\n+     * cause the epoch to reach epoch_size when it reaches zero.\n+     */\n+    uint32_t epoch_heuristic_counter;\n+\n+    /** epoch_size is set to be the number of elements supposed to be in a\n+     * epoch. When the number of non-erased elements in a epoch\n+     * exceeds epoch_size, a new epoch should be started and all\n+     * current entries demoted. epoch_size is set to be 45% of size because\n+     * we want to keep load around 90%, and we support 3 epochs at once --\n+     * one \"dead\" which has been erased, one \"dying\" which has been marked to be\n+     * erased next, and one \"living\" which new inserts add to.\n+     */\n+    uint32_t epoch_size;\n+\n+    /** hash_mask should be set to appropriately mask out a hash such that every\n+     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n+     * should be (1<<20)-1\n+     */\n+    uint32_t hash_mask;\n+\n+    /** depth_limit determines how many elements insert should try to replace.\n+     * Should be set to log2(n)*/\n+    uint8_t depth_limit;\n+\n+\n+    /** hash_function is a const instance of the hash function. It cannot be\n+     * static or initialized at call time as it may have internal state (such as\n+     * a nonce).\n+     * */\n+    const Hash hash_function;\n+\n+    /** compute_hashes is convenience for not having to write out this\n+     * expression everywhere we use the hash values of an Element.\n+     *\n+     * @param e the element whose hashes will be returned\n+     * @returns std::array<uint32_t, 8> of deterministic hashes derived from e\n+     */\n+    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n+    {\n+        return {{hash_function.template operator()<0>(e) & hash_mask,\n+                 hash_function.template operator()<1>(e) & hash_mask,\n+                 hash_function.template operator()<2>(e) & hash_mask,\n+                 hash_function.template operator()<3>(e) & hash_mask,\n+                 hash_function.template operator()<4>(e) & hash_mask,\n+                 hash_function.template operator()<5>(e) & hash_mask,\n+                 hash_function.template operator()<6>(e) & hash_mask,\n+                 hash_function.template operator()<7>(e) & hash_mask}};\n+    }\n+\n+    /* end\n+     * @returns a constexpr index that can never be inserted to */\n+    constexpr uint32_t invalid() const\n+    {\n+        return ~(uint32_t)0;\n+    }\n+\n+    /** allow_erase marks the element at index n as discardable. Threadsafe\n+     * without any concurrent insert.\n+     * @param n the index to allow erasure of\n+     */\n+    inline void allow_erase(uint32_t n) const\n+    {\n+        collection_flags.bit_set(n);\n+    }\n+\n+    /** please_keep marks the element at index n as an entry that should be kept.\n+     * Threadsafe without any concurrent insert.\n+     * @param n the index to prioritize keeping\n+     */\n+    inline void please_keep(uint32_t n) const\n+    {\n+        collection_flags.bit_unset(n);\n+    }\n+\n+    /** epoch_check handles the changing of epochs for elements stored in the\n+     * cache. epoch_check should be run before every insert.\n+     *\n+     * First, epoch_check decrements and checks the cheap heuristic, and then does\n+     * a more expensive scan if the cheap heuristic runs out. If the expensive\n+     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * cheap heuristic is reset to retrigger after the worst case growth of the\n+     * current epoch's elements would exceed the epoch_size.\n+     */\n+    void epoch_check()\n+    {\n+        if (epoch_heuristic_counter != 0) {\n+            --epoch_heuristic_counter;\n+            return;\n+        }\n+        // count the number of elements from the latest epoch which\n+        // have not been erased.\n+        uint32_t epoch_unused_count = 0;\n+        for (uint32_t i = 0; i < size; ++i)\n+            epoch_unused_count += epoch_flags[i] &&\n+                                  !collection_flags.bit_is_set(i);\n+        // If there are more non-deleted entries in the current epoch than the\n+        // epoch size, then allow_erase on all elements in the old epoch (marked\n+        // false) and move all elements in the current epoch to the old epoch\n+        // but do not call allow_erase on their indices.\n+        if (epoch_unused_count >= epoch_size) {\n+            for (uint32_t i = 0; i < size; ++i)\n+                if (epoch_flags[i])\n+                    epoch_flags[i] = false;\n+                else\n+                    allow_erase(i);\n+            epoch_heuristic_counter = epoch_size;\n+        } else\n+            // reset the epoch_heuristic_counter to next do a scan when worst\n+            // case behavior (no intermittent erases) would exceed epoch size,\n+            // with a reasonable minimum scan size.\n+            // Ordinarily, we would have to sanity check std::min(epoch_size,\n+            // epoch_unused_count), but we already know that `epoch_unused_count\n+            // < epoch_size` in this branch\n+            epoch_heuristic_counter = std::max(1u, std::max(epoch_size / 16,\n+                        epoch_size - epoch_unused_count));\n+    }\n+\n+public:\n+    /** You must always construct a cache with some elements via a subsequent\n+     * call to setup or setup_bytes, otherwise operations may segfault.\n+     */\n+    cache() : table(), size(), collection_flags(0), epoch_flags(),\n+    epoch_heuristic_counter(), epoch_size(), depth_limit(0), hash_function()\n+    {\n+    }\n+\n+    /** setup initializes the container to store no more than new_size\n+     * elements. setup rounds down to a power of two size.\n+     *\n+     * setup should only be called once.\n+     *\n+     * @param new_size the desired number of elements to store\n+     * @returns the maximum number of elements storable\n+     **/\n+    uint32_t setup(uint32_t new_size)\n+    {\n+        // depth_limit must be at least one otherwise errors can occur.\n+        depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n+        size = 1 << depth_limit;\n+        hash_mask = size-1;\n+        table.resize(size);\n+        collection_flags.setup(size);\n+        epoch_flags.resize(size);\n+        // Set to 45% as described above\n+        epoch_size = std::max((uint32_t)1, (45 * size) / 100);\n+        // Initially set to wait for a whole epoch\n+        epoch_heuristic_counter = epoch_size;\n+        return size;\n+    }\n+\n+    /** setup_bytes is a convenience function which accounts for internal memory\n+     * usage when deciding how many elements to store. It isn't perfect because\n+     * it doesn't account for any overhead (struct size, MallocUsage, collection\n+     * and epoch flags). This was done to simplify selecting a power of two\n+     * size. In the expected use case, an extra two bits per entry should be\n+     * negligible compared to the size of the elements.\n+     *\n+     * @param bytes the approximate number of bytes to use for this data\n+     * structure.\n+     * @returns the maximum number of elements storable (see setup()\n+     * documentation for more detail)\n+     */\n+    uint32_t setup_bytes(size_t bytes)\n+    {\n+        return setup(bytes/sizeof(Element));\n+    }\n+\n+    /** insert loops at most depth_limit times trying to insert a hash\n+     * at various locations in the table via a variant of the Cuckoo Algorithm\n+     * with eight hash locations.\n+     *\n+     * It drops the last tried element if it runs out of depth before\n+     * encountering an open slot.\n+     *\n+     * Thus\n+     *\n+     * insert(x);\n+     * return contains(x, false);\n+     *\n+     * is not guaranteed to return true.\n+     *\n+     * @param e the element to insert\n+     * @post one of the following: All previously inserted elements and e are\n+     * now in the table, one previously inserted element is evicted from the\n+     * table, the entry attempted to be inserted is evicted.\n+     *\n+     */\n+    inline void insert(Element e)\n+    {\n+        epoch_check();\n+        uint32_t last_loc = invalid();\n+        bool last_epoch = true;\n+        std::array<uint32_t, 8> locs = compute_hashes(e);\n+        // Make sure we have not already inserted this element\n+        // If we have, make sure that it does not get deleted\n+        for (uint32_t loc : locs)\n+            if (table[loc] == e) {\n+                please_keep(loc);\n+                epoch_flags[loc] = last_epoch;\n+                return;\n+            }\n+        for (uint8_t depth = 0; depth < depth_limit; ++depth) {\n+            // First try to insert to an empty slot, if one exists\n+            for (uint32_t loc : locs) {\n+                if (!collection_flags.bit_is_set(loc))\n+                    continue;\n+                table[loc] = std::move(e);\n+                please_keep(loc);\n+                epoch_flags[loc] = last_epoch;\n+                return;\n+            }\n+            /** Swap with the element at the location that was\n+            * not the last one looked at. Example:\n+            *\n+            * 1) On first iter, always false so defaults to locs[0]\n+            * 2) Second iter, last_loc == locs[0] so will go to locs[1]\n+            *\n+            * This prevents moving the element we just put in.\n+            *\n+            * The swap is not a move -- we must switch onto the evicted element\n+            * for the next iteration.\n+            */\n+            last_loc = locs[(1 + (std::find(locs.begin(), locs.end(), last_loc) - locs.begin())) & 7];\n+            std::swap(table[last_loc], e);\n+            // Can't std::swap a std::vector<bool>::reference and a bool&.\n+            bool epoch = last_epoch;\n+            last_epoch = epoch_flags[last_loc];\n+            epoch_flags[last_loc] = epoch;\n+\n+            // Recompute the locs -- unfortunately happens one too many times!\n+            locs = compute_hashes(e);\n+        }\n+    }\n+\n+    /* contains iterates through the hash locations for a given element\n+     * and checks to see if it is present.\n+     *\n+     * contains does not check garbage collected state (in other words,\n+     * garbage is only collected when the space is needed), so:\n+     *\n+     * insert(x);\n+     * if (contains(x, true))\n+     *     return contains(x, false);\n+     * else\n+     *     return true;\n+     *\n+     * executed on a single thread will always return true!\n+     *\n+     * This is a great property for re-org performance for example.\n+     *\n+     * contains returns a bool set true if the element was found.\n+     *\n+     * @param e the element to check\n+     * @param erase\n+     *\n+     * @post if erase is true and the element is found, then the garbage collect\n+     * flag is set\n+     * @returns true if the element is found, false otherwise\n+     */\n+    inline bool contains(const Element& e, const bool erase) const\n+    {\n+",
      "path": "src/cuckoocache.h",
      "position": null,
      "original_position": 443,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "88b58d3c8d840924c8cfb556db994f71dfe6ad13",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: random newline",
      "created_at": "2016-12-07T20:12:49Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91377235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91377235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91377959",
      "pull_request_review_id": 11885055,
      "id": 91377959,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMzc3OTU5",
      "diff_hunk": "@@ -11,20 +11,29 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include \"cuckoocache.h\"\n #include <boost/thread.hpp>\n-#include <boost/unordered_set.hpp>\n \n namespace {\n \n /**\n  * We're hashing a nonce into the entries themselves, so we don't need extra\n  * blinding in the set hash computation.\n+ *\n+ * This may exhibit platform endian dependent behavior but because these are\n+ * nonced hashes (random) and this state is only ever used locally it is safe.\n+ * All that matter is local consistency.",
      "path": "src/script/sigcache.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "5ec14c8b4a4d00ee654bb342d3f37f09e0264cfa",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"matter\" -> \"matters\"",
      "created_at": "2016-12-07T20:16:29Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91377959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91377959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91382104",
      "pull_request_review_id": 11885055,
      "id": 91382104,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMzgyMTA0",
      "diff_hunk": "@@ -56,58 +64,45 @@ class CSignatureCache\n     }\n \n     bool\n-    Get(const uint256& entry)\n+    Get(const uint256& entry, const bool erase)\n     {\n         boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n-        return setValid.count(entry);\n+        return setValid.contains(entry, erase);\n     }\n \n-    void Erase(const uint256& entry)\n+    void Set(uint256& entry)\n     {\n         boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-        setValid.erase(entry);\n+        setValid.insert(entry);\n     }\n-\n-    void Set(const uint256& entry)\n+    uint32_t setup_bytes(size_t n)\n     {\n-        size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-        if (nMaxCacheSize <= 0) return;\n-\n-        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-        while (memusage::DynamicUsage(setValid) > nMaxCacheSize)\n-        {\n-            map_type::size_type s = GetRand(setValid.bucket_count());\n-            map_type::local_iterator it = setValid.begin(s);\n-            if (it != setValid.end(s)) {\n-                setValid.erase(*it);\n-            }\n-        }\n-\n-        setValid.insert(entry);\n+        return setValid.setup_bytes(n);\n     }\n };\n \n+// Initialized outisde of VerifySignature to avoid atomic operation per call",
      "path": "src/script/sigcache.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "5ec14c8b4a4d00ee654bb342d3f37f09e0264cfa",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Can you clarify this comment -- what is the atomic operation you're referring to?\r\n\r\nAlso, it seems like this comment is here to explain why you moved the code from its old place to the new place (which is helpful for me to understand!), but it's perhaps not very helpful here in its current form to future code readers who haven't seen the previous implementation.",
      "created_at": "2016-12-07T20:39:04Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91382104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91382104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91412485",
      "pull_request_review_id": 11921076,
      "id": 91412485,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDEyNDg1",
      "diff_hunk": "@@ -56,58 +64,45 @@ class CSignatureCache\n     }\n \n     bool\n-    Get(const uint256& entry)\n+    Get(const uint256& entry, const bool erase)\n     {\n         boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n-        return setValid.count(entry);\n+        return setValid.contains(entry, erase);\n     }\n \n-    void Erase(const uint256& entry)\n+    void Set(uint256& entry)\n     {\n         boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-        setValid.erase(entry);\n+        setValid.insert(entry);\n     }\n-\n-    void Set(const uint256& entry)\n+    uint32_t setup_bytes(size_t n)\n     {\n-        size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-        if (nMaxCacheSize <= 0) return;\n-\n-        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-        while (memusage::DynamicUsage(setValid) > nMaxCacheSize)\n-        {\n-            map_type::size_type s = GetRand(setValid.bucket_count());\n-            map_type::local_iterator it = setValid.begin(s);\n-            if (it != setValid.end(s)) {\n-                setValid.erase(*it);\n-            }\n-        }\n-\n-        setValid.insert(entry);\n+        return setValid.setup_bytes(n);\n     }\n };\n \n+// Initialized outisde of VerifySignature to avoid atomic operation per call",
      "path": "src/script/sigcache.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "67dac4e1937b9835d2c09402d35e0050467fbc6d",
      "original_commit_id": "5ec14c8b4a4d00ee654bb342d3f37f09e0264cfa",
      "in_reply_to_id": 91382104,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe that a function local static initialized uses an atomic (perhaps even a locking!) operation under the hood for the case where concurrent callers enter the function initially (C++11 guarantees this to be safe).\r\n\r\nI also believe that this is not the case for a global static (initialized before concurrency is allowed).\r\n\r\nI'm not 100% certain the spec forces conformity on this point, but I think it is at least the case in most implementations.",
      "created_at": "2016-12-07T23:32:32Z",
      "updated_at": "2016-12-14T21:03:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91412485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91412485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8895"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}