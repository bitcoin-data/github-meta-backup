{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612",
    "id": 126064715,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTI2MDY0NzE1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10612",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/10612.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/10612.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
    "number": 10612,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "The young person's guide to the test_framework",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "*Variations on a theme of Nakamoto*\r\n\r\n- Adds a heavily commented example_test.py test script that can be used as a template for writing new functional tests.\r\n- Expands test/README.md and test/functional/README.md:\r\n    - test/README.md documents how to run tests locally, as well as giving information about logging and troubleshooting failing test cases\r\n    - test/functional/README.md documents how to write tests, including a style guide and general tips on writing good test cases.\r\n\r\nAddresses #10601\r\n\r\nThe style guide is of course completely up for grabs at the moment. This PR contains my first attempt, but I'm very happy for feedback including expanding/changing/reducing the guide.",
    "labels": [
      {
        "id": 148216,
        "node_id": "MDU6TGFiZWwxNDgyMTY=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
        "name": "Docs",
        "color": "02d7e1",
        "default": false
      },
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2017-06-16T16:01:56Z",
    "updated_at": "2021-09-08T11:49:58Z",
    "closed_at": "2017-06-27T10:08:20Z",
    "mergeable_state": "unknown",
    "merged_at": "2017-06-27T10:08:20Z",
    "merge_commit_sha": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jnewbery:templatefunctionaltest",
      "ref": "templatefunctionaltest",
      "sha": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 68248485,
        "node_id": "MDEwOlJlcG9zaXRvcnk2ODI0ODQ4NQ==",
        "name": "bitcoin",
        "full_name": "jnewbery/bitcoin",
        "owner": {
          "login": "jnewbery",
          "id": 1063656,
          "node_id": "MDQ6VXNlcjEwNjM2NTY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jnewbery",
          "html_url": "https://github.com/jnewbery",
          "followers_url": "https://api.github.com/users/jnewbery/followers",
          "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
          "organizations_url": "https://api.github.com/users/jnewbery/orgs",
          "repos_url": "https://api.github.com/users/jnewbery/repos",
          "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jnewbery/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jnewbery/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jnewbery/bitcoin",
        "archive_url": "https://api.github.com/repos/jnewbery/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jnewbery/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jnewbery/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jnewbery/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jnewbery/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jnewbery/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jnewbery/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jnewbery/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jnewbery/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jnewbery/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jnewbery/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jnewbery/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jnewbery/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jnewbery/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jnewbery/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jnewbery/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jnewbery/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jnewbery/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jnewbery/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jnewbery/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jnewbery/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jnewbery/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jnewbery/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jnewbery/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jnewbery/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jnewbery/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jnewbery/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jnewbery/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jnewbery/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jnewbery/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jnewbery/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jnewbery/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jnewbery/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jnewbery/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jnewbery/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jnewbery/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jnewbery/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jnewbery/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jnewbery/bitcoin/hooks",
        "svn_url": "https://github.com/jnewbery/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 219109,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-21T11:07:55Z",
        "created_at": "2016-09-14T22:29:05Z",
        "updated_at": "2021-07-06T16:23:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 441,
    "deletions": 107,
    "changed_files": 4,
    "commits": 2,
    "review_comments": 32,
    "comments": 8
  },
  "events": [
    {
      "event": "reviewed",
      "id": 44601038,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDEwMzg=",
      "url": null,
      "actor": null,
      "commit_id": "a001a92dba5bf91082f625b70bae3b49508e47f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK\r\n\r\nI wish this documentation existed when I started writing tests! Only thing I would add is maybe some documentation on finding rpc commands that haven't really been covered yet (read: --coverage). Also, would be useful to point people to the actual rpc commands in C++ that can be used to find things to test.",
      "user": {
        "login": "jimmysong",
        "id": 524761,
        "node_id": "MDQ6VXNlcjUyNDc2MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimmysong",
        "html_url": "https://github.com/jimmysong",
        "followers_url": "https://api.github.com/users/jimmysong/followers",
        "following_url": "https://api.github.com/users/jimmysong/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimmysong/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimmysong/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
        "organizations_url": "https://api.github.com/users/jimmysong/orgs",
        "repos_url": "https://api.github.com/users/jimmysong/repos",
        "events_url": "https://api.github.com/users/jimmysong/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimmysong/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-44601038",
      "submitted_at": "2017-06-16T16:07:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "reviewed",
      "id": 44672275,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzIyNzU=",
      "url": null,
      "actor": null,
      "commit_id": "a001a92dba5bf91082f625b70bae3b49508e47f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-44672275",
      "submitted_at": "2017-06-16T21:55:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1127661501,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTEyNzY2MTUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1127661501",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-16T23:35:33Z"
    },
    {
      "event": "commented",
      "id": 309164224,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTE2NDIyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309164224",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-16T23:37:52Z",
      "updated_at": "2017-06-16T23:37:52Z",
      "author_association": "MEMBER",
      "body": "Thanks @jimmysong - added sections on **Coverage** and **RPC and p2p definitions** to `test/functional/README.md`",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-309164224",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "mentioned",
      "id": 1127663501,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEyNzY2MzUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1127663501",
      "actor": {
        "login": "jimmysong",
        "id": 524761,
        "node_id": "MDQ6VXNlcjUyNDc2MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimmysong",
        "html_url": "https://github.com/jimmysong",
        "followers_url": "https://api.github.com/users/jimmysong/followers",
        "following_url": "https://api.github.com/users/jimmysong/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimmysong/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimmysong/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
        "organizations_url": "https://api.github.com/users/jimmysong/orgs",
        "repos_url": "https://api.github.com/users/jimmysong/repos",
        "events_url": "https://api.github.com/users/jimmysong/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimmysong/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-16T23:37:52Z"
    },
    {
      "event": "subscribed",
      "id": 1127663502,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMjc2NjM1MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1127663502",
      "actor": {
        "login": "jimmysong",
        "id": 524761,
        "node_id": "MDQ6VXNlcjUyNDc2MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimmysong",
        "html_url": "https://github.com/jimmysong",
        "followers_url": "https://api.github.com/users/jimmysong/followers",
        "following_url": "https://api.github.com/users/jimmysong/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimmysong/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimmysong/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
        "organizations_url": "https://api.github.com/users/jimmysong/orgs",
        "repos_url": "https://api.github.com/users/jimmysong/repos",
        "events_url": "https://api.github.com/users/jimmysong/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimmysong/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-16T23:37:52Z"
    },
    {
      "event": "commented",
      "id": 309208810,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTIwODgxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309208810",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-17T11:11:34Z",
      "updated_at": "2017-06-17T11:11:34Z",
      "author_association": "MEMBER",
      "body": "Awesome! Thanks for adding a guide to make tests.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-309208810",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "labeled",
      "id": 1128130148,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDExMjgxMzAxNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128130148",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T13:09:25Z",
      "label": {
        "name": "Docs and Output",
        "color": "02d7e1"
      }
    },
    {
      "event": "labeled",
      "id": 1128130149,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDExMjgxMzAxNDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128130149",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T13:09:25Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 44722930,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjI5MzA=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK! Just some meta comments.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-44722930",
      "submitted_at": "2017-06-18T14:47:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "commented",
      "id": 309282442,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI4MjQ0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309282442",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T14:55:57Z",
      "updated_at": "2017-06-18T14:55:57Z",
      "author_association": "MEMBER",
      "body": "Awesome! Concept ACK x2 ",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-309282442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "commented",
      "id": 309285220,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI4NTIyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309285220",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T15:43:26Z",
      "updated_at": "2017-06-18T15:43:26Z",
      "author_association": "MEMBER",
      "body": "@laanwj @Marcofalke @christewart - thanks for the feedback.\r\n\r\nAny comments on the suggested style guide? I was expecting that to be the area where people would have opinions.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-309285220",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "mentioned",
      "id": 1128169122,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEyODE2OTEyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128169122",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T15:43:26Z"
    },
    {
      "event": "subscribed",
      "id": 1128169123,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMjgxNjkxMjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128169123",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T15:43:26Z"
    },
    {
      "event": "mentioned",
      "id": 1128169124,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEyODE2OTEyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128169124",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T15:43:26Z"
    },
    {
      "event": "subscribed",
      "id": 1128169125,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMjgxNjkxMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128169125",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T15:43:26Z"
    },
    {
      "event": "mentioned",
      "id": 1128169126,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTEyODE2OTEyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128169126",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T15:43:26Z"
    },
    {
      "event": "subscribed",
      "id": 1128169127,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExMjgxNjkxMjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1128169127",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-18T15:43:26Z"
    },
    {
      "event": "reviewed",
      "id": 45604279,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDQyNzk=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-45604279",
      "submitted_at": "2017-06-22T01:51:05Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "reviewed",
      "id": 45685569,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODU1Njk=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 5a0134a, one nit.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-45685569",
      "submitted_at": "2017-06-22T11:03:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "reviewed",
      "id": 45178555,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzg1NTU=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for doing this!  Left some nits for you, but looks good to me.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-45178555",
      "submitted_at": "2017-06-22T18:13:30Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "reviewed",
      "id": 45927769,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Mjc3Njk=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-45927769",
      "submitted_at": "2017-06-23T08:38:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "reviewed",
      "id": 45928082,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwODI=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-45928082",
      "submitted_at": "2017-06-23T08:40:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "reviewed",
      "id": 45929832,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Mjk4MzI=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-45929832",
      "submitted_at": "2017-06-23T08:48:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "commented",
      "id": 310610237,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDYxMDIzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310610237",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-23T08:50:42Z",
      "updated_at": "2017-06-23T08:50:42Z",
      "author_association": "MEMBER",
      "body": "​Another nit I forgot to mention earlier: ​\n​\n​Since you remove the mention of `PYTHON_DEBUG`, you might as well remove\nit in the code as well and replace it by `os.getenv('TRAVIS') == 'true'`​\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-310610237",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "reviewed",
      "id": 45933288,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzMyODg=",
      "url": null,
      "actor": null,
      "commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#pullrequestreview-45933288",
      "submitted_at": "2017-06-23T09:05:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Njg1OWU2YTc2NjVmYWVmOTdlZGYzMzk4MTBhYTU2ZDJlNGQwYWQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76859e6a7665faef97edf339810aa56d2e4d0ad6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/76859e6a7665faef97edf339810aa56d2e4d0ad6",
      "tree": {
        "sha": "686ee41ec54e7062f57b42a445031f6af1d9e675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/686ee41ec54e7062f57b42a445031f6af1d9e675"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2ab38bdd57a16e6c708dcc633d9162331c9d311",
          "sha": "c2ab38bdd57a16e6c708dcc633d9162331c9d311",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ab38bdd57a16e6c708dcc633d9162331c9d311"
        }
      ],
      "message": "[tests] Update functional tests documentation",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T09:04:52Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-15T16:43:03Z"
      },
      "sha": "76859e6a7665faef97edf339810aa56d2e4d0ad6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2JhNmMxNmIzNDQ0M2NmMDc3NGQ3MDdkOTkxOGViYzk4MzVkNmNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "tree": {
        "sha": "015b2e7815a31e0d4fdb9b8aecc9ba9d64fb7929",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/015b2e7815a31e0d4fdb9b8aecc9ba9d64fb7929"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76859e6a7665faef97edf339810aa56d2e4d0ad6",
          "sha": "76859e6a7665faef97edf339810aa56d2e4d0ad6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/76859e6a7665faef97edf339810aa56d2e4d0ad6"
        }
      ],
      "message": "[tests] add example test",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T09:04:52Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-15T19:29:53Z"
      },
      "sha": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1140107933,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTE0MDEwNzkzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1140107933",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T09:05:29Z"
    },
    {
      "event": "commented",
      "id": 311299738,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTI5OTczOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311299738",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T09:09:13Z",
      "updated_at": "2017-06-27T09:09:13Z",
      "author_association": "MEMBER",
      "body": "> Since you remove the mention of `PYTHON_DEBUG`, you might as well remove\r\nit in the code as well and replace it by `os.getenv('TRAVIS') == 'true'`​\r\n\r\nAbsolutely agree, although this should be done in a separate PR.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-311299738",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "commented",
      "id": 311299859,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTI5OTg1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311299859",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T09:09:40Z",
      "updated_at": "2017-06-27T09:09:40Z",
      "author_association": "MEMBER",
      "body": "Nits fixed",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-311299859",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "commented",
      "id": 311313944,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTMxMzk0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311313944",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T10:07:18Z",
      "updated_at": "2017-06-27T10:07:18Z",
      "author_association": "MEMBER",
      "body": "ACK e7ba6c1",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#issuecomment-311313944",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10612"
    },
    {
      "event": "merged",
      "id": 1140208356,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTE0MDIwODM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1140208356",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "created_at": "2017-06-27T10:08:20Z"
    },
    {
      "event": "closed",
      "id": 1140208357,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTE0MDIwODM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1140208357",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T10:08:20Z"
    },
    {
      "event": "referenced",
      "id": 1140208424,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDExNDAyMDg0MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1140208424",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
      "created_at": "2017-06-27T10:08:23Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 1140546431,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQxMTQwNTQ2NDMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1140546431",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T13:53:13Z"
    },
    {
      "event": "mentioned",
      "id": 1140548728,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTE0MDU0ODcyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1140548728",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T13:54:23Z"
    },
    {
      "event": "subscribed",
      "id": 1140548729,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDExNDA1NDg3Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1140548729",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-06-27T13:54:23Z"
    },
    {
      "event": "referenced",
      "id": 2463775541,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0NjM3NzU1NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463775541",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "809e67ff79a34b6d0185bf6c7d470348f4e895f9",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/809e67ff79a34b6d0185bf6c7d470348f4e895f9",
      "created_at": "2019-07-06T04:50:30Z"
    },
    {
      "event": "referenced",
      "id": 2463779153,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0NjM3NzkxNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463779153",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d094a5695ccab264a836c8cf6462656b25a0c9a2",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/d094a5695ccab264a836c8cf6462656b25a0c9a2",
      "created_at": "2019-07-06T05:04:28Z"
    },
    {
      "event": "referenced",
      "id": 2463780076,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0NjM3ODAwNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463780076",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c56b2bf8ac820f2ac957584bfdcf107655f24b19",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/c56b2bf8ac820f2ac957584bfdcf107655f24b19",
      "created_at": "2019-07-06T05:07:56Z"
    },
    {
      "event": "referenced",
      "id": 2466556932,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0NjY1NTY5MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2466556932",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b02e6978653f4d2ac51644d4a9c6dfde811a382e",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/b02e6978653f4d2ac51644d4a9c6dfde811a382e",
      "created_at": "2019-07-08T15:28:06Z"
    },
    {
      "event": "referenced",
      "id": 2470182789,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0NzAxODI3ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2470182789",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "46193cf9fafcf8d302d7dc28a5580dfb12794be2",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/46193cf9fafcf8d302d7dc28a5580dfb12794be2",
      "created_at": "2019-07-09T17:50:16Z"
    },
    {
      "event": "referenced",
      "id": 2476384693,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0NzYzODQ2OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2476384693",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2708a7be06c2435fc39095b937c1c862a2533abb",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/2708a7be06c2435fc39095b937c1c862a2533abb",
      "created_at": "2019-07-11T15:35:52Z"
    },
    {
      "event": "referenced",
      "id": 2971476383,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NzE0NzYzODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2971476383",
      "actor": {
        "login": "barrystyle",
        "id": 14147070,
        "node_id": "MDQ6VXNlcjE0MTQ3MDcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14147070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barrystyle",
        "html_url": "https://github.com/barrystyle",
        "followers_url": "https://api.github.com/users/barrystyle/followers",
        "following_url": "https://api.github.com/users/barrystyle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/barrystyle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/barrystyle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/barrystyle/subscriptions",
        "organizations_url": "https://api.github.com/users/barrystyle/orgs",
        "repos_url": "https://api.github.com/users/barrystyle/repos",
        "events_url": "https://api.github.com/users/barrystyle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/barrystyle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "67ba69edbc64787576161e59dbebb2924dd4f69e",
      "commit_url": "https://api.github.com/repos/PACGlobalOfficial/PAC/commits/67ba69edbc64787576161e59dbebb2924dd4f69e",
      "created_at": "2020-01-22T20:22:13Z"
    },
    {
      "event": "locked",
      "id": 5271782350,
      "node_id": "LOE_lADOABII584OGRi2zwAAAAE6OQPO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271782350",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:49:58Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122541162",
      "pull_request_review_id": 44672275,
      "id": 122541162,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU0MTE2Mg==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+individual tests can be run by directly calling the test script, eg:",
      "path": "test/README.md",
      "position": null,
      "original_position": 24,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "a001a92dba5bf91082f625b70bae3b49508e47f6",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `s/^individual/Individual/` :-)",
      "created_at": "2017-06-16T21:55:13Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r122541162",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122541162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122551491",
      "pull_request_review_id": 44683557,
      "id": 122551491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU1MTQ5MQ==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+individual tests can be run by directly calling the test script, eg:",
      "path": "test/README.md",
      "position": null,
      "original_position": 24,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "a001a92dba5bf91082f625b70bae3b49508e47f6",
      "in_reply_to_id": 122541162,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Fixed",
      "created_at": "2017-06-16T23:35:43Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r122551491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122551491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122592565",
      "pull_request_review_id": 44722930,
      "id": 122592565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU5MjU2NQ==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a p2p message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        self.log.info(\"Add p2p connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # ConnNodeCB objects.\n+        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 202,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd prefer if the assert was moved into wait_until and the return statement removed from wait_until.\r\n\r\nThe places in the code where it is missing right now are likely oversights and should be fixed.",
      "created_at": "2017-06-18T14:40:12Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r122592565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122592565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122592584",
      "pull_request_review_id": 44722930,
      "id": 122592584,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU5MjU4NA==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.",
      "path": "test/functional/example_test.py",
      "position": 158,
      "original_position": 152,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 ",
      "created_at": "2017-06-18T14:40:54Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r122592584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122592584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122592689",
      "pull_request_review_id": 44722930,
      "id": 122592689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU5MjY4OQ==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test",
      "path": "test/README.md",
      "position": 149,
      "original_position": 145,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since travis supports color, could we run `combine_logs.py` on travis as well?",
      "created_at": "2017-06-18T14:45:33Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r122592689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122592689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122593943",
      "pull_request_review_id": 44724055,
      "id": 122593943,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU5Mzk0Mw==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a p2p message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        self.log.info(\"Add p2p connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # ConnNodeCB objects.\n+        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 202,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 122592565,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed. I'd also like to see an assert within `wait_until()`. I've previously tried adding an assert into that function and it causes several tests to fail.\r\n\r\nFixing those cases where `wait_until()` isn't actually returning True is a job for another PR. When that happens, a scripted diff to `s/assert wait_until/wait_until/` should be run, which will update this example test script.",
      "created_at": "2017-06-18T15:39:20Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r122593943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122593943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122594010",
      "pull_request_review_id": 44724108,
      "id": 122594010,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU5NDAxMA==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test",
      "path": "test/README.md",
      "position": 149,
      "original_position": 145,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 122592689,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Potentially, yes. `combine_logs.py` was written to be portable (and even usable on machines where test_framework is not installed).\r\n\r\nAgain, I think this is a job for another PR.",
      "created_at": "2017-06-18T15:41:59Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r122594010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122594010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123014068",
      "pull_request_review_id": 45178555,
      "id": 123014068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzAxNDA2OA==",
      "diff_hunk": "@@ -1,108 +1,157 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and p2p interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and p2p definitions\n+\n+Test writers may find it helpful to refer to the definitions for the RPC and\n+p2p messages. These can be found in the following source files:\n \n-P2P test design notes\n----------------------\n+- `/src/rpc/*` for RPCs\n+- `/src/wallet/rpc*` for wallet RPCs\n+- `ProcessMessage()` in `/sfrc/net_processing.cpp` for parsing p2p messages\n \n-## Mininode\n+#### Using the p2p interface\n \n-* ```mininode.py``` contains all the definitions for objects that pass\n-over the network (```CBlock```, ```CTransaction```, etc, along with the network-level\n-wrappers for them, ```msg_block```, ```msg_tx```, etc).\n+- `mininode.py` contains all the definitions for objects that pass\n+over the network (`CBlock`, `CTransaction`, etc, along with the network-level\n+wrappers for them, `msg_block`, `msg_tx`, etc).\n \n-* P2P tests have two threads.  One thread handles all network communication\n+- P2P tests have two threads. One thread handles all network communication\n with the bitcoind(s) being tested (using python's asyncore package); the other\n implements the test logic.\n \n-* ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n-a callback class that derives from ```NodeConnCB``` and pass that to the\n-```NodeConn``` object, your code will receive the appropriate callbacks when\n+- `NodeConn` is the class used to connect to a bitcoind.  If you implement\n+a callback class that derives from `NodeConnCB` and pass that to the\n+`NodeConn` object, your code will receive the appropriate callbacks when\n events of interest arrive.\n \n-* You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n+- You can pass the same handler to multiple `NodeConn`'s if you like, or pass",
      "path": "test/functional/README.md",
      "position": null,
      "original_position": 104,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is true, but no one does this anymore I think, and we should probably discourage that style?",
      "created_at": "2017-06-20T15:40:43Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123014068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123014068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123023766",
      "pull_request_review_id": 45178555,
      "id": 123023766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzAyMzc2Ng==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 109,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we try to discourage `connect_nodes_bi`?",
      "created_at": "2017-06-20T16:14:57Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123023766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123023766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123023951",
      "pull_request_review_id": 45178555,
      "id": 123023951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzAyMzk1MQ==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 142,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should sync the (connected) nodes after this call, I think?",
      "created_at": "2017-06-20T16:15:45Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123023951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123023951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123405006",
      "pull_request_review_id": 45604279,
      "id": 123405006,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzQwNTAwNg==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use --tracerpc to trace out all the RPC calls and responses to the console. For",
      "path": "test/README.md",
      "position": null,
      "original_position": 162,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "--tracerpc should be surrounded by backticks.",
      "created_at": "2017-06-22T01:45:57Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123405006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123405006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123479566",
      "pull_request_review_id": 45685569,
      "id": 123479566,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzQ3OTU2Ng==",
      "diff_hunk": "@@ -1,108 +1,157 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and p2p interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and p2p definitions\n+\n+Test writers may find it helpful to refer to the definitions for the RPC and\n+p2p messages. These can be found in the following source files:\n \n-P2P test design notes\n----------------------\n+- `/src/rpc/*` for RPCs\n+- `/src/wallet/rpc*` for wallet RPCs\n+- `ProcessMessage()` in `/sfrc/net_processing.cpp` for parsing p2p messages",
      "path": "test/functional/README.md",
      "position": null,
      "original_position": 78,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: sfrc/src",
      "created_at": "2017-06-22T10:58:41Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123479566",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123479566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123479815",
      "pull_request_review_id": 45685569,
      "id": 123479815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzQ3OTgxNQ==",
      "diff_hunk": "@@ -153,6 +153,7 @@\n     # These are python files that live in the functional tests directory, but are not test scripts.\n     \"combine_logs.py\",\n     \"create_cache.py\",\n+    \"example_test.py\",",
      "path": "test/functional/test_runner.py",
      "position": null,
      "original_position": 4,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we put this in the extended scripts, just to make sure it has correct syntax?",
      "created_at": "2017-06-22T11:00:06Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123479815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123479815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123583291",
      "pull_request_review_id": 45178555,
      "id": 123583291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzU4MzI5MQ==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a p2p message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        self.log.info(\"Add p2p connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # ConnNodeCB objects.",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 201,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`NodeConnCB`, not `ConnNodeCB`",
      "created_at": "2017-06-22T18:07:47Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123583291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123583291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123584024",
      "pull_request_review_id": 45178555,
      "id": 123584024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzU4NDAyNA==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a p2p message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        self.log.info(\"Add p2p connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # ConnNodeCB objects.\n+        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 202,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it'd be nice to mention the locking issues with reaching into a `NodeConnCB` from the main thread.  We could mention that `wait_until()` grabs the global lock before checking the predicate, or perhaps better still would be to add an example of acquiring the lock in this example before inspecting an object that is accessed from the other thread.",
      "created_at": "2017-06-22T18:11:06Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123584024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123584024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123698526",
      "pull_request_review_id": 45927769,
      "id": 123698526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY5ODUyNg==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make",
      "path": "test/README.md",
      "position": null,
      "original_position": 87,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: P2P",
      "created_at": "2017-06-23T08:38:39Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123698526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123698526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123698784",
      "pull_request_review_id": 45928082,
      "id": 123698784,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY5ODc4NA==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind",
      "path": "test/README.md",
      "position": null,
      "original_position": 100,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could potentially be risky if any non-test bitcoinds are running as the same user. Not sure it warrants a warning or not.",
      "created_at": "2017-06-23T08:40:15Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123698784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123698784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123700235",
      "pull_request_review_id": 45929832,
      "id": 123700235,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzcwMDIzNQ==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use --tracerpc to trace out all the RPC calls and responses to the console. For\n+some tests (eg any that use `submitblock` to submit a full block over RPC),\n+this can result in a lot of screen output.\n+\n+By default, the test data directory will be deleted after a successful run.\n+Use `--nocleanup` to leave the test data directory intact. The test data\n+directory is never deleted after a failed test.\n+\n+##### Attaching a debugger\n+\n+A python debugger can be attached to tests at any point. Just add the line:\n+\n+```py\n+import pdb; pdb.set_trace()",
      "path": "test/README.md",
      "position": 179,
      "original_position": 175,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice one to mention. After ~15 years of using Python I still forgot about this all the time when I need it.",
      "created_at": "2017-06-23T08:48:27Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123700235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123700235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123703325",
      "pull_request_review_id": 45933288,
      "id": 123703325,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzcwMzMyNQ==",
      "diff_hunk": "@@ -1,108 +1,157 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and p2p interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and p2p definitions",
      "path": "test/functional/README.md",
      "position": null,
      "original_position": 69,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also here: P2P uppercase please",
      "created_at": "2017-06-23T09:05:00Z",
      "updated_at": "2017-06-27T09:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r123703325",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123703325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124218886",
      "pull_request_review_id": 46487237,
      "id": 124218886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxODg4Ng==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use --tracerpc to trace out all the RPC calls and responses to the console. For",
      "path": "test/README.md",
      "position": null,
      "original_position": 162,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123405006,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks. Done",
      "created_at": "2017-06-27T09:05:32Z",
      "updated_at": "2017-06-27T09:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124218886",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124218886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124218902",
      "pull_request_review_id": 46487253,
      "id": 124218902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxODkwMg==",
      "diff_hunk": "@@ -1,108 +1,157 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and p2p interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and p2p definitions\n+\n+Test writers may find it helpful to refer to the definitions for the RPC and\n+p2p messages. These can be found in the following source files:\n \n-P2P test design notes\n----------------------\n+- `/src/rpc/*` for RPCs\n+- `/src/wallet/rpc*` for wallet RPCs\n+- `ProcessMessage()` in `/sfrc/net_processing.cpp` for parsing p2p messages",
      "path": "test/functional/README.md",
      "position": null,
      "original_position": 78,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123479566,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2017-06-27T09:05:38Z",
      "updated_at": "2017-06-27T09:05:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124218902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124218902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219054",
      "pull_request_review_id": 46487426,
      "id": 124219054,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTA1NA==",
      "diff_hunk": "@@ -153,6 +153,7 @@\n     # These are python files that live in the functional tests directory, but are not test scripts.\n     \"combine_logs.py\",\n     \"create_cache.py\",\n+    \"example_test.py\",",
      "path": "test/functional/test_runner.py",
      "position": null,
      "original_position": 4,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123479815,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, good idea. `example_test` should be run in the extended test run to test the test.",
      "created_at": "2017-06-27T09:06:20Z",
      "updated_at": "2017-06-27T09:06:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219112",
      "pull_request_review_id": 46487491,
      "id": 124219112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTExMg==",
      "diff_hunk": "@@ -1,108 +1,157 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and p2p interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and p2p definitions\n+\n+Test writers may find it helpful to refer to the definitions for the RPC and\n+p2p messages. These can be found in the following source files:\n \n-P2P test design notes\n----------------------\n+- `/src/rpc/*` for RPCs\n+- `/src/wallet/rpc*` for wallet RPCs\n+- `ProcessMessage()` in `/sfrc/net_processing.cpp` for parsing p2p messages\n \n-## Mininode\n+#### Using the p2p interface\n \n-* ```mininode.py``` contains all the definitions for objects that pass\n-over the network (```CBlock```, ```CTransaction```, etc, along with the network-level\n-wrappers for them, ```msg_block```, ```msg_tx```, etc).\n+- `mininode.py` contains all the definitions for objects that pass\n+over the network (`CBlock`, `CTransaction`, etc, along with the network-level\n+wrappers for them, `msg_block`, `msg_tx`, etc).\n \n-* P2P tests have two threads.  One thread handles all network communication\n+- P2P tests have two threads. One thread handles all network communication\n with the bitcoind(s) being tested (using python's asyncore package); the other\n implements the test logic.\n \n-* ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n-a callback class that derives from ```NodeConnCB``` and pass that to the\n-```NodeConn``` object, your code will receive the appropriate callbacks when\n+- `NodeConn` is the class used to connect to a bitcoind.  If you implement\n+a callback class that derives from `NodeConnCB` and pass that to the\n+`NodeConn` object, your code will receive the appropriate callbacks when\n events of interest arrive.\n \n-* You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n+- You can pass the same handler to multiple `NodeConn`'s if you like, or pass",
      "path": "test/functional/README.md",
      "position": null,
      "original_position": 104,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123014068,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, you're right. I've removed this line.",
      "created_at": "2017-06-27T09:06:36Z",
      "updated_at": "2017-06-27T09:06:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219112",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219155",
      "pull_request_review_id": 46487540,
      "id": 124219155,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTE1NQ==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 109,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123023766,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes - removed from the example test.",
      "created_at": "2017-06-27T09:06:50Z",
      "updated_at": "2017-06-27T09:06:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219191",
      "pull_request_review_id": 46487580,
      "id": 124219191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTE5MQ==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a p2p message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        self.log.info(\"Add p2p connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # ConnNodeCB objects.",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 201,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123583291,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks! Fixed.",
      "created_at": "2017-06-27T09:07:00Z",
      "updated_at": "2017-06-27T09:07:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219318",
      "pull_request_review_id": 46487703,
      "id": 124219318,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTMxOA==",
      "diff_hunk": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"An example functional test\n+\n+The module-level docstring should include a high-level description of\n+what the test is doing. It's the first thing people see when they open\n+the file and should give the reader information about *what* the test\n+is testing and *how* it's being tested\n+\"\"\"\n+# Imports should be in PEP8 ordering (std library first, then third party\n+# libraries then local imports).\n+from collections import defaultdict\n+\n+# Avoid wildcard * imports if possible\n+from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_getdata,\n+    wait_until,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (connect_nodes_bi, p2p_port)\n+\n+# NodeConnCB is a class containing callbacks to be executed when a p2p\n+# message is received from the node-under-test. Subclass NodeConnCB and\n+# override the on_*() methods if you need custom behaviour.\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        \"\"\"Initialize the NodeConnCB\n+\n+        Used to inialize custom properties for the Node that aren't\n+        included by default in the base class. Be aware that the NodeConnCB\n+        base class already stores a counter for each p2p message type and the\n+        last received message of each type, which should be sufficient for the\n+        needs of most tests.\n+\n+        Call super().__init__() first for standard initialization and then\n+        initialize custom properties.\"\"\"\n+        super().__init__()\n+        # Stores a dictionary of all blocks received\n+        self.block_receive_map = defaultdict(int)\n+\n+    def on_block(self, conn, message):\n+        \"\"\"Override the standard on_block callback\n+\n+        Store the hash of a received block in the dictionary.\"\"\"\n+        message.block.calc_sha256()\n+        self.block_receive_map[message.block.sha256] += 1\n+\n+def custom_function():\n+    \"\"\"Do some custom behaviour\n+\n+    If this function is more generally useful for other tests, consider\n+    moving it to a module in test_framework.\"\"\"\n+    # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n+    pass\n+\n+class ExampleTest(BitcoinTestFramework):\n+    # Each functional test is a subclass of the BitcoinTestFramework class.\n+\n+    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # and setup_nodes() methods to customize the test setup as required.\n+\n+    def __init__(self):\n+        \"\"\"Initialize the test\n+\n+        Call super().__init__() first, and then override any test parameters\n+        for your individual test.\"\"\"\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        # Use self.extra_args to change command-line arguments for the nodes\n+        self.extra_args = [[], [\"-logips\"], []]\n+\n+        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+\n+    # Use add_options() to add specific command-line options for your test.\n+    # In practice this is not used very much, since the tests are mostly written\n+    # to be run in automated environments without command-line options.\n+    # def add_options()\n+    #     pass\n+\n+    # Use setup_chain() to customize the node data directories. In practice\n+    # this is not used very much since the default behaviour is almost always\n+    # fine\n+    # def setup_chain():\n+    #     pass\n+\n+    def setup_network(self):\n+        \"\"\"Setup the test network topology\n+\n+        Often you won't need to override this, since the standard network topology\n+        (linear: node0 <-> node1 <-> node2 <-> ...) is fine for most tests.\n+\n+        If you do override this method, remember to start the nodes, assign\n+        them to self.nodes, connect them and then sync.\"\"\"\n+\n+        self.setup_nodes()\n+\n+        # In this test, we're not connecting node2 to node0 or node1. Calls to\n+        # sync_all() should not include node2, since we're not expecting it to\n+        # sync.\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all([self.nodes[0:1]])\n+\n+    # Use setup_nodes() to customize the node start behaviour (for example if\n+    # you don't want to start all nodes at the start of the test).\n+    # def setup_nodes():\n+    #     pass\n+\n+    def custom_method(self):\n+        \"\"\"Do some custom behaviour for this test\n+\n+        Define it in a method here because you're going to use it repeatedly.\n+        If you think it's useful in general, consider moving it to the base\n+        BitcoinTestFramework class so other tests can use it.\"\"\"\n+\n+        self.log.info(\"Running custom_method\")\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        # Create a p2p connection to one of the nodes\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        # Start up network handling in another thread. This needs to be called\n+        # after the p2p connections have been created.\n+        NetworkThread().start()\n+        # wait_for_verack ensures that the p2p connection is fully up.\n+        node0.wait_for_verack()\n+\n+        # Generating a block on one of the nodes will get us out of IBD\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+\n+        # Notice above how we called an RPC by calling a method with the same\n+        # name on the node object. Notice also how we used a keyword argument\n+        # to specify a named RPC argument. Neither of those are defined on the\n+        # node object. Instead there's some __getattr__() magic going on under\n+        # the covers to dispatch unrecognised attribute calls to the RPC\n+        # interface.\n+\n+        # Logs are nice. Do plenty of them. They can be used in place of comments for\n+        # breaking the test into sub-sections.\n+        self.log.info(\"Starting test!\")\n+\n+        self.log.info(\"Calling a custom function\")\n+        custom_function()\n+\n+        self.log.info(\"Calling a custom method\")\n+        self.custom_method()\n+\n+        self.log.info(\"Create some blocks\")\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        height = 1\n+\n+        for i in range(10):\n+            # Use the mininode and blocktools functionality to manually build a block\n+            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # control the blocks and transactions.\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            block_message = msg_block(block)\n+            # Send message is used to send a p2p message to the node over our NodeConn connection\n+            node0.send_message(block_message)\n+            self.tip = block.sha256\n+            blocks.append(self.tip)\n+            self.block_time += 1\n+            height += 1\n+\n+        self.log.info(\"Wait for node1 to reach current tip (height 11) using RPC\")\n+        self.nodes[1].waitforblockheight(11)\n+\n+        self.log.info(\"Connect node2 and node1\")\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        self.log.info(\"Add p2p connection to node2\")\n+        node2 = BaseNode()\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[1])\n+        node2.wait_for_verack()\n+\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+\n+        for block in blocks:\n+            getdata_request = msg_getdata()\n+            getdata_request.inv.append(CInv(2, block))\n+            node2.send_message(getdata_request)\n+\n+        # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n+        # ConnNodeCB objects.\n+        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)",
      "path": "test/functional/example_test.py",
      "position": null,
      "original_position": 202,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123584024,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea. Added an example of accessing the NodeConnCB data using the mininode_lock",
      "created_at": "2017-06-27T09:07:34Z",
      "updated_at": "2017-06-27T09:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219336",
      "pull_request_review_id": 46487724,
      "id": 124219336,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTMzNg==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make",
      "path": "test/README.md",
      "position": null,
      "original_position": 87,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123698526,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2017-06-27T09:07:39Z",
      "updated_at": "2017-06-27T09:07:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219365",
      "pull_request_review_id": 46487752,
      "id": 124219365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTM2NQ==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind",
      "path": "test/README.md",
      "position": null,
      "original_position": 100,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123698784,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a warning",
      "created_at": "2017-06-27T09:07:48Z",
      "updated_at": "2017-06-27T09:07:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219495",
      "pull_request_review_id": 46487890,
      "id": 124219495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTQ5NQ==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use --tracerpc to trace out all the RPC calls and responses to the console. For\n+some tests (eg any that use `submitblock` to submit a full block over RPC),\n+this can result in a lot of screen output.\n+\n+By default, the test data directory will be deleted after a successful run.\n+Use `--nocleanup` to leave the test data directory intact. The test data\n+directory is never deleted after a failed test.\n+\n+##### Attaching a debugger\n+\n+A python debugger can be attached to tests at any point. Just add the line:\n+\n+```py\n+import pdb; pdb.set_trace()",
      "path": "test/README.md",
      "position": 179,
      "original_position": 175,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123700235,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "🙂 hooray for `pdb`!",
      "created_at": "2017-06-27T09:08:25Z",
      "updated_at": "2017-06-27T09:08:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219504",
      "pull_request_review_id": 46487908,
      "id": 124219504,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDIxOTUwNA==",
      "diff_hunk": "@@ -1,108 +1,157 @@\n-Regression tests\n-================\n+# Functional tests\n \n-### [test_framework/authproxy.py](test_framework/authproxy.py)\n-Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n+### Writing Functional Tests\n \n-### [test_framework/test_framework.py](test_framework/test_framework.py)\n-Base class for new regression tests.\n+#### Example test\n \n-### [test_framework/util.py](test_framework/util.py)\n-Generally useful functions.\n+The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n+the RPC and p2p interfaces. If you are writing your first test, copy that file\n+and modify to fit your needs.\n \n-### [test_framework/mininode.py](test_framework/mininode.py)\n-Basic code to support p2p connectivity to a bitcoind.\n+#### Coverage\n \n-### [test_framework/comptool.py](test_framework/comptool.py)\n-Framework for comparison-tool style, p2p tests.\n+Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+called by the tests and prints a report of uncovered RPCs in the summary. This\n+can be used (along with the `--extended` argument) to find out which RPCs we\n+don't have test cases for.\n \n-### [test_framework/script.py](test_framework/script.py)\n-Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+#### Style guidelines\n \n-### [test_framework/blockstore.py](test_framework/blockstore.py)\n-Implements disk-backed block and tx storage.\n+- Where possible, try to adhere to [PEP-8 guidelines]([https://www.python.org/dev/peps/pep-0008/)\n+- Use a python linter like flake8 before submitting PRs to catch common style\n+  nits (eg trailing whitespace, unused imports, etc)\n+- Avoid wildcard imports where possible\n+- Use a module-level docstring to describe what the test is testing, and how it\n+  is testing it.\n+- When subclassing the BitcoinTestFramwork, place overrides for the\n+  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n+  locally-defined helper methods, then the `run_test()` method.\n \n-### [test_framework/key.py](test_framework/key.py)\n-Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+#### General test-writing advice\n \n-### [test_framework/bignum.py](test_framework/bignum.py)\n-Helpers for script.py\n+- Set `self.num_nodes` to the minimum number of nodes necessary for the test.\n+  Having additional unrequired nodes adds to the execution time of the test as\n+  well as memory/CPU/disk requirements (which is important when running tests in\n+  parallel or on Travis).\n+- Avoid stop-starting the nodes multiple times during the test if possible. A\n+  stop-start takes several seconds, so doing it several times blows up the\n+  runtime of the test.\n+- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+  or not to use the cached data directories. The cached data directories\n+  contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n+  has 25 mature blocks (25x50=1250 BTC) in its wallet.\n+- When calling RPCs with lots of arguments, consider using named keyword\n+  arguments instead of positional arguments to make the intent of the call\n+  clear to readers.\n \n-### [test_framework/blocktools.py](test_framework/blocktools.py)\n-Helper functions for creating blocks and transactions.\n+#### RPC and p2p definitions",
      "path": "test/functional/README.md",
      "position": null,
      "original_position": 69,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123703325,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2017-06-27T09:08:29Z",
      "updated_at": "2017-06-27T09:08:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124219504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124219504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124271553",
      "pull_request_review_id": 46545058,
      "id": 124271553,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI3MTU1Mw==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use --tracerpc to trace out all the RPC calls and responses to the console. For\n+some tests (eg any that use `submitblock` to submit a full block over RPC),\n+this can result in a lot of screen output.\n+\n+By default, the test data directory will be deleted after a successful run.\n+Use `--nocleanup` to leave the test data directory intact. The test data\n+directory is never deleted after a failed test.\n+\n+##### Attaching a debugger\n+\n+A python debugger can be attached to tests at any point. Just add the line:\n+\n+```py\n+import pdb; pdb.set_trace()",
      "path": "test/README.md",
      "position": 179,
      "original_position": 175,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123700235,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "how is this such a secret!\r\n\r\nAnother pro-tip that might be worthwhile is if you need to introspect bitcoind itself during a test you set a pdb break, then `gdb path/to/bitcoind <pid>` to attach to it.\r\n\r\nSorry I never saw this PR while it was live :/",
      "created_at": "2017-06-27T13:24:52Z",
      "updated_at": "2017-06-27T13:24:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124271553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124271553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124279716",
      "pull_request_review_id": 46554067,
      "id": 124279716,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI3OTcxNg==",
      "diff_hunk": "@@ -15,84 +15,148 @@ The util tests are run as part of `make check` target. The functional\n tests are run by the travis continuous build process whenever a pull\n request is opened. Both sets of tests can also be run locally.\n \n-Functional Test dependencies\n-============================\n+# Running tests locally\n+\n+Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n The ZMQ functional test requires a python ZMQ library. To install it:\n \n - on Unix, run `sudo apt-get install python3-zmq`\n - on mac OS, run `pip3 install pyzmq`\n \n-Running tests locally\n-=====================\n+#### Running the tests\n \n-Build for your system first. Be sure to enable wallet, utils and daemon when you configure. Tests will not run otherwise.\n+Individual tests can be run by directly calling the test script, eg:\n \n-Functional tests\n-----------------\n+```\n+test/functional/replace-by-fee.py\n+```\n \n-You can run any single test by calling\n+or can be run through the test_runner harness, eg:\n \n-    test/functional/test_runner.py <testname>\n+```\n+test/functional/test_runner.py replace-by-fee.py\n+```\n \n-Or you can run any combination (incl. duplicates) of tests by calling\n+You can run any combination (incl. duplicates) of tests by calling:\n \n-    test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n \n-Run the regression test suite with\n+Run the regression test suite with:\n \n-    test/functional/test_runner.py\n+```\n+test/functional/test_runner.py\n+```\n \n Run all possible tests with\n \n-    test/functional/test_runner.py --extended\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n \n-By default, tests will be run in parallel. To specify how many jobs to run,\n-append `--jobs=n` (default n=4).\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test_runner.py -h` to see them all.\n \n-If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n+#### Troubleshooting and debugging test failures\n \n-Possible options, which apply to each individual test run:\n+##### Resource contention\n \n-```\n-  -h, --help            show this help message and exit\n-  --nocleanup           Leave bitcoinds and test.* datadir on exit or error\n-  --noshutdown          Don't stop bitcoinds after the test execution\n-  --srcdir=SRCDIR       Source directory containing bitcoind/bitcoin-cli\n-                        (default: ../../src)\n-  --tmpdir=TMPDIR       Root directory for datadirs\n-  --tracerpc            Print out all RPC calls as they are made\n-  --coveragedir=COVERAGEDIR\n-                        Write tested RPC commands into this directory\n+The p2p and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test_framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them by running:\n+\n+```bash\n+killall bitcoind\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n-output (example: `PYTHON_DEBUG=1 test/functional/test_runner.py wallet`).\n+or\n \n-A 200-block -regtest blockchain and wallets for four nodes\n-is created the first time a regression test is run and\n-is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in its wallet.\n+```bash\n+pkill -9 bitcoind\n+```\n \n-After the first run, the cache/ blockchain and wallets are\n-copied into a temporary directory and used as the initial\n-test state.\n+##### Data directory cache\n \n-If you get into a bad state, you should be able\n-to recover with:\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n \n ```bash\n rm -rf cache\n killall bitcoind\n ```\n \n-Util tests\n-----------\n+##### Test logging\n+\n+The tests contain logging at different levels (debug, info, warning, etc). By\n+default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run on Travis, no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use --tracerpc to trace out all the RPC calls and responses to the console. For\n+some tests (eg any that use `submitblock` to submit a full block over RPC),\n+this can result in a lot of screen output.\n+\n+By default, the test data directory will be deleted after a successful run.\n+Use `--nocleanup` to leave the test data directory intact. The test data\n+directory is never deleted after a failed test.\n+\n+##### Attaching a debugger\n+\n+A python debugger can be attached to tests at any point. Just add the line:\n+\n+```py\n+import pdb; pdb.set_trace()",
      "path": "test/README.md",
      "position": 179,
      "original_position": 175,
      "commit_id": "e7ba6c16b34443cf0774d707d9918ebc9835d6ca",
      "original_commit_id": "5a0134a5deb09103e4ba70ebf519c26c1557985b",
      "in_reply_to_id": 123700235,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good tip @instagibbs . I'll happily ACK a PR that adds that to `test/README.md`",
      "created_at": "2017-06-27T13:54:23Z",
      "updated_at": "2017-06-27T13:54:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10612#discussion_r124279716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124279716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10612"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    }
  ]
}