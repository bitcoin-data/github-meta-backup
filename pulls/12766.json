{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766",
    "id": 177054887,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc3MDU0ODg3",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12766",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/12766.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/12766.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
    "number": 12766,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[Tests] Tidy up REST interface functional tests",
    "user": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Following the comment at https://github.com/bitcoin/bitcoin/pull/12717#pullrequestreview-106189117.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2018-03-23T12:23:56Z",
    "updated_at": "2021-09-08T12:49:11Z",
    "closed_at": "2018-04-07T14:16:45Z",
    "mergeable_state": "unknown",
    "merged_at": "2018-04-07T14:16:45Z",
    "merge_commit_sha": "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "romanz:tidy_up_rest_test",
      "ref": "tidy_up_rest_test",
      "sha": "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 125523455,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjU1MjM0NTU=",
        "name": "bitcoin",
        "full_name": "romanz/bitcoin",
        "owner": {
          "login": "romanz",
          "id": 9900,
          "node_id": "MDQ6VXNlcjk5MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/romanz",
          "html_url": "https://github.com/romanz",
          "followers_url": "https://api.github.com/users/romanz/followers",
          "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
          "organizations_url": "https://api.github.com/users/romanz/orgs",
          "repos_url": "https://api.github.com/users/romanz/repos",
          "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/romanz/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/romanz/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/romanz/bitcoin",
        "archive_url": "https://api.github.com/repos/romanz/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/romanz/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/romanz/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/romanz/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/romanz/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/romanz/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/romanz/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/romanz/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/romanz/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/romanz/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/romanz/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/romanz/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/romanz/bitcoin/events",
        "forks_url": "https://api.github.com/repos/romanz/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/romanz/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/romanz/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/romanz/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/romanz/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/romanz/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/romanz/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/romanz/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/romanz/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/romanz/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/romanz/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/romanz/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/romanz/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/romanz/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/romanz/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/romanz/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:romanz/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/romanz/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/romanz/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/romanz/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/romanz/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/romanz/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/romanz/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/romanz/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/romanz/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/romanz/bitcoin/hooks",
        "svn_url": "https://github.com/romanz/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 181238,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2022-01-09T20:51:37Z",
        "created_at": "2018-03-16T13:59:02Z",
        "updated_at": "2018-08-21T19:00:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c564424d98b1561f16e633528172b3583719e5f3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T00:30:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 194,
    "deletions": 248,
    "changed_files": 1,
    "commits": 6,
    "review_comments": 2,
    "comments": 7
  },
  "events": [
    {
      "event": "labeled",
      "id": 1537731514,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE1Mzc3MzE1MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1537731514",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-23T12:25:00Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 375650628,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTY1MDYyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375650628",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-23T12:31:40Z",
      "updated_at": "2018-03-23T12:31:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jnewbery Please let me know what else could be improved in the tests :)",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-375650628",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766"
    },
    {
      "event": "mentioned",
      "id": 1537742531,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUzNzc0MjUzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1537742531",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-23T12:31:40Z"
    },
    {
      "event": "subscribed",
      "id": 1537742532,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1Mzc3NDI1MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1537742532",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-23T12:31:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1537940554,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUzNzk0MDU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1537940554",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-23T14:12:25Z"
    },
    {
      "event": "review_requested",
      "id": 1539995944,
      "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50MTUzOTk5NTk0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1539995944",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-26T04:25:31Z",
      "requested_reviewer": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 376202949,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjIwMjk0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376202949",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-26T15:16:25Z",
      "updated_at": "2018-03-26T15:16:25Z",
      "author_association": "MEMBER",
      "body": "Will review after #12717 is merged (feel free to ping me again once that happens!)",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-376202949",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766"
    },
    {
      "event": "commented",
      "id": 376648786,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjY0ODc4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376648786",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-27T19:38:14Z",
      "updated_at": "2018-03-27T19:38:14Z",
      "author_association": "MEMBER",
      "body": "> Will review after #12717 is merged (feel free to ping me again once that happens!)\r\n\r\nIt's merged, please rebase (so that this is only test changes).",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-376648786",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1544112389,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU0NDExMjM4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1544112389",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-27T20:03:44Z"
    },
    {
      "event": "renamed",
      "id": 1544113464,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTU0NDExMzQ2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1544113464",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-27T20:04:20Z",
      "rename": {
        "from": "[WIP] Tidy up REST interface functional tests",
        "to": "[Tests] Tidy up REST interface functional tests"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1552136679,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU1MjEzNjY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1552136679",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-02T15:16:13Z"
    },
    {
      "event": "commented",
      "id": 377972377,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzk3MjM3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377972377",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-02T16:37:10Z",
      "updated_at": "2018-04-02T16:37:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jnewbery Ping :)",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-377972377",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766"
    },
    {
      "event": "mentioned",
      "id": 1552272817,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU1MjI3MjgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1552272817",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-02T16:37:10Z"
    },
    {
      "event": "subscribed",
      "id": 1552272819,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NTIyNzI4MTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1552272819",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-02T16:37:10Z"
    },
    {
      "event": "reviewed",
      "id": 108687425,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA4Njg3NDI1",
      "url": null,
      "actor": null,
      "commit_id": "d54e3e704838eb39a5e6e33d8b530c6ed404fd49",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK d54e3e704838eb39a5e6e33d8b530c6ed404fd49. One comment inline.\r\n\r\nCommits can probably be squashed a bit before merge. Feel free to take my changes without the commit messages if that makes things more structured.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#pullrequestreview-108687425",
      "submitted_at": "2018-04-02T18:02:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1553444713,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU1MzQ0NDcxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1553444713",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-03T07:47:18Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmYxOTBlNGU3ZDc5YmU2ZjQ3NDlkZWMyNGEzOTMzZTdhOGE0NTA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abf190e4e7d79be6f4749dec24a3933e7a8a4507",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/abf190e4e7d79be6f4749dec24a3933e7a8a4507",
      "tree": {
        "sha": "c86e72a0929f046b9a556a890c5769dc60f3913e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c86e72a0929f046b9a556a890c5769dc60f3913e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c86e72a0929f046b9a556a890c5769dc60f3913e\nparent 18815b4bfb20c9c1112e547217662529d81e4393\nauthor John Newbery <john@johnnewbery.com> 1521736597 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742004 +0300\n\n[tests] fix flake8 warnings in interface_rest.py test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMvcPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7C9oA/2nO\neIw/hsuf5Jk6qw79dic6rrUXL1gtf7LNJG1d80mZAP9dMVHNOIEd/ROj2kcyIOJV\nLElf4iRgQ5b9isRiTNksMg==\n=v1cB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18815b4bfb20c9c1112e547217662529d81e4393",
          "sha": "18815b4bfb20c9c1112e547217662529d81e4393",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/18815b4bfb20c9c1112e547217662529d81e4393"
        }
      ],
      "message": "[tests] fix flake8 warnings in interface_rest.py test",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:24Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T16:36:37Z"
      },
      "sha": "abf190e4e7d79be6f4749dec24a3933e7a8a4507"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmQ0NDkwZGIxMzgxYzBhNjgxMTJlZGZiMmIyZTVmNTkwNmRhYjhj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
      "tree": {
        "sha": "4cc6e4309bcf1328564eca840da8efe1b3d12386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cc6e4309bcf1328564eca840da8efe1b3d12386"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4cc6e4309bcf1328564eca840da8efe1b3d12386\nparent abf190e4e7d79be6f4749dec24a3933e7a8a4507\nauthor John Newbery <john@johnnewbery.com> 1521739477 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742009 +0300\n\n[tests] improve logging and documentation in interface_rest.py\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMv8PHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7B14A/iES\nG2TiDg1m6Q8fasjc0nnJwCn0HxI4k+JZQ0f3NDemAP9wrSDGcw7gLy5lLgUcME5d\nR5XdQp2Hp+zJDLoWHJdF+A==\n=GZPS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abf190e4e7d79be6f4749dec24a3933e7a8a4507",
          "sha": "abf190e4e7d79be6f4749dec24a3933e7a8a4507",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/abf190e4e7d79be6f4749dec24a3933e7a8a4507"
        }
      ],
      "message": "[tests] improve logging and documentation in interface_rest.py",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:29Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T17:24:37Z"
      },
      "sha": "3fd4490db1381c0a68112edfb2b2e5f5906dab8c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTMxODFhNzY3NmM4MjJiMmEzNjljNzQ1ZTBjNDViMDM0N2M3OGUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a3181a7676c822b2a369c745e0c45b0347c78e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7a3181a7676c822b2a369c745e0c45b0347c78e1",
      "tree": {
        "sha": "064f5fa7546c48f93b1eb59645e328cb3c073ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/064f5fa7546c48f93b1eb59645e328cb3c073ca2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 064f5fa7546c48f93b1eb59645e328cb3c073ca2\nparent 3fd4490db1381c0a68112edfb2b2e5f5906dab8c\nauthor John Newbery <john@johnnewbery.com> 1521743197 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742017 +0300\n\n[tests] Make json request building more consistent in interface_rest.py\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMwcPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7nskA/Rjl\nq/TPrfcUshd/wvNMx6+NjdxP7DNciKQgoKHGzgxzAP9sxvxRBmF/uGHVXMZdOeLy\nCj0OgAHMQdItNHkRLTOfPg==\n=pmAv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
          "sha": "3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd4490db1381c0a68112edfb2b2e5f5906dab8c"
        }
      ],
      "message": "[tests] Make json request building more consistent in interface_rest.py",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:37Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T18:26:37Z"
      },
      "sha": "7a3181a7676c822b2a369c745e0c45b0347c78e1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDAwZmJlZDNjZmNmZTdlOTIxNTAwMTc5MTgzNTg5YWM0YWFkNDE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad00fbed3cfcfe7e921500179183589ac4aad419",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ad00fbed3cfcfe7e921500179183589ac4aad419",
      "tree": {
        "sha": "fe842545d1a575fc687ef00c6b18a33df7fafdc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe842545d1a575fc687ef00c6b18a33df7fafdc1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fe842545d1a575fc687ef00c6b18a33df7fafdc1\nparent 7a3181a7676c822b2a369c745e0c45b0347c78e1\nauthor John Newbery <john@johnnewbery.com> 1521751029 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742025 +0300\n\n[tests] refactor interface_rest.py to avoid code repetition\n\nAlso refactor txout index parsing and formatting.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMw4PHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7ixIBAPxp\ngoxb0fvdLvRK4n1XJC/egU+b4u00qJ+5lVeZOMH6AP0eyZuMyT8yEFED8lBs10Y3\no06CL6uxaIEqf76MF1HP9Q==\n=d+of\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a3181a7676c822b2a369c745e0c45b0347c78e1",
          "sha": "7a3181a7676c822b2a369c745e0c45b0347c78e1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7a3181a7676c822b2a369c745e0c45b0347c78e1"
        }
      ],
      "message": "[tests] refactor interface_rest.py to avoid code repetition\n\nAlso refactor txout index parsing and formatting.",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:45Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T20:37:09Z"
      },
      "sha": "ad00fbed3cfcfe7e921500179183589ac4aad419"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGU1OTY0ZTNmOGM1MDM5ODc4ZTEyOTYzMTFiYjAzMzdjMTUyZDJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ade5964e3f8c5039878e1296311bb0337c152d2f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ade5964e3f8c5039878e1296311bb0337c152d2f",
      "tree": {
        "sha": "6c41d0d482d587eb92c491a9f0a6489b325ee662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c41d0d482d587eb92c491a9f0a6489b325ee662"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6c41d0d482d587eb92c491a9f0a6489b325ee662\nparent ad00fbed3cfcfe7e921500179183589ac4aad419\nauthor John Newbery <john@johnnewbery.com> 1521751282 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742032 +0300\n\n[tests] only use 2 nodes in interface_rest.py\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMxUPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7uCMBALt5\nCDtbG4KJ3rAoU5rWK38naSau+4JYE06S5ULMDoleAP4lTu7IhXnEu3KfGx3kWjkv\n1/d6/LN+GRBoVa2dIWUbog==\n=Neg6\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad00fbed3cfcfe7e921500179183589ac4aad419",
          "sha": "ad00fbed3cfcfe7e921500179183589ac4aad419",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ad00fbed3cfcfe7e921500179183589ac4aad419"
        }
      ],
      "message": "[tests] only use 2 nodes in interface_rest.py",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:52Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T20:41:22Z"
      },
      "sha": "ade5964e3f8c5039878e1296311bb0337c152d2f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWVmYzFmNjJjZWY3ZTE5ZWZjYjU4YmE2OGZiYzIwNTNiZmExOWEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "tree": {
        "sha": "ba1c9689d8aa12c95c30534fa3b605bccba17fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba1c9689d8aa12c95c30534fa3b605bccba17fad"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ba1c9689d8aa12c95c30534fa3b605bccba17fad\nparent ade5964e3f8c5039878e1296311bb0337c152d2f\nauthor Roman Zeyde <me@romanzey.de> 1521797994 +0300\ncommitter Roman Zeyde <me@romanzey.de> 1522742039 +0300\n\n[tests] simplify binary and hex response parsing in interface_rest.py\n\nWe use assert_greater_than_or_equal(), since the hex response contains\nan extra b'\\n' traling byte.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMxsPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7IdkBAKLl\nYiFSQ2c31S8TbD+UiaIr4wiJCG+XC10SzZzkP3saAP9VNgqHYYotitPwFksvEW2f\n5DTeAQE6+TfGr5Kbb5FA7Q==\n=ojAZ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ade5964e3f8c5039878e1296311bb0337c152d2f",
          "sha": "ade5964e3f8c5039878e1296311bb0337c152d2f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ade5964e3f8c5039878e1296311bb0337c152d2f"
        }
      ],
      "message": "[tests] simplify binary and hex response parsing in interface_rest.py\n\nWe use assert_greater_than_or_equal(), since the hex response contains\nan extra b'\\n' traling byte.",
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:59Z"
      },
      "author": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-03-23T09:39:54Z"
      },
      "sha": "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1553457815,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU1MzQ1NzgxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1553457815",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-03T07:54:51Z"
    },
    {
      "event": "commented",
      "id": 378175309,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODE3NTMwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378175309",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-03T08:45:41Z",
      "updated_at": "2018-04-03T08:45:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Commits can probably be squashed a bit before merge. \r\n\r\nSquashed most of the small commits into a few large ones.",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-378175309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766"
    },
    {
      "event": "commented",
      "id": 378304826,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMwNDgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378304826",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-03T16:07:50Z",
      "updated_at": "2018-04-03T16:07:50Z",
      "author_association": "MEMBER",
      "body": "Tested ACK 55efc1f62cef7e19efcb58ba68fbc2053bfa19a0.\r\n\r\nNicely structured PR. Very easy to review! Thanks",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-378304826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766"
    },
    {
      "event": "commented",
      "id": 379472101,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQ3MjEwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379472101",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-07T14:09:49Z",
      "updated_at": "2018-04-07T14:09:49Z",
      "author_association": "MEMBER",
      "body": "utACK 55efc1f",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-379472101",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12766"
    },
    {
      "event": "merged",
      "id": 1562205760,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTU2MjIwNTc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1562205760",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "created_at": "2018-04-07T14:16:45Z"
    },
    {
      "event": "closed",
      "id": 1562205761,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTU2MjIwNTc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1562205761",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-07T14:16:45Z"
    },
    {
      "event": "referenced",
      "id": 1562205806,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE1NjIyMDU4MDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1562205806",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69310a342fd3c60c0c24fa1bafd8dfe8c1475ea8",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69310a342fd3c60c0c24fa1bafd8dfe8c1475ea8",
      "created_at": "2018-04-07T14:16:53Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 1562621392,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQxNTYyNjIxMzky",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1562621392",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-08T14:22:54Z"
    },
    {
      "event": "referenced",
      "id": 4780989782,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3ODA5ODk3ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4780989782",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d69f70401438d1570c45f7ef1867f7d5de2125aa",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/d69f70401438d1570c45f7ef1867f7d5de2125aa",
      "created_at": "2021-05-21T19:20:41Z"
    },
    {
      "event": "referenced",
      "id": 4781025667,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3ODEwMjU2Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4781025667",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b1223b4925aede729972d4a7b247e0753800f634",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/b1223b4925aede729972d4a7b247e0753800f634",
      "created_at": "2021-05-21T19:30:15Z"
    },
    {
      "event": "referenced",
      "id": 4781289616,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3ODEyODk2MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4781289616",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "41a616e0cca136c67d151edc31ba0b318ad5b95a",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/41a616e0cca136c67d151edc31ba0b318ad5b95a",
      "created_at": "2021-05-21T20:44:35Z"
    },
    {
      "event": "referenced",
      "id": 4782767764,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3ODI3Njc3NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4782767764",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "213e509f30de4cd48dde45c5f479304b6af9fb36",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/213e509f30de4cd48dde45c5f479304b6af9fb36",
      "created_at": "2021-05-22T22:40:25Z"
    },
    {
      "event": "referenced",
      "id": 4790179522,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3OTAxNzk1MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4790179522",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "64bbcbd405574fe36f71b11a1c76a0362b7dd281",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/64bbcbd405574fe36f71b11a1c76a0362b7dd281",
      "created_at": "2021-05-25T05:36:40Z"
    },
    {
      "event": "locked",
      "id": 5272094272,
      "node_id": "LOE_lADOABII584SW9t7zwAAAAE6PcZA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5272094272",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T12:49:11Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178604911",
      "pull_request_review_id": 108687425,
      "id": 178604911,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODYwNDkxMQ==",
      "diff_hunk": "@@ -4,351 +4,297 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from struct import *\n+import binascii\n+from decimal import Decimal\n+from enum import Enum\n from io import BytesIO\n-from codecs import encode\n+import json\n+from struct import pack, unpack\n \n import http.client\n import urllib.parse\n \n-def deser_uint256(f):\n-    r = 0\n-    for i in range(8):\n-        t = unpack(b\"<I\", f.read(4))[0]\n-        r += t << (i * 32)\n-    return r\n-\n-#allows simple http get calls\n-def http_get_call(host, port, path, response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('GET', path)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read().decode('utf-8')\n-\n-#allows simple http post calls with a request body\n-def http_post_call(host, port, path, requestdata = '', response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('POST', path, requestdata)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read()\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class ReqType(Enum):\n+    JSON = 1\n+    BIN = 2\n+    HEX = 3\n+\n+class RetType(Enum):\n+    OBJ = 1\n+    BYTES = 2\n+    JSON = 3\n+\n+def filter_output_indices_by_value(vouts, value):\n+    for vout in vouts:\n+        if vout['value'] == value:\n+            yield vout['n']\n \n class RESTTest (BitcoinTestFramework):\n-    FORMAT_SEPARATOR = \".\"\n-\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[\"-rest\"]] * self.num_nodes\n-\n-    def setup_network(self, split=False):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-rest\"], []]\n+\n+    def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n+        rest_uri = '/rest' + uri\n+        if req_type == ReqType.JSON:\n+            rest_uri += '.json'\n+        elif req_type == ReqType.BIN:\n+            rest_uri += '.bin'\n+        elif req_type == ReqType.HEX:\n+            rest_uri += '.hex'\n+\n+        conn = http.client.HTTPConnection(self.url.hostname, self.url.port)\n+        self.log.debug('%s %s %s', http_method, rest_uri, body)\n+        if http_method == 'GET':\n+            conn.request('GET', rest_uri)\n+        elif http_method == 'POST':\n+            conn.request('POST', rest_uri, body)\n+        resp = conn.getresponse()\n+\n+        assert_equal(resp.status, status)\n+\n+        if ret_type == RetType.OBJ:\n+            return resp\n+        elif ret_type == RetType.BYTES:\n+            return resp.read()\n+        elif ret_type == RetType.JSON:\n+            return json.loads(resp.read().decode('utf-8'), parse_float=Decimal)\n \n     def run_test(self):\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-        self.log.info(\"Mining blocks...\")\n+        self.url = urllib.parse.urlparse(self.nodes[0].url)\n+        self.log.info(\"Mine blocks and send Bitcoin to node 1\")\n+\n+        # Random address so node1's balance doesn't increase\n+        not_related_address = \"2MxqoHEdNQTyYeX1mHcbrrpzgojbosTpCvJ\"\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[2].generate(100)\n+        self.nodes[1].generatetoaddress(100, not_related_address)\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[2].generate(1)\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\")) #balance now should be 0.1 on node 1\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n-        # load the latest 0.1 tx over the REST API\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n-        vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n+        self.log.info(\"Load the transaction using the /tx URI\")\n+\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n \n+        self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        #######################################\n-        # GETUTXOS: query an unspent outpoint #\n-        #######################################\n-        json_request = '/'+txid+'-'+str(n)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is one utxo\n+        # Make sure there is one utxo\n         assert_equal(len(json_obj['utxos']), 1)\n-        assert_equal(json_obj['utxos'][0]['value'], 0.1)\n+        assert_equal(json_obj['utxos'][0]['value'], Decimal('0.1'))\n \n+        self.log.info(\"Query a spent TXO using the /getutxos URI\")\n \n-        #################################################\n-        # GETUTXOS: now query an already spent outpoint #\n-        #################################################\n-        json_request = '/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is no utxo in the response because this oupoint has been spent\n+        # Make sure there is no utxo in the response because this outpoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        #check bitmap\n+        # Check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n \n+        self.log.info(\"Query two TXOs using the /getutxos URI\")\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}/{}-{}\".format(*(spending + spent)))\n \n-        ##################################################\n-        # GETUTXOS: now check both with the same request #\n-        ##################################################\n-        json_request = '/'+txid+'-'+str(n)+'/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n \n-        #test binary response\n-        bb_hash = self.nodes[0].getbestblockhash()\n-\n-        binaryRequest = b'\\x01\\x02'\n-        binaryRequest += hex_str_to_bytes(txid)\n-        binaryRequest += pack(\"i\", n)\n-        binaryRequest += hex_str_to_bytes(vintx)\n-        binaryRequest += pack(\"i\", 0)\n+        self.log.info(\"Query the TXOs using the /getutxos URI with a binary response\")\n \n-        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n-        output = BytesIO()\n-        output.write(bin_response)\n-        output.seek(0)\n-        chainHeight = unpack(\"i\", output.read(4))[0]\n-        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n+        bin_request = b'\\x01\\x02'\n+        for txid, n in [spending, spent]:\n+            bin_request += hex_str_to_bytes(txid)\n+            bin_request += pack(\"i\", n)\n \n-        assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n-        assert_equal(chainHeight, 102) #chain height must be 102\n+        bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n+        output = BytesIO(bin_response)\n+        chain_height, = unpack(\"i\", output.read(4))\n+        response_hash = binascii.hexlify(output.read(32)[::-1]).decode('ascii')\n \n+        assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n+        assert_equal(chain_height, 102)  # chain height must be 102\n \n-        ############################\n-        # GETUTXOS: mempool checks #\n-        ############################\n+        self.log.info(\"Test the /getutxos URI with and without /checkmempool\")\n+        # Create a transaction, check that it's found with /checkmempool, but\n+        # not found without. Then confirm the transaction and check that it's\n+        # found with or without /checkmempool.\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n         # get the spent output to later check for utxo (should be spent by then)\n-        spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n-        spending = '{}-{}'.format(txid, n)\n-\n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just added to the mempool\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n-\n-        json_request = '/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because its spending tx is not confirmed\n-\n-        json_request = '/checkmempool/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just spent (by mempool tx)\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 0)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        #do some invalid requests\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n-\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        #test limits\n-        json_request = '/checkmempool/'\n-        for x in range(0, 20):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n-\n-        json_request = '/checkmempool/'\n-        for x in range(0, 15):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 200) #must be a 200 because we are within the limits\n-\n-        self.nodes[0].generate(1) #generate block to not affect upcoming tests\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        # Do some invalid requests\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.JSON, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos/checkmempool\", http_method='POST', req_type=ReqType.JSON, status=400, ret_type=RetType.OBJ)\n+\n+        # Test limits\n+        long_uri = '/'.join([\"{}-{}\".format(txid, n) for n in range(20)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=400, ret_type=RetType.OBJ)\n+\n+        long_uri = '/'.join(['{}-{}'.format(txid, n) for n in range(15)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n+\n+        self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n \n-        ################\n-        # /rest/block/ #\n-        ################\n+        self.log.info(\"Test the /block and /headers URIs\")\n+        bb_hash = self.nodes[0].getbestblockhash()\n \n-        # check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response.status, 200)\n+        # Check binary format\n+        response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n-        response_str = response.read()\n+        response_bytes = response.read()\n \n-        # compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response_header.status, 200)\n+        # Compare with block header\n+        response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n-        response_header_str = response_header.read()\n-        assert_equal(response_str[0:80], response_header_str)\n+        response_header_bytes = response_header.read()\n+        assert_equal(response_bytes[:80], response_header_bytes)\n \n-        # check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_hex.status, 200)\n+        # Check block hex format\n+        response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n-        response_hex_str = response_hex.read()\n-        assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n+        response_hex_bytes = response_hex.read().strip(b'\\n')\n+        assert_equal(binascii.hexlify(response_bytes), response_hex_bytes)\n \n-        # compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_header_hex.status, 200)\n+        # Compare with hex block header\n+        response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n-        response_header_hex_str = response_header_hex.read()\n-        assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n+        response_header_hex_bytes = response_header_hex.read(160)\n+        assert_equal(binascii.hexlify(response_bytes[:80]), response_header_hex_bytes)\n \n-        # check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        block_json_obj = json.loads(block_json_string)\n+        # Check json format\n+        block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n-        # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n-        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n-        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+        # Compare with json block header\n+        json_obj = self.test_rest_request(\"/headers/1/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 1)  # ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash)  # request/response hash should be the same\n \n-        #compare with normal RPC block response\n+        # Compare with normal RPC block response\n         rpc_block_json = self.nodes[0].getblock(bb_hash)\n-        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n-        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n-        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n-        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n-        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n-        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n-        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n-        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n-        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n-        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n-        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n-\n-        #see if we can get 5 headers in one response\n+        for key in ['hash', 'confirmations', 'height', 'version', 'merkleroot', 'time', 'nonce', 'bits', 'difficulty', 'chainwork', 'previousblockhash']:\n+            assert_equal(json_obj[0][key], rpc_block_json[key])\n+\n+        # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str)\n-        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n+        json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+\n+        self.log.info(\"Test the /tx URI\")\n \n-        # do tx test\n         tx_hash = block_json_obj['tx'][0]['txid']\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n         assert_equal(json_obj['txid'], tx_hash)\n \n-        # check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(hex_string.status, 200)\n-        assert_greater_than(int(response.getheader('content-length')), 10)\n+        # Check hex format response\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n \n+        self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n-        # check block tx details\n-        # let's make 3 tx and mine them on node 1\n+        # Make 3 tx and mine them on node 1\n         txs = []\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n         self.sync_all()\n \n-        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_obj = self.test_rest_request(\"/mempool/info\")\n         assert_equal(json_obj['size'], 3)\n         # the size of the memory pool should be greater than 3x ~100 bytes\n         assert_greater_than(json_obj['bytes'], 300)\n \n-        # check that there are our submitted transactions in the TX memory pool\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are our submitted transactions in the TX memory pool\n+        json_obj = self.test_rest_request(\"/mempool/contents\")\n         for i, tx in enumerate(txs):\n-            assert_equal(tx in json_obj, True)\n-            assert_equal(json_obj[tx]['spentby'], txs[i+1:i+2])\n-            assert_equal(json_obj[tx]['depends'], txs[i-1:i])\n+            assert tx in json_obj\n+            assert_equal(json_obj[tx]['spentby'], txs[i + 1:i + 2])\n+            assert_equal(json_obj[tx]['depends'], txs[i - 1:i])\n \n-        # now mine the transactions\n+        # Now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()\n \n-        #check if the 3 tx show up in the new block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+newblockhash[0]+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        for tx in json_obj['tx']:\n-            if not 'coinbase' in tx['vin'][0]: #exclude coinbase\n-                assert_equal(tx['txid'] in txs, True)\n+        # Check if the 3 tx show up in the new block\n+        json_obj = self.test_rest_request(\"/block/{}\".format(newblockhash[0]))\n+        non_coinbase_txs = [tx['txid'] for tx in json_obj['tx']",
      "path": "test/functional/interface_rest.py",
      "position": null,
      "original_position": 520,
      "commit_id": "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "original_commit_id": "d54e3e704838eb39a5e6e33d8b530c6ed404fd49",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure if ordering is guaranteed here. Perhaps construct sets and check for set equality?",
      "created_at": "2018-04-02T17:58:54Z",
      "updated_at": "2018-04-03T07:54:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#discussion_r178604911",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178604911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178751925",
      "pull_request_review_id": 108860121,
      "id": 178751925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODc1MTkyNQ==",
      "diff_hunk": "@@ -4,351 +4,297 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from struct import *\n+import binascii\n+from decimal import Decimal\n+from enum import Enum\n from io import BytesIO\n-from codecs import encode\n+import json\n+from struct import pack, unpack\n \n import http.client\n import urllib.parse\n \n-def deser_uint256(f):\n-    r = 0\n-    for i in range(8):\n-        t = unpack(b\"<I\", f.read(4))[0]\n-        r += t << (i * 32)\n-    return r\n-\n-#allows simple http get calls\n-def http_get_call(host, port, path, response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('GET', path)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read().decode('utf-8')\n-\n-#allows simple http post calls with a request body\n-def http_post_call(host, port, path, requestdata = '', response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('POST', path, requestdata)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read()\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class ReqType(Enum):\n+    JSON = 1\n+    BIN = 2\n+    HEX = 3\n+\n+class RetType(Enum):\n+    OBJ = 1\n+    BYTES = 2\n+    JSON = 3\n+\n+def filter_output_indices_by_value(vouts, value):\n+    for vout in vouts:\n+        if vout['value'] == value:\n+            yield vout['n']\n \n class RESTTest (BitcoinTestFramework):\n-    FORMAT_SEPARATOR = \".\"\n-\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[\"-rest\"]] * self.num_nodes\n-\n-    def setup_network(self, split=False):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-rest\"], []]\n+\n+    def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n+        rest_uri = '/rest' + uri\n+        if req_type == ReqType.JSON:\n+            rest_uri += '.json'\n+        elif req_type == ReqType.BIN:\n+            rest_uri += '.bin'\n+        elif req_type == ReqType.HEX:\n+            rest_uri += '.hex'\n+\n+        conn = http.client.HTTPConnection(self.url.hostname, self.url.port)\n+        self.log.debug('%s %s %s', http_method, rest_uri, body)\n+        if http_method == 'GET':\n+            conn.request('GET', rest_uri)\n+        elif http_method == 'POST':\n+            conn.request('POST', rest_uri, body)\n+        resp = conn.getresponse()\n+\n+        assert_equal(resp.status, status)\n+\n+        if ret_type == RetType.OBJ:\n+            return resp\n+        elif ret_type == RetType.BYTES:\n+            return resp.read()\n+        elif ret_type == RetType.JSON:\n+            return json.loads(resp.read().decode('utf-8'), parse_float=Decimal)\n \n     def run_test(self):\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-        self.log.info(\"Mining blocks...\")\n+        self.url = urllib.parse.urlparse(self.nodes[0].url)\n+        self.log.info(\"Mine blocks and send Bitcoin to node 1\")\n+\n+        # Random address so node1's balance doesn't increase\n+        not_related_address = \"2MxqoHEdNQTyYeX1mHcbrrpzgojbosTpCvJ\"\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[2].generate(100)\n+        self.nodes[1].generatetoaddress(100, not_related_address)\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[2].generate(1)\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\")) #balance now should be 0.1 on node 1\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n-        # load the latest 0.1 tx over the REST API\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n-        vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n+        self.log.info(\"Load the transaction using the /tx URI\")\n+\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n \n+        self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        #######################################\n-        # GETUTXOS: query an unspent outpoint #\n-        #######################################\n-        json_request = '/'+txid+'-'+str(n)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is one utxo\n+        # Make sure there is one utxo\n         assert_equal(len(json_obj['utxos']), 1)\n-        assert_equal(json_obj['utxos'][0]['value'], 0.1)\n+        assert_equal(json_obj['utxos'][0]['value'], Decimal('0.1'))\n \n+        self.log.info(\"Query a spent TXO using the /getutxos URI\")\n \n-        #################################################\n-        # GETUTXOS: now query an already spent outpoint #\n-        #################################################\n-        json_request = '/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is no utxo in the response because this oupoint has been spent\n+        # Make sure there is no utxo in the response because this outpoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        #check bitmap\n+        # Check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n \n+        self.log.info(\"Query two TXOs using the /getutxos URI\")\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}/{}-{}\".format(*(spending + spent)))\n \n-        ##################################################\n-        # GETUTXOS: now check both with the same request #\n-        ##################################################\n-        json_request = '/'+txid+'-'+str(n)+'/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n \n-        #test binary response\n-        bb_hash = self.nodes[0].getbestblockhash()\n-\n-        binaryRequest = b'\\x01\\x02'\n-        binaryRequest += hex_str_to_bytes(txid)\n-        binaryRequest += pack(\"i\", n)\n-        binaryRequest += hex_str_to_bytes(vintx)\n-        binaryRequest += pack(\"i\", 0)\n+        self.log.info(\"Query the TXOs using the /getutxos URI with a binary response\")\n \n-        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n-        output = BytesIO()\n-        output.write(bin_response)\n-        output.seek(0)\n-        chainHeight = unpack(\"i\", output.read(4))[0]\n-        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n+        bin_request = b'\\x01\\x02'\n+        for txid, n in [spending, spent]:\n+            bin_request += hex_str_to_bytes(txid)\n+            bin_request += pack(\"i\", n)\n \n-        assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n-        assert_equal(chainHeight, 102) #chain height must be 102\n+        bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n+        output = BytesIO(bin_response)\n+        chain_height, = unpack(\"i\", output.read(4))\n+        response_hash = binascii.hexlify(output.read(32)[::-1]).decode('ascii')\n \n+        assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n+        assert_equal(chain_height, 102)  # chain height must be 102\n \n-        ############################\n-        # GETUTXOS: mempool checks #\n-        ############################\n+        self.log.info(\"Test the /getutxos URI with and without /checkmempool\")\n+        # Create a transaction, check that it's found with /checkmempool, but\n+        # not found without. Then confirm the transaction and check that it's\n+        # found with or without /checkmempool.\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n         # get the spent output to later check for utxo (should be spent by then)\n-        spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n-        spending = '{}-{}'.format(txid, n)\n-\n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just added to the mempool\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n-\n-        json_request = '/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because its spending tx is not confirmed\n-\n-        json_request = '/checkmempool/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just spent (by mempool tx)\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 0)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        #do some invalid requests\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n-\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        #test limits\n-        json_request = '/checkmempool/'\n-        for x in range(0, 20):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n-\n-        json_request = '/checkmempool/'\n-        for x in range(0, 15):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 200) #must be a 200 because we are within the limits\n-\n-        self.nodes[0].generate(1) #generate block to not affect upcoming tests\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        # Do some invalid requests\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.JSON, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos/checkmempool\", http_method='POST', req_type=ReqType.JSON, status=400, ret_type=RetType.OBJ)\n+\n+        # Test limits\n+        long_uri = '/'.join([\"{}-{}\".format(txid, n) for n in range(20)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=400, ret_type=RetType.OBJ)\n+\n+        long_uri = '/'.join(['{}-{}'.format(txid, n) for n in range(15)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n+\n+        self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n \n-        ################\n-        # /rest/block/ #\n-        ################\n+        self.log.info(\"Test the /block and /headers URIs\")\n+        bb_hash = self.nodes[0].getbestblockhash()\n \n-        # check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response.status, 200)\n+        # Check binary format\n+        response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n-        response_str = response.read()\n+        response_bytes = response.read()\n \n-        # compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response_header.status, 200)\n+        # Compare with block header\n+        response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n-        response_header_str = response_header.read()\n-        assert_equal(response_str[0:80], response_header_str)\n+        response_header_bytes = response_header.read()\n+        assert_equal(response_bytes[:80], response_header_bytes)\n \n-        # check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_hex.status, 200)\n+        # Check block hex format\n+        response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n-        response_hex_str = response_hex.read()\n-        assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n+        response_hex_bytes = response_hex.read().strip(b'\\n')\n+        assert_equal(binascii.hexlify(response_bytes), response_hex_bytes)\n \n-        # compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_header_hex.status, 200)\n+        # Compare with hex block header\n+        response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n-        response_header_hex_str = response_header_hex.read()\n-        assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n+        response_header_hex_bytes = response_header_hex.read(160)\n+        assert_equal(binascii.hexlify(response_bytes[:80]), response_header_hex_bytes)\n \n-        # check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        block_json_obj = json.loads(block_json_string)\n+        # Check json format\n+        block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n-        # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n-        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n-        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+        # Compare with json block header\n+        json_obj = self.test_rest_request(\"/headers/1/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 1)  # ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash)  # request/response hash should be the same\n \n-        #compare with normal RPC block response\n+        # Compare with normal RPC block response\n         rpc_block_json = self.nodes[0].getblock(bb_hash)\n-        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n-        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n-        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n-        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n-        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n-        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n-        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n-        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n-        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n-        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n-        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n-\n-        #see if we can get 5 headers in one response\n+        for key in ['hash', 'confirmations', 'height', 'version', 'merkleroot', 'time', 'nonce', 'bits', 'difficulty', 'chainwork', 'previousblockhash']:\n+            assert_equal(json_obj[0][key], rpc_block_json[key])\n+\n+        # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str)\n-        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n+        json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+\n+        self.log.info(\"Test the /tx URI\")\n \n-        # do tx test\n         tx_hash = block_json_obj['tx'][0]['txid']\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n         assert_equal(json_obj['txid'], tx_hash)\n \n-        # check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(hex_string.status, 200)\n-        assert_greater_than(int(response.getheader('content-length')), 10)\n+        # Check hex format response\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n \n+        self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n-        # check block tx details\n-        # let's make 3 tx and mine them on node 1\n+        # Make 3 tx and mine them on node 1\n         txs = []\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n         self.sync_all()\n \n-        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_obj = self.test_rest_request(\"/mempool/info\")\n         assert_equal(json_obj['size'], 3)\n         # the size of the memory pool should be greater than 3x ~100 bytes\n         assert_greater_than(json_obj['bytes'], 300)\n \n-        # check that there are our submitted transactions in the TX memory pool\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are our submitted transactions in the TX memory pool\n+        json_obj = self.test_rest_request(\"/mempool/contents\")\n         for i, tx in enumerate(txs):\n-            assert_equal(tx in json_obj, True)\n-            assert_equal(json_obj[tx]['spentby'], txs[i+1:i+2])\n-            assert_equal(json_obj[tx]['depends'], txs[i-1:i])\n+            assert tx in json_obj\n+            assert_equal(json_obj[tx]['spentby'], txs[i + 1:i + 2])\n+            assert_equal(json_obj[tx]['depends'], txs[i - 1:i])\n \n-        # now mine the transactions\n+        # Now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()\n \n-        #check if the 3 tx show up in the new block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+newblockhash[0]+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        for tx in json_obj['tx']:\n-            if not 'coinbase' in tx['vin'][0]: #exclude coinbase\n-                assert_equal(tx['txid'] in txs, True)\n+        # Check if the 3 tx show up in the new block\n+        json_obj = self.test_rest_request(\"/block/{}\".format(newblockhash[0]))\n+        non_coinbase_txs = [tx['txid'] for tx in json_obj['tx']",
      "path": "test/functional/interface_rest.py",
      "position": null,
      "original_position": 520,
      "commit_id": "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "original_commit_id": "d54e3e704838eb39a5e6e33d8b530c6ed404fd49",
      "in_reply_to_id": 178604911,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good - done.",
      "created_at": "2018-04-03T08:44:56Z",
      "updated_at": "2018-04-03T08:44:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12766#discussion_r178751925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178751925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    }
  ]
}