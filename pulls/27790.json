{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
    "id": 1371387621,
    "node_id": "PR_kwDOABII585Rvbbl",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/27790",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/27790.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/27790.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27790",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27790/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
    "number": 27790,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "walletdb: Add PrefixCursor",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Split from #24914 as suggested in https://github.com/bitcoin/bitcoin/pull/24914#pullrequestreview-1442091917\r\n\r\nThis PR adds a wallet database cursor that gives a view over all of the records beginning with the same prefix.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "created_at": "2023-05-31T02:56:13Z",
    "updated_at": "2023-06-02T16:00:30Z",
    "closed_at": "2023-06-02T16:00:30Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-06-02T16:00:29Z",
    "merge_commit_sha": "7f2019755d147e7e17c54f0bb61296211bb45262",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:walletdb-prefix-cursor",
      "ref": "walletdb-prefix-cursor",
      "sha": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 34,
        "watchers_count": 34,
        "size": 238743,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T07:15:28Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-05-16T00:18:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "9e54dde04ccd490c6719f5d975ed49a75242611b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34325,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 626,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T07:29:24Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T07:34:31Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 253,
    "deletions": 17,
    "changed_files": 10,
    "commits": 3,
    "review_comments": 20,
    "comments": 1
  },
  "events": [
    {
      "event": "commented",
      "id": 1569422917,
      "node_id": "IC_kwDOABII585di35F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1569422917",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T02:56:15Z",
      "updated_at": "2023-06-02T13:53:43Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1456084608), [furszy](https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1457533319) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#24914](https://github.com/bitcoin/bitcoin/pull/24914) (wallet: Load database records in a particular order by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#issuecomment-1569422917",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27790"
    },
    {
      "event": "comment_deleted",
      "id": 9385288362,
      "node_id": "CDE_lADOABII585nUBupzwAAAAIvaCKq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9385288362",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T04:51:03Z"
    },
    {
      "event": "labeled",
      "id": 9387336201,
      "node_id": "LE_lADOABII585nUBupzwAAAAIvh2IJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9387336201",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T09:01:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9389697164,
      "node_id": "UNLE_lADOABII585nUBupzwAAAAIvq2iM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9389697164",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T12:19:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1453211063,
      "node_id": "PRR_kwDOABII585Wnj23",
      "url": null,
      "actor": null,
      "commit_id": "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1453211063",
      "submitted_at": "2023-05-31T19:11:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg0YjJmMzUzYmJlZmI5MjY0Mjg0ZTc0MzA4NjNiMmZhMWQ3OTZkMzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b2f353bbefb9264284e7430863b2fa1d796d38",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/84b2f353bbefb9264284e7430863b2fa1d796d38",
      "tree": {
        "sha": "31fb3a1fec636bbe336710961261e3b31e2623e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31fb3a1fec636bbe336710961261e3b31e2623e2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71300489af362c3fed4736de6bffab4d758b6a84",
          "sha": "71300489af362c3fed4736de6bffab4d758b6a84",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/71300489af362c3fed4736de6bffab4d758b6a84"
        }
      ],
      "message": "walletdb: Consistently clear key and value streams before writing\n\nBefore writing data to the output key and value streams, make sure they\nare cleared.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-05-31T19:17:05Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-05-15T19:50:35Z"
      },
      "sha": "84b2f353bbefb9264284e7430863b2fa1d796d38"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkODU4YjA1NWRhZWVhMzYzZTA0NTBmMzI3NjcyNjU4NTQ4YmU0YzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d858b055daeea363e0450f327672658548be4c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1d858b055daeea363e0450f327672658548be4c6",
      "tree": {
        "sha": "549e34a4833228c50d39deb7abca9bb8e3243fec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/549e34a4833228c50d39deb7abca9bb8e3243fec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b2f353bbefb9264284e7430863b2fa1d796d38",
          "sha": "84b2f353bbefb9264284e7430863b2fa1d796d38",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/84b2f353bbefb9264284e7430863b2fa1d796d38"
        }
      ],
      "message": "walletdb: Handle when database keys are empty",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-05-31T19:24:06Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2023-05-31T19:22:50Z"
      },
      "sha": "1d858b055daeea363e0450f327672658548be4c6"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9394650304,
      "node_id": "HRFPE_lADOABII585nUBupzwAAAAIv9vzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9394650304",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T19:34:31Z"
    },
    {
      "event": "reviewed",
      "id": 1454166240,
      "node_id": "PRR_kwDOABII585WrNDg",
      "url": null,
      "actor": null,
      "commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1454166240",
      "submitted_at": "2023-05-31T21:12:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
    },
    {
      "event": "reviewed",
      "id": 1454702008,
      "node_id": "PRR_kwDOABII585WtP24",
      "url": null,
      "actor": null,
      "commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1454702008",
      "submitted_at": "2023-06-01T06:46:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
    },
    {
      "event": "referenced",
      "id": 9404301264,
      "node_id": "REFE_lADOABII585nUBupzwAAAAIwij_Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9404301264",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5cd0717a54ce7a2065b29d90717aa2eb1c5e302d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5cd0717a54ce7a2065b29d90717aa2eb1c5e302d",
      "created_at": "2023-06-01T14:38:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9404418903,
      "node_id": "HRFPE_lADOABII585nUBupzwAAAAIwjAtX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9404418903",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T14:46:59Z"
    },
    {
      "event": "referenced",
      "id": 9405551120,
      "node_id": "REFE_lADOABII585nUBupzwAAAAIwnVIQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9405551120",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f45e0669dd1f1bdb243e645691e44993905a3919",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/f45e0669dd1f1bdb243e645691e44993905a3919",
      "created_at": "2023-06-01T16:26:01Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJhNjE2YjkzMmNiOWU5YWRiN2ViOWYxODI2Y2FhNjJjZTQyMmEyMmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "tree": {
        "sha": "032c9cf74574b1f29a39c79b76fc9495353188b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/032c9cf74574b1f29a39c79b76fc9495353188b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d858b055daeea363e0450f327672658548be4c6",
          "sha": "1d858b055daeea363e0450f327672658548be4c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1d858b055daeea363e0450f327672658548be4c6"
        }
      ],
      "message": "wallet: Add GetPrefixCursor to DatabaseBatch\n\nIn order to get records beginning with a prefix, we will need a cursor\nspecifically for that prefix. So add a GetPrefixCursor function and\nDatabaseCursor classes for dealing with those prefixes.\n\nTested on each supported db engine.\n\n1) Write two different key->value elements to db.\n2) Create a new prefix cursor and walk-through every returned element,\n   verifying that it gets parsed properly.\n3) Try to move the cursor outside the filtered range: expect failure\n   and flag complete=true.\n\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\nCo-Authored-By: furszy <matiasfurszyfer@protonmail.com>",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-01T17:09:08Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2022-04-11T21:11:37Z"
      },
      "sha": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9405952459,
      "node_id": "HRFPE_lADOABII585nUBupzwAAAAIwo3HL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9405952459",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T17:09:18Z"
    },
    {
      "event": "reviewed",
      "id": 1456084608,
      "node_id": "PRR_kwDOABII585WyhaA",
      "url": null,
      "actor": null,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK ba616b932cb9e9adb7eb9f1826caa62ce422a22d. Just suggested changes since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1456084608",
      "submitted_at": "2023-06-01T18:38:41Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
    },
    {
      "event": "reviewed",
      "id": 1456344955,
      "node_id": "PRR_kwDOABII585Wzg97",
      "url": null,
      "actor": null,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1456344955",
      "submitted_at": "2023-06-02T02:00:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
    },
    {
      "event": "referenced",
      "id": 9412200323,
      "node_id": "REFE_lADOABII585nUBupzwAAAAIxAseD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9412200323",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "83c7269965c330ae1f4d85b1ba652717c9080914",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/83c7269965c330ae1f4d85b1ba652717c9080914",
      "created_at": "2023-06-02T09:28:09Z"
    },
    {
      "event": "labeled",
      "id": 9414275669,
      "node_id": "LE_lADOABII585nUBupzwAAAAIxInJV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9414275669",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-02T13:24:09Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "reviewed",
      "id": 1457533319,
      "node_id": "PRR_kwDOABII585W4DGH",
      "url": null,
      "actor": null,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK ba616b93\r\n\r\nNice `db_cursor_prefix_byte_test` test case 👌🏼.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#pullrequestreview-1457533319",
      "submitted_at": "2023-06-02T13:53:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
    },
    {
      "event": "merged",
      "id": 9415906852,
      "node_id": "ME_lADOABII585nUBupzwAAAAIxO1Yk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9415906852",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7f2019755d147e7e17c54f0bb61296211bb45262",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f2019755d147e7e17c54f0bb61296211bb45262",
      "created_at": "2023-06-02T16:00:29Z"
    },
    {
      "event": "closed",
      "id": 9415906905,
      "node_id": "CE_lADOABII585nUBupzwAAAAIxO1ZZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9415906905",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-02T16:00:30Z"
    },
    {
      "event": "referenced",
      "id": 9417822714,
      "node_id": "REFE_lADOABII585nUBupzwAAAAIxWJH6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9417822714",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e1a955acce5d695f5d4ac6f680851d26bfb3636f",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/e1a955acce5d695f5d4ac6f680851d26bfb3636f",
      "created_at": "2023-06-02T20:16:54Z"
    },
    {
      "event": "referenced",
      "id": 9417822842,
      "node_id": "REFE_lADOABII585nUBupzwAAAAIxWJJ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9417822842",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1aa882af51f686d19f9e7d866ba6a2526e93de17",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/1aa882af51f686d19f9e7d866ba6a2526e93de17",
      "created_at": "2023-06-02T20:16:55Z"
    },
    {
      "event": "referenced",
      "id": 9418020800,
      "node_id": "REFE_lADOABII585nUBupzwAAAAIxW5fA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9418020800",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ff9d961bf38b24f8f931dcf66799cbc468e473df",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ff9d961bf38b24f8f931dcf66799cbc468e473df",
      "created_at": "2023-06-02T20:48:37Z"
    },
    {
      "event": "referenced",
      "id": 9430739621,
      "node_id": "REFE_lADOABII585nUBupzwAAAAIyHaql",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9430739621",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f4a8269dfc144cc918570bdb870aa5143a11c1fe",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4a8269dfc144cc918570bdb870aa5143a11c1fe",
      "created_at": "2023-06-05T09:51:17Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211714690",
      "pull_request_review_id": 1453211063,
      "id": 1211714690,
      "node_id": "PRRC_kwDOABII585IOUyC",
      "diff_hunk": "@@ -496,6 +497,9 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n         return Status::FAIL;\n     }\n \n+    key.clear();\n+    value.clear();",
      "path": "src/wallet/sqlite.cpp",
      "position": 34,
      "original_position": 13,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (011087176e8aa3ec86f032c3e4c6bac432d0ac3e)\r\n\r\nThis change seems like it might belong in the previous commit \"walletdb: Consistently clear key and value streams before writing\" (5b5c131f9665e21f6dcf109e400926d054dd1fb5)",
      "created_at": "2023-05-31T13:24:16Z",
      "updated_at": "2023-05-31T19:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211714690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211714690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": 504,
      "original_start_line": 500,
      "start_side": "RIGHT",
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211727420",
      "pull_request_review_id": 1453211063,
      "id": 1211727420,
      "node_id": "PRRC_kwDOABII585IOX48",
      "diff_hunk": "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Consistently clear key and value streams before writing\" (5d74d702c16f4e34c96e9573049a2fe930ac935c)\r\n\r\nRight now it seems like there is not test coverage for calling GetNewPrefixCursor with an empty prefix. Also, the `\\xff\\xff` test case I previously suggested is not testing what I originally thought it would test. Because of the way strings are serialized, there's a compact int value before the prefix so the prefix has other characters beside `\\xff`.\r\n\r\nSeeing these things, I wrote a new test case to add more coverage, and wound up finding two corner case bugs in bdb and sqlite code when empty spans are passed around. I think the bugs cannot have real-world side effects, but I'm not sure about this, and think they are probably worth fixing to avoid surprises in the future.\r\n\r\nHere are all the changes I would suggest including the new test and two bugfixes\r\n\r\n```diff\r\ndiff --git a/src/wallet/bdb.cpp b/src/wallet/bdb.cpp\r\nindex 8d764911ca5b..68abdcd81e9e 100644\r\n--- a/src/wallet/bdb.cpp\r\n+++ b/src/wallet/bdb.cpp\r\n@@ -698,7 +698,7 @@ DatabaseCursor::Status BerkeleyCursor::Next(DataStream& ssKey, DataStream& ssVal\r\n     if (ret == DB_NOTFOUND) {\r\n         return Status::DONE;\r\n     }\r\n-    if (ret != 0 || datKey.get_data() == nullptr || datValue.get_data() == nullptr) {\r\n+    if (ret != 0) {\r\n         return Status::FAIL;\r\n     }\r\n \r\ndiff --git a/src/wallet/db.h b/src/wallet/db.h\r\nindex 9d684225c343..9d7bceb893f3 100644\r\n--- a/src/wallet/db.h\r\n+++ b/src/wallet/db.h\r\n@@ -49,6 +49,7 @@ private:\r\n     virtual bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite = true) = 0;\r\n     virtual bool EraseKey(DataStream&& key) = 0;\r\n     virtual bool HasKey(DataStream&& key) = 0;\r\n+    friend class DatabaseBatchTest;\r\n \r\n public:\r\n     explicit DatabaseBatch() {}\r\ndiff --git a/src/wallet/sqlite.cpp b/src/wallet/sqlite.cpp\r\nindex 9c7ec9721ce2..fe10f911c4ce 100644\r\n--- a/src/wallet/sqlite.cpp\r\n+++ b/src/wallet/sqlite.cpp\r\n@@ -40,7 +40,11 @@ static bool BindBlobToStatement(sqlite3_stmt* stmt,\r\n                                 Span<const std::byte> blob,\r\n                                 const std::string& description)\r\n {\r\n-    int res = sqlite3_bind_blob(stmt, index, blob.data(), blob.size(), SQLITE_STATIC);\r\n+    // Pass a pointer to the empty string \"\" below instead of passing the\r\n+    // blob.data() pointer if the blob.data() pointer is null. Passing a null\r\n+    // data pointer to bind_blob would cause sqlite to bind the SQL NULL value\r\n+    // instead of the empty blob value X'', which would mess up SQL comparisons.\r\n+    int res = sqlite3_bind_blob(stmt, index, blob.data() ? static_cast<const void*>(blob.data()) : \"\", blob.size(), SQLITE_STATIC);\r\n     if (res != SQLITE_OK) {\r\n         LogPrintf(\"Unable to bind %s to statement: %s\\n\", description, sqlite3_errstr(res));\r\n         sqlite3_clear_bindings(stmt);\r\ndiff --git a/src/wallet/test/db_tests.cpp b/src/wallet/test/db_tests.cpp\r\nindex 14272e2fe441..a22e1381437c 100644\r\n--- a/src/wallet/test/db_tests.cpp\r\n+++ b/src/wallet/test/db_tests.cpp\r\n@@ -20,7 +20,52 @@\r\n #include <memory>\r\n #include <string>\r\n \r\n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\r\n+{\r\n+    Span key{kv.first}, value{kv.second};\r\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\r\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\r\n+    return os;\r\n+}\r\n+\r\n namespace wallet {\r\n+\r\n+class DatabaseBatchTest\r\n+{\r\n+public:\r\n+    static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\r\n+                           bool overwrite = true)\r\n+    {\r\n+        return batch.Write(DataStream{key}, DataStream{value}, overwrite);\r\n+    }\r\n+};\r\n+\r\n+static Span<const std::byte> StringBytes(std::string_view str)\r\n+{\r\n+    return AsBytes<const char>({str.data(), str.size()});\r\n+}\r\n+\r\n+static SerializeData StringData(std::string_view str)\r\n+{\r\n+    auto bytes = StringBytes(str);\r\n+    return SerializeData{bytes.begin(), bytes.end()};\r\n+}\r\n+\r\n+static void CheckPrefix(DatabaseBatch& batch, Span<const std::byte> prefix, MockableData expected)\r\n+{\r\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\r\n+    MockableData actual;\r\n+    while (true) {\r\n+        DataStream key, value;\r\n+        DatabaseCursor::Status status = cursor->Next(key, value);\r\n+        if (status == DatabaseCursor::Status::DONE) break;\r\n+        BOOST_CHECK(status == DatabaseCursor::Status::MORE);\r\n+        BOOST_CHECK(\r\n+            actual.emplace(SerializeData(key.begin(), key.end()), SerializeData(value.begin(), value.end())).second);\r\n+    }\r\n+    BOOST_CHECK_EQUAL_COLLECTIONS(actual.begin(), actual.end(), expected.begin(), expected.end());\r\n+}\r\n+\r\n BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\r\n \r\n static std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& path, fs::path& database_filename)\r\n@@ -86,28 +131,29 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\r\n     BOOST_CHECK(env_2_a == env_2_b);\r\n }\r\n \r\n-BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\r\n+static std::vector<std::unique_ptr<WalletDatabase>> TestDatabases(const fs::path& path_root)\r\n {\r\n     std::vector<std::unique_ptr<WalletDatabase>> dbs;\r\n-\r\n-    // Create dbs\r\n     DatabaseOptions options;\r\n     DatabaseStatus status;\r\n     bilingual_str error;\r\n-    std::vector<bilingual_str> warnings;\r\n #ifdef USE_BDB\r\n-    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\r\n+    dbs.emplace_back(MakeBerkeleyDatabase(path_root / \"bdb\", options, status, error));\r\n #endif\r\n #ifdef USE_SQLITE\r\n-    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\r\n+    dbs.emplace_back(MakeSQLiteDatabase(path_root / \"sqlite\", options, status, error));\r\n #endif\r\n     dbs.emplace_back(CreateMockableWalletDatabase());\r\n+    return dbs;\r\n+}\r\n \r\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\r\n+{\r\n     // Test each supported db\r\n-    for (const auto& database : dbs) {\r\n+    for (const auto& database : TestDatabases(m_path_root)) {\r\n         BOOST_ASSERT(database);\r\n \r\n-        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\r\n+        std::vector<std::string> prefixes = {\"\", \"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\r\n \r\n         // Write elements to it\r\n         std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\r\n@@ -143,5 +189,31 @@ BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\r\n     }\r\n }\r\n \r\n+// Lower level DatabaseBase::GetNewPrefixCursor test, to cover cases that aren't\r\n+// covered in the higher level test above. The higher level test uses\r\n+// serialized strings which are prefixed with string length, so it doesn't test\r\n+// truly empty prefixes or prefixes that begin with \\xff\r\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_byte_test)\r\n+{\r\n+    const MockableData::value_type\r\n+        e{StringData(\"\"), StringData(\"e\")},\r\n+        p{StringData(\"prefix\"), StringData(\"p\")},\r\n+        ps{StringData(\"prefixsuffix\"), StringData(\"ps\")},\r\n+        f{StringData(\"\\xff\"), StringData(\"f\")},\r\n+        fs{StringData(\"\\xffsuffix\"), StringData(\"fs\")},\r\n+        ff{StringData(\"\\xff\\xff\"), StringData(\"ff\")},\r\n+        ffs{StringData(\"\\xff\\xffsuffix\"), StringData(\"ffs\")};\r\n+    for (const auto& database : TestDatabases(m_path_root)) {\r\n+        std::unique_ptr<DatabaseBatch> batch = database->MakeBatch();\r\n+        for (const auto& [k, v] : {e, p, ps, f, fs, ff, ffs}) {\r\n+            DatabaseBatchTest::WriteBytes(*batch, k, v);\r\n+        }\r\n+        CheckPrefix(*batch, StringBytes(\"\"), {e, p, ps, f, fs, ff, ffs});\r\n+        CheckPrefix(*batch, StringBytes(\"prefix\"), {p, ps});\r\n+        CheckPrefix(*batch, StringBytes(\"\\xff\"), {f, fs, ff, ffs});\r\n+        CheckPrefix(*batch, StringBytes(\"\\xff\\xff\"), {ff, ffs});\r\n+    }\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n } // namespace wallet\r\n\r\n```",
      "created_at": "2023-05-31T13:32:50Z",
      "updated_at": "2023-05-31T19:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211727420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211727420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211828935",
      "pull_request_review_id": 1453211063,
      "id": 1211828935,
      "node_id": "PRRC_kwDOABII585IOwrH",
      "diff_hunk": "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+            for (int i = 0; i < 10; i++) {\n+                DatabaseCursor::Status status = cursor->Next(key, value);\n+                BOOST_ASSERT(status == DatabaseCursor::Status::MORE);\n+\n+                std::string key_back;\n+                key >> key_back;\n+                BOOST_CHECK_EQUAL(key_back, prefix);\n+\n+                unsigned int value_back;\n+                value >> value_back;\n+                BOOST_CHECK_EQUAL(value_back, i);",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"walletdb: Consistently clear key and value streams before writing\" (5d74d702c16f4e34c96e9573049a2fe930ac935c)\r\n\r\nThis test case seems to rely on getting values back in a particular order, but I don't think the sqlite implementation actually guarantees rows will be returned in any particular order, since no sorting is requested.",
      "created_at": "2023-05-31T14:37:56Z",
      "updated_at": "2023-05-31T19:11:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211828935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211828935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219391",
      "pull_request_review_id": 1454018938,
      "id": 1212219391,
      "node_id": "PRRC_kwDOABII585IQP__",
      "diff_hunk": "@@ -496,6 +497,9 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n         return Status::FAIL;\n     }\n \n+    key.clear();\n+    value.clear();",
      "path": "src/wallet/sqlite.cpp",
      "position": 34,
      "original_position": 13,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "in_reply_to_id": 1211714690,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-05-31T19:34:32Z",
      "updated_at": "2023-05-31T19:34:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212219391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": 504,
      "original_start_line": 500,
      "start_side": "RIGHT",
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219741",
      "pull_request_review_id": 1454019786,
      "id": 1212219741,
      "node_id": "PRRC_kwDOABII585IQQFd",
      "diff_hunk": "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "in_reply_to_id": 1211727420,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adopted these suggestions. I've put the bug fixes in an separate commit.",
      "created_at": "2023-05-31T19:34:54Z",
      "updated_at": "2023-05-31T19:34:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212219741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212220552",
      "pull_request_review_id": 1454020832,
      "id": 1212220552,
      "node_id": "PRRC_kwDOABII585IQQSI",
      "diff_hunk": "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+            for (int i = 0; i < 10; i++) {\n+                DatabaseCursor::Status status = cursor->Next(key, value);\n+                BOOST_ASSERT(status == DatabaseCursor::Status::MORE);\n+\n+                std::string key_back;\n+                key >> key_back;\n+                BOOST_CHECK_EQUAL(key_back, prefix);\n+\n+                unsigned int value_back;\n+                value >> value_back;\n+                BOOST_CHECK_EQUAL(value_back, i);",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "in_reply_to_id": 1211828935,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, indeed. I've changed the test to check against the `i` stored in the key.",
      "created_at": "2023-05-31T19:35:30Z",
      "updated_at": "2023-05-31T19:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212220552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212220552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212315030",
      "pull_request_review_id": 1454166240,
      "id": 1212315030,
      "node_id": "PRRC_kwDOABII585IQnWW",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (13476fe7bebdbf51e09821850b2c808c8ecf116a)\r\n\r\nMaybe add a comment above the batch.Write() call like \"Convert the key and value to DataStream objects in order to bypass serialization. We want raw bytes to be written to the database, not serialized byte strings. The DatabaseBatch::Write template method normally serializes its arguments, but because DataStream has a Serialize method that does concatenation instead of serialization, it can be used to bypass serialization.\"\r\n\r\nI was very surprised that this worked and it took me a while to figure out what was happening. I do think it would probably be more straightforward to call the private `DatabaseBatch::WriteKey` method instead of `DatabaseBatch::Write` which is why I added the friend class in my earlier suggestion. But I guess this approach should be ok as long it is explained.\r\n\r\nIt does seem pretty crazy to me that DataStream has a Serialize method that concatenates instead of serializing, and can't be unserialized. But I guess it is handy in this situation and maybe others.",
      "created_at": "2023-05-31T21:07:26Z",
      "updated_at": "2023-05-31T21:12:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212315030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212315030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212664168",
      "pull_request_review_id": 1454699609,
      "id": 1212664168,
      "node_id": "PRRC_kwDOABII585IR8lo",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212315030,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is the same not true for span itself? The only reason it doesn't work is that it is missing a `std::byte` specialization?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3a83d4417b35cb0173286b6da97315be861901bc/src/serialize.h#L202-L206",
      "created_at": "2023-06-01T06:44:52Z",
      "updated_at": "2023-06-01T06:44:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212664168",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212664168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212665991",
      "pull_request_review_id": 1454702008,
      "id": 1212665991,
      "node_id": "PRRC_kwDOABII585IR9CH",
      "diff_hunk": "@@ -78,5 +127,90 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+static std::vector<std::unique_ptr<WalletDatabase>> TestDatabases(const fs::path& path_root)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+    return dbs;\n+}\n+\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    // Test each supported db\n+    for (const auto& database : TestDatabases(m_path_root)) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"\", \"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            DataStream value;\r\n```\r\n\r\nnit (feel free to ignore)",
      "created_at": "2023-06-01T06:46:46Z",
      "updated_at": "2023-06-01T06:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212665991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212665991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213206571",
      "pull_request_review_id": 1455558115,
      "id": 1213206571,
      "node_id": "PRRC_kwDOABII585IUBAr",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212315030,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is the same not true for span itself? \r\n\r\nNo because `Span<char>` is fixed length and can be deserialized, while `DataStream` is variable length and can't be deserialized.\r\n\r\nReasons why I think it would be good to get rid of `DataStream::Serialize` method:\r\n\r\n- `DataStream` has no `Unserialize` method and no reasonable way of adding one that would be consistent with the existing `Serialize` implementation.\r\n- The `Serialize` method has surprising behavior. If `DataStream` was going to have a serialize method I would expect to behave same was as serialize methods as other variable length objects (strings, vectors, maps) and be prefixed with a size field and be deserializable into an empty object. I suggested adding a comment here because code using it was not working the way I expected it to, and it took me a while to figure out how it was working at all.\r\n- No need or use-case for this `Serialize` method. If we want a concatenation operator, `+=` should work perfectly well. `<<` is good to use for serialization and formatting, and should in principle be reversible with `>>`. Concatenation is a different thing.\r\n\r\nIf I remove `DataStream::Serialize` method in master there are only a few compilation errors, so I think I should be able to make a simple PR to clean things up",
      "created_at": "2023-06-01T14:01:17Z",
      "updated_at": "2023-06-01T14:01:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213206571",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213206571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277212",
      "pull_request_review_id": 1455668741,
      "id": 1213277212,
      "node_id": "PRRC_kwDOABII585IUSQc",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212315030,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think @MarcoFalke's point was that `Span`s are serialized without length prefixes, so this function could just pass `key` and `value` directly to `DatabaseBatch::Write` rather than going through a `DataStream`, as long as there is a `Serialize` method for `Span<const std::byte>`. This seems like a more intuitive solution, so I've implemented that.",
      "created_at": "2023-06-01T14:48:56Z",
      "updated_at": "2023-06-01T14:48:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213277212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277344",
      "pull_request_review_id": 1455668976,
      "id": 1213277344,
      "node_id": "PRRC_kwDOABII585IUSSg",
      "diff_hunk": "@@ -78,5 +127,90 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+static std::vector<std::unique_ptr<WalletDatabase>> TestDatabases(const fs::path& path_root)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+    return dbs;\n+}\n+\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    // Test each supported db\n+    for (const auto& database : TestDatabases(m_path_root)) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"\", \"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212665991,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-01T14:49:03Z",
      "updated_at": "2023-06-01T14:49:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213277344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213432081",
      "pull_request_review_id": 1455917373,
      "id": 1213432081,
      "node_id": "PRRC_kwDOABII585IU4ER",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212315030,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, I guess I was objecting to a point Marco wasn't making. But I think I would still like to avoid overloading Serialize for std::byte spans. The whole point of std::byte is that it's supposed to be a very safe type which requires you to be deliberate and explicit about conversions. So I'm not sure it would be great to serialize std::byte spans (or types which can be converted to byte spans) as raw bytes without requiring a more explicit cast.\r\n\r\nMaybe it would make sense to change serialize.h in the future, but I think it would be best to leave it alone in this PR. Would suggest reverting serialize.h and just doing:\r\n\r\n```diff\r\n--- a/src/wallet/test/db_tests.cpp\r\n+++ b/src/wallet/test/db_tests.cpp\r\n@@ -30,12 +30,6 @@ inline std::ostream& operator<<(std::ostream& os, const std::pair<const Serializ\r\n \r\n namespace wallet {\r\n \r\n-static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\r\n-                       bool overwrite = true)\r\n-{\r\n-    return batch.Write(key, value, overwrite);\r\n-}\r\n-\r\n static Span<const std::byte> StringBytes(std::string_view str)\r\n {\r\n     return AsBytes<const char>({str.data(), str.size()});\r\n@@ -203,7 +197,7 @@ BOOST_AUTO_TEST_CASE(db_cursor_prefix_byte_test)\r\n     for (const auto& database : TestDatabases(m_path_root)) {\r\n         std::unique_ptr<DatabaseBatch> batch = database->MakeBatch();\r\n         for (const auto& [k, v] : {e, p, ps, f, fs, ff, ffs}) {\r\n-            WriteBytes(*batch, k, v);\r\n+            batch->Write(MakeUCharSpan(k), MakeUCharSpan(v));\r\n         }\r\n         CheckPrefix(*batch, StringBytes(\"\"), {e, p, ps, f, fs, ff, ffs});\r\n         CheckPrefix(*batch, StringBytes(\"prefix\"), {p, ps});\r\n\r\n```",
      "created_at": "2023-06-01T16:51:43Z",
      "updated_at": "2023-06-01T16:51:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213432081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213432081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213449316",
      "pull_request_review_id": 1455944306,
      "id": 1213449316,
      "node_id": "PRRC_kwDOABII585IU8Rk",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212315030,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, done as suggested.",
      "created_at": "2023-06-01T17:09:22Z",
      "updated_at": "2023-06-01T17:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213449316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213449316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213702653",
      "pull_request_review_id": 1456344955,
      "id": 1213702653,
      "node_id": "PRRC_kwDOABII585IV6H9",
      "diff_hunk": "@@ -78,5 +121,90 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+static std::vector<std::unique_ptr<WalletDatabase>> TestDatabases(const fs::path& path_root)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(path_root / \"sqlite\", options, status, error));\n+#endif",
      "path": "src/wallet/test/db_tests.cpp",
      "position": 72,
      "original_position": 72,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could:\r\n```c++\r\nfor (const DatabaseFormat& db_format : DATABASE_FORMATS) {\r\n     dbs.emplace_back(MakeDatabase(path_root / strprintf(\"%d\", db_format).c_str(), options, status, error));\r\n     BOOST_ASSERT(status == DatabaseStatus::SUCCESS);\r\n}\r\n```",
      "created_at": "2023-06-01T21:31:17Z",
      "updated_at": "2023-06-02T02:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213702653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213702653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": 130,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213799284",
      "pull_request_review_id": 1456344955,
      "id": 1213799284,
      "node_id": "PRRC_kwDOABII585IWRt0",
      "diff_hunk": "@@ -538,6 +540,48 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(Span<const std::byte> prefix)\n+{\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(std::numeric_limits<unsigned char>::max())) {\n+            *it = std::byte(0);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        // If the prefix is all 0xff bytes, clear end_range as we won't need it\n+        end_range.clear();\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": 72,
      "original_position": 41,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Noticed that this isn't covered by the tests.\r\n\r\nIn the test, all prefixes are serialized into a `DataStream` and then provided to `GetNewPrefixCursor`, so the size is always part of the data. Therefore, we never get up to this point.\r\n\r\nStill, it doesn't seems to be reachable right now; As the db handler write function always serializes data, the size is always there.\r\n\r\nBut.. for the sake of test coverage completeness and leave nothing to chance, made a commit that exercises it: https://github.com/furszy/bitcoin-core/commit/1ace124d2e5dd35b3bbe882512a425810b0fb83e.\r\nWhich is passing, so great.\r\n\r\nNot sure if it worth to include it, as it's including a new `RawWrite` function to skip the serialization step to not add the size.. \r\nwe might get rid of it by subclassing the sqlite in the test and adding a custom `Write` function and also cleanup the code further by sharing part of the code with the loop that is above but.. still not sure.",
      "created_at": "2023-06-02T00:32:51Z",
      "updated_at": "2023-06-02T02:01:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213799284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213799284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": 561,
      "original_start_line": 561,
      "start_side": "RIGHT",
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213849864",
      "pull_request_review_id": 1456555082,
      "id": 1213849864,
      "node_id": "PRRC_kwDOABII585IWeEI",
      "diff_hunk": "@@ -538,6 +540,48 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(Span<const std::byte> prefix)\n+{\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(std::numeric_limits<unsigned char>::max())) {\n+            *it = std::byte(0);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        // If the prefix is all 0xff bytes, clear end_range as we won't need it\n+        end_range.clear();\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": 72,
      "original_position": 41,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "in_reply_to_id": 1213799284,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Noticed that this isn't covered by the tests.\r\n\r\nIf this is true, it seems like a bug in the test because two of the CheckPrefix lines were written specifically to cover this case.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/ba616b932cb9e9adb7eb9f1826caa62ce422a22d/src/wallet/test/db_tests.cpp#L204-L205\r\n\r\nI think there is no need for a RawWrite method because spans of bytes should be serialized by just appending the bytes.",
      "created_at": "2023-06-02T02:19:30Z",
      "updated_at": "2023-06-02T02:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213849864",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213849864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": 561,
      "original_start_line": 561,
      "start_side": "RIGHT",
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213883772",
      "pull_request_review_id": 1456602568,
      "id": 1213883772,
      "node_id": "PRRC_kwDOABII585IWmV8",
      "diff_hunk": "@@ -538,6 +540,48 @@ std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewCursor()\n     return cursor;\n }\n \n+std::unique_ptr<DatabaseCursor> SQLiteBatch::GetNewPrefixCursor(Span<const std::byte> prefix)\n+{\n+    if (!m_database.m_db) return nullptr;\n+\n+    // To get just the records we want, the SQL statement does a comparison of the binary data\n+    // where the data must be greater than or equal to the prefix, and less than\n+    // the prefix incremented by one (when interpreted as an integer)\n+    std::vector<std::byte> start_range(prefix.begin(), prefix.end());\n+    std::vector<std::byte> end_range(prefix.begin(), prefix.end());\n+    auto it = end_range.rbegin();\n+    for (; it != end_range.rend(); ++it) {\n+        if (*it == std::byte(std::numeric_limits<unsigned char>::max())) {\n+            *it = std::byte(0);\n+            continue;\n+        }\n+        *it = std::byte(std::to_integer<unsigned char>(*it) + 1);\n+        break;\n+    }\n+    if (it == end_range.rend()) {\n+        // If the prefix is all 0xff bytes, clear end_range as we won't need it\n+        end_range.clear();\n+    }",
      "path": "src/wallet/sqlite.cpp",
      "position": 72,
      "original_position": 41,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "in_reply_to_id": 1213799284,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh well, I noticed it while was checking the first test, and went deeper without noticing the second test existence :man_facepalming:.\r\nWhat a day.. forget all what I said above. Thanks for the quick heads up.",
      "created_at": "2023-06-02T03:41:50Z",
      "updated_at": "2023-06-02T12:43:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213883772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213883772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": 561,
      "original_start_line": 561,
      "start_side": "RIGHT",
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213968128",
      "pull_request_review_id": 1456720715,
      "id": 1213968128,
      "node_id": "PRRC_kwDOABII585IW68A",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212315030,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> But I think I would still like to avoid overloading Serialize for std::byte spans. The whole point of std::byte is that it's supposed to be a very safe type which requires you to be deliberate and explicit about conversions.\r\n\r\nAgree on this. For raw C-Arrays where the length is denoted in the type, it shouldn't cause any issues. Probably the same for C++20 spans that are fixed size (but our `Span` doesn't have that feature).\r\n\r\n> No because `Span<char>` is fixed length\r\n\r\nAre you sure? One can call `subspan(1)` to change the length.\r\n\r\n> So I'm not sure it would be great to serialize std::byte spans (or types which can be converted to byte spans) as raw bytes without requiring a more explicit cast.\r\n\r\nWhat about removing the Span overloads and replacing them with one that forces the call site to do a conversion, such as `MakeSerSpan(a)`? Though, that will probably require introducing a 4th type-safe type for a byte.",
      "created_at": "2023-06-02T06:18:21Z",
      "updated_at": "2023-06-02T06:18:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213968128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213968128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1214272570",
      "pull_request_review_id": 1457201946,
      "id": 1214272570,
      "node_id": "PRRC_kwDOABII585IYFQ6",
      "diff_hunk": "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "path": "src/wallet/test/db_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "original_commit_id": "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "in_reply_to_id": 1212315030,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I agree that current `Serialize(Span<char>)` overloads could be a little dangerous:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/6a560aceb75e618f3106a8850e053cd8de87616a/src/serialize.h#L202-L205\r\n\r\nBecause if a variable-length container could be implicitly converted to span of these types, it might incorrectly match one of these overloads and be serialized as a fixed length span without a length prefix, and no longer be deserializable as the original container.\r\n\r\nIf that is a real problem, we could probably fix it by replacing those overloads with:\r\n\r\n```c++\r\ntemplate<typename Stream, typename T> inline void Serialize(Stream& s, const Span<T>& span);\r\ntemplate<typename Stream, typename T> inline void Unserialize(Stream& s, Span<T>& span);\r\n```\r\n\r\nSince these would only match actual `Span` objects, and would not match arguments implicitly convertible to Span. I think this would be as safe as your `MakeSerSpan` idea and not require introducing a new type.\r\n\r\nI also agree that the `Span<char>` char type is different `char[N]` type because one is a fixed length type and the other just has fixed length objects (`subspan` method returns a new object, it doesn't change the size of an existing object). But the point about deserialization applies to both of cases, because you can deserialize both `char[N]` objects and `Span<char>` objects without a length prefix.",
      "created_at": "2023-06-02T11:46:17Z",
      "updated_at": "2023-06-02T11:46:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1214272570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1214272570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    }
  ]
}