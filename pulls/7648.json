{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648",
    "id": 61846529,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjE4NDY1Mjk=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7648",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/7648.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/7648.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
    "number": 7648,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "BIP9 versionbits softfork for BIP68, BIP112 and BIP113",
    "user": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "## General\n\nThis PR softforks 3 lock-time related BIPs which are all implemented in `master` as mempool-only logic at the moment.\n1. [BIP68](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki) sequence locks for relative locktime;\n2. [BIP112](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki) CHECKSEQUENCEVERIFY;\n3. [BIP113](https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki) Median Time Past.\n### Dependencies\n- BIP68 (sequence locks) independently enforces the same semantics BIP113 (MTP)\n- BIP112 (CSV) relies on BIP68\n### Relay policy for BIP113\n\nBIP113 mempool-only policy was deployed with Bitcoin Core 0.11.2 at the same time as the BIP65 CLTV softfork so the policy is in wide use (at  least 70% of nodes) as well as all the miners who upgraded to 0.11.2.\n### Relay policy for v2 transactions\n\nBIP68/112 rely on v2 transactions. Currently only v1 transactions are relayed, so it is necessary to change the relay policy to allow v2. This will be done at the same time as softfork deployment and will have the net effect that once the softfork enforces, we can be pretty sure miners will mine v2 transactions.\n\nAt a later date once enough nodes upgrade and we're sure v2 transaction will be relayed efficiently, we can bump the default transaction version in core see #7562.\n",
    "labels": [
      {
        "id": 192202000,
        "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
        "name": "Consensus",
        "color": "009800",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2016-03-06T16:07:04Z",
    "updated_at": "2021-09-08T10:59:58Z",
    "closed_at": "2016-03-30T17:01:05Z",
    "mergeable_state": "unknown",
    "merged_at": "2016-03-30T17:01:05Z",
    "merge_commit_sha": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "btcdrak:vb_68_112_113_1",
      "ref": "vb_68_112_113_1",
      "sha": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 22500337,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMjUwMDMzNw==",
        "name": "bitcoin",
        "full_name": "btcdrak/bitcoin",
        "owner": {
          "login": "btcdrak",
          "id": 7275704,
          "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/btcdrak",
          "html_url": "https://github.com/btcdrak",
          "followers_url": "https://api.github.com/users/btcdrak/followers",
          "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
          "organizations_url": "https://api.github.com/users/btcdrak/orgs",
          "repos_url": "https://api.github.com/users/btcdrak/repos",
          "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/btcdrak/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/btcdrak/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/btcdrak/bitcoin",
        "archive_url": "https://api.github.com/repos/btcdrak/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/btcdrak/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/btcdrak/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/btcdrak/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/btcdrak/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/btcdrak/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/btcdrak/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/btcdrak/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/btcdrak/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/btcdrak/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/btcdrak/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/btcdrak/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/btcdrak/bitcoin/events",
        "forks_url": "https://api.github.com/repos/btcdrak/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/btcdrak/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/btcdrak/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/btcdrak/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/btcdrak/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/btcdrak/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/btcdrak/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/btcdrak/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/btcdrak/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/btcdrak/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/btcdrak/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/btcdrak/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/btcdrak/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/btcdrak/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/btcdrak/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/btcdrak/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:btcdrak/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/btcdrak/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/btcdrak/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/btcdrak/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/btcdrak/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/btcdrak/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/btcdrak/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/btcdrak/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/btcdrak/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/btcdrak/bitcoin/hooks",
        "svn_url": "https://github.com/btcdrak/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 14,
        "stargazers_count": 27,
        "watchers_count": 27,
        "size": 114084,
        "default_branch": "master",
        "open_issues_count": 10,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2022-08-07T17:42:43Z",
        "created_at": "2014-08-01T07:52:01Z",
        "updated_at": "2022-12-12T01:16:24Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "73b7eb501e6498e911321131e58ae7fbec6bc5ed",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 816,
    "deletions": 7,
    "changed_files": 10,
    "commits": 6,
    "review_comments": 14,
    "comments": 26
  },
  "events": [
    {
      "event": "labeled",
      "id": 579414418,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDU3OTQxNDQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/579414418",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-06T20:32:16Z",
      "label": {
        "name": "Consensus",
        "color": "009800"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 589941656,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTg5OTQxNjU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/589941656",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-15T08:47:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 590062954,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTkwMDYyOTU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/590062954",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-15T10:33:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 590681611,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTkwNjgxNjEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/590681611",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-15T17:49:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 590684224,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTkwNjg0MjI0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/590684224",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-15T17:50:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 592202791,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTkyMjAyNzkx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/592202791",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-16T17:31:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 592228336,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTkyMjI4MzM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/592228336",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-16T17:47:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 592234480,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTkyMjM0NDgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/592234480",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-16T17:51:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 594055045,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTk0MDU1MDQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/594055045",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-17T21:00:48Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTc1MWEzY2YyNDIxYTk0MTkxNzI5NDljYWQ5ZGM0OWI3MzgzNTUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65751a3cf2421a9419172949cad9dc49b7383551",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/65751a3cf2421a9419172949cad9dc49b7383551",
      "tree": {
        "sha": "d6629a99099ed077b2a86f131ac5f3206f494d79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6629a99099ed077b2a86f131ac5f3206f494d79"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73b7eb501e6498e911321131e58ae7fbec6bc5ed",
          "sha": "73b7eb501e6498e911321131e58ae7fbec6bc5ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/73b7eb501e6498e911321131e58ae7fbec6bc5ed"
        }
      ],
      "message": "Add CHECKSEQUENCEVERIFY softfork through BIP9",
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-20T22:37:13Z"
      },
      "sha": "65751a3cf2421a9419172949cad9dc49b7383551"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzhmYmE2ZDUyMTNhM2YxZmZlY2E1ZmVlYWNmMjhhYWY2ODQ0ZmQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
      "tree": {
        "sha": "a5cffac9db26a820fcfc8773900c83695a855217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5cffac9db26a820fcfc8773900c83695a855217"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65751a3cf2421a9419172949cad9dc49b7383551",
          "sha": "65751a3cf2421a9419172949cad9dc49b7383551",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/65751a3cf2421a9419172949cad9dc49b7383551"
        }
      ],
      "message": "Soft fork logic for BIP113",
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:33:31Z"
      },
      "sha": "478fba6d5213a3f1ffeca5feeacf28aaf6844fd6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmMyNDM1ODAyOTVhN2YxYzAyOThmY2Q5YWZjMmU3NmI2MDdlNzI0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02c243580295a7f1c0298fcd9afc2e76b607e724",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/02c243580295a7f1c0298fcd9afc2e76b607e724",
      "tree": {
        "sha": "309e26052d20ef586d41f793c62bc809229d3c9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/309e26052d20ef586d41f793c62bc809229d3c9f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
          "sha": "478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6"
        }
      ],
      "message": "Soft fork logic for BIP68",
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:37:43Z"
      },
      "sha": "02c243580295a7f1c0298fcd9afc2e76b607e724"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmM4OWM5MTg1MzRmOGU2MTVlODAzODFiNjkyZDg5ZDZiMDlkMTc0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12c89c918534f8e615e80381b692d89d6b09d174",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/12c89c918534f8e615e80381b692d89d6b09d174",
      "tree": {
        "sha": "bd6e0b0784da6ad7be58b0f01c408a2920b398f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd6e0b0784da6ad7be58b0f01c408a2920b398f6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02c243580295a7f1c0298fcd9afc2e76b607e724",
          "sha": "02c243580295a7f1c0298fcd9afc2e76b607e724",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/02c243580295a7f1c0298fcd9afc2e76b607e724"
        }
      ],
      "message": "Policy: allow transaction version 2 relay policy.\n\nThis commit introduces a way to gracefully bump the default\ntransaction version in a two step process.",
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T19:52:31Z"
      },
      "sha": "12c89c918534f8e615e80381b692d89d6b09d174"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWQ3M2Q1NDBjOGRlNGE3M2I1YjJhMDViZWJkNzYyZTc0ODkwYTIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19d73d540c8de4a73b5b2a05bebd762e74890a20",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/19d73d540c8de4a73b5b2a05bebd762e74890a20",
      "tree": {
        "sha": "9991f8f280b3e1b74519e28ea1e28ae6ae0dc85f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9991f8f280b3e1b74519e28ea1e28ae6ae0dc85f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12c89c918534f8e615e80381b692d89d6b09d174",
          "sha": "12c89c918534f8e615e80381b692d89d6b09d174",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/12c89c918534f8e615e80381b692d89d6b09d174"
        }
      ],
      "message": "Add RPC test for BIP 68/112/113 soft fork.\n\nThis RPC test will test both the activation mechanism of the first versionbits soft fork as well as testing many code branches of the consensus logic for BIP's 68, 112, and 113.",
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-10T23:36:55Z"
      },
      "sha": "19d73d540c8de4a73b5b2a05bebd762e74890a20"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 594527883,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTk0NTI3ODgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/594527883",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-18T08:09:30Z"
    },
    {
      "event": "commented",
      "id": 198260300,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODI2MDMwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/198260300",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-18T08:49:02Z",
      "updated_at": "2016-03-18T08:49:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebase now that #7575 has been merged.\n",
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-198260300",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 198489078,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODQ4OTA3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/198489078",
      "actor": {
        "login": "afk11",
        "id": 5617245,
        "node_id": "MDQ6VXNlcjU2MTcyNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/afk11",
        "html_url": "https://github.com/afk11",
        "followers_url": "https://api.github.com/users/afk11/followers",
        "following_url": "https://api.github.com/users/afk11/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/afk11/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/afk11/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
        "organizations_url": "https://api.github.com/users/afk11/orgs",
        "repos_url": "https://api.github.com/users/afk11/repos",
        "events_url": "https://api.github.com/users/afk11/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/afk11/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-18T18:38:26Z",
      "updated_at": "2016-03-18T18:38:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "To aid review, here are the pull requests for each BIP:\n\nhttps://github.com/bitcoin/bitcoin/pull/7184 - Sequence locks\nhttps://github.com/bitcoin/bitcoin/pull/7524 - CSV\nhttps://github.com/bitcoin/bitcoin/pull/6566 - Median time past\n",
      "user": {
        "login": "afk11",
        "id": 5617245,
        "node_id": "MDQ6VXNlcjU2MTcyNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/afk11",
        "html_url": "https://github.com/afk11",
        "followers_url": "https://api.github.com/users/afk11/followers",
        "following_url": "https://api.github.com/users/afk11/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/afk11/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/afk11/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
        "organizations_url": "https://api.github.com/users/afk11/orgs",
        "repos_url": "https://api.github.com/users/afk11/repos",
        "events_url": "https://api.github.com/users/afk11/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/afk11/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-198489078",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 198496598,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODQ5NjU5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/198496598",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-18T19:01:10Z",
      "updated_at": "2016-03-18T19:01:10Z",
      "author_association": "MEMBER",
      "body": "ACK 19d73d5\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-198496598",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 198737326,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODczNzMyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/198737326",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-19T15:59:12Z",
      "updated_at": "2016-03-19T16:01:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Can you add my commit, https://github.com/btcdrak/bitcoin/pull/8 the current test does not cover exactly the activation part, I'm not comfortable with it.\n\nMy test can be used for testing segwit activation later also in few lines.\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-198737326",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTUyN2EwZjMxYWU2N2VkYWQwYTdmY2RhNTljNzVhNmNlNTY2NmNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "tree": {
        "sha": "347ad2c83d04abc78bb0c4345914f614a93aa86e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/347ad2c83d04abc78bb0c4345914f614a93aa86e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19d73d540c8de4a73b5b2a05bebd762e74890a20",
          "sha": "19d73d540c8de4a73b5b2a05bebd762e74890a20",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/19d73d540c8de4a73b5b2a05bebd762e74890a20"
        }
      ],
      "message": "Test of BIP9 fork activation of mtp, csv, sequence_lock",
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-21T09:07:34Z"
      },
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-03-16T05:30:04Z"
      },
      "sha": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca"
    },
    {
      "event": "commented",
      "id": 199211855,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTIxMTg1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199211855",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-21T10:17:22Z",
      "updated_at": "2016-03-21T10:17:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK 71527a0\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-199211855",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 199853131,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTg1MzEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199853131",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-22T14:57:54Z",
      "updated_at": "2016-03-22T14:57:54Z",
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/7648/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-199853131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 200365762,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDM2NTc2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200365762",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T14:23:05Z",
      "updated_at": "2016-03-23T14:23:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK 71527a0\n",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-200365762",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 200371477,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDM3MTQ3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200371477",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T14:36:24Z",
      "updated_at": "2016-03-23T14:36:24Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, utACK code changes; I only glanced over the test code\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-200371477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 200438105,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDQzODEwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200438105",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T16:52:25Z",
      "updated_at": "2016-03-23T16:52:25Z",
      "author_association": "MEMBER",
      "body": "nit: The new RPC test is very noisy. Printing lines for passing tests is not necessary, at least by default, could be behind some verbose flag:\n\n```\nTest 1: PASS [143]\nTest 2: PASS [287]\n...\nTest 124: PASS [582]\nTest 125: PASS [582]\n```\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-200438105",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 200449046,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDQ0OTA0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200449046",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:19:47Z",
      "updated_at": "2016-03-23T17:21:25Z",
      "author_association": "MEMBER",
      "body": "@laanwj yeah, I noticed that too.  Unfortunately, that's the underlying behavior of the ComparisonTestFramework that the RPC test is built off of.  I agree it would be nice to make optional.\n\nEDIT: I suppose it would be easy to just always surpress the `PASS` output, and still output on failures.\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-200449046",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "mentioned",
      "id": 600619697,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjAwNjE5Njk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600619697",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:19:47Z"
    },
    {
      "event": "subscribed",
      "id": 600619698,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwMDYxOTY5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600619698",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:19:47Z"
    },
    {
      "event": "commented",
      "id": 200453204,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDQ1MzIwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200453204",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:27:52Z",
      "updated_at": "2016-03-23T17:27:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "@laanwj I also agree, but it's orthogonal to this PR imo. If you don't mind, I'd like to push back on quieting tests for this PR. Ideally it would be much better to print a dot per test on the same line and only emit error messages if necessary. But that would require a change to the ComparisonTestFramework.\n",
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-200453204",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "mentioned",
      "id": 600633115,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjAwNjMzMTE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600633115",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:27:52Z"
    },
    {
      "event": "subscribed",
      "id": 600633116,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwMDYzMzExNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600633116",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:27:52Z"
    },
    {
      "event": "commented",
      "id": 200457345,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDQ1NzM0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200457345",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:34:29Z",
      "updated_at": "2016-03-23T17:34:29Z",
      "author_association": "MEMBER",
      "body": "@btcdrak @morcos Sure, I'm fine with keeping it this way in this pull.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-200457345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "mentioned",
      "id": 600644122,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjAwNjQ0MTIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600644122",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:34:29Z"
    },
    {
      "event": "subscribed",
      "id": 600644123,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwMDY0NDEyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600644123",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:34:29Z"
    },
    {
      "event": "mentioned",
      "id": 600644124,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjAwNjQ0MTI0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600644124",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:34:29Z"
    },
    {
      "event": "subscribed",
      "id": 600644125,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwMDY0NDEyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/600644125",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T17:34:29Z"
    },
    {
      "event": "commented",
      "id": 200535475,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDUzNTQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200535475",
      "actor": {
        "login": "afk11",
        "id": 5617245,
        "node_id": "MDQ6VXNlcjU2MTcyNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/afk11",
        "html_url": "https://github.com/afk11",
        "followers_url": "https://api.github.com/users/afk11/followers",
        "following_url": "https://api.github.com/users/afk11/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/afk11/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/afk11/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
        "organizations_url": "https://api.github.com/users/afk11/orgs",
        "repos_url": "https://api.github.com/users/afk11/repos",
        "events_url": "https://api.github.com/users/afk11/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/afk11/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-23T20:38:21Z",
      "updated_at": "2016-03-23T20:38:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK\n",
      "user": {
        "login": "afk11",
        "id": 5617245,
        "node_id": "MDQ6VXNlcjU2MTcyNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/afk11",
        "html_url": "https://github.com/afk11",
        "followers_url": "https://api.github.com/users/afk11/followers",
        "following_url": "https://api.github.com/users/afk11/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/afk11/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/afk11/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
        "organizations_url": "https://api.github.com/users/afk11/orgs",
        "repos_url": "https://api.github.com/users/afk11/repos",
        "events_url": "https://api.github.com/users/afk11/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/afk11/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-200535475",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 201153513,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTE1MzUxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/201153513",
      "actor": {
        "login": "CodeShark",
        "id": 894059,
        "node_id": "MDQ6VXNlcjg5NDA1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodeShark",
        "html_url": "https://github.com/CodeShark",
        "followers_url": "https://api.github.com/users/CodeShark/followers",
        "following_url": "https://api.github.com/users/CodeShark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CodeShark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CodeShark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
        "organizations_url": "https://api.github.com/users/CodeShark/orgs",
        "repos_url": "https://api.github.com/users/CodeShark/repos",
        "events_url": "https://api.github.com/users/CodeShark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CodeShark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-25T05:52:50Z",
      "updated_at": "2016-03-25T05:52:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK code changes, ran tests but did not review test code.\n",
      "user": {
        "login": "CodeShark",
        "id": 894059,
        "node_id": "MDQ6VXNlcjg5NDA1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodeShark",
        "html_url": "https://github.com/CodeShark",
        "followers_url": "https://api.github.com/users/CodeShark/followers",
        "following_url": "https://api.github.com/users/CodeShark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CodeShark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CodeShark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
        "organizations_url": "https://api.github.com/users/CodeShark/orgs",
        "repos_url": "https://api.github.com/users/CodeShark/repos",
        "events_url": "https://api.github.com/users/CodeShark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CodeShark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-201153513",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzEwOTI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzEwOTM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 202772543,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjc3MjU0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202772543",
      "actor": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T08:10:42Z",
      "updated_at": "2016-03-29T08:10:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/7648/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca\n",
      "user": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-202772543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzEwOTQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 202783153,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjc4MzE1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202783153",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T08:51:57Z",
      "updated_at": "2016-03-29T08:51:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK 71527a0f31ae67edad0a7fcda59c75a6ce5666ca\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-202783153",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 202871360,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjg3MTM2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202871360",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T12:30:28Z",
      "updated_at": "2016-03-29T12:30:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK (although I didn't look at the rpc tests in depth ).\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-202871360",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 202993136,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjk5MzEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202993136",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T16:48:36Z",
      "updated_at": "2016-03-29T16:48:36Z",
      "author_association": "MEMBER",
      "body": "I saw there was some discussion of this already (https://github.com/btcdrak/bitcoin/pull/8), but I don't really see the point of the `bip9-softforks.py` test -- it seems like a subset of the testing done in `bip68-112-113-p2p.py`.  I don't feel strongly if you want to include it here, in case it helps anyone's review, but I thought I'd mention that this seems like a candidate for removal from the repo in the future.\n\nAlso perhaps we should remove the code in `bip68-sequence.py` which tests that BIP68 is not consensus (https://github.com/bitcoin/bitcoin/blob/5131005e5b26d12b5b3f79c1c3f8ee08172fc386/qa/rpc-tests/bip68-sequence.py#L337)?  That test will continue to pass for the time being, because not enough blocks are generated to trigger the soft fork, but it's somewhat confusing to keep that test in the repo, and at any rate the RPC test `bip68-112-113-p2p.py` is comprehensively testing that BIP68 activates in the right way.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-202993136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzEwOTU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzEwOTY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzEwOTc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzEwOTk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzExMDI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzExMDU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 203004603,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzAwNDYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203004603",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T17:12:26Z",
      "updated_at": "2016-03-29T17:14:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sdaftuar as explained in  btcdrak#8 the test has a different purpose than bip68-112-113-p2p.py.\n\nAll bip are generally tested in their own PR, bip68-112-113-p2p.py is doing test that are already done but also testing the sf activation logic. This expand way more than the subject of this PR.\n\nsoftforks.py has a different purpose, it is here to test ONLY the sf activation logic. This basically mean that in future softfork, you can test the activation correctly by adding a single line at https://github.com/bitcoin/bitcoin/pull/7648/files#diff-98a8abf7f80dbe5eda93bbbbb4348e80R190 .\n\nFor example, testing any new segwit sf activation will only be a matter of adding a function which change the scriptPubKey to be <version> <segwit program> push. \n\nThe test is meant to make testing sf soft fork logic activation of future sf a breeze.\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203004603",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "mentioned",
      "id": 607017767,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjA3MDE3NzY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/607017767",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T17:12:26Z"
    },
    {
      "event": "subscribed",
      "id": 607017768,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwNzAxNzc2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/607017768",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T17:12:26Z"
    },
    {
      "event": "commented",
      "id": 203008434,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzAwODQzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203008434",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T17:20:00Z",
      "updated_at": "2016-03-30T22:32:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "`bip68-sequence.py` is a valid part of the mempool-only test suite and should remain in the same way we have bip65 mempool tests. In any case, it's out of scope for this PR.\n",
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203008434",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNzExMDg6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 203011720,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzAxMTcyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203011720",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T17:28:11Z",
      "updated_at": "2016-03-29T17:28:11Z",
      "author_association": "MEMBER",
      "body": "I left some comment nits in the RPC test, `bip68-112-113-p2p.py`, which I reviewed in depth in addition to the rest of the code.  That test is pretty comprehensive, and I think that test coverage had been missing before, so thanks for including that in this pull.\n\nI also manually tested the case that is mentioned as being missing from `bip68-112-113-p2p.py`, for an OP_CSV with an empty stack.\n\nACK 71527a0f31ae67edad0a7fcda59c75a6ce5666ca\n\n@btcdrak To be clear, I'm not talking about removing the entire `bip68-sequence.py` test, just comment out the specific test within that one which is checking that BIP68 is not enforced as a consensus rule.  That test made sense when we were deploying BIP68 as mempool-only, but doesn't make sense when we're proposing it as a soft fork.  See the line of code I linked to above.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203011720",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "mentioned",
      "id": 607041417,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjA3MDQxNDE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/607041417",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T17:28:11Z"
    },
    {
      "event": "subscribed",
      "id": 607041418,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwNzA0MTQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/607041418",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T17:28:11Z"
    },
    {
      "event": "commented",
      "id": 203048774,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzA0ODc3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203048774",
      "actor": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-29T18:53:53Z",
      "updated_at": "2016-03-29T18:53:53Z",
      "author_association": "NONE",
      "body": "tACK https://github.com/bitcoin/bitcoin/commit/71527a0f31ae67edad0a7fcda59c75a6ce5666ca\n",
      "user": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203048774",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 203326436,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzMyNjQzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203326436",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T08:47:56Z",
      "updated_at": "2016-03-30T08:47:56Z",
      "author_association": "MEMBER",
      "body": "> it's out of scope for this PR.\n\nIssues with the tests, unless they pinpoint issues in the code, or break Travis, should not hold up this pull. They can be fixed later.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203326436",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "commented",
      "id": 203389971,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzM4OTk3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203389971",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T11:36:26Z",
      "updated_at": "2016-03-30T11:36:37Z",
      "author_association": "MEMBER",
      "body": "@petertodd You said in https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-177446433 that you wanted some nits addressed before this (the BIP68 part) would be acceptable as a softfork to you. Could you take a look whether this is the case now?\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203389971",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "mentioned",
      "id": 608123304,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjA4MTIzMzA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608123304",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T11:36:26Z"
    },
    {
      "event": "subscribed",
      "id": 608123305,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwODEyMzMwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608123305",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T11:36:26Z"
    },
    {
      "event": "commented",
      "id": 203399348,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzM5OTM0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203399348",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T12:08:22Z",
      "updated_at": "2016-03-30T12:09:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "@laanwj Those nits got fixed.\n\nutACK https://github.com/bitcoin/bitcoin/pull/7648/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203399348",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "mentioned",
      "id": 608155816,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjA4MTU1ODE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608155816",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T12:08:22Z"
    },
    {
      "event": "subscribed",
      "id": 608155817,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYwODE1NTgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608155817",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T12:08:22Z"
    },
    {
      "event": "commented",
      "id": 203527181,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzUyNzE4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203527181",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T17:00:42Z",
      "updated_at": "2016-03-30T17:00:42Z",
      "author_association": "MEMBER",
      "body": "utACK 71527a0\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#issuecomment-203527181",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7648"
    },
    {
      "event": "merged",
      "id": 608578779,
      "node_id": "MDExOk1lcmdlZEV2ZW50NjA4NTc4Nzc5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608578779",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "created_at": "2016-03-30T17:01:05Z"
    },
    {
      "event": "closed",
      "id": 608578780,
      "node_id": "MDExOkNsb3NlZEV2ZW50NjA4NTc4Nzgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608578780",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-03-30T17:01:05Z"
    },
    {
      "event": "referenced",
      "id": 608578804,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDYwODU3ODgwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608578804",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e8a8f3d4b22b76a14693f4c2af645021f656c823",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8a8f3d4b22b76a14693f4c2af645021f656c823",
      "created_at": "2016-03-30T17:01:07Z"
    },
    {
      "event": "referenced",
      "id": 608772515,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDYwODc3MjUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/608772515",
      "actor": {
        "login": "vlamer",
        "id": 13274147,
        "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vlamer",
        "html_url": "https://github.com/vlamer",
        "followers_url": "https://api.github.com/users/vlamer/followers",
        "following_url": "https://api.github.com/users/vlamer/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vlamer/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vlamer/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
        "organizations_url": "https://api.github.com/users/vlamer/orgs",
        "repos_url": "https://api.github.com/users/vlamer/repos",
        "events_url": "https://api.github.com/users/vlamer/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vlamer/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3cd266a181dcfd14706bf03f3a22ca99710e6577",
      "commit_url": "https://api.github.com/repos/vlamer/bitcoin/commits/3cd266a181dcfd14706bf03f3a22ca99710e6577",
      "created_at": "2016-03-30T19:18:56Z"
    },
    {
      "event": "locked",
      "id": 5271535628,
      "node_id": "LOE_lADOABII584IRgGrzwAAAAE6NUAM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271535628",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T10:59:58Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57683589",
      "pull_request_review_id": null,
      "id": 57683589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzNTg5",
      "diff_hunk": "@@ -83,6 +83,7 @@\n \n #Tests\n testScripts = [\n+    'bip68-112-113-p2p.py',",
      "path": "qa/pull-tester/rpc-tests.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't this be an \"extended test\"?\n",
      "created_at": "2016-03-29T07:50:02Z",
      "updated_at": "2016-03-29T07:50:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57683589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57683589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57684127",
      "pull_request_review_id": null,
      "id": 57684127,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg0MTI3",
      "diff_hunk": "@@ -118,6 +119,7 @@\n     'p2p-versionbits-warning.py',\n ]\n testScriptsExt = [\n+    'bip9-softforks.py',",
      "path": "qa/pull-tester/rpc-tests.py",
      "position": 12,
      "original_position": 12,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IMO: bip9 itself is not a softfork and could therefore be in the \"normal\" `testScripts` array.\n",
      "created_at": "2016-03-29T07:54:43Z",
      "updated_at": "2016-03-29T07:54:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57684127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57684127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686483",
      "pull_request_review_id": null,
      "id": 57686483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg2NDgz",
      "diff_hunk": "@@ -15,6 +15,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,",
      "path": "src/consensus/params.h",
      "position": 3,
      "original_position": 3,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: probably to late now and kinda-unrelated to this PR, but instead of `TESTDUMMY` we could have used something like `DEFAULT` or `DEFAULTVOID`.\n",
      "created_at": "2016-03-29T08:18:55Z",
      "updated_at": "2016-03-29T08:18:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57686483",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686663",
      "pull_request_review_id": null,
      "id": 57686663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg2NjYz",
      "diff_hunk": "@@ -83,6 +83,7 @@\n \n #Tests\n testScripts = [\n+    'bip68-112-113-p2p.py',",
      "path": "qa/pull-tester/rpc-tests.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no, this is a softfork and certainly until there is activation, I want to test for regressions as a standard part of the CI process.\n",
      "created_at": "2016-03-29T08:20:54Z",
      "updated_at": "2016-03-29T08:20:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57686663",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686733",
      "pull_request_review_id": null,
      "id": 57686733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg2NzMz",
      "diff_hunk": "@@ -118,6 +119,7 @@\n     'p2p-versionbits-warning.py',\n ]\n testScriptsExt = [\n+    'bip9-softforks.py',",
      "path": "qa/pull-tester/rpc-tests.py",
      "position": 12,
      "original_position": 12,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's testing the activation logic of bip9 softforks.\n",
      "created_at": "2016-03-29T08:21:25Z",
      "updated_at": "2016-03-29T08:21:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57686733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686806",
      "pull_request_review_id": null,
      "id": 57686806,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg2ODA2",
      "diff_hunk": "@@ -15,6 +15,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,",
      "path": "src/consensus/params.h",
      "position": 3,
      "original_position": 3,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not added in PR though. That was #7575. I think the name is sufficient though, to indicate it's not a real softfork, but for testing purposes.\n",
      "created_at": "2016-03-29T08:22:06Z",
      "updated_at": "2016-03-29T08:23:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57686806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57686806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57687103",
      "pull_request_review_id": null,
      "id": 57687103,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg3MTAz",
      "diff_hunk": "@@ -15,6 +15,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,",
      "path": "src/consensus/params.h",
      "position": 3,
      "original_position": 3,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fair enough.\n",
      "created_at": "2016-03-29T08:24:40Z",
      "updated_at": "2016-03-29T08:24:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57687103",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57687103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57757987",
      "pull_request_review_id": null,
      "id": 57757987,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU3OTg3",
      "diff_hunk": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):",
      "path": "qa/rpc-tests/bip68-112-113-p2p.py",
      "position": 159,
      "original_position": 159,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `locktime_delta` appears to be unused in this function\n",
      "created_at": "2016-03-29T16:51:36Z",
      "updated_at": "2016-03-29T16:51:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57757987",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57757987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 159,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57758297",
      "pull_request_review_id": null,
      "id": 57758297,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4Mjk3",
      "diff_hunk": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in xrange(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block",
      "path": "qa/rpc-tests/bip68-112-113-p2p.py",
      "position": 388,
      "original_position": 388,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: The comments at lines 386 and 388 appear to be incorrect.  Perhaps `# < MTP of prior block`?\n",
      "created_at": "2016-03-29T16:53:52Z",
      "updated_at": "2016-03-29T16:53:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57758297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57758297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 388,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57758768",
      "pull_request_review_id": null,
      "id": 57758768,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4NzY4",
      "diff_hunk": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in xrange(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Next block height = 580 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+\n+        ### BIP 68 ###\n+        ### Version 1 txs ###\n+        # All still pass\n+        success_txs = []\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        bip68success_txs = []\n+        # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n+        bip68timetxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        for tx in bip68timetxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+        bip68heighttxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+\n+        # Advance one block to 581\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+\n+        # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n+        bip68success_txs.extend(bip68timetxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+\n+        # Advance one block to 582\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+\n+        # All BIP 68 txs should pass\n+        bip68success_txs.extend(bip68heighttxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        ### BIP 112 ###\n+        ### Version 1 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+\n+        ### Version 2 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n+        # All txs with nSequence 11 should fail either due to earlier mismatch or failing the CSV check",
      "path": "qa/rpc-tests/bip68-112-113-p2p.py",
      "position": 493,
      "original_position": 493,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think this comment should be `... nSequence 9 ...`, rather than `nSequence 11`?\n",
      "created_at": "2016-03-29T16:56:35Z",
      "updated_at": "2016-03-29T16:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57758768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57758768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 493,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57758786",
      "pull_request_review_id": null,
      "id": 57758786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4Nzg2",
      "diff_hunk": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in xrange(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Next block height = 580 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+\n+        ### BIP 68 ###\n+        ### Version 1 txs ###\n+        # All still pass\n+        success_txs = []\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        bip68success_txs = []\n+        # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n+        bip68timetxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        for tx in bip68timetxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+        bip68heighttxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+\n+        # Advance one block to 581\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+\n+        # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n+        bip68success_txs.extend(bip68timetxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+\n+        # Advance one block to 582\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+\n+        # All BIP 68 txs should pass\n+        bip68success_txs.extend(bip68heighttxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        ### BIP 112 ###\n+        ### Version 1 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+\n+        ### Version 2 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n+        # All txs with nSequence 11 should fail either due to earlier mismatch or failing the CSV check\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9",
      "path": "qa/rpc-tests/bip68-112-113-p2p.py",
      "position": 499,
      "original_position": 499,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think this comment is off, should be `# 8/16 of vary_OP_CSV_9`?\n",
      "created_at": "2016-03-29T16:56:42Z",
      "updated_at": "2016-03-29T16:56:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57758786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57758786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 499,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57759151",
      "pull_request_review_id": null,
      "id": 57759151,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU5MTUx",
      "diff_hunk": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in xrange(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Next block height = 580 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+\n+        ### BIP 68 ###\n+        ### Version 1 txs ###\n+        # All still pass\n+        success_txs = []\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        bip68success_txs = []\n+        # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n+        bip68timetxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        for tx in bip68timetxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+        bip68heighttxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+\n+        # Advance one block to 581\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+\n+        # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n+        bip68success_txs.extend(bip68timetxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+\n+        # Advance one block to 582\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+\n+        # All BIP 68 txs should pass\n+        bip68success_txs.extend(bip68heighttxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        ### BIP 112 ###\n+        ### Version 1 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+\n+        ### Version 2 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n+        # All txs with nSequence 11 should fail either due to earlier mismatch or failing the CSV check\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n+\n+        # If sequencelock types mismatch, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n+                fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV",
      "path": "qa/rpc-tests/bip68-112-113-p2p.py",
      "position": 518,
      "original_position": 518,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think these two comments should say `# 4/16 ...`\n",
      "created_at": "2016-03-29T16:58:58Z",
      "updated_at": "2016-03-29T16:58:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57759151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57759151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 518,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57759261",
      "pull_request_review_id": null,
      "id": 57759261,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU5MjYx",
      "diff_hunk": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in xrange(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Next block height = 580 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+\n+        ### BIP 68 ###\n+        ### Version 1 txs ###\n+        # All still pass\n+        success_txs = []\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        bip68success_txs = []\n+        # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n+        bip68timetxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        for tx in bip68timetxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+        bip68heighttxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+\n+        # Advance one block to 581\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+\n+        # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n+        bip68success_txs.extend(bip68timetxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+\n+        # Advance one block to 582\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+\n+        # All BIP 68 txs should pass\n+        bip68success_txs.extend(bip68heighttxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        ### BIP 112 ###\n+        ### Version 1 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+\n+        ### Version 2 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n+        # All txs with nSequence 11 should fail either due to earlier mismatch or failing the CSV check\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n+\n+        # If sequencelock types mismatch, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n+                fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n+\n+        # Remaining txs should pass, just test masking works properly\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n+                success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV",
      "path": "qa/rpc-tests/bip68-112-113-p2p.py",
      "position": 527,
      "original_position": 527,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think these two should also say `# 4/16 ...`\n",
      "created_at": "2016-03-29T16:59:36Z",
      "updated_at": "2016-03-29T16:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57759261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57759261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 527,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57762755",
      "pull_request_review_id": null,
      "id": 57762755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzYyNzU1",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+import itertools\n+\n+'''\n+This test is meant to exercise BIP forks\n+Connect to a single node.\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+mine 2 block and save coinbases for later use\n+mine 141 blocks to transition from DEFINED to STARTED\n+mine 100 blocks signalling readiness and 44 not in order to fail to change state this period\n+mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\n+mine a further 143 blocks (LOCKED_IN)\n+test that enforcement has not triggered (which triggers ACTIVE)\n+test that enforcement has triggered\n+'''\n+\n+\n+\n+class BIP9SoftForksTest(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        self.test = TestManager(self, self.options.tmpdir)\n+        self.test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        tx.nVersion = 2\n+        return tx\n+\n+    def sign_transaction(self, node, tx):\n+        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+            block.nVersion = version\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            self.height += 1\n+        return test_blocks\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+\n+    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n+        # generate some coins for later\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        self.height = 3  # height of the next block to build\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+\n+        # Test 1\n+        # Advance from DEFINED to STARTED\n+        test_blocks = self.generate_blocks(141, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n+        # Test 2\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n+        # Test 3\n+        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+\n+        # Test 4\n+        # 143 more version 536870913 blocks (waiting period-1)\n+        test_blocks = self.generate_blocks(143, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+\n+        # Test 5\n+        # Check that the new rule is enforced",
      "path": "qa/rpc-tests/bip9-softforks.py",
      "position": 135,
      "original_position": 135,
      "commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "original_commit_id": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think this comment should say `# Check that the new rule is not enforced` ?\n",
      "created_at": "2016-03-29T17:20:53Z",
      "updated_at": "2016-03-29T17:20:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7648#discussion_r57762755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57762755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7648"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}