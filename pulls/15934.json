{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
    "id": 275167566,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjc1MTY3NTY2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15934",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/15934.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/15934.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
    "number": 15934,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Merge settings one place instead of five places",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a refactoring-only change that makes it easier to add a new settings source.\r\n\r\nThis PR doesn't change behavior. The [`util_ArgsMerge`](https://github.com/bitcoin/bitcoin/blob/deb2327b435925c6a39ca654a79283b8eb6aeb86/src/test/util_tests.cpp#L626-L822) and [`util_ChainMerge`](https://github.com/bitcoin/bitcoin/blob/deb2327b435925c6a39ca654a79283b8eb6aeb86/src/test/util_tests.cpp#L843-L924) tests added in #15869 and #15988 were written specifically to confirm that ArgsManager settings are parsed, merged, and returned the same way before and after this change.\r\n\r\nThis change:\r\n\r\n- Makes it easier to add new settings sources that can get merged with existing sources (see 70675c3e4975203ad6222ba2b00c83b4e4213793 from #15935).\r\n- Separates parsing of settings from merging of settings, and deduplicates merging code so it doesn't happen five different places ([GetArg](https://github.com/bitcoin/bitcoin/blob/c459c5f70176928adcee4935813a2dbe7f4dbd51/src/util/system.cpp#L221-L244), [GetNetBoolArg](https://github.com/bitcoin/bitcoin/blob/c459c5f70176928adcee4935813a2dbe7f4dbd51/src/util/system.cpp#L255-L261), [GetArgs](https://github.com/bitcoin/bitcoin/blob/c459c5f70176928adcee4935813a2dbe7f4dbd51/src/util/system.cpp#L460-L467), [IsArgNegated](https://github.com/bitcoin/bitcoin/blob/c459c5f70176928adcee4935813a2dbe7f4dbd51/src/util/system.cpp#L482-L491), [GetUnsuitableSectionOnlyArgs](https://github.com/bitcoin/bitcoin/blob/c459c5f70176928adcee4935813a2dbe7f4dbd51/src/util/system.cpp#L343-L352)) in inconsistent ways.\r\n- Documents and tests current strange merging behaviors, so they be cleaned up in the future if resulting code simplifications and UX improvements warrant loss of backwards compatibility. The newly documented behaviors are: command line [ignored arguments](https://github.com/ryanofsky/bitcoin/blob/69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb/src/util/system.cpp#L323-L326) and [more ignored arguments](https://github.com/ryanofsky/bitcoin/blob/69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb/src/util/settings.cpp#L67-L72), and config file [reverse precedence](https://github.com/ryanofsky/bitcoin/blob/69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb/src/util/settings.cpp#L61-L65), [inconsistently applied top-level settings](https://github.com/ryanofsky/bitcoin/blob/69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb/src/util/settings.cpp#L55-L59), and [zombie values](https://github.com/ryanofsky/bitcoin/blob/69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb/src/util/settings.cpp#L101-L108).\r\n\r\nThe original motivation for this change was to make it easy to add a new persistent setting source without introducing more bugs and inconsistencies. Two commits building on top of this to add a persistent `-wallet` setting are pretty straightforward and show how the new code can be extended:\r\n\r\n* 70675c3e4975203ad6222ba2b00c83b4e4213793 from #15935 – _Add \\<datadir>/settings.json persistent settings storage_\r\n* 04c80c40df9fc6f4734ba238ea7f65607cf88089 from #15937 – _Add loadwallet and createwallet RPC load_on_startup options_",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-05-01T21:48:50Z",
    "updated_at": "2022-08-18T18:33:09Z",
    "closed_at": "2019-11-08T22:24:06Z",
    "mergeable_state": "unknown",
    "merged_at": "2019-11-08T22:24:06Z",
    "merge_commit_sha": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ryanofsky:pr/mergeset",
      "ref": "pr/mergeset",
      "sha": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 8,
        "watchers_count": 8,
        "size": 229522,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:24Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2023-05-05T12:10:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "2fb6140d585fa05547415a6c440dc43b561e2439",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 613,
    "deletions": 286,
    "changed_files": 8,
    "commits": 6,
    "review_comments": 148,
    "comments": 25
  },
  "events": [
    {
      "event": "labeled",
      "id": 2313096031,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIzMTMwOTYwMzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2313096031",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-01T22:42:22Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 2313096034,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIzMTMwOTYwMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2313096034",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-01T22:42:22Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 2313096036,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIzMTMwOTYwMzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2313096036",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-01T22:42:22Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 488521831,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODUyMTgzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488521831",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-02T00:43:36Z",
      "updated_at": "2019-11-07T12:14:11Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17385](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17385.html) (WIP: refactor: Use our own integer parsing/formatting everywhere by laanwj)\n* [#15454](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15454.html) (Remove the automatic creation and loading of the default wallet by achow101)\n* [#14866](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14866.html) (Improve property evaluation way in bitcoin.conf by AkioNak)\n* [#11082](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11082.html) (Add new bitcoin_rw.conf file that is used for settings modified by this software itself by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-488521831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 232997353,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMyOTk3MzUz",
      "url": null,
      "actor": null,
      "commit_id": "7fcb87bcc76a62770a73685314babd32631e173e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I had a refactor (which I did't submit) that supported chaining `ArgsManager`. The idea was to support changing some args when calling some RPC, so a `ArgsManager` is created with the \"overridden\" args and passed thru. Is this something you are considering supporting or do you see a different approach?\r\n\r\nConcept ACK.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-232997353",
      "submitted_at": "2019-05-02T13:24:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2315602948,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMxNTYwMjk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2315602948",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-02T20:16:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2318495111,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMxODQ5NTExMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2318495111",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-03T21:11:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2325506094,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMyNTUwNjA5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2325506094",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-07T21:00:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2327697552,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMyNzY5NzU1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2327697552",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-08T15:54:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2327710136,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMyNzcxMDEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2327710136",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-08T15:59:04Z"
    },
    {
      "event": "commented",
      "id": 490644550,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDY0NDU1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/490644550",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-08T20:45:53Z",
      "updated_at": "2019-05-08T20:45:53Z",
      "author_association": "MEMBER",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-232997353 from promag\r\n\r\n> I had a refactor (which I did't submit) that supported chaining ArgsManager. The idea was to support changing some args when calling some RPC, so a ArgsManager is created with the \"overridden\" args and passed thru. Is this something you are considering supporting or do you see a different approach?\r\n\r\nThis change does make it easier to add new settings sources (with consistent handling of negated args and things), so it should be compatible with your idea and maybe helpful.\r\n\r\nDepending on the situation, I think having chained or scoped settings could be a good idea or not. I do think that in wallet code and application code generally it's good to get away from using key-value storage classes like `ArgsManager` or `UniValue` as quickly as possible, and switch to more direct representations like `CCoinControl` that are type safe and can be accessed more simply.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-490644550",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "renamed",
      "id": 2340408785,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjM0MDQwODc4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2340408785",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-14T14:53:50Z",
      "rename": {
        "from": "WIP: Dedup settings merge code",
        "to": "Dedup settings merge code"
      }
    },
    {
      "event": "ready_for_review",
      "id": 2340409284,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQyMzQwNDA5Mjg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2340409284",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-14T14:53:58Z"
    },
    {
      "event": "commented",
      "id": 495641177,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTY0MTE3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/495641177",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-24T13:58:49Z",
      "updated_at": "2019-05-24T13:58:49Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-495641177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 242727281,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQyNzI3Mjgx",
      "url": null,
      "actor": null,
      "commit_id": "05820024fe6821849d0c659e16ef328c8f08415a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK https://github.com/bitcoin/bitcoin/pull/15934/commits/1d543adae593bdbfd954e80ed61ac907db0c5a7b\r\n\r\nGenerated and reviewed the test output locally. Mucked around with various argument formulations using the following config file:\r\n```\r\ndbcache=100\r\n[main]\r\ndbcache=200\r\n[test]\r\ndbcache=300\r\n```\r\nand commandline invocations e.g.\r\n```sh\r\n./src/bitcoind -conf=$(pwd)/test.conf -dbcache=1000 -dbcache=500 | grep Using\r\n```\r\nto verify dbcache being set as expected.\r\n\r\n---\r\n\r\nThis is a well-written change that cleans up a lot of gnarly, duplicated settings munging. It explicitly outlines surprising corner cases in existing behavior (with docs too), and makes reasoning about settings merge order easier. This change also introduces substantial test coverage to settings management (`util::Settings`).\r\n\r\nAfter this is merged, adding a read-write settings file (whether it's JSON or something else) will be much easier.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-242727281",
      "submitted_at": "2019-05-28T19:00:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2375907942,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM3NTkwNzk0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2375907942",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-29T17:35:11Z"
    },
    {
      "event": "renamed",
      "id": 2375912127,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjM3NTkxMjEyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2375912127",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-29T17:36:46Z",
      "rename": {
        "from": "Dedup settings merge code",
        "to": "Separate settings merging from parsing"
      }
    },
    {
      "event": "reviewed",
      "id": 242871746,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQyODcxNzQ2",
      "url": null,
      "actor": null,
      "commit_id": "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 1d543adae593bdbfd954e80ed61ac907db0c5a7b -> 2dfeff1e6841b77e4e689d54c08557b938407ba1 ([pr/mergeset.6](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.6) -> [pr/mergeset.7](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.7)), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.6..pr/mergeset.7)) with suggested changes.\r\nRebased 2dfeff1e6841b77e4e689d54c08557b938407ba1 -> 955c782eb776669576a798122da6557fcca8ee39 ([pr/mergeset.7](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.7) -> [pr/mergeset.8](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.8)) to share common code with #15988.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-242871746",
      "submitted_at": "2019-05-29T17:41:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "commented",
      "id": 497054493,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzA1NDQ5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/497054493",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-29T18:25:42Z",
      "updated_at": "2019-05-29T18:25:42Z",
      "author_association": "MEMBER",
      "body": "re-tACK https://github.com/bitcoin/bitcoin/pull/15934/commits/955c782eb776669576a798122da6557fcca8ee39 based on [the interdiff]( https://gist.github.com/jamesob/d8a458334386ab67082956e404fb704d) and running an abbreviated version of the testing above.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-497054493",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "labeled",
      "id": 2444611450,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NDQ2MTE0NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2444611450",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-27T15:05:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2445119355,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ0NTExOTM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2445119355",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-27T18:02:10Z"
    },
    {
      "event": "unlabeled",
      "id": 2445148624,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjQ0NTE0ODYyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2445148624",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-27T18:13:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 506505636,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjUwNTYzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506505636",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-27T20:49:15Z",
      "updated_at": "2019-06-27T20:49:15Z",
      "author_association": "MEMBER",
      "body": "Rebased 955c782eb776669576a798122da6557fcca8ee39 -> 14a6dfcb929d2313577788765f7dc47dd98afbe9 ([pr/mergeset.8](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.8) -> [pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9)) due to conflict with #16278\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506505636",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "commented",
      "id": 506518739,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjUxODczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506518739",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-27T21:29:17Z",
      "updated_at": "2019-06-27T21:29:17Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/15934/commits/14a6dfcb929d2313577788765f7dc47dd98afbe9 based on [interdiff](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901). Only change since `pr/mergeset.8` is a [trivial `LogPrintf` fix](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901#file-8-to-9-diff-L72-L73). ",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506518739",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "labeled",
      "id": 2447099140,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NDcwOTkxNDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2447099140",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T11:59:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2447426515,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ0NzQyNjUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2447426515",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T14:08:38Z"
    },
    {
      "event": "unlabeled",
      "id": 2447607874,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjQ0NzYwNzg3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2447607874",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T15:08:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 506797780,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjc5Nzc4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506797780",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T16:34:41Z",
      "updated_at": "2019-06-28T16:34:41Z",
      "author_association": "MEMBER",
      "body": "Rebased 14a6dfcb929d2313577788765f7dc47dd98afbe9 -> d074e431b76f156e94eb7ed2601d5af4fb65c6cb ([pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9) -> [pr/mergeset.10](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.10)) due to conflict with #16300\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506797780",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "commented",
      "id": 506816948,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjgxNjk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506816948",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T17:34:09Z",
      "updated_at": "2019-06-28T17:34:09Z",
      "author_association": "MEMBER",
      "body": "reACK d074e431b76f156e94eb7ed2601d5af4fb65c6cb based on [an empty interdiff](https://gist.github.com/jamesob/fea5597b189e899154e1e9a9bdca0d94).",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506816948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "unlabeled",
      "id": 2448189513,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjQ0ODE4OTUxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2448189513",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T19:09:38Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 2448189514,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjQ0ODE4OTUxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2448189514",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T19:09:38Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 2448189515,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NDgxODk1MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2448189515",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-28T19:09:38Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "commented",
      "id": 516792401,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjc5MjQwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516792401",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T10:28:09Z",
      "updated_at": "2019-07-31T10:28:09Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-516792401",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "labeled",
      "id": 2530177730,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MzAxNzc3MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530177730",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T16:26:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2531451029,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMTQ1MTAyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531451029",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-03T19:29:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2531462006,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMTQ2MjAwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531462006",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-03T20:04:00Z"
    },
    {
      "event": "unlabeled",
      "id": 2531473384,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUzMTQ3MzM4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531473384",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-03T20:35:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 2576623959,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1NzY2MjM5NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2576623959",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-22T14:09:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2576906104,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU3NjkwNjEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2576906104",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-22T15:28:21Z"
    },
    {
      "event": "unlabeled",
      "id": 2577057519,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU3NzA1NzUxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2577057519",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-22T16:12:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 2621909244,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MjE5MDkyNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2621909244",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T11:33:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2623593192,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYyMzU5MzE5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2623593192",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T20:27:57Z"
    },
    {
      "event": "unlabeled",
      "id": 2623816684,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjYyMzgxNjY4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2623816684",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T21:54:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 2710685715,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjcxMDY4NTcxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2710685715",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-14T14:40:28Z",
      "rename": {
        "from": "Separate settings merging from parsing",
        "to": "Merge settings one place instead of five places"
      }
    },
    {
      "event": "labeled",
      "id": 2719342366,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3MTkzNDIzNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719342366",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-16T22:38:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2719650472,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcxOTY1MDQ3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719650472",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-17T02:11:39Z"
    },
    {
      "event": "unlabeled",
      "id": 2719698241,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjcxOTY5ODI0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719698241",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-17T02:45:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 302987362,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAyOTg3MzYy",
      "url": null,
      "actor": null,
      "commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just a few nits on the new code to clarify some points.\r\n\r\nNext step is to take every weird compatibility spotted and check if it still works the same on both master nodes and patchset nodes. And look in depth to existing code if there is no uncovered one.\r\n\r\nMaybe they should be documented in one place, like at the beginning of `ArgsManagerHelper` (or `src/doc/bitcoin-conf.md` ?) with general rules of precedence/syntax and all the exceptions. \r\n\r\nHave been through the #15935 debate, IMO I really like ability to document my config values to remember how to  fine-tune them at later time. Not sure if the distinction between config file = sysadmin, dynamic settings = GUI users will hold, e.g I would like to call `pruneblockchain` and get my config updated for next time I reboot the system not having my disks blow up. Beyond that, don't have hard opinion on the matter.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-302987362",
      "submitted_at": "2019-10-17T04:56:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 303184636,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAzMTg0NjM2",
      "url": null,
      "actor": null,
      "commit_id": "61e034f1f6b3beeeed51ef8aaf7762f9244a7c8f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> Next step is to take every weird compatibility spotted and check if it still works the same on both master nodes and patchset nodes. And look in depth to existing code if there is no uncovered one.\r\n\r\nI'm not sure you're suggesting. Maybe you could go into more detail. I added an extensive unit test in #15869 specifically to support this PR and check all these corner cases and make sure there is no loss of compatibility. I would like to get rid of the confusing behaviors by turning ambiguous configurations into errors, and I implemented flags to start to do this in #16545.\r\n\r\n> Maybe they should be documented in one place, like at the beginning of `ArgsManagerHelper` (or `src/doc/bitcoin-conf.md` ?) with general rules of precedence/syntax and all the exceptions.\r\n\r\nI want to make ambiguous configurations into errors, and fix cases where settings are parsed in nonsensical ways. I tried to write clear code comments, and am happy to improve them, but I don't want to make nonsensical behaviors permanent or document them for end users.\r\n\r\n> Have been through the #15935 debate, IMO I really like ability to document my config values to remember how to fine-tune them at later time. Not sure if the distinction between config file = sysadmin, dynamic settings = GUI users will hold, e.g I would like to call `pruneblockchain` and get my config updated for next time I reboot the system not having my disks blow up. Beyond that, don't have hard opinion on the matter.\r\n\r\nThanks, and it'd be helpful if you described your use-case with as many specifics as possible to #15935. But there is definitely nothing in this PR that dictates use of any storage format or commenting style, so I think that discussion is not on topic here.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-303184636",
      "submitted_at": "2019-10-17T12:07:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2725404143,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNTQwNDE0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2725404143",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-18T16:00:40Z"
    },
    {
      "event": "commented",
      "id": 543811060,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzgxMTA2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543811060",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-18T16:02:04Z",
      "updated_at": "2019-10-18T16:02:04Z",
      "author_association": "MEMBER",
      "body": "Updated 61e034f1f6b3beeeed51ef8aaf7762f9244a7c8f -> 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f ([pr/mergeset.15](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.15) -> [pr/mergeset.16](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.15..pr/mergeset.16)) just updating some comments discussed above and passing by reference instead of pointer to a span constructor\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-543811060",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 305582886,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA1NTgyODg2",
      "url": null,
      "actor": null,
      "commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review and tested ACK 40593ec",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-305582886",
      "submitted_at": "2019-10-23T00:58:59Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 305733423,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA1NzMzNDIz",
      "url": null,
      "actor": null,
      "commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for the review!",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-305733423",
      "submitted_at": "2019-10-23T09:48:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2737788977,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjczNzc4ODk3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2737788977",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T16:41:36Z"
    },
    {
      "event": "reviewed",
      "id": 305976230,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA1OTc2MjMw",
      "url": null,
      "actor": null,
      "commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tested ACK 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f\r\n\r\nReviewed code, ran tests, did some manual testing, cherry-picked the regression test to verify results are the same on current master.\r\n\r\nThank you for this nice cleanup, I really like the regression test. Just had some nit about the readability with the ternary statements in `system.cpp`.\r\n\r\nEdit: I also found the changes in `system.cpp` hard to review in one. Maybe they could have been split up into different commits.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-305976230",
      "submitted_at": "2019-10-23T16:44:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306047236,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDQ3MjM2",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f. Will review and test the latest version at 8ca6338e994000c82c813721c85ebafd61250641 tomorrow.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306047236",
      "submitted_at": "2019-10-23T17:02:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306061520,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDYxNTIw",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306061520",
      "submitted_at": "2019-10-23T17:26:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306062447,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDYyNDQ3",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306062447",
      "submitted_at": "2019-10-23T17:28:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306063858,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDYzODU4",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306063858",
      "submitted_at": "2019-10-23T17:30:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306064180,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDY0MTgw",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306064180",
      "submitted_at": "2019-10-23T17:30:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "commented",
      "id": 545553236,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTU1MzIzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545553236",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T17:32:07Z",
      "updated_at": "2019-10-23T17:32:07Z",
      "author_association": "MEMBER",
      "body": "Updated 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f -> 8ca6338e994000c82c813721c85ebafd61250641 ([pr/mergeset.16](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.16) -> [pr/mergeset.17](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.16..pr/mergeset.17)) with minor cleanups\r\n\r\nSorry for the churn. Only changes were the comments and cleanups I promised Antoine this morning",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-545553236",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 306066691,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDY2Njkx",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306066691",
      "submitted_at": "2019-10-23T17:35:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306069334,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDY5MzM0",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306069334",
      "submitted_at": "2019-10-23T17:39:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306074977,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDc0OTc3",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306074977",
      "submitted_at": "2019-10-23T17:48:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306075861,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDc1ODYx",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306075861",
      "submitted_at": "2019-10-23T17:49:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306076715,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDc2NzE1",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306076715",
      "submitted_at": "2019-10-23T17:50:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306076741,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDc2NzQx",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306076741",
      "submitted_at": "2019-10-23T17:50:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306077230,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDc3MjMw",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306077230",
      "submitted_at": "2019-10-23T17:51:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 306081209,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MDgxMjA5",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306081209",
      "submitted_at": "2019-10-23T17:57:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2738311827,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjczODMxMTgyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2738311827",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T19:35:35Z"
    },
    {
      "event": "reviewed",
      "id": 306102327,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2MTAyMzI3",
      "url": null,
      "actor": null,
      "commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for the reviews!\r\n\r\nUpdated 8ca6338e994000c82c813721c85ebafd61250641 -> 86aff9bda31c9d60cc477700da4600ad5930bcda ([pr/mergeset.17](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.17) -> [pr/mergeset.18](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.18), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.17..pr/mergeset.18)) just adding suggested const/noexcept/explicits.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-305976230\r\n\r\n> Just had some nit about the readability with the ternary statements in system.cpp.\r\n\r\nI'd be fine with changing these statements, but this is just a convention of abbreviating:\r\n\r\n```c++\r\nif (condition1)\r\n   value = result1;\r\nelse if (condition2)\r\n   value = result2;\r\nelse\r\n   value = fallback;\r\n```\r\n\r\nto:\r\n\r\n```c++\r\nvalue = condition1 ? result1 : condition2 ? result2 : fallback;\r\n```\r\n\r\nwhich I think is common in many languages (though [famously broken in PHP](https://bugs.php.net/bug.php?id=61915)).\r\n\r\n> I also found the changes in system.cpp hard to review in one. Maybe they could have been split up into different commits.\r\n\r\nI'm not sure if there's something that can be done about this. It's the switch from old settings storage to new storage that requires all the changes:\r\n\r\n```diff\r\n-    std::map<std::string, std::vector<std::string>> m_override_args GUARDED_BY(cs_args);\r\n-    std::map<std::string, std::vector<std::string>> m_config_args GUARDED_BY(cs_args);\r\n+    util::Settings m_settings GUARDED_BY(cs_args);\r\n```",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306102327",
      "submitted_at": "2019-10-23T20:12:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "commented",
      "id": 545675250,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTY3NTI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545675250",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T23:17:13Z",
      "updated_at": "2019-10-23T23:17:13Z",
      "author_association": "MEMBER",
      "body": "ACK 86aff9bda31c9d60cc477700da4600ad5930bcda\r\n\r\nConfirmed that diff is only fixing nits as discussed in reviews. Re-ran tests. Some manual testing.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-545675250",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 306757104,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2NzU3MTA0",
      "url": null,
      "actor": null,
      "commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306757104",
      "submitted_at": "2019-10-24T18:22:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "added_to_project",
      "id": 2741923369,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyNzQxOTIzMzY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2741923369",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T19:18:03Z",
      "project_card": {
        "id": 28255356,
        "url": "https://api.github.com/projects/columns/cards/28255356",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2742171077,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0MjE3MTA3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2742171077",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T20:46:52Z"
    },
    {
      "event": "reviewed",
      "id": 306819975,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2ODE5OTc1",
      "url": null,
      "actor": null,
      "commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 86aff9bda31c9d60cc477700da4600ad5930bcda -> fdae2210f458d2c4a74fe0c079501bed39ec6404 ([pr/mergeset.18](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.18) -> [pr/mergeset.19](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.19), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.18..pr/mergeset.19)) with some suggested minor changes",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306819975",
      "submitted_at": "2019-10-24T20:49:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 307285990,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3Mjg1OTkw",
      "url": null,
      "actor": null,
      "commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-307285990",
      "submitted_at": "2019-10-25T15:50:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 307310768,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3MzEwNzY4",
      "url": null,
      "actor": null,
      "commit_id": "e378b37d4bb56ea5de8893aa0f678b18d7b0561c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "For a guy called @Talkless, you do make a lot of comments... :circus_tent:\r\n\r\nEyerolling puns aside though, if you are still reviewing, I might encourage taking a broader view and looking for impacts of changes here that may be more concerning than style or performance tweaks.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-307310768",
      "submitted_at": "2019-10-25T17:01:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2745221765,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NTIyMTc2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745221765",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T19:19:50Z"
    },
    {
      "event": "commented",
      "id": 546480177,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjQ4MDE3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546480177",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T19:20:31Z",
      "updated_at": "2019-10-25T19:20:31Z",
      "author_association": "MEMBER",
      "body": "Updated fdae2210f458d2c4a74fe0c079501bed39ec6404 -> e18bf8dd30259f5c5ca63fdacadebd8b28acb2cc ([pr/mergeset.19](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.19) -> [pr/mergeset.20](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.20), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.19..pr/mergeset.20)) with test simplifications suggested by @jnewbery removing more `m_override_args` / `m_config_args` usages\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-546480177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "mentioned",
      "id": 2745223436,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0NTIyMzQzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745223436",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T19:20:32Z"
    },
    {
      "event": "subscribed",
      "id": 2745223437,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDUyMjM0Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745223437",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T19:20:32Z"
    },
    {
      "event": "reviewed",
      "id": 307333248,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3MzMzMjQ4",
      "url": null,
      "actor": null,
      "commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Still chewing my way through this. I have a few small nits so far. I'll try to finish review early next week.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-307333248",
      "submitted_at": "2019-10-25T21:45:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 307475245,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3NDc1MjQ1",
      "url": null,
      "actor": null,
      "commit_id": "e18bf8dd30259f5c5ca63fdacadebd8b28acb2cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-307475245",
      "submitted_at": "2019-10-25T22:13:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "comment_deleted",
      "id": 2745718396,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQyNzQ1NzE4Mzk2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745718396",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T23:43:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746066326,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NjA2NjMyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746066326",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-26T13:14:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746069764,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NjA2OTc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746069764",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-26T13:21:53Z"
    },
    {
      "event": "reviewed",
      "id": 307522659,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3NTIyNjU5",
      "url": null,
      "actor": null,
      "commit_id": "e18bf8dd30259f5c5ca63fdacadebd8b28acb2cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated e18bf8dd30259f5c5ca63fdacadebd8b28acb2cc -> 25c4ab5e0afd02e7dd19ea143f2e087def5f7b87 ([pr/mergeset.20](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.20) -> [pr/mergeset.21](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.21), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.20..pr/mergeset.21)) with suggested changes from John.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-307522659",
      "submitted_at": "2019-10-26T13:24:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "commented",
      "id": 546692570,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjY5MjU3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546692570",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T13:02:20Z",
      "updated_at": "2019-10-27T13:02:20Z",
      "author_association": "NONE",
      "body": "> I might encourage taking a broader view and looking for impacts of changes here that may be more concerning than style or performance tweaks.\r\n\r\nSorry, I can't do more in-depth review. And that's enough for nit-picking, not to be too annoying...",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-546692570",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 307571715,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3NTcxNzE1",
      "url": null,
      "actor": null,
      "commit_id": "25c4ab5e0afd02e7dd19ea143f2e087def5f7b87",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Concept ACK. Not tested, reviewed only cosmetics.",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-307571715",
      "submitted_at": "2019-10-27T13:07:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2749627197,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0OTYyNzE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749627197",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:34:07Z"
    },
    {
      "event": "commented",
      "id": 547095024,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzA5NTAyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547095024",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:54:18Z",
      "updated_at": "2019-10-28T18:54:18Z",
      "author_association": "MEMBER",
      "body": "> Sorry, I can't do more in-depth review. And that's enough for nit-picking, not to be too annoying...\r\n\r\nThanks for review @Talkless. Your suggestions improved the PR, and having more eyes on code is always reassuring. Aside from suggesting cosmetic improvements, another thing you can try as a reviewer without specialized knowledge of the code is just asking questions. E.g. spend 20 minutes looking at a change, find the thing that seems most confusing or surprising in the code and ask about it. Chances are other people will wonder about the same thing, and usually whatever it is could stand to be clarified or at least explained better, so you learn something and help make the project more accessible, too.\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547095024",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "mentioned",
      "id": 2749690591,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0OTY5MDU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749690591",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:54:18Z"
    },
    {
      "event": "subscribed",
      "id": 2749690592,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDk2OTA1OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749690592",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:54:18Z"
    },
    {
      "event": "commented",
      "id": 547096059,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzA5NjA1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547096059",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:56:42Z",
      "updated_at": "2019-10-29T01:58:28Z",
      "author_association": "MEMBER",
      "body": "Updated 25c4ab5e0afd02e7dd19ea143f2e087def5f7b87 -> 69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb ([pr/mergeset.21](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.21) -> [pr/mergeset.22](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.22), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.21..pr/mergeset.22)) just using \"default section\" more and not sometimes calling it \"top level\"\r\nRebased 69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb -> 202e19830854550ee4eade53fe4fd3ae323ddbdd ([pr/mergeset.22](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.22) -> [pr/mergeset.23](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.23)) due to conflict with #17279",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547096059",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "labeled",
      "id": 2749765722,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NDk3NjU3MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749765722",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T19:20:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2749919739,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0OTkxOTczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749919739",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T20:14:54Z"
    },
    {
      "event": "unlabeled",
      "id": 2750028812,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc1MDAyODgxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2750028812",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T20:51:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 547463678,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzQ2MzY3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547463678",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T14:59:01Z",
      "updated_at": "2019-10-29T14:59:01Z",
      "author_association": "MEMBER",
      "body": "I've tried really hard to review this over the last few days, but the amount of change in the _Deduplicate settings merge code_ commit has made this very difficult for me. Perhaps if that commit was broken up into smaller pieces that moved the different `ArgsManager` functions to use the settings logic one-by-one, it'd be easier for me to satisfy myself that this isn't changing behaviour.\r\n\r\nI also find the new logic in settings.cpp very difficult to follow, where a callback is being passed from the `GetSetting()`/`GetSettingsList()`/`OnlyHasDefaultSectionSetting()` functions into `MergeSettings()`, and that callback is using variables from various places to update `result`.\r\n\r\nThe new regression test is very nice and helps reassure me that this hasn't changed behaviour, but I unfortunately can't give an code-review ACK.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547463678",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "commented",
      "id": 548107312,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODEwNzMxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548107312",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-30T20:52:02Z",
      "updated_at": "2019-10-30T20:52:02Z",
      "author_association": "MEMBER",
      "body": "I think this PR could use a re-ack or two from previous reviewers, but otherwise should be close to ready for merge, given all the review it's had so far, and the exhaustive tests [`util_ArgsMerge`](https://github.com/bitcoin/bitcoin/blob/deb2327b435925c6a39ca654a79283b8eb6aeb86/src/test/util_tests.cpp#L626-L822) and [`util_ChainMerge`](https://github.com/bitcoin/bitcoin/blob/deb2327b435925c6a39ca654a79283b8eb6aeb86/src/test/util_tests.cpp#L843-L924) added in supporting PRs #15869 and #15988 to guarantee this PR doesn't change behavior.\r\n\r\nHere is a list of previous reviews:\r\n\r\npromag concept ack 2019-05-02 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-232997353\r\nfanquake concept ack 2019-05-24 https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-495641177\r\njamesob tested ack 2019-05-28 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-242727281\r\njamesob reack 2019-05-29 https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-497054493\r\njamesob reack 2019-06-27 https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506518739\r\njamesob reack 2019-06-28 https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506816948\r\nhebasto concept ack 2019-06-31 https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-516792401\r\nariard review 2019-10-17 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-302987362\r\nariard tested ack 2019-10-22 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-305582886\r\nfjahr tested ack 2019-10-23 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-305976230\r\njonatack tested ack 2019-10-23 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306047236\r\nfjahr reack 2019-10-23 https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-545675250\r\ntalkless review 2019-10-24 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-306757104\r\njnewbery review 2019-10-25 https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-307333248\r\njnewbery review 2019-10-29 https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547463678\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547463678 from jnewbery\r\n\r\n> I've tried really hard to review this over the last few days, but the amount of change in the _Deduplicate settings merge code_ commit has made this very difficult for me. Perhaps if that commit was broken up into smaller pieces that moved the different `ArgsManager` functions to use the settings logic one-by-one, it'd be easier for me to satisfy myself that this isn't changing behaviour.\r\n\r\nI looked into this and it's possible to make the PR do a more gradual transition between the old and the new merge implementations by adding new temporary code and then deleting it within the PR. For a first step (which maybe is sufficient for your purpose of understanding the previous code better) I was able to come up with eadbe7c164454a9faf0992d1605742a5626e729 from [`pr/merge2`](https://github.com/ryanofsky/bitcoin/commits/pr/merge2) which adds an initial commit at something like a halfway point between the new code and old code.\r\n\r\nBut what you're trying to do strikes me as an unnecessarily painful way to approach the review. The PR is replacing duplicated, sprawled out, buggy, opaque, and completely insane merging code, with a new, slightly less insane, more contained and better documented implementation. There isn't a reason as a reviewer to dig into details of the old implementation when there are regression tests covering all the ArgsManager inputs and outputs to guarantee the new implementation is equivalent. If the new implementation can be improved, I'd like to improve it! If understanding details of how the new and old implementations map on to each other is interesting, I am happy to walk through them. But I don't think a longer, more meandering PR that gets to the same result would be an improvement in this particular case.\r\n\r\n> I also find the new logic in settings.cpp very difficult to follow, where a callback is being passed from the `GetSetting()`/`GetSettingsList()`/`OnlyHasDefaultSectionSetting()` functions into `MergeSettings()`, and that callback is using variables from various places to update `result`.\r\n\r\nI wonder if would help to rename `MergeSettings` to `ForEachSettingsSource`. This is just using an idiom for looping which is pretty common in other codebases, with `MergeSettings` here looping over fields of a struct. If you were trying to initially understand `for(int i = 1; i < 10; ++i) { code; }` and \r\n `ForInterval(1, 10, [&](int i) { code; });` you could easily get hung up on either one, but once you've seen the idiom they should both become pretty straightforward.\r\n\r\n> The new regression test is very nice and helps reassure me that this hasn't changed behaviour, but I unfortunately can't give an code-review ACK.\r\n\r\nThat's ok and thanks for the improvements you suggested before. If there's anything I can do to help, like showing where things correspond in the old and new implementations, or improving the new implementation, I'm happy to make the effort.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-548107312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 310098789,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwMDk4Nzg5",
      "url": null,
      "actor": null,
      "commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/15934/commits/202e19830854550ee4eade53fe4fd3ae323ddbdd\r\n\r\nReACKing this after rereviewing the code commit-by-commit. Admittedly my reading of the code this time around was less comprehensive than my last review -- paging in an understanding of the existing settings code is very difficult and time-consuming -- but I read enough to verify there's nothing malicious here. Given how well covered settings parsing is by tests and the fact that this region of the code is low-risk, I feel good about merging this change.\r\n\r\nI built the code locally and repeated the manual tests outlined in https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-242727281.\r\n\r\nEdit: forgot to mention that the second commit is most easily reviewed in a split view IMO.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-310098789",
      "submitted_at": "2019-10-31T20:52:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 313532945,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzNTMyOTQ1",
      "url": null,
      "actor": null,
      "commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 202e19830\r\n\r\nI have a couple of suggestions for clarifying the code in some places. Take a look at https://github.com/jnewbery/bitcoin/commits/pr15934.2 and let me know what you think.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-313532945",
      "submitted_at": "2019-11-07T18:49:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 313529917,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzNTI5OTE3",
      "url": null,
      "actor": null,
      "commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "@ryanofsky I'm curious of more details on some weird behaviors you're documented, it's hard to grasp them or comment may be better. Otherwise my others comments are nits or follow-ups improvements, holding my ACK just on answers to weird behaviors.\r\n\r\nAdvice to any other reviewer, it's easier to understand PR starting in reverse topological order _Deduplicate settings merge code_ and  then _Add util::Settings struct and helper functions_",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-313529917",
      "submitted_at": "2019-11-07T22:06:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "reviewed",
      "id": 313676350,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzNjc2MzUw",
      "url": null,
      "actor": null,
      "commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks John and Antoine for sticking with this and not giving up on this insanity! I'm adopting every suggestion here and making changes to address all comments.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-313676350",
      "submitted_at": "2019-11-07T23:59:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzhlMWU3NTQ4NzQ2MWVjOWJmZjQzMzE0NGYwZGI4MzFiNjgyNDAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc8e1e75487461ec9bff433144f0db831b682403",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dc8e1e75487461ec9bff433144f0db831b682403",
      "tree": {
        "sha": "bfbe7db40e7ab55885033e36ae20bde51695f5d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfbe7db40e7ab55885033e36ae20bde51695f5d9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fb6140d585fa05547415a6c440dc43b561e2439",
          "sha": "2fb6140d585fa05547415a6c440dc43b561e2439",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2fb6140d585fa05547415a6c440dc43b561e2439"
        }
      ],
      "message": "Clarify emptyIncludeConf logic\n\nSuggestion from John Newbery <john@johnnewbery.com> in\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r343795528",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:01:22Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:01:22Z"
      },
      "sha": "dc8e1e75487461ec9bff433144f0db831b682403"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTg0YWE4ODBmNmRhMGJhYzBlMjE0NDczM2ZkZWYzYjg1NThjNzYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a84aa880f6da0bac0e2144733fdef3b8558c761",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5a84aa880f6da0bac0e2144733fdef3b8558c761",
      "tree": {
        "sha": "ae4e658cfe66d5260a6e7810420446846d75bb3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae4e658cfe66d5260a6e7810420446846d75bb3a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc8e1e75487461ec9bff433144f0db831b682403",
          "sha": "dc8e1e75487461ec9bff433144f0db831b682403",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dc8e1e75487461ec9bff433144f0db831b682403"
        }
      ],
      "message": "Rename includeconf variables for clarity\n\nincludeconf -> conf_file_names\nto_include -> conf_file_name\ninclude_config -> conf_file_stream\n\nSuggestion from John Newbery <john@johnnewbery.com> in\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905138",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:04:42Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:04:42Z"
      },
      "sha": "5a84aa880f6da0bac0e2144733fdef3b8558c761"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmUzN2NmZThhZjA4OGJkOGVhODg0YmUyZjc5ZjBmM2NhYzU1NWQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
      "tree": {
        "sha": "40c69485d99a52ca6119f1e4d51b44578174b677",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40c69485d99a52ca6119f1e4d51b44578174b677"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a84aa880f6da0bac0e2144733fdef3b8558c761",
          "sha": "5a84aa880f6da0bac0e2144733fdef3b8558c761",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5a84aa880f6da0bac0e2144733fdef3b8558c761"
        }
      ],
      "message": "Remove includeconf nested scope\n\nEasier to review ignoring whitespace\n\nSuggestion from John Newbery <john@johnnewbery.com> in\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r343806860",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "sha": "e2e37cfe8af088bd8ea884be2f79f0f3cac555d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGNiOTUyZmU1Zjg1NTI5YWIyOGUwOTFhZjc1MzRlNzJjMjFjOTBm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dcb952fe5f85529ab28e091af7534e72c21c90f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcb952fe5f85529ab28e091af7534e72c21c90f",
      "tree": {
        "sha": "57731a54ac2cc59fa737f329bb1359793f464f80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57731a54ac2cc59fa737f329bb1359793f464f80"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
          "sha": "e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5"
        }
      ],
      "message": "Add util::Settings struct and helper functions.\n\nImplement merging of settings from different sources (command line and config\nfile) separately from parsing code in system.cpp, so it is easier to add new\nsources.\n\nDocument current inconsistent merging behavior without changing it.\n\nThis commit only adds new settings code without using it. The next commit calls\nthe new code to replace existing code in system.cpp.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-05T21:07:48Z"
      },
      "sha": "9dcb952fe5f85529ab28e091af7534e72c21c90f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjQwNTI4Y2Q1MGZjNDNhYzBiZDNlNzg1ZGUyNGQ2NjFhZGRkYjdh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f40528cd50fc43ac0bd3e785de24d661adddb7a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7f40528cd50fc43ac0bd3e785de24d661adddb7a",
      "tree": {
        "sha": "a687d73e4cc320c7c4dee5dd96b1f99ce21c2122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a687d73e4cc320c7c4dee5dd96b1f99ce21c2122"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dcb952fe5f85529ab28e091af7534e72c21c90f",
          "sha": "9dcb952fe5f85529ab28e091af7534e72c21c90f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcb952fe5f85529ab28e091af7534e72c21c90f"
        }
      ],
      "message": "Deduplicate settings merge code\n\nGet rid of settings merging code in util/system.cpp repeated 5 places,\ninconsistently:\n\n- ArgsManagerHelper::GetArg\n- ArgsManagerHelper::GetNetBoolArg\n- ArgsManager::GetArgs\n- ArgsManager::IsArgNegated\n- ArgsManager::GetUnsuitableSectionOnlyArgs\n\nHaving settings merging code separated from parsing simplifies parsing somewhat\n(for example negated values can simply be represented as false values instead\nof partially cleared or emply placeholder lists).\n\nHaving settings merge happen one place instead of 5 makes it easier to add new\nsettings sources and harder to introduce new inconsistencies in the way\nsettings are merged.\n\nThis commit does not change behavior in any way.",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-22T22:08:51Z"
      },
      "sha": "7f40528cd50fc43ac0bd3e785de24d661adddb7a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODNjOTU0YjAyYTRlN2QwNzA4MzQ5ZWVhZjNiYWMyYjU5NDdmYjBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "tree": {
        "sha": "c63977226ee809ef74b5cc2f2a9000557a09938a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c63977226ee809ef74b5cc2f2a9000557a09938a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f40528cd50fc43ac0bd3e785de24d661adddb7a",
          "sha": "7f40528cd50fc43ac0bd3e785de24d661adddb7a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7f40528cd50fc43ac0bd3e785de24d661adddb7a"
        }
      ],
      "message": "Add settings_tests\n\nCo-authored-by: James O'Beirne <james.obeirne@gmail.com>",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-06T19:31:18Z"
      },
      "sha": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e"
    },
    {
      "event": "referenced",
      "id": 2781614292,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODE2MTQyOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2781614292",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "da06fc0eb281bd953581359b18a1f63ceb6a3688",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/da06fc0eb281bd953581359b18a1f63ceb6a3688",
      "created_at": "2019-11-08T03:53:00Z"
    },
    {
      "event": "referenced",
      "id": 2781614293,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODE2MTQyOTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2781614293",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a4685291003dc6c9ea674973bb9430956540ad81",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a4685291003dc6c9ea674973bb9430956540ad81",
      "created_at": "2019-11-08T03:53:00Z"
    },
    {
      "event": "referenced",
      "id": 2781614295,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODE2MTQyOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2781614295",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5c623d3c80872038ec559eacb136d6478580f4a8",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5c623d3c80872038ec559eacb136d6478580f4a8",
      "created_at": "2019-11-08T03:53:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2781614352,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc4MTYxNDM1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2781614352",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-08T03:53:02Z"
    },
    {
      "event": "commented",
      "id": 551373930,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTM3MzkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551373930",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-08T03:55:39Z",
      "updated_at": "2019-11-08T05:03:45Z",
      "author_association": "MEMBER",
      "body": "Updated 202e19830854550ee4eade53fe4fd3ae323ddbdd -> 20f74e2fba764299f48bd872c9dc2df86c21e747 ([`pr/mergeset.23`](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.23) -> [`pr/mergeset.24`](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.23..pr/mergeset.24)) with suggestions above.\r\nRebased 20f74e2fba764299f48bd872c9dc2df86c21e747 -> 083c954b02a4e7d0708349eeaf3bac2b5947fb0e ([`pr/mergeset.24`](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.24) -> [`pr/mergeset.25`](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.25)) to fix silent merge conflict with #17384 (`fatal error: 'test/setup_common.h' file not found'`)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551373930",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2781708305,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc4MTcwODMwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2781708305",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-08T05:02:52Z"
    },
    {
      "event": "reviewed",
      "id": 314330145,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE0MzMwMTQ1",
      "url": null,
      "actor": null,
      "commit_id": "dc8e1e75487461ec9bff433144f0db831b682403",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-314330145",
      "submitted_at": "2019-11-08T16:53:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "commented",
      "id": 551926306,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTkyNjMwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551926306",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-08T17:51:01Z",
      "updated_at": "2019-11-08T17:51:01Z",
      "author_association": "MEMBER",
      "body": "ACK 083c954\r\n\r\nI've reviewed that's new code is doing what it says to do. I think that weird behaviors are compatibility-maintained but at least if we have a regression they are well-documented and so we'll know where to look, plus as said by James this part of code is low-risk so it's worth moving forward.\r\n\r\nGreat work Russ, and I'm concept ACK future PRs to remove/squeeze weird behaviors!",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551926306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 314331646,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE0MzMxNjQ2",
      "url": null,
      "actor": null,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-314331646",
      "submitted_at": "2019-11-08T18:22:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "commented",
      "id": 551947994,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTk0Nzk5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551947994",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-08T18:54:34Z",
      "updated_at": "2019-11-08T18:54:34Z",
      "author_association": "MEMBER",
      "body": "Thanks! Will leave PR at 083c954b02a4e7d0708349eeaf3bac2b5947fb0e. Some notes for future followup:\r\n\r\n- [ ] https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344291875 - s/conf file/included conf file/\r\n- [ ] https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344271224 - s/, so we clear it here// and early return",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551947994",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "commented",
      "id": 551969778,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTk2OTc3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551969778",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-08T19:59:24Z",
      "updated_at": "2019-11-08T19:59:24Z",
      "author_association": "MEMBER",
      "body": "Other potential future follow-ups:\r\n\r\n- [ ] Don't throw in `GetChainName()`\r\n\r\n(https://github.com/bitcoin/bitcoin/blob/8021392b825c74312173f15eb937ba6d4aec3841/src/util/system.cpp#L970). I think the calling code was originally supposed to catch this (eg https://github.com/bitcoin/bitcoin/blob/8021392b825c74312173f15eb937ba6d4aec3841/src/bitcoind.cpp#L88), but this is no longer the case because `GetChainName()` is called in `ReadConfigFiles()`, and so starting with `-regtest -testnet` results in an unhandled exception.\r\n\r\n- [ ] Remove `ArgsManagerHelper()`\r\n\r\nHere in master: https://github.com/bitcoin/bitcoin/blob/8021392b825c74312173f15eb937ba6d4aec3841/src/util/system.cpp#L165. After this PR there are only two functions in this class. Just move them into `ArgsManager()`. The class was only added to speed up rebuilding (https://github.com/bitcoin/bitcoin/pull/11862#discussion_r173870835), which doesn't seem like a good reason to keep it.\r\n\r\n- [ ] Move the `ArgsManager` code into `util/settings` ?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551969778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "reviewed",
      "id": 314460012,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE0NDYwMDEy",
      "url": null,
      "actor": null,
      "commit_id": "9dcb952fe5f85529ab28e091af7534e72c21c90f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 083c954b02a4e7d0708349eeaf3bac2b5947fb0e\r\n\r\nReviewed diff-of-diffs both on Github [and locally](https://gist.github.com/jamesob/778eb138a8fe41148f173c791727dcb8). Only changes since my last ACK are those discussed above. Nice job persevering, @ryanofsky, and thanks to @jnewbery @ariard for good feedback.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-314460012",
      "submitted_at": "2019-11-08T21:16:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
    },
    {
      "event": "referenced",
      "id": 2784721474,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODQ3MjE0NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2784721474",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a7aec7ad97949a82f870c033d8fd8b65d772eacb",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7aec7ad97949a82f870c033d8fd8b65d772eacb",
      "created_at": "2019-11-08T22:23:20Z"
    },
    {
      "event": "merged",
      "id": 2784722810,
      "node_id": "MDExOk1lcmdlZEV2ZW50Mjc4NDcyMjgxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2784722810",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "created_at": "2019-11-08T22:24:06Z"
    },
    {
      "event": "closed",
      "id": 2784722819,
      "node_id": "MDExOkNsb3NlZEV2ZW50Mjc4NDcyMjgxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2784722819",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-08T22:24:06Z"
    },
    {
      "event": "referenced",
      "id": 2785365973,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODUzNjU5NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2785365973",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dfc914880a14623c51302631d2f59d63dd270161",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/dfc914880a14623c51302631d2f59d63dd270161",
      "created_at": "2019-11-09T14:06:36Z"
    },
    {
      "event": "referenced",
      "id": 2785365974,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODUzNjU5NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2785365974",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "248b11fb0f92fa1c25bd93989a13ab8ac44fd78b",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/248b11fb0f92fa1c25bd93989a13ab8ac44fd78b",
      "created_at": "2019-11-09T14:06:36Z"
    },
    {
      "event": "referenced",
      "id": 2785365975,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODUzNjU5NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2785365975",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0bc925ddb6bb3564a109e5f5c35c569918f19aee",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/0bc925ddb6bb3564a109e5f5c35c569918f19aee",
      "created_at": "2019-11-09T14:06:37Z"
    },
    {
      "event": "referenced",
      "id": 2785366213,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODUzNjYyMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2785366213",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "16a52029e743ed6f913378c3f0346d144b7b4280",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/16a52029e743ed6f913378c3f0346d144b7b4280",
      "created_at": "2019-11-09T14:06:55Z"
    },
    {
      "event": "removed_from_project",
      "id": 2797425415,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50Mjc5NzQyNTQxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797425415",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T01:40:31Z",
      "project_card": {
        "id": 28255356,
        "url": "https://api.github.com/projects/columns/cards/28255356",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 2797682328,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTc2ODIzMjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797682328",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fb4e02508ececa5844430b4d36ced0d64aea5942",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/fb4e02508ececa5844430b4d36ced0d64aea5942",
      "created_at": "2019-11-14T04:31:37Z"
    },
    {
      "event": "referenced",
      "id": 2797682329,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTc2ODIzMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797682329",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "80b46ba8cace340a99af06f7f854912aadbe759f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/80b46ba8cace340a99af06f7f854912aadbe759f",
      "created_at": "2019-11-14T04:31:37Z"
    },
    {
      "event": "referenced",
      "id": 2797682334,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTc2ODIzMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797682334",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "959096cbacbd43d838c4c4d59b9bfa1b528ca609",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/959096cbacbd43d838c4c4d59b9bfa1b528ca609",
      "created_at": "2019-11-14T04:31:37Z"
    },
    {
      "event": "referenced",
      "id": 2797682335,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTc2ODIzMzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797682335",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6f018d367302fdf79174c0981e76fc32ec9d77b2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6f018d367302fdf79174c0981e76fc32ec9d77b2",
      "created_at": "2019-11-14T04:31:37Z"
    },
    {
      "event": "referenced",
      "id": 2799285341,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTkyODUzNDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2799285341",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6974a2fecbeedf107e6542007c19dc09463e9ab6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6974a2fecbeedf107e6542007c19dc09463e9ab6",
      "created_at": "2019-11-14T14:34:27Z"
    },
    {
      "event": "referenced",
      "id": 2799285344,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTkyODUzNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2799285344",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "db458b3a0faba32f4c2c4264626fd2a6ec5ee929",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/db458b3a0faba32f4c2c4264626fd2a6ec5ee929",
      "created_at": "2019-11-14T14:34:27Z"
    },
    {
      "event": "commented",
      "id": 555100626,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTEwMDYyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555100626",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T16:40:57Z",
      "updated_at": "2019-11-18T16:40:57Z",
      "author_association": "MEMBER",
      "body": "I've been working on some followups for this PR since it's been merged. #17473 has various refactoring cleanups suggested above, and #17508 is tracking cleanup of confusing settings behaviors.\r\n\r\nGoing through all the comments in this issue, I think the only suggestions left not addressed by #17473 and #17508 are:\r\n\r\n- Fixing `return InitError` in a loop: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344252898\r\n- Simplifying `-includeconf` errors: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344271224\r\n- Fixing uncaught exceptions thrown by `GetChainName`: https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551969778\r\n- Moving ArgsManager settings code from system.cpp to settings.cpp: https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551969778\r\n\r\nI don't have plans to work on these last few things",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-555100626",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "commented",
      "id": 555125450,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTEyNTQ1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555125450",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T17:37:09Z",
      "updated_at": "2019-11-18T17:37:09Z",
      "author_association": "MEMBER",
      "body": "Maybe tag them good_first_issue or up_to_grabs to let people find them",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-555125450",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "labeled",
      "id": 2808477724,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI4MDg0Nzc3MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2808477724",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T17:45:51Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "referenced",
      "id": 2894310289,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTQzMTAyODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2894310289",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
      "created_at": "2019-12-18T16:59:21Z"
    },
    {
      "event": "referenced",
      "id": 2894310291,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTQzMTAyOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2894310291",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
      "created_at": "2019-12-18T16:59:21Z"
    },
    {
      "event": "referenced",
      "id": 2894310297,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTQzMTAyOTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2894310297",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
      "created_at": "2019-12-18T16:59:21Z"
    },
    {
      "event": "referenced",
      "id": 2894310301,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTQzMTAzMDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2894310301",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3e185522ace1678e0a25b9cf8a5553a4bc279bea",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3e185522ace1678e0a25b9cf8a5553a4bc279bea",
      "created_at": "2019-12-18T16:59:22Z"
    },
    {
      "event": "referenced",
      "id": 2898495028,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTg0OTUwMjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2898495028",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6677be64f69b3d6f60f5a675ff9746def27a2de8",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6677be64f69b3d6f60f5a675ff9746def27a2de8",
      "created_at": "2019-12-19T20:06:59Z"
    },
    {
      "event": "referenced",
      "id": 2898934345,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTg5MzQzNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2898934345",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "33fe88ae5bb68ceb345d06a5f2da01b2974fb1d5",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/33fe88ae5bb68ceb345d06a5f2da01b2974fb1d5",
      "created_at": "2019-12-19T22:26:45Z"
    },
    {
      "event": "referenced",
      "id": 3244175859,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU4NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175859",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d72048269a1fa0ce3990982312aa2d4e0f7f7129",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/d72048269a1fa0ce3990982312aa2d4e0f7f7129",
      "created_at": "2020-04-17T12:28:26Z"
    },
    {
      "event": "referenced",
      "id": 3244175863,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU4NjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175863",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d558168a1c6a09a612da00d930e72b1442ba77ff",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/d558168a1c6a09a612da00d930e72b1442ba77ff",
      "created_at": "2020-04-17T12:28:26Z"
    },
    {
      "event": "referenced",
      "id": 3244175867,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU4Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175867",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b4e4df9618ef66aded2faef229d69894108febae",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/b4e4df9618ef66aded2faef229d69894108febae",
      "created_at": "2020-04-17T12:28:26Z"
    },
    {
      "event": "referenced",
      "id": 3244175973,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175973",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a31740dbc8a0ccdea30d6d34d764539440fe4b34",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/a31740dbc8a0ccdea30d6d34d764539440fe4b34",
      "created_at": "2020-04-17T12:28:28Z"
    },
    {
      "event": "referenced",
      "id": 3244175976,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175976",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2f174783e492cbb0a32c30f4daedfe25b5af4305",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/2f174783e492cbb0a32c30f4daedfe25b5af4305",
      "created_at": "2020-04-17T12:28:28Z"
    },
    {
      "event": "referenced",
      "id": 3244175982,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175982",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7a97631cc5b45593eac4ac046b265c7370e7c5f3",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/7a97631cc5b45593eac4ac046b265c7370e7c5f3",
      "created_at": "2020-04-17T12:28:28Z"
    },
    {
      "event": "referenced",
      "id": 3244175986,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175986",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6c2e836e12ced06e6f1188ef2270bd636c115537",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/6c2e836e12ced06e6f1188ef2270bd636c115537",
      "created_at": "2020-04-17T12:28:28Z"
    },
    {
      "event": "referenced",
      "id": 3275546447,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzU1NDY0NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3275546447",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b60a395a83ae701b7ca60be00b9860903c52e4af",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/b60a395a83ae701b7ca60be00b9860903c52e4af",
      "created_at": "2020-04-27T12:35:08Z"
    },
    {
      "event": "referenced",
      "id": 3285130733,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODUxMzA3MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3285130733",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "455cd82187d5cb6f2c52fb3a3be9f867ebf5fb05",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/455cd82187d5cb6f2c52fb3a3be9f867ebf5fb05",
      "created_at": "2020-04-29T15:20:07Z"
    },
    {
      "event": "referenced",
      "id": 3285130740,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODUxMzA3NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3285130740",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e594f5b1be4ecdae982d8930b2086a4ac40d489e",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e594f5b1be4ecdae982d8930b2086a4ac40d489e",
      "created_at": "2020-04-29T15:20:07Z"
    },
    {
      "event": "referenced",
      "id": 3285198786,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODUxOTg3ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3285198786",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6a645371c069c0fcd3b7c65eaebe260675d6bf24",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/6a645371c069c0fcd3b7c65eaebe260675d6bf24",
      "created_at": "2020-04-29T15:35:08Z"
    },
    {
      "event": "referenced",
      "id": 3290229485,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTAyMjk0ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3290229485",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0a6446292453a735c1ecd5918d11010e88fe1cf8",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/0a6446292453a735c1ecd5918d11010e88fe1cf8",
      "created_at": "2020-04-30T16:05:09Z"
    },
    {
      "event": "referenced",
      "id": 3290229490,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTAyMjk0OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3290229490",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "380fef33ea62e4b5f6d9dac952956bd71701533c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/380fef33ea62e4b5f6d9dac952956bd71701533c",
      "created_at": "2020-04-30T16:05:09Z"
    },
    {
      "event": "referenced",
      "id": 3290229496,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTAyMjk0OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3290229496",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4943f9ea3acc154808417a208872606d8f2aa760",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/4943f9ea3acc154808417a208872606d8f2aa760",
      "created_at": "2020-04-30T16:05:09Z"
    },
    {
      "event": "referenced",
      "id": 3290365888,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTAzNjU4ODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3290365888",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "619943a5c9c6bf280a147856a479aefd6503d63f",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/619943a5c9c6bf280a147856a479aefd6503d63f",
      "created_at": "2020-04-30T16:35:12Z"
    },
    {
      "event": "referenced",
      "id": 3660736310,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NjA3MzYzMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3660736310",
      "actor": {
        "login": "ftrader",
        "id": 16613123,
        "node_id": "MDQ6VXNlcjE2NjEzMTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/16613123?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ftrader",
        "html_url": "https://github.com/ftrader",
        "followers_url": "https://api.github.com/users/ftrader/followers",
        "following_url": "https://api.github.com/users/ftrader/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ftrader/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ftrader/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ftrader/subscriptions",
        "organizations_url": "https://api.github.com/users/ftrader/orgs",
        "repos_url": "https://api.github.com/users/ftrader/repos",
        "events_url": "https://api.github.com/users/ftrader/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ftrader/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5a0b5039bd049fd5293463104367ce46ba3829de",
      "commit_url": "https://api.github.com/repos/bitcoin-cash-node/bitcoin-cash-node/commits/5a0b5039bd049fd5293463104367ce46ba3829de",
      "created_at": "2020-08-17T08:19:34Z"
    },
    {
      "event": "referenced",
      "id": 3980857295,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTcyOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857295",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0cbe87777dd6c7e3b121f968456de00f4d072085",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/0cbe87777dd6c7e3b121f968456de00f4d072085",
      "created_at": "2020-11-10T20:39:30Z"
    },
    {
      "event": "referenced",
      "id": 3980857302,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTczMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857302",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "33f7a4b53bb25fb0779ed41876cde76041062f33",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/33f7a4b53bb25fb0779ed41876cde76041062f33",
      "created_at": "2020-11-10T20:39:30Z"
    },
    {
      "event": "referenced",
      "id": 3980857306,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTczMDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857306",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c0c2bcddec3cfb75910d64c11ff8b2a3977889b3",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/c0c2bcddec3cfb75910d64c11ff8b2a3977889b3",
      "created_at": "2020-11-10T20:39:30Z"
    },
    {
      "event": "referenced",
      "id": 3980857317,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTczMTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857317",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c1677b430c0b96dec8b05f0c96c49a302ba4d018",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/c1677b430c0b96dec8b05f0c96c49a302ba4d018",
      "created_at": "2020-11-10T20:39:30Z"
    },
    {
      "event": "referenced",
      "id": 3980858168,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTgxNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858168",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "96245fcfb0509afa11bad830d175d30d11f019e1",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/96245fcfb0509afa11bad830d175d30d11f019e1",
      "created_at": "2020-11-10T20:39:42Z"
    },
    {
      "event": "referenced",
      "id": 3997924598,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTc5MjQ1OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3997924598",
      "actor": {
        "login": "silence48",
        "id": 35656692,
        "node_id": "MDQ6VXNlcjM1NjU2Njky",
        "avatar_url": "https://avatars.githubusercontent.com/u/35656692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/silence48",
        "html_url": "https://github.com/silence48",
        "followers_url": "https://api.github.com/users/silence48/followers",
        "following_url": "https://api.github.com/users/silence48/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/silence48/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/silence48/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/silence48/subscriptions",
        "organizations_url": "https://api.github.com/users/silence48/orgs",
        "repos_url": "https://api.github.com/users/silence48/repos",
        "events_url": "https://api.github.com/users/silence48/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/silence48/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d8e262268f512d36a5d6afd07bb875903537c1cb",
      "commit_url": "https://api.github.com/repos/FantasyGold/FantasyGold-Core/commits/d8e262268f512d36a5d6afd07bb875903537c1cb",
      "created_at": "2020-11-15T23:19:18Z"
    },
    {
      "event": "commented",
      "id": 770182825,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDE4MjgyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770182825",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-30T09:20:33Z",
      "updated_at": "2021-01-30T09:20:33Z",
      "author_association": "MEMBER",
      "body": "Hidden by GitHub, but the \"Up for grabs\" refers to https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-555100626",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-770182825",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15934"
    },
    {
      "event": "referenced",
      "id": 4518456901,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5MDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456901",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0839aa237e055091aed994a787dbffbe9b1999b2",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/0839aa237e055091aed994a787dbffbe9b1999b2",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "referenced",
      "id": 4518456902,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456902",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e78d17f1c66041efcd0646413056ff97c0e8cfbc",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/e78d17f1c66041efcd0646413056ff97c0e8cfbc",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "referenced",
      "id": 4518456904,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456904",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7f404e8d42b32f06220c0b1e1b8d1a73135910b5",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/7f404e8d42b32f06220c0b1e1b8d1a73135910b5",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "referenced",
      "id": 4518456905,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456905",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "899f4ff4c496ac95f28c5c7e96ec060ef3f1279c",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/899f4ff4c496ac95f28c5c7e96ec060ef3f1279c",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "unlabeled",
      "id": 5173059526,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NTE3MzA1OTUyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5173059526",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-18T07:35:34Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "referenced",
      "id": 6063085445,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFpY1eF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6063085445",
      "actor": {
        "login": "uvhw",
        "id": 90206684,
        "node_id": "MDQ6VXNlcjkwMjA2Njg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/90206684?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/uvhw",
        "html_url": "https://github.com/uvhw",
        "followers_url": "https://api.github.com/users/uvhw/followers",
        "following_url": "https://api.github.com/users/uvhw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/uvhw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/uvhw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/uvhw/subscriptions",
        "organizations_url": "https://api.github.com/users/uvhw/orgs",
        "repos_url": "https://api.github.com/users/uvhw/repos",
        "events_url": "https://api.github.com/users/uvhw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/uvhw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "47d44ccc3e772b8ab0e64f98cc9a402c6783c54d",
      "commit_url": "https://api.github.com/repos/uvhw/Bitcoin-Foundation/commits/47d44ccc3e772b8ab0e64f98cc9a402c6783c54d",
      "created_at": "2022-02-14T00:05:50Z"
    },
    {
      "event": "referenced",
      "id": 6093454714,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFrMr16",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454714",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "29b1f0a7fd3eaba9d970c359a3c4a9118ea6dc12",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/29b1f0a7fd3eaba9d970c359a3c4a9118ea6dc12",
      "created_at": "2022-02-17T21:05:39Z"
    },
    {
      "event": "referenced",
      "id": 6093454727,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFrMr2H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454727",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b999e46dd4ec6a4fa0c102e29eeb13c2b84d0976",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/b999e46dd4ec6a4fa0c102e29eeb13c2b84d0976",
      "created_at": "2022-02-17T21:05:39Z"
    },
    {
      "event": "referenced",
      "id": 6093454732,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFrMr2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454732",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "94a272bb9d1a004c60e03f151afdfac4eb86e90c",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/94a272bb9d1a004c60e03f151afdfac4eb86e90c",
      "created_at": "2022-02-17T21:05:39Z"
    },
    {
      "event": "referenced",
      "id": 6093454832,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFrMr3w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454832",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "385761470988c1cd345f5232a4fa592664166cc9",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/385761470988c1cd345f5232a4fa592664166cc9",
      "created_at": "2022-02-17T21:05:40Z"
    },
    {
      "event": "referenced",
      "id": 6093454838,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFrMr32",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454838",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cb85b99bd6ff9a18bf1589116e8ba2d9adee35f5",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/cb85b99bd6ff9a18bf1589116e8ba2d9adee35f5",
      "created_at": "2022-02-17T21:05:40Z"
    },
    {
      "event": "referenced",
      "id": 6093454849,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFrMr4B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454849",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "caa30cc07d5b67c370fe1e64ece82a2e45065bd8",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/caa30cc07d5b67c370fe1e64ece82a2e45065bd8",
      "created_at": "2022-02-17T21:05:40Z"
    },
    {
      "event": "referenced",
      "id": 6093454855,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAFrMr4H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454855",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "deb9db2b95edeb2138456c3b81bf8324ad5c57fb",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/deb9db2b95edeb2138456c3b81bf8324ad5c57fb",
      "created_at": "2022-02-17T21:05:40Z"
    },
    {
      "event": "referenced",
      "id": 6429575514,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAF_O4la",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6429575514",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9ca6cd6cd92f80c432a496579111cf17218ae93d",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/9ca6cd6cd92f80c432a496579111cf17218ae93d",
      "created_at": "2022-04-13T18:40:05Z"
    },
    {
      "event": "referenced",
      "id": 6429583499,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAF_O6iL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6429583499",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c9b2afaced54860dc3bd9a15c62ff14e2a9487ec",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/c9b2afaced54860dc3bd9a15c62ff14e2a9487ec",
      "created_at": "2022-04-13T18:41:38Z"
    },
    {
      "event": "referenced",
      "id": 6436628757,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAF_pykV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6436628757",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6943e2c7bd676c0f0b72cfc47e429a9abd526bac",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/6943e2c7bd676c0f0b72cfc47e429a9abd526bac",
      "created_at": "2022-04-14T18:53:07Z"
    },
    {
      "event": "referenced",
      "id": 6443068174,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGACWsO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6443068174",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3b8223ee778ae6bad89604be29b398e5319770af",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/3b8223ee778ae6bad89604be29b398e5319770af",
      "created_at": "2022-04-16T07:03:19Z"
    },
    {
      "event": "referenced",
      "id": 6443327451,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGADV_b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6443327451",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e7caa77cac6fefc0782b64d0c67e7fe41d54bed8",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/e7caa77cac6fefc0782b64d0c67e7fe41d54bed8",
      "created_at": "2022-04-16T12:00:09Z"
    },
    {
      "event": "referenced",
      "id": 6464492233,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGBUFLJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6464492233",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "59c2c96f9dc3d67fd9d3040c3dba82fb1040135f",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/59c2c96f9dc3d67fd9d3040c3dba82fb1040135f",
      "created_at": "2022-04-20T16:11:47Z"
    },
    {
      "event": "referenced",
      "id": 6567861473,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGHeZzh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6567861473",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9d343c98783de9ef20f3a4db4d7c7b5d76879c46",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/9d343c98783de9ef20f3a4db4d7c7b5d76879c46",
      "created_at": "2022-05-07T20:17:08Z"
    },
    {
      "event": "referenced",
      "id": 6572135517,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGHutRd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6572135517",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "03d3a64e6f5f46e7ae78f103f3de7ccee3e3dda1",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/03d3a64e6f5f46e7ae78f103f3de7ccee3e3dda1",
      "created_at": "2022-05-09T10:51:42Z"
    },
    {
      "event": "referenced",
      "id": 6605423204,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGJtsJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6605423204",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cf92976c2bb0beb3f6a5c359242db4633cfa23f7",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/cf92976c2bb0beb3f6a5c359242db4633cfa23f7",
      "created_at": "2022-05-13T12:36:33Z"
    },
    {
      "event": "referenced",
      "id": 6730695791,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGRLkRv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6730695791",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "00b023419128b973aaca05e8547165d671c85a6e",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/00b023419128b973aaca05e8547165d671c85a6e",
      "created_at": "2022-06-02T18:48:40Z"
    },
    {
      "event": "referenced",
      "id": 6730716413,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGRLpT9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6730716413",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fc34557327914e1a95f0466fca953a1e5191e53a",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/fc34557327914e1a95f0466fca953a1e5191e53a",
      "created_at": "2022-06-02T18:52:32Z"
    },
    {
      "event": "referenced",
      "id": 6731403923,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGRORKT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6731403923",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cd14343a3a15234f6f3484617946947b72cfae96",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/cd14343a3a15234f6f3484617946947b72cfae96",
      "created_at": "2022-06-02T20:25:39Z"
    },
    {
      "event": "referenced",
      "id": 6736422714,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGRhac6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6736422714",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b37a6925712f1b0ba779b48f1c20a9bbe146f341",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/b37a6925712f1b0ba779b48f1c20a9bbe146f341",
      "created_at": "2022-06-03T12:56:27Z"
    },
    {
      "event": "referenced",
      "id": 6742343961,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGR4AEZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6742343961",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "34284011c3abd725dae82a963fd1e970b5e44da0",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/34284011c3abd725dae82a963fd1e970b5e44da0",
      "created_at": "2022-06-04T19:02:39Z"
    },
    {
      "event": "referenced",
      "id": 6757176451,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGSwlSD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6757176451",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "398c0bcb7ff77476d203115472e639f1875c929d",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/398c0bcb7ff77476d203115472e639f1875c929d",
      "created_at": "2022-06-07T01:29:51Z"
    },
    {
      "event": "referenced",
      "id": 6762683297,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGTFluh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6762683297",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7cedf84d508bdfb72f1f4a8b22123d04889bce12",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/7cedf84d508bdfb72f1f4a8b22123d04889bce12",
      "created_at": "2022-06-07T15:50:54Z"
    },
    {
      "event": "referenced",
      "id": 6764734742,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGTNakW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6764734742",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e79d73f0fc31c07ba2f89f29de0ca400a44213fa",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/e79d73f0fc31c07ba2f89f29de0ca400a44213fa",
      "created_at": "2022-06-07T21:05:45Z"
    },
    {
      "event": "referenced",
      "id": 6764756063,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGTNfxf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6764756063",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "78ac0e9361d3a0e3a520ec8756376135898b4636",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/78ac0e9361d3a0e3a520ec8756376135898b4636",
      "created_at": "2022-06-07T21:09:48Z"
    },
    {
      "event": "referenced",
      "id": 6789171850,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGUqoqK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789171850",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d1187d70d1382fb8d5efb591ac96508edaa6c536",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/d1187d70d1382fb8d5efb591ac96508edaa6c536",
      "created_at": "2022-06-10T22:59:47Z"
    },
    {
      "event": "referenced",
      "id": 6806525607,
      "node_id": "REFE_lADOABII584aL8pCzwAAAAGVs1an",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6806525607",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "67f95cb60bf4314d181cdff9bde9f885f926b9cf",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/67f95cb60bf4314d181cdff9bde9f885f926b9cf",
      "created_at": "2022-06-14T17:50:08Z"
    },
    {
      "event": "locked",
      "id": 7216592771,
      "node_id": "LOE_lADOABII584aL8pCzwAAAAGuJHeD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7216592771",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T18:33:09Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280411609",
      "pull_request_review_id": 232997353,
      "id": 280411609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDQxMTYwOQ==",
      "diff_hunk": "@@ -163,103 +164,34 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static bool ValidArgStr(const std::string& arg)",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7fcb87bcc76a62770a73685314babd32631e173e",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, `IsValidArgStr`?",
      "created_at": "2019-05-02T13:13:56Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280411609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280411609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280412183",
      "pull_request_review_id": 232997353,
      "id": 280412183,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDQxMjE4Mw==",
      "diff_hunk": "@@ -163,103 +164,34 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static bool ValidArgStr(const std::string& arg)\n+{\n+    return !arg.empty() && arg[0] == '-';",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7fcb87bcc76a62770a73685314babd32631e173e",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `arg.size() > 1 && arg[0] == '-'` or do we need `-`?",
      "created_at": "2019-05-02T13:15:33Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280412183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280412183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288149094",
      "pull_request_review_id": 242727281,
      "id": 288149094,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE0OTA5NA==",
      "diff_hunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "05820024fe6821849d0c659e16ef328c8f08415a",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Digging this chainable `return *this;` interface.",
      "created_at": "2019-05-28T14:55:53Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288149094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288155825",
      "pull_request_review_id": 242727281,
      "id": 288155825,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE1NTgyNQ==",
      "diff_hunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());\n+    }\n+    if (auto* value = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*value)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* value = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*value)).SetConfigFile(false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* value = FindKey(*map, name)) {\n+            span = SettingsSpan(*value);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool skip_negated_command_line)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed.\n+        const bool reverse_precedence = source.config_file;\n+\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        //! Stick with highest priority value, if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetListSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool prev_negated = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        if (!source.span.empty()) {\n+            // Weird behavior preserved for backwards compatibility: Apply\n+            // config file settings even if negated on command line. Negating a\n+            // setting on command line will discard earlier settings on the\n+            // command line and settings in the config file, unless the negated\n+            // command line value is followed by non-negated value, in which\n+            // case config file settings will be brought back from the dead (but\n+            // earlier command line settings will still be discarded).\n+            const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+            if (!prev_negated || add_zombie_config_values) {\n+                for (const auto& value : source.span) {\n+                    if (value.isArray()) {\n+                        result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                    } else {\n+                        result.push_back(value);\n+                    }\n+                }\n+            }\n+        }\n+\n+        prev_negated |= source.span.negated() > 0 || source.forced;",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 120,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "05820024fe6821849d0c659e16ef328c8f08415a",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm slightly confused about why `source.forced` will cause a negation to have occurred, but I guess the rationale here is that if we've forced a value, we effectively want to ignore prev/subsequent values in favor of the forced one.",
      "created_at": "2019-05-28T15:09:09Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288155825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288166922",
      "pull_request_review_id": 242727281,
      "id": 288166922,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE2NjkyMg==",
      "diff_hunk": "@@ -163,103 +164,33 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static std::string SettingName(const std::string& arg)\n+{\n+    return arg.empty() || arg[0] != '-' ? arg : arg.substr(1);\n+}\n+\n /** Internal helper functions for ArgsManager */\n class ArgsManagerHelper {\n public:\n-    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n-\n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n-    /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n-    {\n-        assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n-    }\n-\n-    /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n-    {\n-        auto it = map_args.find(arg);\n-        if (it != map_args.end()) {\n-            res.insert(res.end(), it->second.begin(), it->second.end());\n-        }\n-    }\n-\n-    /** Return true/false if an argument is set in a map, and also\n-     *  return the first (or last) of the possibly multiple values it has\n-     */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n-    {\n-        auto it = map_args.find(arg);\n-\n-        if (it == map_args.end() || it->second.empty()) {\n-            return std::make_pair(false, std::string());\n-        }\n-\n-        if (getLast) {\n-            return std::make_pair(true, it->second.back());\n-        } else {\n-            return std::make_pair(true, it->second.front());\n-        }\n-    }\n-\n-    /* Get the string value of an argument, returning a pair of a boolean\n-     * indicating the argument was found, and the value for the argument\n-     * if it was found (or the empty string if not found).\n-     */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg, bool no_network = false)\n     {\n         LOCK(am.cs_args);\n-        std::pair<bool,std::string> found_result(false, std::string());\n-\n-        // We pass \"true\" to GetArgHelper in order to return the last\n-        // argument value seen from the command line (so \"bitcoind -foo=bar\n-        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n-        found_result = GetArgHelper(am.m_override_args, arg, true);\n-        if (found_result.first) {\n-            return found_result;\n-        }\n \n-        // But in contrast we return the first argument seen in a config file,\n-        // so \"foo=bar \\n foo=baz\" in the config file gives\n-        // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = no_network;\n \n-        if (UseDefaultSection(am, arg)) {\n-            found_result = GetArgHelper(am.m_config_args, arg);\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        return found_result;\n-    }\n-\n-    /* Special test for -testnet and -regtest args, because we\n-     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n-     */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        std::pair<bool,std::string> found_result(false,std::string());\n-        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n-        if (!found_result.first) {\n-            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n-            if (!found_result.first) {\n-                return false; // not set\n-            }\n-        }\n-        return InterpretBool(found_result.second); // is set, so evaluate\n+        return GetSetting(am.m_settings, no_network ? \"\" : am.m_network, SettingName(arg), !UseDefaultSection(am, arg), skip_negated_command_line);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 121,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Long lines like this are hard to review. Consider breaking to 100col?",
      "created_at": "2019-05-28T15:30:55Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288166922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288173284",
      "pull_request_review_id": 242727281,
      "id": 288173284,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE3MzI4NA==",
      "diff_hunk": "@@ -405,116 +320,91 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             key.erase(0, 1);\n \n         // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n+        key.erase(0, 1);\n+        std::string section;\n+        bool negated = InterpretNegatedOption(section, key, val);\n+        // Weird behavior preserved for backwards compatibility: command line\n+        // options with section prefixes are allowed but ignored. It would be\n+        // better if these options triggered the IsArgKnown error below, or were\n+        // actually used instead of silently ignored.",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 202,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the nice comment. Potentially out of scope: could we log warnings for this instead of silently ignoring?",
      "created_at": "2019-05-28T15:44:35Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288173284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288244735",
      "pull_request_review_id": 242727281,
      "id": 288244735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI0NDczNQ==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)",
      "path": "src/test/settings_tests.cpp",
      "position": 82,
      "original_position": 64,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Cool test! The formatted output is really helpful. Encourage other reviewers to run and inspect with\r\n```sh\r\nSETTINGS_MERGE_TEST_OUT=results.txt ./src/test/test_bitcoin --run_test=settings_tests/Merge\r\n```",
      "created_at": "2019-05-28T18:32:51Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288244735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288244735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288245372",
      "pull_request_review_id": 242727281,
      "id": 288245372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI0NTM3Mg==",
      "diff_hunk": "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "path": "src/test/util.h",
      "position": null,
      "original_position": 35,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to other reviewers: the code in this file is already in master (as of 1d543adae593bdbfd954e80ed61ac907db0c5a7b) and its appearance here is only due to this branch not being based on a more recent version of master.",
      "created_at": "2019-05-28T18:34:26Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288245372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288250769",
      "pull_request_review_id": 242727281,
      "id": 288250769,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI1MDc2OQ==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}",
      "path": "src/test/settings_tests.cpp",
      "position": 46,
      "original_position": 29,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could test precedence difference between commandline and config file with the following diff (if you end up needing to rebase for some other reason):\r\n```diff\r\ndiff --git a/src/test/settings_tests.cpp b/src/test/settings_tests.cpp\r\nindex 36188f8471..c82ecaea8c 100644\r\n--- a/src/test/settings_tests.cpp\r\n+++ b/src/test/settings_tests.cpp\r\n@@ -18,14 +18,28 @@ BOOST_AUTO_TEST_CASE(Simple)\r\n {\r\n     util::Settings settings;\r\n     settings.command_line_options[\"name\"].push_back(\"val1\");\r\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\r\n     settings.ro_config[\"section\"][\"name\"].push_back(2);\r\n-    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\r\n-    util::SettingsValue list_value(util::SettingsValue::VARR);\r\n-    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\r\n-        list_value.push_back(item);\r\n-    }\r\n-    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\r\n-    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\r\n+\r\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\r\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\r\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\r\n+        for (const auto& item : GetListSetting(s, \"section\", \"name\", false)) {\r\n+            list_value.push_back(item);\r\n+        }\r\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\r\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\r\n+    };\r\n+\r\n+    // The last given arg takes precedence when specified via commandline.\r\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\r\n+\r\n+    util::Settings settings2;\r\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\r\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\r\n+\r\n+    // The first given arg takes precedence when specified via config file.\r\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\r\n }\r\n \r\n // Test different ways settings can be merged, and verify results. This test can\r\n```",
      "created_at": "2019-05-28T18:48:13Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288250769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288262559",
      "pull_request_review_id": 242871746,
      "id": 288262559,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2MjU1OQ==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}",
      "path": "src/test/settings_tests.cpp",
      "position": 46,
      "original_position": 29,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "in_reply_to_id": 288250769,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769\r\n\r\nThanks! Added test.",
      "created_at": "2019-05-28T19:19:46Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288262559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288262559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288264332",
      "pull_request_review_id": 242871746,
      "id": 288264332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2NDMzMg==",
      "diff_hunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "05820024fe6821849d0c659e16ef328c8f08415a",
      "in_reply_to_id": 288149094,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094\r\n\r\nThese can be nice sometimes. They are also called fluent interfaces (https://en.wikipedia.org/wiki/Fluent_interface)",
      "created_at": "2019-05-28T19:24:37Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288264332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288264332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288266961",
      "pull_request_review_id": 242871746,
      "id": 288266961,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2Njk2MQ==",
      "diff_hunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());\n+    }\n+    if (auto* value = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*value)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* value = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*value)).SetConfigFile(false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* value = FindKey(*map, name)) {\n+            span = SettingsSpan(*value);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool skip_negated_command_line)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed.\n+        const bool reverse_precedence = source.config_file;\n+\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        //! Stick with highest priority value, if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetListSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool prev_negated = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        if (!source.span.empty()) {\n+            // Weird behavior preserved for backwards compatibility: Apply\n+            // config file settings even if negated on command line. Negating a\n+            // setting on command line will discard earlier settings on the\n+            // command line and settings in the config file, unless the negated\n+            // command line value is followed by non-negated value, in which\n+            // case config file settings will be brought back from the dead (but\n+            // earlier command line settings will still be discarded).\n+            const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+            if (!prev_negated || add_zombie_config_values) {\n+                for (const auto& value : source.span) {\n+                    if (value.isArray()) {\n+                        result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                    } else {\n+                        result.push_back(value);\n+                    }\n+                }\n+            }\n+        }\n+\n+        prev_negated |= source.span.negated() > 0 || source.forced;",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 120,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "05820024fe6821849d0c659e16ef328c8f08415a",
      "in_reply_to_id": 288155825,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825\r\n\r\nI guess it doesn't cause a real negation, more of an effective negation like you described. I renamed the variable `result_complete` to avoid mentioning negation.",
      "created_at": "2019-05-28T19:31:50Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288266961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288266961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288307354",
      "pull_request_review_id": 242928533,
      "id": 288307354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODMwNzM1NA==",
      "diff_hunk": "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "path": "src/test/util.h",
      "position": null,
      "original_position": 35,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "in_reply_to_id": 288245372,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So it should be rebased, imo. Otherwise `git blame` will return different results for the same lines depending on what commit is currently checked out.",
      "created_at": "2019-05-28T21:20:37Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288307354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288307354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288628719",
      "pull_request_review_id": 242871746,
      "id": 288628719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYyODcxOQ==",
      "diff_hunk": "@@ -163,103 +164,33 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static std::string SettingName(const std::string& arg)\n+{\n+    return arg.empty() || arg[0] != '-' ? arg : arg.substr(1);\n+}\n+\n /** Internal helper functions for ArgsManager */\n class ArgsManagerHelper {\n public:\n-    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n-\n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n-    /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n-    {\n-        assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n-    }\n-\n-    /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n-    {\n-        auto it = map_args.find(arg);\n-        if (it != map_args.end()) {\n-            res.insert(res.end(), it->second.begin(), it->second.end());\n-        }\n-    }\n-\n-    /** Return true/false if an argument is set in a map, and also\n-     *  return the first (or last) of the possibly multiple values it has\n-     */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n-    {\n-        auto it = map_args.find(arg);\n-\n-        if (it == map_args.end() || it->second.empty()) {\n-            return std::make_pair(false, std::string());\n-        }\n-\n-        if (getLast) {\n-            return std::make_pair(true, it->second.back());\n-        } else {\n-            return std::make_pair(true, it->second.front());\n-        }\n-    }\n-\n-    /* Get the string value of an argument, returning a pair of a boolean\n-     * indicating the argument was found, and the value for the argument\n-     * if it was found (or the empty string if not found).\n-     */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg, bool no_network = false)\n     {\n         LOCK(am.cs_args);\n-        std::pair<bool,std::string> found_result(false, std::string());\n-\n-        // We pass \"true\" to GetArgHelper in order to return the last\n-        // argument value seen from the command line (so \"bitcoind -foo=bar\n-        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n-        found_result = GetArgHelper(am.m_override_args, arg, true);\n-        if (found_result.first) {\n-            return found_result;\n-        }\n \n-        // But in contrast we return the first argument seen in a config file,\n-        // so \"foo=bar \\n foo=baz\" in the config file gives\n-        // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = no_network;\n \n-        if (UseDefaultSection(am, arg)) {\n-            found_result = GetArgHelper(am.m_config_args, arg);\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        return found_result;\n-    }\n-\n-    /* Special test for -testnet and -regtest args, because we\n-     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n-     */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        std::pair<bool,std::string> found_result(false,std::string());\n-        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n-        if (!found_result.first) {\n-            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n-            if (!found_result.first) {\n-                return false; // not set\n-            }\n-        }\n-        return InterpretBool(found_result.second); // is set, so evaluate\n+        return GetSetting(am.m_settings, no_network ? \"\" : am.m_network, SettingName(arg), !UseDefaultSection(am, arg), skip_negated_command_line);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 121,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "in_reply_to_id": 288166922,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922\r\n\r\nLooks like github diffs are 120 columns wide. I wrapped this line and put `ColumnLimit: 119` in my clang-format",
      "created_at": "2019-05-29T15:28:40Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288628719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288628719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639295",
      "pull_request_review_id": 242871746,
      "id": 288639295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYzOTI5NQ==",
      "diff_hunk": "@@ -405,116 +320,91 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             key.erase(0, 1);\n \n         // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n+        key.erase(0, 1);\n+        std::string section;\n+        bool negated = InterpretNegatedOption(section, key, val);\n+        // Weird behavior preserved for backwards compatibility: command line\n+        // options with section prefixes are allowed but ignored. It would be\n+        // better if these options triggered the IsArgKnown error below, or were\n+        // actually used instead of silently ignored.",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 202,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "in_reply_to_id": 288173284,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284\r\n\r\n> Potentially out of scope: could we log warnings for this instead of silently ignoring?\r\n\r\nI'm planning on making followup PRs that simplify and clean up all these \"Weird behavior preserved for backwards compatibility\" instances. I'd rather not add warnings in this PR partly because I'm disinclined to mix up behavior changes and refactoring changes in the same PR, but also because having some invalid options result in warnings and other invalid options result in errors seems even more strange and complicated than what the code does now.",
      "created_at": "2019-05-29T15:49:15Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639762",
      "pull_request_review_id": 242871746,
      "id": 288639762,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYzOTc2Mg==",
      "diff_hunk": "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "path": "src/test/util.h",
      "position": null,
      "original_position": 35,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "in_reply_to_id": 288245372,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372\r\n\r\nRebased!",
      "created_at": "2019-05-29T15:50:08Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335797249",
      "pull_request_review_id": 302987362,
      "id": 335797249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5NzI0OQ==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "path": "src/util/settings.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also key-value or array as requirements ? I suppose any other variant type should be easy to use with basic types..",
      "created_at": "2019-10-17T03:36:29Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335797249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335797249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798172",
      "pull_request_review_id": 302987362,
      "id": 335798172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5ODE3Mg==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 34,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what's top-level section of the config file ? The non-network one?",
      "created_at": "2019-10-17T03:42:08Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798710",
      "pull_request_review_id": 302987362,
      "id": 335798710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5ODcxMA==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 42,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time",
      "created_at": "2019-10-17T03:45:37Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335799539",
      "pull_request_review_id": 302987362,
      "id": 335799539,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5OTUzOQ==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if has ignored config value in the default section.",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 44,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: find \"value is not set\" better than \"has ignored config value\"",
      "created_at": "2019-10-17T03:50:28Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335799539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335799539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335802270",
      "pull_request_review_id": 302987362,
      "id": 335802270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwMjI3MA==",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: any reason why you don't dereference compare to others?",
      "created_at": "2019-10-17T04:08:17Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335802270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335802270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335948647",
      "pull_request_review_id": 303182364,
      "id": 335948647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk0ODY0Nw==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 42,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335798710,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time\r\n\r\nSure, will rename.",
      "created_at": "2019-10-17T11:23:02Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335948647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335948647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335949720",
      "pull_request_review_id": 303182364,
      "id": 335949720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk0OTcyMA==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "path": "src/util/settings.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335797249,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These definitely aren't not requirements of the type right now. There is no syntax for these things. Maybe this would be useful in the future for something like per-wallet settings (different preferences, RPC authentication setting), and I guess this is a little easier now, but otherwise the PR is neutral on this.",
      "created_at": "2019-10-17T11:25:54Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335949720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335949720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335950228",
      "pull_request_review_id": 303184636,
      "id": 335950228,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk1MDIyOA==",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335802270,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> nit: any reason why you don't dereference compare to others?\r\n\r\nAll three settings sources (forced_settings, command_line_options, ro_config) are different types, so there's not much reason to expect SettingsSpan construction to be the same for all of them:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/61e034f1f6b3beeeed51ef8aaf7762f9244a7c8f/src/util/settings.h#L25-L29\r\n\r\nBut I think the only reason for passing a pointer was to save a line of code and not add a fourth SettingsSpan constructor. I think I will go back and add this, though, since I think it's generally better to pass by reference not pointer when the argument can't be null.\r\n",
      "created_at": "2019-10-17T11:27:22Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335950228",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335950228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951015",
      "pull_request_review_id": 303184636,
      "id": 335951015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk1MTAxNQ==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 34,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335798172,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> what's top-level section of the config file ? The non-network one?\r\n\r\nYes, literally the top of the config file before a `[section]` delimiter. I don't really like the term non-network settings because the section can contain network related settings that will be used on mainnet.",
      "created_at": "2019-10-17T11:29:28Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951722",
      "pull_request_review_id": 303184636,
      "id": 335951722,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk1MTcyMg==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if has ignored config value in the default section.",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 44,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335799539,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> nit: find \"value is not set\" better than \"has ignored config value\"\r\n\r\nI'm not sure \"value is not set\" is better. A value is set by the user, it's just not applied due to the current network. Will expand command though.",
      "created_at": "2019-10-17T11:31:31Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337691812",
      "pull_request_review_id": 305433006,
      "id": 337691812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzY5MTgxMg==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "path": "src/util/settings.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335797249,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I suppose any other variant type should be easy to use with basic types..\r\n\r\nI think `boost::variant` would be an inferior choice, but just as an experiment I tried dropping it in here with some helper methods to make it work without changes to other code:\r\n\r\n```c++\r\nstruct SettingsValue : public boost::variant<std::nullptr_t, bool, int64_t, std::string>\r\n{\r\n    using variant::variant;\r\n    template<typename T> const T* ptr() const { return boost::get<T>(this); }\r\n    bool isNull() const { return ptr<std::nullptr_t>(); }\r\n    bool isBool() const { return ptr<bool>(); }\r\n    bool isNum() const { return ptr<int64_t>(); }\r\n    bool isFalse() const { return ptr<bool>() && !*ptr<bool>(); }\r\n    bool isTrue() const { return ptr<bool>() && *ptr<bool>(); }\r\n    const std::string& get_str() const { return *ptr<std::string>(); }\r\n    const bool& get_bool() const { return *ptr<bool>(); }\r\n    const int64_t& get_int64() const { return *ptr<int64_t>(); }\r\n};\r\n```\r\n\r\nThis was sufficient for everything except `settings_test.cpp` (which uses serialization), so it confirms `SettingsValue` only requires storing ints, bools, strings and nulls, and the choice of type isn't very important.",
      "created_at": "2019-10-22T18:52:46Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337691812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337691812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337809469",
      "pull_request_review_id": 305582886,
      "id": 337809469,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzgwOTQ2OQ==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case",
      "path": "src/util/system.cpp",
      "position": 310,
      "original_position": 308,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just to be sure the `IsArgNegated` is preserved here in `GetListSetting` via `source.span.negated() > 0` ?",
      "created_at": "2019-10-23T00:49:50Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337809469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337809469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 464,
      "original_line": 464,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337810134",
      "pull_request_review_id": 305582886,
      "id": 337810134,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzgxMDEzNA==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {",
      "path": "src/util/system.cpp",
      "position": 253,
      "original_position": 251,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmmm I can't get from where this behavior is extracted ?",
      "created_at": "2019-10-23T00:53:56Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337810134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337810134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 338,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927662",
      "pull_request_review_id": 305733423,
      "id": 337927662,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzkyNzY2Mg==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {",
      "path": "src/util/system.cpp",
      "position": 253,
      "original_position": 251,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": 337810134,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337810134\r\n\r\n> Hmmm I can't get from where this behavior is extracted ?\r\n\r\nThis behavior makes no sense and was never intended, so it's buried away in current code. It happens because of the following code in `ArgsManager::ParseParameters`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9dd6bbba613d7462afdb6276c4002bc183478528/src/util/system.cpp#L411-L420\r\n\r\nA section `section.name` command line setting here will fail to trigger the \"Invalid parameter\" error because `FlagsOfKnownArg` strips out the `section.` prefix and finds that `name` is a known setting. But `InterpretOption` fails to strip out the `section.` prefix and stores the setting in the `m_override_args` map under `section.name` instead of `name`, where it is ignored and never has any effect.\r\n\r\nThe new code improves this by documenting the behavior and making it easy to change in the future. It also avoids bugs like this by splitting the `section.name` string exactly once in `InterpretOption` instead of many different places and times.\r\n\r\n",
      "created_at": "2019-10-23T09:00:19Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927662",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 338,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927735",
      "pull_request_review_id": 305733423,
      "id": 337927735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzkyNzczNQ==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case",
      "path": "src/util/system.cpp",
      "position": 310,
      "original_position": 308,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": 337809469,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337809469\r\n\r\n> Just to be sure the `IsArgNegated` is preserved here in `GetListSetting` via `source.span.negated() > 0` ?\r\n\r\nIt's handled implicitly by `for (const auto& value : source.span)` in `GetListSetting`, because the `SettingsSpan` iterator skips negated values in its `begin()` method.\r\n\r\nThe `source.span.negated() > 0` check you're referring is used after that to set the `result_complete` variable, which is used to apply settings precedence\r\n`command_line_options` > `rw_settings` > `ro_config`, and make sure for example that a negation on the command line will clear out any lower priority settings in `ro_config` and `rw_settings`. I'll add a comment to say this explicitly on the result_complete line.",
      "created_at": "2019-10-23T09:00:29Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 464,
      "original_line": 464,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927946",
      "pull_request_review_id": 305733423,
      "id": 337927946,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzkyNzk0Ng==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 42,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335798710,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798710\r\n\r\n> > nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time\r\n> \r\n> Sure, will rename.\r\n\r\nForgot to do this last time. I think I'll use `GetSetting` for single valued settings and `GetSettingsList` for many valued settings. I'd like to keep using the word \"list\" here to be consistent with #16545 which also uses it with `TYPE_STRING_LIST` as one of the settings types.",
      "created_at": "2019-10-23T09:00:59Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338113304",
      "pull_request_review_id": 305976230,
      "id": 338113304,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExMzMwNA==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());",
      "path": "src/util/system.cpp",
      "position": 321,
      "original_position": 319,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I find this a bit hard to read, would rather add a few more lines than have a nested ternary statement",
      "created_at": "2019-10-23T15:17:19Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338113304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338113304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 377,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114628",
      "pull_request_review_id": 305976230,
      "id": 338114628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExNDYyOA==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();",
      "path": "src/util/system.cpp",
      "position": 364,
      "original_position": 362,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would not use nested ternary for readability",
      "created_at": "2019-10-23T15:19:39Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 395,
      "original_line": 395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114696",
      "pull_request_review_id": 305976230,
      "id": 338114696,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExNDY5Ng==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());",
      "path": "src/util/system.cpp",
      "position": 374,
      "original_position": 372,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would not use nested ternary for readability",
      "created_at": "2019-10-23T15:19:47Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 401,
      "original_line": 401,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114787",
      "pull_request_review_id": 305976230,
      "id": 338114787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExNDc4Nw==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    if (IsArgNegated(strArg)) return false;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return InterpretBool(found_res.second);\n-    return fDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());",
      "path": "src/util/system.cpp",
      "position": 384,
      "original_position": 382,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would not use nested ternary for readability",
      "created_at": "2019-10-23T15:19:57Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 407,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338157029",
      "pull_request_review_id": 305976230,
      "id": 338157029,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE1NzAyOQ==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());",
      "path": "src/util/system.cpp",
      "position": 321,
      "original_position": 319,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "in_reply_to_id": 338113304,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On second thought: since these nested ternary one-liners are repeated multiple times, I would suggest a helper method that converts `value` to whatever gets pushed into `result`",
      "created_at": "2019-10-23T16:39:01Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338157029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338157029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 377,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338179393",
      "pull_request_review_id": 306061520,
      "id": 338179393,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE3OTM5Mw==",
      "diff_hunk": "@@ -156,19 +157,58 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n \n struct TestArgsManager : public ArgsManager\n {\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+\n     TestArgsManager() { m_network_only_args.clear(); }\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n+    bool ParseParameters(int argc, const char* const argv[], std::string& error) {\n+        bool result = ArgsManager::ParseParameters(argc, argv, error);",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "**const** bool would help here, it actually too a wile to see that it is not changed throughout this function.",
      "created_at": "2019-10-23T17:26:36Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338179393",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338179393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338180105",
      "pull_request_review_id": 306062447,
      "id": 338180105,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MDEwNQ==",
      "diff_hunk": "@@ -156,19 +157,58 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n \n struct TestArgsManager : public ArgsManager\n {\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+\n     TestArgsManager() { m_network_only_args.clear(); }\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n+    bool ParseParameters(int argc, const char* const argv[], std::string& error) {\n+        bool result = ArgsManager::ParseParameters(argc, argv, error);\n+        LOCK(cs_args);\n+        m_override_args.clear();\n+        for (const auto& option : m_settings.command_line_options) {\n+            auto& args = m_override_args[\"-\" + option.first];\n+            for (const auto& value : util::SettingsSpan(option.second)) {\n+                args.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+            }\n+        }\n+        return result;\n+    }\n     void ReadConfigString(const std::string str_config)\n     {\n         std::istringstream streamConfig(str_config);\n         {\n             LOCK(cs_args);\n-            m_config_args.clear();\n+            m_settings.ro_config.clear();\n             m_config_sections.clear();\n         }\n         std::string error;\n         BOOST_REQUIRE(ReadConfigStream(streamConfig, \"\", error));\n+        LOCK(cs_args);\n+        m_config_args.clear();\n+        for (const auto& section : m_settings.ro_config) {\n+            for (const auto& setting : section.second) {\n+                auto& args = m_config_args[\"-\" + (section.first.empty() ? \"\" : section.first + \".\") + setting.first];\n+                for (const auto& value : util::SettingsSpan(setting.second)) {\n+                    args.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+                }\n+            }\n+        }\n+    }\n+    void UpdateSettings()\n+    {\n+        LOCK(cs_args);\n+        for (const auto* args : {&m_override_args, &m_config_args}) {\n+            for (const auto& arg : *args) {\n+                std::string name = arg.first[0] == '-' ? arg.first.substr(1) : arg.first;",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could be `const std::string`",
      "created_at": "2019-10-23T17:28:06Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338180105",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338180105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181221",
      "pull_request_review_id": 306063858,
      "id": 338181221,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MTIyMQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`noexcept`?",
      "created_at": "2019-10-23T17:30:24Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181221",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181466",
      "pull_request_review_id": 306064180,
      "id": 338181466,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MTQ2Ng==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could be `noexcept`",
      "created_at": "2019-10-23T17:30:54Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181466",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338183326",
      "pull_request_review_id": 306066691,
      "id": 338183326,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MzMyNg==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider marking as `const` and applying [ES.28: Use lambdas for complex initialization, especially of const variables](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es28-use-lambdas-for-complex-initialization-especially-of-const-variables). That re-assignment `span = SettingsSpan(*values);` is rather \"hidden\".",
      "created_at": "2019-10-23T17:35:02Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338183326",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338183326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338185316",
      "pull_request_review_id": 306069334,
      "id": 338185316,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4NTMxNg==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;",
      "path": "src/util/settings.cpp",
      "position": 87,
      "original_position": 83,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This looks redundant. `result` is always null here, I don't see where it can be changed above. ~~All this could be rewritten as a `return <something>` instead of changing via lambda capturer reference...~~",
      "created_at": "2019-10-23T17:39:23Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338185316",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338185316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338187185",
      "pull_request_review_id": 306071748,
      "id": 338187185,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4NzE4NQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;",
      "path": "src/util/settings.cpp",
      "position": 87,
      "original_position": 83,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": 338185316,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338185316\r\n\r\n> This looks redundant. `result` is always null here, I don't see where it can be changed above. All this could be rewritten as a `return <something>` instead of changing via lambda capturer reference...\r\n\r\nI can maybe change the comment above to clarify, but `return` here is what keeps lower priority values from overwriting higher priority values. Bear in mind this is a lambda called repeatedly, one time for each setting source.",
      "created_at": "2019-10-23T17:43:07Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338187185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338187185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338189741",
      "pull_request_review_id": 306074977,
      "id": 338189741,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4OTc0MQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and\n+        // settings in the config file, unless the negated command line value is\n+        // followed by non-negated value, in which case config file settings\n+        // will be brought back from the dead (but earlier command line settings\n+        // will still be discarded).\n+        const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        // Add new settings to the result if isn't already complete, or if the\n+        // values are zombies.\n+        if (!result_complete || add_zombie_config_values) {\n+            for (const auto& value : source.span) {\n+                if (value.isArray()) {\n+                    result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                } else {\n+                    result.push_back(value);\n+                }\n+            }\n+        }\n+\n+        // If a setting was negated, or if a setting was forced, set\n+        // result_complete to true to ignore any later lower priority settings.\n+        result_complete |= source.span.negated() > 0 || source.forced;\n+\n+        // Update the negated and empty state used for the zombie values check.\n+        prev_negated_empty |= source.span.last_negated() && result.empty();\n+    });\n+    return result;\n+}\n+\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name)\n+{\n+    bool has_ignored = true;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // If top-level config value is unset, or any other value is set,\n+        // then no top-level setting is being ignored.\n+        has_ignored &= source.config_file_top_level ? !source.span.empty() : source.span.empty();\n+    });\n+    return has_ignored;\n+}\n+\n+SettingsSpan::SettingsSpan(const std::vector<SettingsValue>& vec) : SettingsSpan(vec.data(), vec.size()) {}\n+const SettingsValue* SettingsSpan::begin() const { return data + negated(); }\n+const SettingsValue* SettingsSpan::end() const { return data + size; }",
      "path": "src/util/settings.cpp",
      "position": 158,
      "original_position": 150,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`end()` could be `noexcept`, not sure about all these other trivial functions (with regards to `isFalse()` via `negated()`).",
      "created_at": "2019-10-23T17:48:04Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338189741",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338189741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338190405",
      "pull_request_review_id": 306075861,
      "id": 338190405,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MDQwNQ==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 58,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`noexcept`",
      "created_at": "2019-10-23T17:49:19Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338190405",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338190405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191106",
      "pull_request_review_id": 306076715,
      "id": 338191106,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MTEwNg==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);\n+    SettingsSpan(const SettingsValue& value) : SettingsSpan(&value, 1) {}",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 60,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "explcit? noexcept?",
      "created_at": "2019-10-23T17:50:37Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191106",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191129",
      "pull_request_review_id": 306076741,
      "id": 338191129,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MTEyOQ==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 59,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Missing `exclicit`? Do we really need to support `SettigsSpan s = std::vec...` ?",
      "created_at": "2019-10-23T17:50:39Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191129",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191554",
      "pull_request_review_id": 306077230,
      "id": 338191554,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MTU1NA==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);\n+    SettingsSpan(const SettingsValue& value) : SettingsSpan(&value, 1) {}\n+    SettingsSpan() {}",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 61,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe just `= default` ?",
      "created_at": "2019-10-23T17:51:25Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191554",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338194723",
      "pull_request_review_id": 306081209,
      "id": 338194723,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5NDcyMw==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);\n+    SettingsSpan(const SettingsValue& value) : SettingsSpan(&value, 1) {}\n+    SettingsSpan() {}\n+    const SettingsValue* begin() const; //<! Pointer to first non-negated value.\n+    const SettingsValue* end() const;   //<! Pointer to end of values.\n+    bool empty() const;                 //<! True if there are any non-negated values.\n+    bool last_negated() const;          //<! True if the last value is negated.\n+    size_t negated() const;             //<! Number of negated values.\n+\n+    const SettingsValue* data = nullptr;\n+    size_t size = 0;\n+};\n+\n+//! Map lookup helper.\n+template <typename Map, typename Key>\n+auto FindKey(Map&& map, Key&& key) -> decltype(&map.at(key))\n+{\n+    auto it = map.find(key);",
      "path": "src/util/settings.h",
      "position": 81,
      "original_position": 76,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`const auto it` as `it` is not changed later. \r\n\r\nP.S. really sorry for not using \"Review Changes\" feature. I've been informed that these \"add single comment\" spams the notification channel... Will do better next time.",
      "created_at": "2019-10-23T17:57:30Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338194723",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338194723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338210952",
      "pull_request_review_id": 306102327,
      "id": 338210952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODIxMDk1Mg==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": 338183326,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338183326\r\n\r\n> Consider marking as `const` and applying [ES.28: Use lambdas for complex initialization, especially of const variables](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es28-use-lambdas-for-complex-initialization-especially-of-const-variables). That re-assignment `span = SettingsSpan(*values);` is rather \"hidden\".\r\n\r\nIt can definitely be confusing when a non-const variable has a long lifetime and its value changes over a complicated function. But the `span` variable here is constructed, assigned, used, and destroyed all in about 5 lines of code, so using an initialization lambda would seem make overall flow more complicated instead of less.",
      "created_at": "2019-10-23T18:31:09Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338210952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338210952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338217848",
      "pull_request_review_id": 306102327,
      "id": 338217848,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODIxNzg0OA==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 59,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": 338191129,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Do we really need to support `SettigsSpan s = std::vec...` ?\r\n\r\nWe don't really need it because the data / size constructor could be called instead but having this makes code in system.cpp less verbose and I'm not sure what the preferred alternative would be: Calling .data() and .size() manually? Helper function to call .data() and .size()? Template constructor that calls .data() and .size() without referencing std::vector?",
      "created_at": "2019-10-23T18:45:44Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338217848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338217848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338388982",
      "pull_request_review_id": 306329017,
      "id": 338388982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODM4ODk4Mg==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 59,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": 338191129,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh no, I do not suggest to remove this helper constructor, maybe just adding `explicit` for that constructor. Currently it implicilty-converts from std::vecotor:\r\n```\r\n//...\r\nDoSomething(const SettingsSpan& span);\r\n//...\r\nstd::vector<SettingsValue>& vec;\r\nDoSomething(vec); // implicilty conerts to SettingsSpan, kinda \"sneaky\".\r\n```\r\nWith `explicit` constructor:\r\n```\r\nDoSomething(SettingsValue{vec}); // we see that we pass SettngsValue, not \"just\" a vector\r\n```\r\n\r\nAlthough looking at `std::span` implementations, these constructors are also implicit there, so I guess you can ignore this comment.\r\n\r\n",
      "created_at": "2019-10-24T05:40:14Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338388982",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338388982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338389531",
      "pull_request_review_id": 306329661,
      "id": 338389531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODM4OTUzMQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;",
      "path": "src/util/settings.cpp",
      "position": 87,
      "original_position": 83,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": 338185316,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, I've missed that fact that lambda is called multiple times, thanks for clarification. So this comment is moot.",
      "created_at": "2019-10-24T05:42:54Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338389531",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338389531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338460044",
      "pull_request_review_id": 306420752,
      "id": 338460044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODQ2MDA0NA==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "path": "src/util/settings.h",
      "position": null,
      "original_position": 59,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "8ca6338e994000c82c813721c85ebafd61250641",
      "in_reply_to_id": 338191129,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191129\r\n\r\n> Although looking at `std::span` implementations, these constructors are also implicit there, so I guess you can ignore this comment.\r\n\r\nYes, it's a perfectly safe conversion that doesn't create ownership or performance issues, and in case of `std::span` reduces noise and boilerplate in code. But in any case I updated this PR to use explicit here the other day based on your feedback (https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.17..pr/mergeset.18) and I think it's an improvement.",
      "created_at": "2019-10-24T09:02:34Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338460044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338460044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338710128",
      "pull_request_review_id": 306757104,
      "id": 338710128,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcxMDEyOA==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since SettingsSpan copy constructor is `noexcept`, this could be too.\r\nThough if it would change any time in the future, using `noexcept()` _operator_ could make it conditionally `noexcept`, by checking if copy constructor is actually `noexcept` (if author cares):\r\n```\r\nexplicit Source(SettingsSpan span) noexcept(noexcept(SettingsSpan{span}) : span(span) {}\r\n```\r\n",
      "created_at": "2019-10-24T17:52:46Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338710128",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338710128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338712255",
      "pull_request_review_id": 306757104,
      "id": 338712255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcxMjI1NQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and\n+        // settings in the config file, unless the negated command line value is\n+        // followed by non-negated value, in which case config file settings\n+        // will be brought back from the dead (but earlier command line settings\n+        // will still be discarded).\n+        const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        // Add new settings to the result if isn't already complete, or if the\n+        // values are zombies.\n+        if (!result_complete || add_zombie_config_values) {\n+            for (const auto& value : source.span) {\n+                if (value.isArray()) {\n+                    result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                } else {\n+                    result.push_back(value);\n+                }\n+            }\n+        }\n+\n+        // If a setting was negated, or if a setting was forced, set\n+        // result_complete to true to ignore any later lower priority settings.\n+        result_complete |= source.span.negated() > 0 || source.forced;\n+\n+        // Update the negated and empty state used for the zombie values check.\n+        prev_negated_empty |= source.span.last_negated() && result.empty();\n+    });\n+    return result;\n+}\n+\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name)\n+{\n+    bool has_ignored = true;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // If top-level config value is unset, or any other value is set,\n+        // then no top-level setting is being ignored.\n+        has_ignored &= source.config_file_top_level ? !source.span.empty() : source.span.empty();\n+    });\n+    return has_ignored;\n+}\n+\n+SettingsSpan::SettingsSpan(const std::vector<SettingsValue>& vec) noexcept : SettingsSpan(vec.data(), vec.size()) {}\n+const SettingsValue* SettingsSpan::begin() const { return data + negated(); }\n+const SettingsValue* SettingsSpan::end() const { return data + size; }\n+bool SettingsSpan::empty() const { return size == 0 || last_negated(); }\n+bool SettingsSpan::last_negated() const { return size > 0 && data[size - 1].isFalse(); }\n+size_t SettingsSpan::negated() const",
      "path": "src/util/settings.cpp",
      "position": 161,
      "original_position": 153,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function has some rather unusual looping, so if you care about prioritizing usage of standard algorithms, it could be implemented in something like this:\r\n```\r\n        const std::reverse_iterator<const SettingsValue*> rbegin(end());\r\n        const std::reverse_iterator<const SettingsValue*> rend(begin());\r\n        const auto it = std::find_if(rbegin, rend, [](const SettingsValue &i) { return i.isFalse(); });\r\n        return static_cast<size_t>(std::distance(it, rend));\r\n```",
      "created_at": "2019-10-24T17:57:17Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338712255",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338712255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338713562",
      "pull_request_review_id": 306757104,
      "id": 338713562,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcxMzU2Mg==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    explicit SettingsSpan() = default;\n+    explicit SettingsSpan(const SettingsValue& value) noexcept : SettingsSpan(&value, 1) {}\n+    explicit SettingsSpan(const SettingsValue* data, size_t size) noexcept : data(data), size(size) {}\n+    explicit SettingsSpan(const std::vector<SettingsValue>& vec) noexcept;",
      "path": "src/util/settings.h",
      "position": 66,
      "original_position": 61,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now there are some redundant `explicit`'s. There's no need to mark `SettingsSpan() = default;` or more-than-one-argument-taking `SettingsSpan(const SettingsValue* data, size_t size)` as `explicit`. It's only for the cases when constructor can initialize with _single_ argument.",
      "created_at": "2019-10-24T18:00:04Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338713562",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338713562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338716389",
      "pull_request_review_id": 306757104,
      "id": 338716389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcxNjM4OQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {",
      "path": "src/util/settings.cpp",
      "position": 44,
      "original_position": 40,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe `\"\"` are rather overused on codebases. This invokes `std::string`'s copy constructor taking `const char*` that will try to `strlen()`, etc. Creating default-constructed `std::string{}`/ `std::string()`/`{} (in right context)` would feel more \"pedantically correct\" :) .",
      "created_at": "2019-10-24T18:06:31Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338716389",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338716389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338719480",
      "pull_request_review_id": 306757104,
      "id": 338719480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcxOTQ4MA==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            error = strprintf(\"Invalid parameter -%s\", key.c_str());\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;\n+    if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n+        for (const auto& include : util::SettingsSpan(*includes)) {\n+            error += \"-includeconf cannot be used from commandline; -includeconf=\" + include.get_str() + \"\\n\";",
      "path": "src/util/system.cpp",
      "position": 274,
      "original_position": 272,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`\"\\n\"` -> `'\\n'`, no need for const char* / std::string for single character.",
      "created_at": "2019-10-24T18:13:24Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338719480",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338719480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 351,
      "original_line": 351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338720155",
      "pull_request_review_id": 306757104,
      "id": 338720155,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMDE1NQ==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            error = strprintf(\"Invalid parameter -%s\", key.c_str());\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;\n+    if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n+        for (const auto& include : util::SettingsSpan(*includes)) {\n+            error += \"-includeconf cannot be used from commandline; -includeconf=\" + include.get_str() + \"\\n\";\n+            success = false;\n         }\n     }\n-    return true;\n+    return success;\n }\n \n unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n {\n-    assert(key[0] == '-');\n-\n-    size_t option_index = key.find('.');\n-    if (option_index == std::string::npos) {\n-        option_index = 1;\n-    } else {\n-        ++option_index;\n-    }\n-    if (key.substr(option_index, 2) == \"no\") {\n-        option_index += 2;\n-    }\n-\n-    const std::string base_arg_name = '-' + key.substr(option_index);\n-\n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n-        const auto search = arg_map.second.find(base_arg_name);\n+        const auto search = arg_map.second.find(\"-\" + key);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`\"-\"` -> `'-'`",
      "created_at": "2019-10-24T18:14:49Z",
      "updated_at": "2019-11-08T05:02:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720155",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338720155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338720515",
      "pull_request_review_id": 306757104,
      "id": 338720515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMDUxNQ==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": 317,
      "original_position": 315,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "const bool?",
      "created_at": "2019-10-24T18:15:33Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720515",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338720515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 373,
      "original_line": 373,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338721033",
      "pull_request_review_id": 306757104,
      "id": 338721033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMTAzMw==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 361,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "**const** util::SettingsValue value",
      "created_at": "2019-10-24T18:16:40Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721033",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338721033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338721156",
      "pull_request_review_id": 306757104,
      "id": 338721156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMTE1Ng==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 371,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "**const** util::SettingsValue value",
      "created_at": "2019-10-24T18:16:53Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721156",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338721156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338721347",
      "pull_request_review_id": 306757104,
      "id": 338721347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMTM0Nw==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    if (IsArgNegated(strArg)) return false;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return InterpretBool(found_res.second);\n-    return fDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 381,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "**const** util::SettingsValue value",
      "created_at": "2019-10-24T18:17:16Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721347",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338721347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338722077",
      "pull_request_review_id": 306757104,
      "id": 338722077,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMjA3Nw==",
      "diff_hunk": "@@ -890,25 +773,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;\n         {\n             LOCK(cs_args);\n-            emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n+            std::vector<util::SettingsValue>* includes = util::FindKey(m_settings.command_line_options, \"includeconf\");",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 428,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe it could be **const** std::vector<util::SettingsValue>* **const** includes. Neither value (vector) nor pointer is ever changed (right?).",
      "created_at": "2019-10-24T18:18:54Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722077",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338722077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 776,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338722814",
      "pull_request_review_id": 306757104,
      "id": 338722814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMjgxNA==",
      "diff_hunk": "@@ -890,25 +773,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;\n         {\n             LOCK(cs_args);\n-            emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n+            std::vector<util::SettingsValue>* includes = util::FindKey(m_settings.command_line_options, \"includeconf\");\n+            emptyIncludeConf = !(includes && util::SettingsSpan(*includes).last_negated());\n         }\n         if (emptyIncludeConf) {\n             std::string chain_id = GetChainName();\n-            std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n-            {\n-                // We haven't set m_network yet (that happens in SelectParams()), so manually check\n-                // for network.includeconf args.\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-                includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n-            }\n+            std::vector<std::string> includeconf;\n \n-            // Remove -includeconf from configuration, so we can warn about recursion\n-            // later\n-            {\n+            auto add_includes = [&](const std::string& network, size_t skip = 0) {\n+                size_t num_values = 0;\n                 LOCK(cs_args);\n-                m_config_args.erase(\"-includeconf\");\n-                m_config_args.erase(std::string(\"-\") + chain_id + \".includeconf\");\n-            }\n+                if (auto* section = util::FindKey(m_settings.ro_config, network)) {\n+                    if (auto* values = util::FindKey(*section, \"includeconf\")) {\n+                        for (size_t i = std::max(skip, util::SettingsSpan(*values).negated()); i < values->size(); ++i) {\n+                            includeconf.push_back((*values)[i].get_str());\n+                        }\n+                        num_values = values->size();\n+                    }\n+                }\n+                return num_values;\n+            };\n+\n+            // We haven't set m_network yet (that happens in SelectParams()), so manually check\n+            // for network.includeconf args.\n+            size_t chain_includes = add_includes(chain_id);\n+            size_t default_includes = add_includes(\"\");",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 465,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could be default-constucted instread of copy-constructed std::string: `add_includes({})`;\r\n\r\nAlso, both `size_t`'s could be `const`.",
      "created_at": "2019-10-24T18:20:25Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722814",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338722814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 800,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338723391",
      "pull_request_review_id": 306757104,
      "id": 338723391,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODcyMzM5MQ==",
      "diff_hunk": "@@ -924,15 +813,14 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             }\n \n             // Warn about recursive -includeconf\n-            includeconf = GetArgs(\"-includeconf\");\n+            includeconf.clear();\n+            add_includes(chain_id, /* skip= */ chain_includes);\n+            add_includes(\"\", /* skip= */ default_includes);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 476,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`\"\"` -> `{}`  too ?",
      "created_at": "2019-10-24T18:21:40Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338723391",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338723391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 818,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758317",
      "pull_request_review_id": 306819975,
      "id": 338758317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODMxNw==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338710128,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338710128\r\n\r\n> Since SettingsSpan copy constructor is `noexcept`, this could be too.\r\n> Though if it would change any time in the future, using `noexcept()` _operator_ could make it conditionally `noexcept`, by checking if copy constructor is actually `noexcept` (if author cares):\r\n> \r\n> ```\r\n> explicit Source(SettingsSpan span) noexcept(noexcept(SettingsSpan{span}) : span(span) {}\r\n> ```\r\n\r\nHmm, I'm not an expert on noexcept, and I have no problem adding it on functions that obviously will not throw, or adding it in places where it can really improve performance. But it seems dangerous and not useful to add it whereever it can be added just because some code doesn't currently happen to throw right now. `noexcept` is not like `const` where you get a nice compile time error when a function that shouldn't throw does. It's a fatal runtime error, so there are safety considerations with using it, and to me the best approach would seem to be not applying it unless it's very obviously correct or unless there's a specific optimization desired.",
      "created_at": "2019-10-24T19:44:42Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758361",
      "pull_request_review_id": 306819975,
      "id": 338758361,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODM2MQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {",
      "path": "src/util/settings.cpp",
      "position": 44,
      "original_position": 40,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338716389,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338716389\r\n\r\n> I believe `\"\"` are rather overused on codebases. This invokes `std::string`'s copy constructor taking `const char*` that will try to `strlen()`, etc. Creating default-constructed `std::string{}`/ `std::string()`/`{} (in right context)` would feel more \"pedantically correct\" :) .\r\n\r\nWill keep because constructing strings from \"\" is ubiquitious in our codebase, not where I would look to improve performance, and I'd prefer it to be clear this is a string lookup.",
      "created_at": "2019-10-24T19:44:49Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758431",
      "pull_request_review_id": 306819975,
      "id": 338758431,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODQzMQ==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and\n+        // settings in the config file, unless the negated command line value is\n+        // followed by non-negated value, in which case config file settings\n+        // will be brought back from the dead (but earlier command line settings\n+        // will still be discarded).\n+        const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        // Add new settings to the result if isn't already complete, or if the\n+        // values are zombies.\n+        if (!result_complete || add_zombie_config_values) {\n+            for (const auto& value : source.span) {\n+                if (value.isArray()) {\n+                    result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                } else {\n+                    result.push_back(value);\n+                }\n+            }\n+        }\n+\n+        // If a setting was negated, or if a setting was forced, set\n+        // result_complete to true to ignore any later lower priority settings.\n+        result_complete |= source.span.negated() > 0 || source.forced;\n+\n+        // Update the negated and empty state used for the zombie values check.\n+        prev_negated_empty |= source.span.last_negated() && result.empty();\n+    });\n+    return result;\n+}\n+\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name)\n+{\n+    bool has_ignored = true;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // If top-level config value is unset, or any other value is set,\n+        // then no top-level setting is being ignored.\n+        has_ignored &= source.config_file_top_level ? !source.span.empty() : source.span.empty();\n+    });\n+    return has_ignored;\n+}\n+\n+SettingsSpan::SettingsSpan(const std::vector<SettingsValue>& vec) noexcept : SettingsSpan(vec.data(), vec.size()) {}\n+const SettingsValue* SettingsSpan::begin() const { return data + negated(); }\n+const SettingsValue* SettingsSpan::end() const { return data + size; }\n+bool SettingsSpan::empty() const { return size == 0 || last_negated(); }\n+bool SettingsSpan::last_negated() const { return size > 0 && data[size - 1].isFalse(); }\n+size_t SettingsSpan::negated() const",
      "path": "src/util/settings.cpp",
      "position": 161,
      "original_position": 153,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338712255,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338712255\r\n\r\n> This function has some rather unusual looping, so if you care about prioritizing usage of standard algorithms, it could be implemented in something like this:\r\n> \r\n> ```\r\n>         const std::reverse_iterator<const SettingsValue*> rbegin(end());\r\n>         const std::reverse_iterator<const SettingsValue*> rend(begin());\r\n>         const auto it = std::find_if(rbegin, rend, [](const SettingsValue &i) { return i.isFalse(); });\r\n>         return static_cast<size_t>(std::distance(it, rend));\r\n> ```\r\n\r\nI like standard algorithms, but wouldn't prioritize using them unless they made code simpler, and I don't think they help in that respect here.",
      "created_at": "2019-10-24T19:44:58Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758431",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758487",
      "pull_request_review_id": 306819975,
      "id": 338758487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODQ4Nw==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    explicit SettingsSpan() = default;\n+    explicit SettingsSpan(const SettingsValue& value) noexcept : SettingsSpan(&value, 1) {}\n+    explicit SettingsSpan(const SettingsValue* data, size_t size) noexcept : data(data), size(size) {}\n+    explicit SettingsSpan(const std::vector<SettingsValue>& vec) noexcept;",
      "path": "src/util/settings.h",
      "position": 66,
      "original_position": 61,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338713562,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338713562\r\n\r\n> Now there are some redundant `explicit`'s. There's no need to mark `SettingsSpan() = default;` or more-than-one-argument-taking `SettingsSpan(const SettingsValue* data, size_t size)` as `explicit`. It's only for the cases when constructor can initialize with _single_ argument.\r\n\r\nI think this isn't strictly true. Explicit keyword also affects whether you can implicitly use a constructor from a return statement, I believe. But actually the reason for adding explicit here is just aesthetics (I like the constructors to line up, and `explicit` as a signpost for \"there be constructors here\").",
      "created_at": "2019-10-24T19:45:05Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758585",
      "pull_request_review_id": 306819975,
      "id": 338758585,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODU4NQ==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            error = strprintf(\"Invalid parameter -%s\", key.c_str());\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;\n+    if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n+        for (const auto& include : util::SettingsSpan(*includes)) {\n+            error += \"-includeconf cannot be used from commandline; -includeconf=\" + include.get_str() + \"\\n\";",
      "path": "src/util/system.cpp",
      "position": 274,
      "original_position": 272,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338719480,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338719480\r\n\r\n> `\"\\n\"` -> `'\\n'`, no need for const char* / std::string for single character.\r\n\r\nThis is moved code, so I would prefer to not change it and create a spurious difference.",
      "created_at": "2019-10-24T19:45:17Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 351,
      "original_line": 351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758680",
      "pull_request_review_id": 306819975,
      "id": 338758680,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODY4MA==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            error = strprintf(\"Invalid parameter -%s\", key.c_str());\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;\n+    if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n+        for (const auto& include : util::SettingsSpan(*includes)) {\n+            error += \"-includeconf cannot be used from commandline; -includeconf=\" + include.get_str() + \"\\n\";\n+            success = false;\n         }\n     }\n-    return true;\n+    return success;\n }\n \n unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n {\n-    assert(key[0] == '-');\n-\n-    size_t option_index = key.find('.');\n-    if (option_index == std::string::npos) {\n-        option_index = 1;\n-    } else {\n-        ++option_index;\n-    }\n-    if (key.substr(option_index, 2) == \"no\") {\n-        option_index += 2;\n-    }\n-\n-    const std::string base_arg_name = '-' + key.substr(option_index);\n-\n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n-        const auto search = arg_map.second.find(base_arg_name);\n+        const auto search = arg_map.second.find(\"-\" + key);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338720155,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720155\r\n\r\n> `\"-\"` -> `'-'`\r\n\r\nChanged",
      "created_at": "2019-10-24T19:45:32Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758815",
      "pull_request_review_id": 306819975,
      "id": 338758815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODgxNQ==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": 317,
      "original_position": 315,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338720515,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720515\r\n\r\n> const bool?\r\n\r\nChanged",
      "created_at": "2019-10-24T19:45:51Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 373,
      "original_line": 373,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758892",
      "pull_request_review_id": 306819975,
      "id": 338758892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODg5Mg==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 361,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338721033,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721033\r\n\r\n> **const** util::SettingsValue value\r\n\r\nChanged",
      "created_at": "2019-10-24T19:46:03Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758971",
      "pull_request_review_id": 306819975,
      "id": 338758971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1ODk3MQ==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 371,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338721156,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721156\r\n\r\n> **const** util::SettingsValue value\r\n\r\nChanged",
      "created_at": "2019-10-24T19:46:18Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338758971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759038",
      "pull_request_review_id": 306819975,
      "id": 338759038,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1OTAzOA==",
      "diff_hunk": "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    if (IsArgNegated(strArg)) return false;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return InterpretBool(found_res.second);\n-    return fDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 381,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338721347,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721347\r\n\r\n> **const** util::SettingsValue value\r\n\r\nChanged",
      "created_at": "2019-10-24T19:46:26Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759086",
      "pull_request_review_id": 306819975,
      "id": 338759086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1OTA4Ng==",
      "diff_hunk": "@@ -890,25 +773,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;\n         {\n             LOCK(cs_args);\n-            emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n+            std::vector<util::SettingsValue>* includes = util::FindKey(m_settings.command_line_options, \"includeconf\");",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 428,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338722077,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722077\r\n\r\n> I believe it could be **const** std::vectorutil::SettingsValue* **const** includes. Neither value (vector) nor pointer is ever changed (right?).\r\n\r\nChanged",
      "created_at": "2019-10-24T19:46:33Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 776,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759149",
      "pull_request_review_id": 306819975,
      "id": 338759149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1OTE0OQ==",
      "diff_hunk": "@@ -890,25 +773,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;\n         {\n             LOCK(cs_args);\n-            emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n+            std::vector<util::SettingsValue>* includes = util::FindKey(m_settings.command_line_options, \"includeconf\");\n+            emptyIncludeConf = !(includes && util::SettingsSpan(*includes).last_negated());\n         }\n         if (emptyIncludeConf) {\n             std::string chain_id = GetChainName();\n-            std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n-            {\n-                // We haven't set m_network yet (that happens in SelectParams()), so manually check\n-                // for network.includeconf args.\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-                includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n-            }\n+            std::vector<std::string> includeconf;\n \n-            // Remove -includeconf from configuration, so we can warn about recursion\n-            // later\n-            {\n+            auto add_includes = [&](const std::string& network, size_t skip = 0) {\n+                size_t num_values = 0;\n                 LOCK(cs_args);\n-                m_config_args.erase(\"-includeconf\");\n-                m_config_args.erase(std::string(\"-\") + chain_id + \".includeconf\");\n-            }\n+                if (auto* section = util::FindKey(m_settings.ro_config, network)) {\n+                    if (auto* values = util::FindKey(*section, \"includeconf\")) {\n+                        for (size_t i = std::max(skip, util::SettingsSpan(*values).negated()); i < values->size(); ++i) {\n+                            includeconf.push_back((*values)[i].get_str());\n+                        }\n+                        num_values = values->size();\n+                    }\n+                }\n+                return num_values;\n+            };\n+\n+            // We haven't set m_network yet (that happens in SelectParams()), so manually check\n+            // for network.includeconf args.\n+            size_t chain_includes = add_includes(chain_id);\n+            size_t default_includes = add_includes(\"\");",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 465,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338722814,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722814\r\n\r\n> could be default-constucted instread of copy-constructed std::string: `add_includes({})`;\r\n> \r\n> Also, both `size_t`'s could be `const`.\r\n\r\nChanged",
      "created_at": "2019-10-24T19:46:42Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 800,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759219",
      "pull_request_review_id": 306819975,
      "id": 338759219,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODc1OTIxOQ==",
      "diff_hunk": "@@ -924,15 +813,14 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             }\n \n             // Warn about recursive -includeconf\n-            includeconf = GetArgs(\"-includeconf\");\n+            includeconf.clear();\n+            add_includes(chain_id, /* skip= */ chain_includes);\n+            add_includes(\"\", /* skip= */ default_includes);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 476,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338723391,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338723391\r\n\r\n> `\"\"` -> `{}` too ?\r\n\r\nChanged",
      "created_at": "2019-10-24T19:46:51Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338759219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 818,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338986570",
      "pull_request_review_id": 307115268,
      "id": 338986570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODk4NjU3MA==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {",
      "path": "src/util/settings.cpp",
      "position": 44,
      "original_position": 40,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338716389,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, I'm used to QString too much. std::string optimizes well (\"\" same as {}), it's QString where it does add cost (extra function call). Sorry for bothering.",
      "created_at": "2019-10-25T10:26:14Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338986570",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338986570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338987908",
      "pull_request_review_id": 307117090,
      "id": 338987908,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODk4NzkwOA==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and\n+        // settings in the config file, unless the negated command line value is\n+        // followed by non-negated value, in which case config file settings\n+        // will be brought back from the dead (but earlier command line settings\n+        // will still be discarded).\n+        const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        // Add new settings to the result if isn't already complete, or if the\n+        // values are zombies.\n+        if (!result_complete || add_zombie_config_values) {\n+            for (const auto& value : source.span) {\n+                if (value.isArray()) {\n+                    result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                } else {\n+                    result.push_back(value);\n+                }\n+            }\n+        }\n+\n+        // If a setting was negated, or if a setting was forced, set\n+        // result_complete to true to ignore any later lower priority settings.\n+        result_complete |= source.span.negated() > 0 || source.forced;\n+\n+        // Update the negated and empty state used for the zombie values check.\n+        prev_negated_empty |= source.span.last_negated() && result.empty();\n+    });\n+    return result;\n+}\n+\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name)\n+{\n+    bool has_ignored = true;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // If top-level config value is unset, or any other value is set,\n+        // then no top-level setting is being ignored.\n+        has_ignored &= source.config_file_top_level ? !source.span.empty() : source.span.empty();\n+    });\n+    return has_ignored;\n+}\n+\n+SettingsSpan::SettingsSpan(const std::vector<SettingsValue>& vec) noexcept : SettingsSpan(vec.data(), vec.size()) {}\n+const SettingsValue* SettingsSpan::begin() const { return data + negated(); }\n+const SettingsValue* SettingsSpan::end() const { return data + size; }\n+bool SettingsSpan::empty() const { return size == 0 || last_negated(); }\n+bool SettingsSpan::last_negated() const { return size > 0 && data[size - 1].isFalse(); }\n+size_t SettingsSpan::negated() const",
      "path": "src/util/settings.cpp",
      "position": 161,
      "original_position": 153,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338712255,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`std::count_if` would be simplest, but not sure if semantics will be the same, i.e. will there acutally be N sequental `.isFalse()`'es.",
      "created_at": "2019-10-25T10:30:11Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338987908",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338987908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339052737",
      "pull_request_review_id": 307204101,
      "id": 339052737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTA1MjczNw==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and\n+        // settings in the config file, unless the negated command line value is\n+        // followed by non-negated value, in which case config file settings\n+        // will be brought back from the dead (but earlier command line settings\n+        // will still be discarded).\n+        const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        // Add new settings to the result if isn't already complete, or if the\n+        // values are zombies.\n+        if (!result_complete || add_zombie_config_values) {\n+            for (const auto& value : source.span) {\n+                if (value.isArray()) {\n+                    result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                } else {\n+                    result.push_back(value);\n+                }\n+            }\n+        }\n+\n+        // If a setting was negated, or if a setting was forced, set\n+        // result_complete to true to ignore any later lower priority settings.\n+        result_complete |= source.span.negated() > 0 || source.forced;\n+\n+        // Update the negated and empty state used for the zombie values check.\n+        prev_negated_empty |= source.span.last_negated() && result.empty();\n+    });\n+    return result;\n+}\n+\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name)\n+{\n+    bool has_ignored = true;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // If top-level config value is unset, or any other value is set,\n+        // then no top-level setting is being ignored.\n+        has_ignored &= source.config_file_top_level ? !source.span.empty() : source.span.empty();\n+    });\n+    return has_ignored;\n+}\n+\n+SettingsSpan::SettingsSpan(const std::vector<SettingsValue>& vec) noexcept : SettingsSpan(vec.data(), vec.size()) {}\n+const SettingsValue* SettingsSpan::begin() const { return data + negated(); }\n+const SettingsValue* SettingsSpan::end() const { return data + size; }\n+bool SettingsSpan::empty() const { return size == 0 || last_negated(); }\n+bool SettingsSpan::last_negated() const { return size > 0 && data[size - 1].isFalse(); }\n+size_t SettingsSpan::negated() const",
      "path": "src/util/settings.cpp",
      "position": 161,
      "original_position": 153,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "in_reply_to_id": 338712255,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338987908\r\n\r\n> `std::count_if` would be simplest, but not sure if semantics will be the same, i.e. will there acutally be N sequental `.isFalse()`'es.\r\n\r\n`std::count_if` would not be right here, but your initial `std::distance suggestion` would work. The behavior of negation is a little subtle, which I why I thought the code would be easier to understand as a 2 line for-loop, instead of something that might send someone looking up corner cases in std algorithm man pages.\r\n\r\n`span.negated()` is mostly just called as a boolean check to see if were are any negated values in the span and return as quickly as possible. It returns a `size_t` instead of a `bool` because in some cases, the number of negated values is important. A `false` bool value is negated but also negates (skips, clears) any values that came before it, so they won't be included in span iteration, or returned by `GetArgs` or `GetSettingsList`.",
      "created_at": "2019-10-25T13:29:50Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339052737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339052737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339113266",
      "pull_request_review_id": 307285990,
      "id": 339113266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTExMzI2Ng==",
      "diff_hunk": "@@ -63,6 +63,7 @@\n #endif\n \n #include <thread>\n+#include <univalue.h>",
      "path": "src/util/system.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this the right place to put this include? Shouldn't it be way more up, together with other bitcoin stuff?",
      "created_at": "2019-10-25T15:31:40Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339113266",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339113266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339117566",
      "pull_request_review_id": 307285990,
      "id": 339117566,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTExNzU2Ng==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            error = strprintf(\"Invalid parameter -%s\", key.c_str());\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;\n+    if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n+        for (const auto& include : util::SettingsSpan(*includes)) {",
      "path": "src/util/system.cpp",
      "position": 273,
      "original_position": 271,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it possible for `if` to be true, but loop be empty, i.e. not to loop not a single time (empty span), so `success = false` would be never executed? Or this would be expected?\r\n\r\nIf it is impossible that `for()` never loops (it always loops at least once), then `bool success` is not needed, `return false` can be returned *after* loop body, and `return true` in the end of the function.",
      "created_at": "2019-10-25T15:41:09Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339117566",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339117566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339121745",
      "pull_request_review_id": 307285990,
      "id": 339121745,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTEyMTc0NQ==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    explicit SettingsSpan() = default;\n+    explicit SettingsSpan(const SettingsValue& value) noexcept : SettingsSpan(&value, 1) {}\n+    explicit SettingsSpan(const SettingsValue* data, size_t size) noexcept : data(data), size(size) {}\n+    explicit SettingsSpan(const std::vector<SettingsValue>& vec) noexcept;\n+    const SettingsValue* begin() const; //<! Pointer to first non-negated value.",
      "path": "src/util/settings.h",
      "position": 67,
      "original_position": 62,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I understand `begin()`, `end()` and `empty` (for std::empty in the future) being lowercase, but shouldn't it be `LastNegated()` and `Negated()` as Bitcoin's PascalCase style requires?",
      "created_at": "2019-10-25T15:50:44Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339121745",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339121745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339132071",
      "pull_request_review_id": 307310768,
      "id": 339132071,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTEzMjA3MQ==",
      "diff_hunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    explicit SettingsSpan() = default;\n+    explicit SettingsSpan(const SettingsValue& value) noexcept : SettingsSpan(&value, 1) {}\n+    explicit SettingsSpan(const SettingsValue* data, size_t size) noexcept : data(data), size(size) {}\n+    explicit SettingsSpan(const std::vector<SettingsValue>& vec) noexcept;\n+    const SettingsValue* begin() const; //<! Pointer to first non-negated value.",
      "path": "src/util/settings.h",
      "position": 67,
      "original_position": 62,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339121745,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339121745\r\n\r\n> I understand `begin()`, `end()` and `empty` (for std::empty in the future) being lowercase, but shouldn't it be `LastNegated()` and `Negated()` as Bitcoin's PascalCase style requires?\r\n\r\n\"Requires\" is strong. There's a decent amount of [variation](https://gist.github.com/ryanofsky/8718089b2927912f77db0d7cb1728350) here, and I prefer just being consistent inside a targeted and narrowly used helper class.",
      "created_at": "2019-10-25T16:15:16Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339132071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339132071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339133896",
      "pull_request_review_id": 307310768,
      "id": 339133896,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTEzMzg5Ng==",
      "diff_hunk": "@@ -63,6 +63,7 @@\n #endif\n \n #include <thread>\n+#include <univalue.h>",
      "path": "src/util/system.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339113266,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339113266\r\n\r\n> Is this the right place to put this include? Shouldn't it be way more up, together with other bitcoin stuff?\r\n\r\nI don't think there is a strict convention, but often I see and write lists of internal includes followed by lists of external includes. Univalue is technically an external include and a library that can be installed separately.",
      "created_at": "2019-10-25T16:20:06Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339133896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339133896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339134008",
      "pull_request_review_id": 307310768,
      "id": 339134008,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTEzNDAwOA==",
      "diff_hunk": "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            error = strprintf(\"Invalid parameter -%s\", key.c_str());\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;\n+    if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n+        for (const auto& include : util::SettingsSpan(*includes)) {",
      "path": "src/util/system.cpp",
      "position": 273,
      "original_position": 271,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339117566,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339117566\r\n\r\n> Is it possible for `if` to be true, but loop be empty, i.e. not to loop not a single time (empty span), so `success = false` would be never executed? Or this would be expected?\r\n> \r\n> If it is impossible that `for()` never loops (it always loops at least once), then `bool success` is not needed, `return false` can be returned _after_ loop body, and `return true` in the end of the function.\r\n\r\nNot impossible, and the assumption won't be true if -noincludeconf is used. Even if it were true, the suggestion seems like a more fragile way to write the code, and I'm not sure what the perceived benefit would be. I would definitely look askance at code that was returning failure potentially without setting the error string.",
      "created_at": "2019-10-25T16:20:21Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339134008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339134008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339148976",
      "pull_request_review_id": 307333248,
      "id": 339148976,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTE0ODk3Ng==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a reason this needs to be a lambda? It's not capturing any surrounding variables. Would it be clearer to just define this as a regular function above?",
      "created_at": "2019-10-25T17:00:01Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339148976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339148976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339159002",
      "pull_request_review_id": 307333248,
      "id": 339159002,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTE1OTAwMg==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{",
      "path": "src/test/settings_tests.cpp",
      "position": 65,
      "original_position": 62,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: a comment here would be useful:\r\n\r\n```\r\n// command_line_options do not have sections. Only iterate over SET and NEGATE\r\n```",
      "created_at": "2019-10-25T17:25:32Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339159002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339159874",
      "pull_request_review_id": 307333248,
      "id": 339159874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTE1OTg3NA==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    const std::string& network = CBaseChainParams::MAIN;\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n+                          bool ignore_default_section_config) {\n+        std::string desc;\n+        int value_suffix = 0;\n+        util::Settings settings;\n+\n+        const std::string& name = ignore_default_section_config ? \"wallet\" : \"server\";\n+        auto push_values = [&](Action action, const char* value_prefix, const std::string& name_prefix,\n+                               std::vector<util::SettingsValue>& dest) {\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n+                }\n+            } else if (action == NEGATE || action == SECTION_NEGATE) {\n+                dest.push_back(false);\n+                desc += \" \" + name_prefix + \"no\" + name;\n+            }\n+        };\n+\n+        if (force_set) {\n+            settings.forced_settings[name] = \"forced\";\n+            desc += \" \" + name + \"=forced\";\n+        }\n+        for (Action arg_action : arg_actions) {\n+            push_values(arg_action, \"a\", \"-\", settings.command_line_options[name]);\n+        }\n+        for (Action conf_action : conf_actions) {\n+            bool use_section = conf_action == SECTION_SET || conf_action == SECTION_NEGATE;\n+            push_values(conf_action, \"c\", use_section ? network + \".\" : \"\",\n+                settings.ro_config[use_section ? network : \"\"][name]);\n+        }\n+\n+        desc += \" || \";\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* skip_nonpersistent= */ false).write();",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`skip_nonpersistent` inline comment is wrong. That positional argument is `get_chain_name`.",
      "created_at": "2019-10-25T17:27:39Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339159874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339161570",
      "pull_request_review_id": 307333248,
      "id": 339161570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTE2MTU3MA==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    const std::string& network = CBaseChainParams::MAIN;\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n+                          bool ignore_default_section_config) {\n+        std::string desc;\n+        int value_suffix = 0;\n+        util::Settings settings;\n+\n+        const std::string& name = ignore_default_section_config ? \"wallet\" : \"server\";\n+        auto push_values = [&](Action action, const char* value_prefix, const std::string& name_prefix,\n+                               std::vector<util::SettingsValue>& dest) {\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n+                }\n+            } else if (action == NEGATE || action == SECTION_NEGATE) {\n+                dest.push_back(false);\n+                desc += \" \" + name_prefix + \"no\" + name;\n+            }\n+        };\n+\n+        if (force_set) {\n+            settings.forced_settings[name] = \"forced\";\n+            desc += \" \" + name + \"=forced\";\n+        }\n+        for (Action arg_action : arg_actions) {\n+            push_values(arg_action, \"a\", \"-\", settings.command_line_options[name]);\n+        }\n+        for (Action conf_action : conf_actions) {\n+            bool use_section = conf_action == SECTION_SET || conf_action == SECTION_NEGATE;\n+            push_values(conf_action, \"c\", use_section ? network + \".\" : \"\",\n+                settings.ro_config[use_section ? network : \"\"][name]);\n+        }\n+\n+        desc += \" || \";\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* skip_nonpersistent= */ false).write();\n+        desc += \" |\";\n+        for (const auto& s : GetSettingsList(settings, network, name, ignore_default_section_config)) {\n+            desc += \" \";\n+            desc += s.write();\n+        }\n+        if (HasIgnoredDefaultSectionConfigValue(settings, network, name)) desc += \" | ignored\";",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 129,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I'd prefer all delimiters to be printed for each test case, so there's a constant number of columns.",
      "created_at": "2019-10-25T17:31:50Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339161570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339161570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339162180",
      "pull_request_review_id": 307333248,
      "id": 339162180,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTE2MjE4MA==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    const std::string& network = CBaseChainParams::MAIN;\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n+                          bool ignore_default_section_config) {\n+        std::string desc;\n+        int value_suffix = 0;\n+        util::Settings settings;\n+\n+        const std::string& name = ignore_default_section_config ? \"wallet\" : \"server\";\n+        auto push_values = [&](Action action, const char* value_prefix, const std::string& name_prefix,\n+                               std::vector<util::SettingsValue>& dest) {\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n+                }\n+            } else if (action == NEGATE || action == SECTION_NEGATE) {\n+                dest.push_back(false);\n+                desc += \" \" + name_prefix + \"no\" + name;\n+            }\n+        };\n+\n+        if (force_set) {\n+            settings.forced_settings[name] = \"forced\";\n+            desc += \" \" + name + \"=forced\";\n+        }\n+        for (Action arg_action : arg_actions) {\n+            push_values(arg_action, \"a\", \"-\", settings.command_line_options[name]);\n+        }\n+        for (Action conf_action : conf_actions) {\n+            bool use_section = conf_action == SECTION_SET || conf_action == SECTION_NEGATE;\n+            push_values(conf_action, \"c\", use_section ? network + \".\" : \"\",\n+                settings.ro_config[use_section ? network : \"\"][name]);\n+        }\n+\n+        desc += \" || \";\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* skip_nonpersistent= */ false).write();\n+        desc += \" |\";\n+        for (const auto& s : GetSettingsList(settings, network, name, ignore_default_section_config)) {\n+            desc += \" \";\n+            desc += s.write();\n+        }\n+        if (HasIgnoredDefaultSectionConfigValue(settings, network, name)) desc += \" | ignored\";\n+        desc += \"\\n\";\n+\n+        out_sha.Write((const unsigned char*)desc.data(), desc.size());\n+        if (out_file) {\n+            BOOST_REQUIRE(fwrite(desc.data(), 1, desc.size(), out_file) == desc.size());\n+        }\n+    });\n+\n+    if (out_file) {\n+        if (fclose(out_file)) throw std::system_error(errno, std::generic_category(), \"fclose failed\");\n+        out_file = nullptr;\n+    }\n+\n+    unsigned char out_sha_bytes[CSHA256::OUTPUT_SIZE];\n+    out_sha.Finalize(out_sha_bytes);\n+    std::string out_sha_hex = HexStr(std::begin(out_sha_bytes), std::end(out_sha_bytes));\n+\n+    // If check below fails, should manually dump the results with:\n+    //\n+    //   SETTINGS_MERGE_TEST_OUT=results.txt ./test_bitcoin --run_test=settings_tests/Merge\n+    //\n+    // And verify diff against previous results to make sure the changes are expected.\n+    //\n+    // Results file is formatted like:\n+    //\n+    //   <input> || <output>",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could you add more details here, like you have in the utils_tests.cpp:\r\n\r\n```\r\n    //   <input> || GetSetting() | GetSettingsList() | HasIgnoredDefaultSectionConfigValue()\r\n```",
      "created_at": "2019-10-25T17:33:17Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339162180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339162180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339186323",
      "pull_request_review_id": 307333248,
      "id": 339186323,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTE4NjMyMw==",
      "diff_hunk": "@@ -156,19 +157,58 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n \n struct TestArgsManager : public ArgsManager\n {\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+\n     TestArgsManager() { m_network_only_args.clear(); }\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n+    bool ParseParameters(int argc, const char* const argv[], std::string& error) {",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These functions (`TestArgsManager::ParseParameters()`, `TestArgsManager::ReadConfigString()` and `TestArgsManager::UpdateSettings()`) are pretty confusing. `TestArgsManager` is essentially storing its own view of the settings, and the tests are testing that view, rather than what `ArgsManager` itself is storing. `UpdateSettings()` is even weirder - it's reaching into `ArgsManager.m_settings` and changing settings.\r\n\r\nI think it's ok to leave these in for now and fix up the tests in a future PR (which I'd be happy to review), but could you add some comments explaining what's going on here?",
      "created_at": "2019-10-25T18:34:29Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339186323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339186323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339218345",
      "pull_request_review_id": 307333248,
      "id": 339218345,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTIxODM0NQ==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "path": "src/util/settings.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335797249,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is really useful, and could IMO be included as a comment to document what interface is needed if we did want to substitute another SettingsValue class.",
      "created_at": "2019-10-25T20:04:23Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339218345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339218345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339256664",
      "pull_request_review_id": 307475245,
      "id": 339256664,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI1NjY2NA==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "e18bf8dd30259f5c5ca63fdacadebd8b28acb2cc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It wasn't immediately obvious to me why `fn()` was being called on `span` even if hasn't been set. Moving this line into the if block causes the tests to fail. Can you add a comment to explain why you're calling this even if no settings were found in the top_level of the config file?",
      "created_at": "2019-10-25T22:13:43Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339256664",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339256664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296894",
      "pull_request_review_id": 307522659,
      "id": 339296894,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI5Njg5NA==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339148976,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339148976\r\n\r\n> Is there a reason this needs to be a lambda? It's not capturing any surrounding variables. Would it be clearer to just define this as a regular function above?\r\n\r\nGood catch. Made it a reusable function now",
      "created_at": "2019-10-26T11:39:50Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296901",
      "pull_request_review_id": 307522659,
      "id": 339296901,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI5NjkwMQ==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{",
      "path": "src/test/settings_tests.cpp",
      "position": 65,
      "original_position": 62,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339159002,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159002\r\n\r\n> nit: a comment here would be useful:\r\n> \r\n> ```\r\n> // command_line_options do not have sections. Only iterate over SET and NEGATE\r\n> ```\r\n\r\nAdded comment",
      "created_at": "2019-10-26T11:40:00Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296906",
      "pull_request_review_id": 307522659,
      "id": 339296906,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI5NjkwNg==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    const std::string& network = CBaseChainParams::MAIN;\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n+                          bool ignore_default_section_config) {\n+        std::string desc;\n+        int value_suffix = 0;\n+        util::Settings settings;\n+\n+        const std::string& name = ignore_default_section_config ? \"wallet\" : \"server\";\n+        auto push_values = [&](Action action, const char* value_prefix, const std::string& name_prefix,\n+                               std::vector<util::SettingsValue>& dest) {\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n+                }\n+            } else if (action == NEGATE || action == SECTION_NEGATE) {\n+                dest.push_back(false);\n+                desc += \" \" + name_prefix + \"no\" + name;\n+            }\n+        };\n+\n+        if (force_set) {\n+            settings.forced_settings[name] = \"forced\";\n+            desc += \" \" + name + \"=forced\";\n+        }\n+        for (Action arg_action : arg_actions) {\n+            push_values(arg_action, \"a\", \"-\", settings.command_line_options[name]);\n+        }\n+        for (Action conf_action : conf_actions) {\n+            bool use_section = conf_action == SECTION_SET || conf_action == SECTION_NEGATE;\n+            push_values(conf_action, \"c\", use_section ? network + \".\" : \"\",\n+                settings.ro_config[use_section ? network : \"\"][name]);\n+        }\n+\n+        desc += \" || \";\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* skip_nonpersistent= */ false).write();",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339159874,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159874\r\n\r\n> `skip_nonpersistent` inline comment is wrong. That positional argument is `get_chain_name`.\r\n\r\nGood catch. This came from messing up a rebase of another PR",
      "created_at": "2019-10-26T11:40:10Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296909",
      "pull_request_review_id": 307522659,
      "id": 339296909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI5NjkwOQ==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    const std::string& network = CBaseChainParams::MAIN;\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n+                          bool ignore_default_section_config) {\n+        std::string desc;\n+        int value_suffix = 0;\n+        util::Settings settings;\n+\n+        const std::string& name = ignore_default_section_config ? \"wallet\" : \"server\";\n+        auto push_values = [&](Action action, const char* value_prefix, const std::string& name_prefix,\n+                               std::vector<util::SettingsValue>& dest) {\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n+                }\n+            } else if (action == NEGATE || action == SECTION_NEGATE) {\n+                dest.push_back(false);\n+                desc += \" \" + name_prefix + \"no\" + name;\n+            }\n+        };\n+\n+        if (force_set) {\n+            settings.forced_settings[name] = \"forced\";\n+            desc += \" \" + name + \"=forced\";\n+        }\n+        for (Action arg_action : arg_actions) {\n+            push_values(arg_action, \"a\", \"-\", settings.command_line_options[name]);\n+        }\n+        for (Action conf_action : conf_actions) {\n+            bool use_section = conf_action == SECTION_SET || conf_action == SECTION_NEGATE;\n+            push_values(conf_action, \"c\", use_section ? network + \".\" : \"\",\n+                settings.ro_config[use_section ? network : \"\"][name]);\n+        }\n+\n+        desc += \" || \";\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* skip_nonpersistent= */ false).write();\n+        desc += \" |\";\n+        for (const auto& s : GetSettingsList(settings, network, name, ignore_default_section_config)) {\n+            desc += \" \";\n+            desc += s.write();\n+        }\n+        if (HasIgnoredDefaultSectionConfigValue(settings, network, name)) desc += \" | ignored\";",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 129,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339161570,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339161570\r\n\r\n> nit: I'd prefer all delimiters to be printed for each test case, so there's a constant number of columns.\r\n\r\nAdded separator unconditionally now",
      "created_at": "2019-10-26T11:40:18Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296913",
      "pull_request_review_id": 307522659,
      "id": 339296913,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI5NjkxMw==",
      "diff_hunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\n+        for (const auto& item : GetSettingsList(s, \"section\", \"name\", false)) {\n+            list_value.push_back(item);\n+        }\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+    };\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    const std::string& network = CBaseChainParams::MAIN;\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n+                          bool ignore_default_section_config) {\n+        std::string desc;\n+        int value_suffix = 0;\n+        util::Settings settings;\n+\n+        const std::string& name = ignore_default_section_config ? \"wallet\" : \"server\";\n+        auto push_values = [&](Action action, const char* value_prefix, const std::string& name_prefix,\n+                               std::vector<util::SettingsValue>& dest) {\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n+                }\n+            } else if (action == NEGATE || action == SECTION_NEGATE) {\n+                dest.push_back(false);\n+                desc += \" \" + name_prefix + \"no\" + name;\n+            }\n+        };\n+\n+        if (force_set) {\n+            settings.forced_settings[name] = \"forced\";\n+            desc += \" \" + name + \"=forced\";\n+        }\n+        for (Action arg_action : arg_actions) {\n+            push_values(arg_action, \"a\", \"-\", settings.command_line_options[name]);\n+        }\n+        for (Action conf_action : conf_actions) {\n+            bool use_section = conf_action == SECTION_SET || conf_action == SECTION_NEGATE;\n+            push_values(conf_action, \"c\", use_section ? network + \".\" : \"\",\n+                settings.ro_config[use_section ? network : \"\"][name]);\n+        }\n+\n+        desc += \" || \";\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* skip_nonpersistent= */ false).write();\n+        desc += \" |\";\n+        for (const auto& s : GetSettingsList(settings, network, name, ignore_default_section_config)) {\n+            desc += \" \";\n+            desc += s.write();\n+        }\n+        if (HasIgnoredDefaultSectionConfigValue(settings, network, name)) desc += \" | ignored\";\n+        desc += \"\\n\";\n+\n+        out_sha.Write((const unsigned char*)desc.data(), desc.size());\n+        if (out_file) {\n+            BOOST_REQUIRE(fwrite(desc.data(), 1, desc.size(), out_file) == desc.size());\n+        }\n+    });\n+\n+    if (out_file) {\n+        if (fclose(out_file)) throw std::system_error(errno, std::generic_category(), \"fclose failed\");\n+        out_file = nullptr;\n+    }\n+\n+    unsigned char out_sha_bytes[CSHA256::OUTPUT_SIZE];\n+    out_sha.Finalize(out_sha_bytes);\n+    std::string out_sha_hex = HexStr(std::begin(out_sha_bytes), std::end(out_sha_bytes));\n+\n+    // If check below fails, should manually dump the results with:\n+    //\n+    //   SETTINGS_MERGE_TEST_OUT=results.txt ./test_bitcoin --run_test=settings_tests/Merge\n+    //\n+    // And verify diff against previous results to make sure the changes are expected.\n+    //\n+    // Results file is formatted like:\n+    //\n+    //   <input> || <output>",
      "path": "src/test/settings_tests.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339162180,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339162180\r\n\r\n> Could you add more details here, like you have in the utils_tests.cpp:\r\n> \r\n> ```\r\n>     //   <input> || GetSetting() | GetSettingsList() | HasIgnoredDefaultSectionConfigValue()\r\n> ```\r\n\r\nAdded comment",
      "created_at": "2019-10-26T11:40:27Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296916",
      "pull_request_review_id": 307522659,
      "id": 339296916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI5NjkxNg==",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) noexcept { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "e18bf8dd30259f5c5ca63fdacadebd8b28acb2cc",
      "in_reply_to_id": 339256664,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339256664\r\n\r\n> It wasn't immediately obvious to me why `fn()` was being called on `span` even if hasn't been set. Moving this line into the if block causes the tests to fail. Can you add a comment to explain why you're calling this even if no settings were found in the top_level of the config file?\r\n\r\nGot rid of this behavior now. This was an attempt to simplify HasIgnoredDefaultSectionConfigValue() by offloading complexity to MergeSetting(), but it just makes both functions less clear and was a bad idea.",
      "created_at": "2019-10-26T11:40:36Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296920",
      "pull_request_review_id": 307522659,
      "id": 339296920,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTI5NjkyMA==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "path": "src/util/settings.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335797249,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335797249\r\n\r\n> This is really useful, and could IMO be included as a comment to document what interface is needed if we did want to substitute another SettingsValue class.\r\n\r\nGood suggestion to document assumptions about the type. Instead of pasting the whole block of code I just listed the required methods and added a github link, but I can add the example code inline if preferred.",
      "created_at": "2019-10-26T11:40:46Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296920",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339296920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339300024",
      "pull_request_review_id": 307525982,
      "id": 339300024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTMwMDAyNA==",
      "diff_hunk": "@@ -156,19 +157,58 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n \n struct TestArgsManager : public ArgsManager\n {\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+\n     TestArgsManager() { m_network_only_args.clear(); }\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n+    bool ParseParameters(int argc, const char* const argv[], std::string& error) {",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339186323,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339186323\r\n\r\n> These functions (`TestArgsManager::ParseParameters()`, `TestArgsManager::ReadConfigString()` and `TestArgsManager::UpdateSettings()`) are pretty confusing. \r\n\r\nIt was actually easy to update the tests and drop these so I got rid of them in the [pr/mergeset.19](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.19) -> [pr/mergeset.20](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.20) push ([compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.19..pr/mergeset.20))\r\n",
      "created_at": "2019-10-26T13:25:27Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339300024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339300024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339341271",
      "pull_request_review_id": 307571097,
      "id": 339341271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTM0MTI3MQ==",
      "diff_hunk": "@@ -63,6 +63,7 @@\n #endif\n \n #include <thread>\n+#include <univalue.h>",
      "path": "src/util/system.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "fdae2210f458d2c4a74fe0c079501bed39ec6404",
      "in_reply_to_id": 339113266,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  Univalue is technically an external include\r\n\r\nOh, right then.",
      "created_at": "2019-10-27T12:55:19Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339341271",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339341271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339795930",
      "pull_request_review_id": 308153207,
      "id": 339795930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTc5NTkzMA==",
      "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "path": "src/util/settings.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "in_reply_to_id": 335797249,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I just listed the required methods and added a github link, but I can add the example code inline if preferred.\r\n\r\nLooks great to me as it is. Thanks!",
      "created_at": "2019-10-28T21:14:08Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339795930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339795930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341303517",
      "pull_request_review_id": 310098789,
      "id": 341303517,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTMwMzUxNw==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: line is long enough to overflow the github UI",
      "created_at": "2019-10-31T18:32:36Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r341303517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341303517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343793306",
      "pull_request_review_id": 313529917,
      "id": 343793306,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzc5MzMwNg==",
      "diff_hunk": "@@ -408,49 +321,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);",
      "path": "src/util/system.cpp",
      "position": 240,
      "original_position": 238,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: add comment \"transform -foo to foo\" (over-commenting parsing here doesn't seem gross to me)",
      "created_at": "2019-11-07T18:01:28Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343793306",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343793306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 326,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343795528",
      "pull_request_review_id": 313532945,
      "id": 343795528,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzc5NTUyOA==",
      "diff_hunk": "@@ -899,25 +782,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 424,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't comment on the exact line above (L897), but that comment refers to 'override args' and so should be changed in this PR.\r\n\r\nI think the comment and bool name are pretty confusing, and could be made much clearer. Suggestion:\r\n\r\n```\r\n        // `-includeconf` cannot be included in the command line arguments except\r\n        // as `-noincludeconf` (which indicates that no conf file should be used).\r\n        bool use_conf_file{true};\r\n        {\r\n            LOCK(cs_args);\r\n            const std::vector<util::SettingsValue>* const includes = util::FindKey(m_settings.command_line_options, \"includeconf\");\r\n            if (includes) {\r\n                // ParseParameters() fails if a non-negated -includeconf is passed on the command-line\r\n                assert(util::SettingsSpan(*includes).last_negated());\r\n                use_conf_file = false;\r\n            }\r\n        }\r\n        if (use_conf_file) {\r\n```",
      "created_at": "2019-11-07T18:06:45Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343795528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343795528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343805742",
      "pull_request_review_id": 313532945,
      "id": 343805742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzgwNTc0Mg==",
      "diff_hunk": "@@ -899,25 +782,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;\n         {\n             LOCK(cs_args);\n-            emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n+            const std::vector<util::SettingsValue>* const includes = util::FindKey(m_settings.command_line_options, \"includeconf\");\n+            emptyIncludeConf = !(includes && util::SettingsSpan(*includes).last_negated());\n         }\n         if (emptyIncludeConf) {\n             std::string chain_id = GetChainName();\n-            std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n-            {\n-                // We haven't set m_network yet (that happens in SelectParams()), so manually check\n-                // for network.includeconf args.\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-                includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n-            }\n+            std::vector<std::string> includeconf;",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 440,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These variable names (which are unchanged by your PR) aren't very helpful. I'd suggest the following renames for a later PR:\r\n\r\n`includeconf` -> `conf_file_names`\r\n`to_include` -> `conf_file_name`\r\n`include_conf` -> `conf_file_stream`",
      "created_at": "2019-11-07T18:30:02Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343805742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343805742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343806860",
      "pull_request_review_id": 313532945,
      "id": 343806860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzgwNjg2MA==",
      "diff_hunk": "@@ -933,15 +822,14 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             }\n \n             // Warn about recursive -includeconf\n-            includeconf = GetArgs(\"-includeconf\");\n+            includeconf.clear();\n+            add_includes(chain_id, /* skip= */ chain_includes);\n+            add_includes({}, /* skip= */ default_includes);\n             {",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 477,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(unchanged but touched by this PR): I don't understand why this needs to be its own scope. Perhaps it can be flattened in a follow-up PR?",
      "created_at": "2019-11-07T18:32:28Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343806860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343806860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 828,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343808587",
      "pull_request_review_id": 313529917,
      "id": 343808587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzgwODU4Nw==",
      "diff_hunk": "@@ -268,48 +191,51 @@ class ArgsManagerHelper {\n  * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n  *\n  * If there was not a double negative, it removes the \"no\" from the key\n- * and clears the args vector to indicate a negated option.\n+ * and returns false.\n  *\n- * If there was a double negative, it removes \"no\" from the key, sets the\n- * value to \"1\" and pushes the key and the updated value to the args vector.\n+ * If there was a double negative, it removes \"no\" from the key, and\n+ * returns true.\n  *\n- * If there was no \"no\", it leaves key and value untouched and pushes them\n- * to the args vector.\n+ * If there was no \"no\", it returns the string value untouched.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n \n-NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned int flags,\n-                                      std::map<std::string, std::vector<std::string>>& args,\n-                                      std::string& error)\n+static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n {\n-    assert(key[0] == '-');\n-\n     size_t option_index = key.find('.');\n-    if (option_index == std::string::npos) {\n-        option_index = 1;\n-    } else {\n-        ++option_index;\n+    if (option_index != std::string::npos) {",
      "path": "src/util/system.cpp",
      "position": 154,
      "original_position": 153,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: comment \"Read section like testnet.foo or regtest.bar\"",
      "created_at": "2019-11-07T18:36:43Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343808587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343808587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343813542",
      "pull_request_review_id": 313532945,
      "id": 343813542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzgxMzU0Mg==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For me, this struct doesn't make things any clearer. An alternative is to pass an enum into the callback function to indicate where the SettingsSpan came from. Take a look at the change here, which also adds a few more comments: https://github.com/jnewbery/bitcoin/commit/fc3e1d4a2b8201cc694aee01a84b2b5e937b99cb",
      "created_at": "2019-11-07T18:47:58Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343813542",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343813542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343847884",
      "pull_request_review_id": 313529917,
      "id": 343847884,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzg0Nzg4NA==",
      "diff_hunk": "@@ -961,9 +849,16 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n std::string ArgsManager::GetChainName() const\n {\n-    LOCK(cs_args);\n-    const bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n-    const bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    auto get_net = [&](const std::string& arg) {\n+        LOCK(cs_args);\n+        util::SettingsValue value = GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n+                                               /* ignore_default_section_config= */ false,\n+                                               /* get_chain_name= */ true);\n+        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    };\n+\n+    const bool fRegTest = get_net(\"-regtest\");\n+    const bool fTestNet = get_net(\"-testnet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");",
      "path": "src/util/system.cpp",
      "position": 544,
      "original_position": 506,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I got why we need `IsArgSet(\"chain\")` can't `CBaseChainParams::MAIN` be returned by default in this function ? I tested `chain=0` and it start anyway on main chain..",
      "created_at": "2019-11-07T20:03:06Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343847884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343847884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343864706",
      "pull_request_review_id": 313529917,
      "id": 343864706,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzg2NDcwNg==",
      "diff_hunk": "@@ -331,22 +257,9 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n \n     for (const auto& arg : m_network_only_args) {\n-        std::pair<bool, std::string> found_result;\n-\n-        // if this option is overridden it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_override_args, arg);\n-        if (found_result.first) continue;\n-\n-        // if there's a network-specific value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(*this, arg));\n-        if (found_result.first) continue;\n-\n-        // if there isn't a default value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, arg);\n-        if (!found_result.first) continue;\n-\n-        // otherwise, issue a warning\n-        unsuitables.insert(arg);\n+        if (OnlyHasDefaultSectionSetting(m_settings, m_network, SettingName(arg))) {",
      "path": "src/util/system.cpp",
      "position": 220,
      "original_position": 219,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm wondering if there you could return after first match, in `AppInitParameterInteraction` unsuitables are processed as errors and not warnings",
      "created_at": "2019-11-07T20:43:30Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343864706",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343864706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343890660",
      "pull_request_review_id": 313529917,
      "id": 343890660,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzg5MDY2MA==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the\n+        // default section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in default config section if requested.\n+        if (ignore_default_section_config && source.config_file_default_section && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're mentioning discard of earlier settings on the command line and settings in the config file but in `MergeSettings` command line is evaluated before config so it can't discard something which hasn't evaluated yet ? I think you're thinking about the old code but it's not really clear.. ",
      "created_at": "2019-11-07T21:44:18Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343890660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343890660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343893449",
      "pull_request_review_id": 313529917,
      "id": 343893449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzg5MzQ0OQ==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the\n+        // default section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay is this weird behavior due to the way `GetConfigOptions` and `ReadConfigStream` are parsing ? Also maybe you can update comment to explain most settings is \"most settings except for chain name` which would underscore why you care about `get_chain_name`",
      "created_at": "2019-11-07T21:50:54Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343893449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343893449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343897939",
      "pull_request_review_id": 313529917,
      "id": 343897939,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mzg5NzkzOQ==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So the behavior you're describing is in case of negated value in default section, this result is going to take precedence on value in network section even it's a non-negated one ? If yes saying that network specific options are overriden would be more correct than ignored.",
      "created_at": "2019-11-07T22:01:51Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343897939",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343897939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343904965",
      "pull_request_review_id": 313676350,
      "id": 343904965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNDk2NQ==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": 343813542,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343813542\r\n\r\n> For me, this struct doesn't make things any clearer. An alternative is to pass an enum into the callback function to indicate where the SettingsSpan came from. Take a look at the change here, which also adds a few more comments: [jnewbery@fc3e1d4](https://github.com/jnewbery/bitcoin/commit/fc3e1d4a2b8201cc694aee01a84b2b5e937b99cb)\r\n\r\nYou're right. Sorry I doubted you! Struct was actually a holdover from an earlier iteration of this that had other properties like the section name. I'll squash in your change.",
      "created_at": "2019-11-07T22:20:17Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343904965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343904965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905098",
      "pull_request_review_id": 313676350,
      "id": 343905098,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTA5OA==",
      "diff_hunk": "@@ -899,25 +782,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 424,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": 343795528,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343795528\r\n\r\n> I can't comment on the exact line above (L897), but that comment refers to 'override args' and so should be changed in this PR.\r\n> \r\n> I think the comment and bool name are pretty confusing, and could be made much clearer. Suggestion:\r\n\r\nAgree, will take your suggestion.",
      "created_at": "2019-11-07T22:20:38Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905138",
      "pull_request_review_id": 313676350,
      "id": 343905138,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTEzOA==",
      "diff_hunk": "@@ -899,25 +782,31 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool emptyIncludeConf;\n         {\n             LOCK(cs_args);\n-            emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n+            const std::vector<util::SettingsValue>* const includes = util::FindKey(m_settings.command_line_options, \"includeconf\");\n+            emptyIncludeConf = !(includes && util::SettingsSpan(*includes).last_negated());\n         }\n         if (emptyIncludeConf) {\n             std::string chain_id = GetChainName();\n-            std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n-            {\n-                // We haven't set m_network yet (that happens in SelectParams()), so manually check\n-                // for network.includeconf args.\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-                includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n-            }\n+            std::vector<std::string> includeconf;",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 440,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": 343805742,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343805742\r\n\r\n> These variable names (which are unchanged by your PR) aren't very helpful. I'd suggest the following renames for a later PR:\r\n> \r\n> `includeconf` -> `conf_file_names`\r\n> `to_include` -> `conf_file_name`\r\n> `include_conf` -> `conf_file_stream`\r\n\r\nYes. If it's ok I think I will do these cleanups first and then rebase my changes on top.",
      "created_at": "2019-11-07T22:20:47Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905197",
      "pull_request_review_id": 313676350,
      "id": 343905197,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTE5Nw==",
      "diff_hunk": "@@ -933,15 +822,14 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             }\n \n             // Warn about recursive -includeconf\n-            includeconf = GetArgs(\"-includeconf\");\n+            includeconf.clear();\n+            add_includes(chain_id, /* skip= */ chain_includes);\n+            add_includes({}, /* skip= */ default_includes);\n             {",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 477,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "202e19830854550ee4eade53fe4fd3ae323ddbdd",
      "in_reply_to_id": 343806860,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343806860\r\n\r\n> (unchanged but touched by this PR): I don't understand why this needs to be its own scope. Perhaps it can be flattened in a follow-up PR?\r\n\r\nProbably this was just done as a style thing to make it clearer the variables here won't be used after the scope. But there's only one variable left now so this seems fine to remove.",
      "created_at": "2019-11-07T22:20:58Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905197",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 828,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905294",
      "pull_request_review_id": 313676350,
      "id": 343905294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTI5NA==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": 343897939,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343897939\r\n\r\n> So the behavior you're describing is in case of negated value in default section, this result is going to take precedence on value in network section even it's a non-negated one ? If yes saying that network specific options are overriden would be more correct than ignored.\r\n\r\nHmm, this isn't referring to the network-specific options in network sections that are overridden by the weird behavior. It is referring to network-specific settings in the default section that are supposed to be ignored when `-regtest` or `-testnet` are used.\r\n\r\nMaybe I can change \"Apply negated setting in otherwise ignored sections\" to \"Apply negated setting even if it is in supposed to be ignored.\"",
      "created_at": "2019-11-07T22:21:15Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905330",
      "pull_request_review_id": 313676350,
      "id": 343905330,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTMzMA==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the\n+        // default section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": 343893449,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343893449\r\n\r\n> Okay is this weird behavior due to the way `GetConfigOptions` and `ReadConfigStream` are parsing ?\r\n\r\nThe code has changed a lot since this behavior was introduced, so I don't recall what this behavior was due to initially. I'm pretty sure it was never intentional. But in the current master branch, this behavior is caused by passing `getLast=false` to [`GetArgHelper`](https://github.com/bitcoin/bitcoin/blob/2fb6140d585fa05547415a6c440dc43b561e2439/src/util/system.cpp#L195-L208) for config file settings, and `getLast=true` for command line settings. In this PR `getLast` is just replaced by `reverse_precendence`.\r\n\r\n> Also maybe you can update comment to explain most settings is \"most settings except for chain name`which would underscore why you care about`get_chain_name`\r\n\r\nSure, will add.",
      "created_at": "2019-11-07T22:21:21Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905330",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905388",
      "pull_request_review_id": 313676350,
      "id": 343905388,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTM4OA==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the\n+        // default section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in default config section if requested.\n+        if (ignore_default_section_config && source.config_file_default_section && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": 343890660,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343890660\r\n\r\n> You're mentioning discard of earlier settings on the command line and settings in the config file but in `MergeSettings` command line is evaluated before config so it can't discard something which hasn't evaluated yet ? I think you're thinking about the old code but it's not really clear..\r\n\r\nBy \"discard\" here I just mean \"ignore\". And \"earlier\" is just referring to earlier command line settings, not anything having to do with settings from different sources. I'll go ahead and replace \"discard\" with \"ignore\" in this paragraph and maybe say \"ignore earlier settings on the command line, and ignore settings in the config file\" to be clearer what \"earlier\" refers to.\r\n\r\nTo take an example, lets say you have `wallet=w1 wallet=w2` in the config file and `-wallet=w3 -wallet=w4 -nowallet` on the command line. The final wallet list will be empty because the last `-nowallet` discards everything that came before (later values take precedence over earlier values, command line arguments take precedence over config arguments).\r\n\r\nThe zombie case is `wallet=w1 wallet=w2` in the config file and `-wallet=w3 -wallet=w4 -nowallet -wallet=w5 -wallet=w6`. In this case, I would want the wallet list to look like `[\"w5\", \"w6\"]`. But actually it looks like `[\"w5\", \"w6\", \"w1\", \"w2\"]` because just adding `w5` to the previous example mysteriously brings back previously ignored `w1` and `w2`.",
      "created_at": "2019-11-07T22:21:30Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905388",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905462",
      "pull_request_review_id": 313676350,
      "id": 343905462,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTQ2Mg==",
      "diff_hunk": "@@ -268,48 +191,51 @@ class ArgsManagerHelper {\n  * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n  *\n  * If there was not a double negative, it removes the \"no\" from the key\n- * and clears the args vector to indicate a negated option.\n+ * and returns false.\n  *\n- * If there was a double negative, it removes \"no\" from the key, sets the\n- * value to \"1\" and pushes the key and the updated value to the args vector.\n+ * If there was a double negative, it removes \"no\" from the key, and\n+ * returns true.\n  *\n- * If there was no \"no\", it leaves key and value untouched and pushes them\n- * to the args vector.\n+ * If there was no \"no\", it returns the string value untouched.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n \n-NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned int flags,\n-                                      std::map<std::string, std::vector<std::string>>& args,\n-                                      std::string& error)\n+static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n {\n-    assert(key[0] == '-');\n-\n     size_t option_index = key.find('.');\n-    if (option_index == std::string::npos) {\n-        option_index = 1;\n-    } else {\n-        ++option_index;\n+    if (option_index != std::string::npos) {",
      "path": "src/util/system.cpp",
      "position": 154,
      "original_position": 153,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343808587,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343808587\r\n\r\n> nit: comment \"Read section like testnet.foo or regtest.bar\"\r\n\r\nWill add this",
      "created_at": "2019-11-07T22:21:41Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905510",
      "pull_request_review_id": 313676350,
      "id": 343905510,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTUxMA==",
      "diff_hunk": "@@ -331,22 +257,9 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n \n     for (const auto& arg : m_network_only_args) {\n-        std::pair<bool, std::string> found_result;\n-\n-        // if this option is overridden it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_override_args, arg);\n-        if (found_result.first) continue;\n-\n-        // if there's a network-specific value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(*this, arg));\n-        if (found_result.first) continue;\n-\n-        // if there isn't a default value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, arg);\n-        if (!found_result.first) continue;\n-\n-        // otherwise, issue a warning\n-        unsuitables.insert(arg);\n+        if (OnlyHasDefaultSectionSetting(m_settings, m_network, SettingName(arg))) {",
      "path": "src/util/system.cpp",
      "position": 220,
      "original_position": 219,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343864706,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343864706\r\n\r\n> I'm wondering if there you could return after first match, in `AppInitParameterInteraction` unsuitables are processed as errors and not warnings\r\n\r\nWow that is pretty funny. At one point I believe this was warning, and then it was changed into an error. I think it's better to return the complete set here though, so we can improve the error message to mention all the unsuitables instead of just the first.",
      "created_at": "2019-11-07T22:21:49Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905510",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905543",
      "pull_request_review_id": 313676350,
      "id": 343905543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTU0Mw==",
      "diff_hunk": "@@ -408,49 +321,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);",
      "path": "src/util/system.cpp",
      "position": 240,
      "original_position": 238,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343793306,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343793306\r\n\r\n> nit: add comment \"transform -foo to foo\" (over-commenting parsing here doesn't seem gross to me)\r\n\r\nAgree, will add.",
      "created_at": "2019-11-07T22:21:55Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 326,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905604",
      "pull_request_review_id": 313676350,
      "id": 343905604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzkwNTYwNA==",
      "diff_hunk": "@@ -961,9 +849,16 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n std::string ArgsManager::GetChainName() const\n {\n-    LOCK(cs_args);\n-    const bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n-    const bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    auto get_net = [&](const std::string& arg) {\n+        LOCK(cs_args);\n+        util::SettingsValue value = GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n+                                               /* ignore_default_section_config= */ false,\n+                                               /* get_chain_name= */ true);\n+        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    };\n+\n+    const bool fRegTest = get_net(\"-regtest\");\n+    const bool fTestNet = get_net(\"-testnet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");",
      "path": "src/util/system.cpp",
      "position": 544,
      "original_position": 506,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343847884,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343847884\r\n\r\n> I got why we need `IsArgSet(\"chain\")` can't `CBaseChainParams::MAIN` be returned by default in this function ?\r\n\r\nThe result of `IsArgSet` isn't needed to set the default, since that's handled below. It's only called to trigger an error if `-regtest` `-testnet` and `-chain=` options are used together because you're only allowed to use one.\r\n\r\nFor example `bitcoind -chain=main -regtest` triggers `Invalid combination of -regtest, -testnet and -chain. Can use at most one.`'\r\n\r\n> I tested `chain=0` and it start anyway on main chain..\r\n\r\nI don't see this. Was it intentional to omit the leading dash before `-chain`? When I start with `-chain=0` I see `Error: CreateBaseChainParams: Unknown chain 0.` When I start with `chain=0` `I see Error: Command line contains unexpected token 'chain=0', see bitcoind -h for a list of options.`",
      "created_at": "2019-11-07T22:22:08Z",
      "updated_at": "2019-11-08T05:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343905604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344252898",
      "pull_request_review_id": 314306846,
      "id": 344252898,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI1Mjg5OA==",
      "diff_hunk": "@@ -331,22 +257,9 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n \n     for (const auto& arg : m_network_only_args) {\n-        std::pair<bool, std::string> found_result;\n-\n-        // if this option is overridden it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_override_args, arg);\n-        if (found_result.first) continue;\n-\n-        // if there's a network-specific value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(*this, arg));\n-        if (found_result.first) continue;\n-\n-        // if there isn't a default value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, arg);\n-        if (!found_result.first) continue;\n-\n-        // otherwise, issue a warning\n-        unsuitables.insert(arg);\n+        if (OnlyHasDefaultSectionSetting(m_settings, m_network, SettingName(arg))) {",
      "path": "src/util/system.cpp",
      "position": 220,
      "original_position": 219,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343864706,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. The:\r\n\r\n```\r\n    for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\r\n        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\").translated, arg, network, network));\r\n    }\r\n```\r\n\r\nin `AppInitParameterInteraction()` clearly doesn't make sense.",
      "created_at": "2019-11-08T16:17:33Z",
      "updated_at": "2019-11-08T16:17:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344252898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344252898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344257286",
      "pull_request_review_id": 314312649,
      "id": 344257286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI1NzI4Ng==",
      "diff_hunk": "@@ -961,9 +849,16 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n std::string ArgsManager::GetChainName() const\n {\n-    LOCK(cs_args);\n-    const bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n-    const bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    auto get_net = [&](const std::string& arg) {\n+        LOCK(cs_args);\n+        util::SettingsValue value = GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n+                                               /* ignore_default_section_config= */ false,\n+                                               /* get_chain_name= */ true);\n+        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    };\n+\n+    const bool fRegTest = get_net(\"-regtest\");\n+    const bool fTestNet = get_net(\"-testnet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");",
      "path": "src/util/system.cpp",
      "position": 544,
      "original_position": 506,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343847884,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I don't see this. Was it intentional to omit the leading dash before -chain? \r\n\r\nAh sorry I tested with `chain=0` in config file, but didn't remember that `bitcoind` was pretty liberal with non-sense in config file..\r\n\r\nThat's said would it change anything to just return `CBaseChainParams::MAIN` at then of this function ? Assuming there is no conflict with other networks, if `-chain` isn't set you're going anyways to start on mainnet.",
      "created_at": "2019-11-08T16:26:24Z",
      "updated_at": "2019-11-08T16:26:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344257286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344257286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344261252",
      "pull_request_review_id": 314318063,
      "id": 344261252,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI2MTI1Mg==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the\n+        // default section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in default config section if requested.\n+        if (ignore_default_section_config && source.config_file_default_section && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": 343890660,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, gotcha, I find code easier to grasp moving to `Source::CONFIG_FILE_DEFAULT_SECTION`, etc",
      "created_at": "2019-11-08T16:34:42Z",
      "updated_at": "2019-11-08T16:34:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344261252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344261252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344263141",
      "pull_request_review_id": 314320644,
      "id": 344263141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI2MzE0MQ==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the\n+        // default section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": 343893449,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah no you're right, nothing to do with `ReadConfigStream` parsing, that's just a weird flag of `GetArgHelper`, without that much rational..",
      "created_at": "2019-11-08T16:38:51Z",
      "updated_at": "2019-11-08T16:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344263141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344263141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344266685",
      "pull_request_review_id": 314325379,
      "id": 344266685,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI2NjY4NQ==",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_default_section = false;\n+\n+    explicit Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() noexcept { forced = true; return *this; }\n+    Source& SetConfigFile(bool default_section) noexcept { config_file = true; config_file_default_section = default_section; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ false));\n+            }\n+        }\n+    }\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(Source(SettingsSpan(*values)).SetConfigFile(/* default_section= */ true));\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the",
      "path": "src/util/settings.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "b70e95b2330d5e9bad0cd68954d88c0e4951ed0f",
      "in_reply_to_id": 343897939,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, after your explanation, I think comment is good enough (or don't suggestion in mind to make it better)",
      "created_at": "2019-11-08T16:46:18Z",
      "updated_at": "2019-11-08T16:46:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344266685",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344266685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344269892",
      "pull_request_review_id": 314329768,
      "id": 344269892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI2OTg5Mg==",
      "diff_hunk": "@@ -961,9 +849,16 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n std::string ArgsManager::GetChainName() const\n {\n-    LOCK(cs_args);\n-    const bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n-    const bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    auto get_net = [&](const std::string& arg) {\n+        LOCK(cs_args);\n+        util::SettingsValue value = GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n+                                               /* ignore_default_section_config= */ false,\n+                                               /* get_chain_name= */ true);\n+        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    };\n+\n+    const bool fRegTest = get_net(\"-regtest\");\n+    const bool fTestNet = get_net(\"-testnet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");",
      "path": "src/util/system.cpp",
      "position": 544,
      "original_position": 506,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343847884,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344257286\r\n\r\n> That's said would it change anything to just return `CBaseChainParams::MAIN` at then of this function ? Assuming there is no conflict with other networks, if `-chain` isn't set you're going anyways to start on mainnet.\r\n\r\nI might be misunderstanding the suggestion, but if the suggestion is to change `return GetArg(\"-chain\", CBaseChainParams::MAIN);` to `return CBaseChainParams::MAIN;` then that will break usages `bitcoind -chain=test` or `bitcoind -chain=regtest`.\r\n\r\nIf the question is why the overlapping options exist in the first place, I don't know the answer, but this was done in #16680, and the discussion there probably has some justifications.",
      "created_at": "2019-11-08T16:53:25Z",
      "updated_at": "2019-11-08T16:53:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344269892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344269892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344270169",
      "pull_request_review_id": 314330145,
      "id": 344270169,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI3MDE2OQ==",
      "diff_hunk": "@@ -894,14 +894,19 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n             return false;\n         }\n-        // if there is an -includeconf in the override args, but it is empty, that means the user\n-        // passed '-noincludeconf' on the command line, in which case we should not include anything\n-        bool emptyIncludeConf;\n+        // `-includeconf` cannot be included in the command line arguments except\n+        // as `-noincludeconf` (which indicates that no conf file should be used).",
      "path": "src/util/system.cpp",
      "position": 433,
      "original_position": 8,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "dc8e1e75487461ec9bff433144f0db831b682403",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find comment a bit confusing, `-noincludeconf` means we are only going to discard `includeconf` in config file but not the main config itself (at least I tested that the current behavior with this patchset AFAII)",
      "created_at": "2019-11-08T16:53:59Z",
      "updated_at": "2019-11-08T16:55:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344270169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344270169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 783,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344271224",
      "pull_request_review_id": 314331646,
      "id": 344271224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI3MTIyNA==",
      "diff_hunk": "@@ -408,49 +322,44 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        // Transform -foo to foo\n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key);\n+            error = strprintf(\"Invalid parameter -%s\", key);\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;",
      "path": "src/util/system.cpp",
      "position": 271,
      "original_position": 271,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit (please don't change in this PR. Leave for a follow-up, if at all): 'we clear it' in the comment above is inaccurate. If an `-includeconf` is found on the command line then we return false rather than silently removing the bad config. Change that comment to `// Do not allow -includeconf from the command line (except for -noincludeconf)`\r\n\r\nIn fact, I don't think we need the local `success` variable at all. You could just return `false` from the inner for loop. I don't think the user needs to be told about the multiple `-includeconf` command line arguments they've used. Just alerting about the first should be enough.",
      "created_at": "2019-11-08T16:56:26Z",
      "updated_at": "2019-11-08T18:22:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344271224",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344271224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 348,
      "original_line": 348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344273023",
      "pull_request_review_id": 314334142,
      "id": 344273023,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI3MzAyMw==",
      "diff_hunk": "@@ -894,14 +894,19 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n             return false;\n         }\n-        // if there is an -includeconf in the override args, but it is empty, that means the user\n-        // passed '-noincludeconf' on the command line, in which case we should not include anything\n-        bool emptyIncludeConf;\n+        // `-includeconf` cannot be included in the command line arguments except\n+        // as `-noincludeconf` (which indicates that no conf file should be used).",
      "path": "src/util/system.cpp",
      "position": 433,
      "original_position": 8,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "dc8e1e75487461ec9bff433144f0db831b682403",
      "in_reply_to_id": 344270169,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344270169\r\n\r\n> I find comment a bit confusing, `-noincludeconf` means we are only going to discard `includeconf` in config file but not the main config itself (at least I've tested that the current behavior with this patchset)\r\n\r\n`-noincludeconf` just disables the `-includeconf` directive. I wouldn't expect it to disable the whole config file. (I might expect `-noconf` to do that.) So this doesn't seem that confusing to me, but I'm happy to take a suggestion if you have an idea to improve it.\r\n\r\nThe current text just comes from John's suggestion https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343795528",
      "created_at": "2019-11-08T17:00:40Z",
      "updated_at": "2019-11-08T17:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344273023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344273023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 783,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344275404",
      "pull_request_review_id": 314337183,
      "id": 344275404,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI3NTQwNA==",
      "diff_hunk": "@@ -331,22 +257,9 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n \n     for (const auto& arg : m_network_only_args) {\n-        std::pair<bool, std::string> found_result;\n-\n-        // if this option is overridden it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_override_args, arg);\n-        if (found_result.first) continue;\n-\n-        // if there's a network-specific value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(*this, arg));\n-        if (found_result.first) continue;\n-\n-        // if there isn't a default value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, arg);\n-        if (!found_result.first) continue;\n-\n-        // otherwise, issue a warning\n-        unsuitables.insert(arg);\n+        if (OnlyHasDefaultSectionSetting(m_settings, m_network, SettingName(arg))) {",
      "path": "src/util/system.cpp",
      "position": 220,
      "original_position": 219,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343864706,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes I'm fine too if we print all errors than return ",
      "created_at": "2019-11-08T17:05:59Z",
      "updated_at": "2019-11-08T17:05:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344275404",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344275404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344291875",
      "pull_request_review_id": 314359271,
      "id": 344291875,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI5MTg3NQ==",
      "diff_hunk": "@@ -894,14 +894,19 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n             return false;\n         }\n-        // if there is an -includeconf in the override args, but it is empty, that means the user\n-        // passed '-noincludeconf' on the command line, in which case we should not include anything\n-        bool emptyIncludeConf;\n+        // `-includeconf` cannot be included in the command line arguments except\n+        // as `-noincludeconf` (which indicates that no conf file should be used).",
      "path": "src/util/system.cpp",
      "position": 433,
      "original_position": 8,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "dc8e1e75487461ec9bff433144f0db831b682403",
      "in_reply_to_id": 344270169,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit-picking there, was just to change comment to `(which indicates that no included conf file should be used)`",
      "created_at": "2019-11-08T17:47:32Z",
      "updated_at": "2019-11-08T17:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344291875",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344291875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 783,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344295148",
      "pull_request_review_id": 314363701,
      "id": 344295148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDI5NTE0OA==",
      "diff_hunk": "@@ -961,9 +849,16 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n std::string ArgsManager::GetChainName() const\n {\n-    LOCK(cs_args);\n-    const bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n-    const bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    auto get_net = [&](const std::string& arg) {\n+        LOCK(cs_args);\n+        util::SettingsValue value = GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n+                                               /* ignore_default_section_config= */ false,\n+                                               /* get_chain_name= */ true);\n+        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    };\n+\n+    const bool fRegTest = get_net(\"-regtest\");\n+    const bool fTestNet = get_net(\"-testnet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");",
      "path": "src/util/system.cpp",
      "position": 544,
      "original_position": 506,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "422d3784d6fd137fc86769a1d295b178566f3e05",
      "in_reply_to_id": 343847884,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay you're right didn't have the `chain=test` syntax in mind.",
      "created_at": "2019-11-08T17:55:58Z",
      "updated_at": "2019-11-08T17:55:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344295148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344295148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 865,
      "original_line": 865,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344366743",
      "pull_request_review_id": 314460012,
      "id": 344366743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDM2Njc0Mw==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+enum class Source {\n+   FORCED,\n+   COMMAND_LINE,\n+   CONFIG_FILE_NETWORK_SECTION,\n+   CONFIG_FILE_DEFAULT_SECTION\n+};\n+\n+//! Merge settings from multiple sources in precedence order:\n+//! Forced config > command line > config file network-specific section > config file default section\n+//!\n+//! This function is provided with a callback function fn that contains\n+//! specific logic for how to merge the sources.\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    // Merge in the forced settings\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(SettingsSpan(*value), Source::FORCED);\n+    }\n+    // Merge in the command-line options\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(SettingsSpan(*values), Source::COMMAND_LINE);\n+    }\n+    // Merge in the network-specific section of the config file\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(SettingsSpan(*values), Source::CONFIG_FILE_NETWORK_SECTION);\n+            }\n+        }\n+    }\n+    // Merge in the default section of the config file\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(SettingsSpan(*values), Source::CONFIG_FILE_DEFAULT_SECTION);\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](SettingsSpan span, Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting even if non-negated setting would be ignored. A negated\n+        // value in the default section is applied to network specific options,\n+        // even though normal non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for all settings except\n+        // chain name settings.\n+        const bool reverse_precedence = (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) && !get_chain_name;",
      "path": "src/util/settings.cpp",
      "position": 71,
      "original_position": 71,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "9dcb952fe5f85529ab28e091af7534e72c21c90f",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These long lines are killin' me but I'll bite my tongue in the interest of a merge.",
      "created_at": "2019-11-08T21:07:01Z",
      "updated_at": "2019-11-08T21:16:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344366743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344366743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344377770",
      "pull_request_review_id": 314475180,
      "id": 344377770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDM3Nzc3MA==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+enum class Source {\n+   FORCED,\n+   COMMAND_LINE,\n+   CONFIG_FILE_NETWORK_SECTION,\n+   CONFIG_FILE_DEFAULT_SECTION\n+};\n+\n+//! Merge settings from multiple sources in precedence order:\n+//! Forced config > command line > config file network-specific section > config file default section\n+//!\n+//! This function is provided with a callback function fn that contains\n+//! specific logic for how to merge the sources.\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    // Merge in the forced settings\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(SettingsSpan(*value), Source::FORCED);\n+    }\n+    // Merge in the command-line options\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(SettingsSpan(*values), Source::COMMAND_LINE);\n+    }\n+    // Merge in the network-specific section of the config file\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(SettingsSpan(*values), Source::CONFIG_FILE_NETWORK_SECTION);\n+            }\n+        }\n+    }\n+    // Merge in the default section of the config file\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(SettingsSpan(*values), Source::CONFIG_FILE_DEFAULT_SECTION);\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](SettingsSpan span, Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting even if non-negated setting would be ignored. A negated\n+        // value in the default section is applied to network specific options,\n+        // even though normal non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for all settings except\n+        // chain name settings.\n+        const bool reverse_precedence = (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) && !get_chain_name;",
      "path": "src/util/settings.cpp",
      "position": 71,
      "original_position": 71,
      "commit_id": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "original_commit_id": "9dcb952fe5f85529ab28e091af7534e72c21c90f",
      "in_reply_to_id": 344366743,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will fix with the other followups, but if it in case its useful https://greasyfork.org/en/scripts/18789-github-toggle-code-wrap seems to work well. (Found through https://github.com/StylishThemes/GitHub-code-wrap) ",
      "created_at": "2019-11-08T21:41:04Z",
      "updated_at": "2019-11-08T21:41:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344377770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344377770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    }
  ]
}