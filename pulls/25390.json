{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390",
    "id": 969286381,
    "node_id": "PR_kwDOABII5845xiLt",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25390",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25390.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25390.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
    "number": 25390,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "sync: introduce a thread-safe generic container and use it to remove a bunch of \"GlobalMutex\"es",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Introduce a generic container that provides a thread-safe access to any object by using a mutex which is acquired every time the object accessed.\r\n\r\nFor example:\r\n\r\n```cpp\r\nSynced<std::unordered_map<int, int>> m{{3, 9}, {4, 16}};\r\n\r\n{\r\n    SYNCED_LOCK(m, m_locked);\r\n\r\n    // m_locked represents the internal object, i.e. std::unordered_map,\r\n    // while m_locked is in scope the internal mutex is locked.\r\n\r\n    auto it = m_locked->find(3);\r\n    if (it != m_locked->end()) {\r\n        std::cout << it->second << std::endl;\r\n    }\r\n\r\n    for (auto& [k, v] : *m_locked) {\r\n        std::cout << k << \", \" << v << std::endl;\r\n    }\r\n}\r\n\r\nWITH_SYNCED_LOCK(m, p, p->emplace(5, 25));\r\n```\r\n\r\nRemove the global mutexes `g_maplocalhost_mutex`, `g_deadline_timers_mutex`, `cs_dir_locks`, `g_loading_wallet_mutex`, `g_wallet_release_mutex` and use `Synced<T>` instead.\r\n\r\n## Benefits\r\n\r\n_copied from a [comment below](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169788319):_\r\n\r\nThe `Synced<T>` abstraction is similar to what is suggested in [this comment](https://github.com/bitcoin/bitcoin/pull/24931#discussion_r890636987) but it does so in a generic way to avoid code repetition. Its benefit is:\r\n\r\n1. It avoids code repetition at the implementation sites. See [PR#26151](https://github.com/bitcoin/bitcoin/pull/26151) for a live example. Namely this:\r\n\r\n<details>\r\n<summary>Lots of repetitions (92 lines)</summary>\r\n\r\n```cpp\r\nclass Foo\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Foo::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<int> m_data;\r\n};\r\n\r\nclass Bar\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Bar::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<std::string> m_data;\r\n};\r\n\r\nclass Baz\r\n{\r\npublic:\r\n    void Insert(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.insert(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Baz::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::set<std::string> m_data;\r\n};\r\n```\r\n</details>\r\n\r\nbecomes this:\r\n\r\n<details>\r\n<summary>Short (3 lines)</summary>\r\n\r\n```cpp\r\nSynced<std::vector<int>> Foo;\r\nSynced<std::vector<std::string>> Bar;\r\nSynced<std::set<std::string>> Baz;\r\n```\r\n</details>\r\n\r\n2. The mutex is properly encapsulated. With a global mutex and a global variable annotated with `GUARDED_BY()` it is indeed not possible to add new code that accesses the variable without protection (if using Clang and `-Wthread-safety-analysis` and `-Werror`), but it is possible to abuse the mutex and start using it to protect some more, possibly unrelated stuff (we already have this in the current code).\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2022-06-16T12:46:53Z",
    "updated_at": "2023-05-31T14:37:04Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "0d67c361bd7efa159ae17af4dca54e4a23243adb",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "vasild:ThreadSafePtr",
      "ref": "ThreadSafePtr",
      "sha": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 120608826,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA2MDg4MjY=",
        "name": "bitcoin",
        "full_name": "vasild/bitcoin",
        "owner": {
          "login": "vasild",
          "id": 266751,
          "node_id": "MDQ6VXNlcjI2Njc1MQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vasild",
          "html_url": "https://github.com/vasild",
          "followers_url": "https://api.github.com/users/vasild/followers",
          "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
          "organizations_url": "https://api.github.com/users/vasild/orgs",
          "repos_url": "https://api.github.com/users/vasild/repos",
          "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/vasild/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/vasild/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/vasild/bitcoin",
        "archive_url": "https://api.github.com/repos/vasild/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/vasild/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/vasild/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/vasild/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/vasild/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/vasild/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/vasild/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/vasild/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/vasild/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/vasild/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/vasild/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/vasild/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/vasild/bitcoin/events",
        "forks_url": "https://api.github.com/repos/vasild/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/vasild/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/vasild/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/vasild/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/vasild/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/vasild/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/vasild/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/vasild/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/vasild/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/vasild/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/vasild/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/vasild/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/vasild/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/vasild/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/vasild/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/vasild/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:vasild/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/vasild/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/vasild/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/vasild/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/vasild/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/vasild/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/vasild/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/vasild/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/vasild/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/vasild/bitcoin/hooks",
        "svn_url": "https://github.com/vasild/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 211824,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T10:22:48Z",
        "created_at": "2018-02-07T11:52:47Z",
        "updated_at": "2023-01-31T16:56:52Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "db720b5a703c90625fa7a4773bd2db5672427cbe",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 131,
    "deletions": 71,
    "changed_files": 8,
    "commits": 10,
    "review_comments": 46,
    "comments": 24
  },
  "events": [
    {
      "event": "review_requested",
      "id": 6820901534,
      "node_id": "RRE_lADOABII585L6FX5zwAAAAGWjrKe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820901534",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:08:11Z",
      "requested_reviewer": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 6820901551,
      "node_id": "RRE_lADOABII585L6FX5zwAAAAGWjrKv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820901551",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:08:11Z",
      "requested_reviewer": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 6820993731,
      "node_id": "LE_lADOABII585L6FX5zwAAAAGWkBrD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820993731",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:20:15Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 6820993732,
      "node_id": "LE_lADOABII585L6FX5zwAAAAGWkBrE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820993732",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:20:15Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 1009041664,
      "node_id": "PRR_kwDOABII5848JMEA",
      "url": null,
      "actor": null,
      "commit_id": "e577177a339d5a833ba82c9656fa0291ad05b001",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1009041664",
      "submitted_at": "2022-06-16T13:28:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "commented",
      "id": 1157765950,
      "node_id": "IC_kwDOABII585FAhs-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157765950",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T15:04:02Z",
      "updated_at": "2023-05-31T04:29:50Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [jonatack](https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1390434676) |\n| Concept ACK | [hebasto](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1557425242) |\n| Approach ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1009041664), [ajtowns](https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1145740612) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27411](https://github.com/bitcoin/bitcoin/pull/27411) (p2p: Restrict self-advertisements with privacy networks to avoid fingerprinting by mzumsande)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1157765950",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "commented",
      "id": 1157945376,
      "node_id": "IC_kwDOABII585FBNgg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157945376",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T17:28:36Z",
      "updated_at": "2022-06-16T17:28:36Z",
      "author_association": "MEMBER",
      "body": "This seems like a potentially useful alternative to clang thread safety annotations. The `ThreadSafePtr<T>` class forces code to lock a mutex when accessing data, just like TSA annotations do, except unlike TSA annotations, it doesn't rely on a nonstandard compiler extension, or suffer from quirks that come from doing a limited static analysis.\r\n\r\n`ThreadSafePtr<T>` is obviously not a complete substitute for thread safety annotations since it only handles the simple case where a single non-recursive Mutex is used to protect access to a single variable. But the variable can have any C++ type (primitive, container, or struct), so it's probably flexible enough for a lot of cases.\r\n\r\nI don't think the `ThreadSafePtr<T>` is the best name because `xxx_ptr<T>` implies the type is some kind of lightweight reference to the `T`, not a container which holds the `T`. I would call it something like `Synced<T>` or `LockedData<T>`. (An analogy here would be `std::optional<T>`, which is not called `std::optional_ptr<T>`, even though it has `*` and `->` members, because it's purpose is to be a container, not a pointer. The class is named after what it's used for not what kind of members it has.)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1157945376",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "reviewed",
      "id": 1009459470,
      "node_id": "PRR_kwDOABII5848KyEO",
      "url": null,
      "actor": null,
      "commit_id": "e577177a339d5a833ba82c9656fa0291ad05b001",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1009459470",
      "submitted_at": "2022-06-16T18:02:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "commented",
      "id": 1158434634,
      "node_id": "IC_kwDOABII585FDE9K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158434634",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-17T02:55:13Z",
      "updated_at": "2022-06-17T02:55:13Z",
      "author_association": "MEMBER",
      "body": "This seems like a non-starter to me? It's not even able to detect obvious double locks at compile-time:\r\n\r\n```c++\r\n    ThreadSafePtr<std::map<int, int>> m;\r\n    m->emplace(5, 25);\r\n    {\r\n        auto m_locked = *m;\r\n        m_locked->emplace(6, 36);\r\n        m->emplace(7, 49);  // double lock\r\n\r\n        auto m_locked2 = *m; // double lock\r\n        m_locked->emplace(9, 81);\r\n        m_locked2->emplace(10, 100);\r\n    }\r\n```\r\n\r\nEven if it weren't worse at catching bugs, it doesn't seem like an improvement over writing:\r\n\r\n```c++\r\n    Mutex mut;\r\n    std::map<int, int> m GUARDED_BY(mut);\r\n\r\n    WITH_LOCK(mut, m.emplace(5, 25));\r\n    {\r\n        LOCK(mut);\r\n        m.emplace(6, 36);\r\n        m.emplace(7, 49);  // no double lock\r\n\r\n        LOCK(mut); // double lock - detected at compile time\r\n        m.emplace(9, 81);\r\n        m.emplace(10, 100);\r\n    }\r\n```",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "commented",
      "id": 1158475359,
      "node_id": "IC_kwDOABII585FDO5f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158475359",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-17T04:21:50Z",
      "updated_at": "2022-06-17T04:21:50Z",
      "author_association": "MEMBER",
      "body": "> It's not even able to detect obvious double locks at compile-time: \r\n\r\nI assume it can be annotated just like any other lock. Agree implementation should fix this, though.\r\n\r\n> Even if it weren't worse at catching bugs, it doesn't seem like an improvement over writing\r\n\r\nWell one improvement is that it enforces locking on all compilers, unlike the clang annotations. The code itself doesn't seem much better or worse in this case for this very simple data structure, but it's probably is worth experimenting with for chains and chainstates and mempools, etc to be able to avoid logic bugs, distinguish different uses of cs_main for different purposes, and not just have LOCK(cs_main) everywhere what no indication about what exactly is being locked or why.\r\n\r\nLooking at your examples, though I would even more want to replace the `*m` syntax with `m.Lock()` as suggested previously to make usage more obvious.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158475359",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6840954196,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGXwK1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6840954196",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:46:35Z"
    },
    {
      "event": "commented",
      "id": 1160665973,
      "node_id": "IC_kwDOABII585FLlt1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1160665973",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:54:39Z",
      "updated_at": "2022-06-20T16:54:39Z",
      "author_association": "MEMBER",
      "body": "`e577177a33...a870b2b891`: address suggestions and remove optional commit that was a kind of scope creep for this PR - `net: simplify logic around reachable networks and -onlynet`, it will make it in a followup.\r\n\r\n@ryanofsky very insightful review, thanks for the suggestions!\r\n\r\n> This seems like a potentially useful alternative to clang thread safety annotations. The `ThreadSafePtr<T>` class forces code to lock a mutex when accessing data, just like TSA annotations do, except...\r\n\r\nHmm, right, I did not think of this from that perspective. In addition - TSA do not actually \"force\" anything, they emit a mere warning if compiled with `clang`. They do nothing for gcc. And if `-Werror` is not used to turn the warning into an error, then they can be missed/ignored.\r\n\r\nI see this as a complementary to TSA.\r\n\r\n> I don't think the `ThreadSafePtr<T>` is the best name because `xxx_ptr<T>` implies the type is some kind of lightweight reference to the `T`, not a container which holds the `T`. I would call it something like `Synced<T>` ...\r\n\r\nRenamed to `Synced<T>`, thanks!",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1160665973",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "mentioned",
      "id": 6840991617,
      "node_id": "MEE_lADOABII585L6FX5zwAAAAGXwT-B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6840991617",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:54:40Z"
    },
    {
      "event": "subscribed",
      "id": 6840991619,
      "node_id": "SE_lADOABII585L6FX5zwAAAAGXwT-D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6840991619",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:54:40Z"
    },
    {
      "event": "commented",
      "id": 1164151295,
      "node_id": "IC_kwDOABII585FY4n_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164151295",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T09:06:42Z",
      "updated_at": "2022-06-23T11:17:33Z",
      "author_association": "MEMBER",
      "body": "> I assume it can be annotated just like any other lock. Agree implementation should fix this, though.\r\n\r\nI think you'd have to mark the `Synced` object as being lock itself (`LOCKABLE`), and mark the `Proxy` class as being a RAII guard (`SCOPED_LOCKABLE`), with the constructor/destructor annotated appropriately (`EXCLUSIVE_LOCK_FUNCTION(ref_to_scoped_obj)` and `UNLOCK_FUNCTION()`), and with the functions that create the Proxy (`Lock` and `operator->`) annotated with negative constraints (`EXCLUSIVE_LOCKS_REQUIRED(!this)`)? I've got pretty low confidence that that will actually work as hoped/expected though...\r\n\r\n> Well one improvement is that it enforces locking on all compilers, unlike the clang annotations.\r\n\r\nWe already enforce locking is correct via compiling with clang in CI; it's certainly an improvement to get those warnings earlier for anyone who's not using clang or doesn't have the options enabled, but [EDIT: oops, didn't finish the thought:] not at the cost of losing some checks entirely.\r\n",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1164151295",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "commented",
      "id": 1164194609,
      "node_id": "IC_kwDOABII585FZDMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164194609",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T09:49:07Z",
      "updated_at": "2022-06-23T09:49:07Z",
      "author_association": "MEMBER",
      "body": "I don't see any obvious benefit here, looking at the comparison with current code in https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634 ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1164194609",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6900955645,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGbVDn9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6900955645",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:01:18Z"
    },
    {
      "event": "commented",
      "id": 1169788319,
      "node_id": "IC_kwDOABII585FuY2f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169788319",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:04:33Z",
      "updated_at": "2022-07-13T06:29:48Z",
      "author_association": "MEMBER",
      "body": "`a870b2b891...7b05e787cf`: use `LOCK(synced)` at call sites and remove more `GlobalMutex`es.\r\n\r\nThe benefit is not at the call sites - they can use different flavors of syntax sugar but all of them more or less boil down to the same thing. I changed it to use `{ LOCK(foo); foo->Method1(); foo->Method2(); ... }` so that it is not possible to misuse like @ajtowns suggested [above](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634).\r\n\r\nThe `Synced<T>` abstraction is similar to what is suggested in [this comment](https://github.com/bitcoin/bitcoin/pull/24931#discussion_r890636987) but it does so in a generic way to avoid code repetition. Its benefit is twofold:\r\n\r\n1. It avoids code repetition at the implementation sites. Namely this:\r\n\r\n<details>\r\n<summary>Lots of repetitions (92 lines)</summary>\r\n\r\n```cpp\r\nclass Foo\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Foo::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<int> m_data;\r\n};\r\n\r\nclass Bar\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Bar::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<std::string> m_data;\r\n};\r\n\r\nclass Baz\r\n{\r\npublic:\r\n    void Insert(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.insert(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Baz::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::set<std::string> m_data;\r\n};\r\n```\r\n</details>\r\n\r\nbecomes this:\r\n\r\n<details>\r\n<summary>Short (3 lines)</summary>\r\n\r\n```cpp\r\nSynced<std::vector<int>> Foo;\r\nSynced<std::vector<std::string>> Bar;\r\nSynced<std::set<std::string>> Baz;\r\n```\r\n</details>\r\n\r\n2. The mutex is properly encapsulated. With a global mutex and a global variable annotated with `GUARDED_BY()` it is indeed not possible to add new code that accesses the variable without protection (if using Clang and `-Wthread-safety-analysis` and `-Werror`), but it is possible to abuse the mutex and start using it to protect some more, possibly unrelated stuff (we already have this in the current code).\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169788319",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "mentioned",
      "id": 6900979995,
      "node_id": "MEE_lADOABII585L6FX5zwAAAAGbVJkb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6900979995",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:04:33Z"
    },
    {
      "event": "subscribed",
      "id": 6900980000,
      "node_id": "SE_lADOABII585L6FX5zwAAAAGbVJkg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6900980000",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:04:33Z"
    },
    {
      "event": "commented",
      "id": 1169797417,
      "node_id": "IC_kwDOABII585FubEp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169797417",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:13:30Z",
      "updated_at": "2022-06-29T10:13:30Z",
      "author_association": "MEMBER",
      "body": "Ah, looks like this is `std::atomic` for structs/classes then",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169797417",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "commented",
      "id": 1169846509,
      "node_id": "IC_kwDOABII585FunDt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169846509",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T11:06:41Z",
      "updated_at": "2022-06-29T11:07:10Z",
      "author_association": "MEMBER",
      "body": "> Ah, looks like this is `std::atomic` for structs/classes then\r\n\r\nRight, kind of. `std::atomic` can be used for any trivially copyable structs/classes too and if necessary it will use a mutex internally. The difference is that reading from an `atomic` would read it in a safe way from the memory and would return a copy of the stored object. So if we call a method of the stored object the mutex will be released before the method is called and the method will be called on the copy. `atomic` also does not provide a way to lock for longer time, spanning calls to multiple methods.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169846509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "renamed",
      "id": 6933944067,
      "node_id": "RTE_lADOABII585L6FX5zwAAAAGdS5cD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6933944067",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T12:16:26Z",
      "rename": {
        "from": "sync: introduce a thread-safe smart pointer and use it to remove g_maplocalhost_mutex",
        "to": "sync: introduce a thread-safe smart container and use it to remove g_maplocalhost_mutex"
      }
    },
    {
      "event": "renamed",
      "id": 6933949045,
      "node_id": "RTE_lADOABII585L6FX5zwAAAAGdS6p1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6933949045",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T12:17:03Z",
      "rename": {
        "from": "sync: introduce a thread-safe smart container and use it to remove g_maplocalhost_mutex",
        "to": "sync: introduce a thread-safe smart container and use it to remove a bunch of \"GlobalMutex\"es"
      }
    },
    {
      "event": "reviewed",
      "id": 1036036999,
      "node_id": "PRR_kwDOABII5849wKuH",
      "url": null,
      "actor": null,
      "commit_id": "7b05e787cfc43494f0cea6364928f184c98e3fae",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think right now I am at \"concept -0.5\" on this PR at 7b05e787cfc43494f0cea6364928f184c98e3fae. If other people think this change is a good idea, it seems fine, but I think the complexity it adds to sync.h isn't really justified by the minor code simplifications it enables elsewhere. Maybe if changes to `sync.h` were simplified or if a compelling use-case were explained, this would look like a better tradeoff.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634\r\n\r\n> This seems like a non-starter to me? It's not even able to detect obvious double locks at compile-time:\r\n\r\nThis is fixed now by allowing double locking. Following test passes `test_bitcoin -t sync_tests/synced_double_lock`\r\n\r\n```diff\r\ndiff --git a/src/test/sync_tests.cpp b/src/test/sync_tests.cpp\r\nindex 55c2c5108de..3c225847529 100644\r\n--- a/src/test/sync_tests.cpp\r\n+++ b/src/test/sync_tests.cpp\r\n@@ -140,4 +140,18 @@ BOOST_AUTO_TEST_CASE(inconsistent_lock_order_detected)\r\n #endif // DEBUG_LOCKORDER\r\n }\r\n \r\n+BOOST_AUTO_TEST_CASE(synced_double_lock)\r\n+{\r\n+    Synced<std::map<int, int>> m;\r\n+    m->emplace(5, 25);\r\n+    {\r\n+        auto m_locked = m.Lock();\r\n+        m_locked->emplace(6, 36);\r\n+        m->emplace(7, 49);  // double lock\r\n+        auto m_locked2 = m.Lock(); // double lock\r\n+        m_locked->emplace(9, 81);\r\n+        m_locked2->emplace(10, 100);\r\n+    }\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n\r\n```",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1036036999",
      "submitted_at": "2022-07-12T16:06:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6984094388,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGgSNK0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6984094388",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T08:55:46Z"
    },
    {
      "event": "commented",
      "id": 1182955925,
      "node_id": "IC_kwDOABII585GgnmV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1182955925",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T08:57:39Z",
      "updated_at": "2022-07-13T08:57:39Z",
      "author_association": "MEMBER",
      "body": "`7b05e787cf...acb21a5a24`: simplify the implementation of `Synced`, as suggested [above](https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919129254).",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1182955925",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "labeled",
      "id": 6987494072,
      "node_id": "LE_lADOABII585L6FX5zwAAAAGgfLK4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6987494072",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T16:27:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6991741695,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGgvYL_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6991741695",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T07:18:02Z"
    },
    {
      "event": "commented",
      "id": 1184085863,
      "node_id": "IC_kwDOABII585Gk7dn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184085863",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T07:18:30Z",
      "updated_at": "2022-07-14T07:18:30Z",
      "author_association": "MEMBER",
      "body": "`acb21a5a24...4b870a1538`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1184085863",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unlabeled",
      "id": 6992525473,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAGgyXih",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6992525473",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T09:12:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7037018200,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGjcGBY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7037018200",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T10:20:26Z"
    },
    {
      "event": "commented",
      "id": 1191312357,
      "node_id": "IC_kwDOABII585HAfvl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191312357",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T10:22:40Z",
      "updated_at": "2022-07-21T10:22:40Z",
      "author_association": "MEMBER",
      "body": "`4b870a1538...135ca49e24`: Further simplify the `Synced` class:\r\n\r\n* Inherit `Synced` from `RecursiveMutex`. This allows the removal of the member `Synced::m_mutex` and the type `Synced::UniqueLock`\r\n* Inherit `Synced::Proxy` from `::UniqueLock<RecursiveMutex>`. This allows the removal of the member `Synced::Proxy::m_lock`.\r\n\r\nAfter the above changes there are two methods with similar names:\r\n* `Synced::lock()`, inherited from `RecursiveMutex`, it just locks the object\r\n* `Synced::Lock()`, it locks the object and returns a scoped lockable.\r\n\r\nTo avoid confusion, rename the latter to `operator*()`. This way constructs like `foo.Lock()[x]` become `(*foo)[x]` which looks better to me.\r\n\r\nNow the `Synced` class is 47 lines (excluding comments).\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1191312357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7037434218,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGjdrlq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7037434218",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T11:24:27Z"
    },
    {
      "event": "commented",
      "id": 1191366795,
      "node_id": "IC_kwDOABII585HAtCL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191366795",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T11:25:21Z",
      "updated_at": "2022-07-21T11:25:21Z",
      "author_association": "MEMBER",
      "body": "`135ca49e24...11ac578f91`: use `MutexType` instead of `M` in templates because `MutexType` is already used elsewhere in `sync.h`",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1191366795",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "reviewed",
      "id": 1117913698,
      "node_id": "PRR_kwDOABII585CogJi",
      "url": null,
      "actor": null,
      "commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I'm still Approach NACK on this. :(",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1117913698",
      "submitted_at": "2022-09-28T17:07:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "referenced",
      "id": 7558068169,
      "node_id": "REFE_lADOABII585L6FX5zwAAAAHCfvfJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7558068169",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2e77dff7449af6b46b284c75ce6e1d53a134bc8e",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/2e77dff7449af6b46b284c75ce6e1d53a134bc8e",
      "created_at": "2022-10-11T01:19:09Z"
    },
    {
      "event": "labeled",
      "id": 7558439948,
      "node_id": "LE_lADOABII585L6FX5zwAAAAHChKQM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7558439948",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-11T03:08:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7570192028,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHDN_ac",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7570192028",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T09:49:37Z"
    },
    {
      "event": "commented",
      "id": 1275894327,
      "node_id": "IC_kwDOABII585MDJo3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1275894327",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T09:50:22Z",
      "updated_at": "2022-10-12T09:50:22Z",
      "author_association": "MEMBER",
      "body": "`11ac578f91...70dac32e76`: rebase due to conflicts + update as per the discussion in https://github.com/bitcoin/bitcoin/pull/25390#discussion_r978269158\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1275894327",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "renamed",
      "id": 7570297133,
      "node_id": "RTE_lADOABII585L6FX5zwAAAAHDOZEt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7570297133",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T10:02:28Z",
      "rename": {
        "from": "sync: introduce a thread-safe smart container and use it to remove a bunch of \"GlobalMutex\"es",
        "to": "sync: introduce a thread-safe generic container and use it to remove a bunch of \"GlobalMutex\"es"
      }
    },
    {
      "event": "unlabeled",
      "id": 7570612879,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAHDPmKP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7570612879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T10:43:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1145740612,
      "node_id": "PRR_kwDOABII585ESp1E",
      "url": null,
      "actor": null,
      "commit_id": "70dac32e76dc87d87d0d23f2da0ff5532d5bf040",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK\r\n\r\nDon't think the bool-array to unordered_set makes much sense, otherwise looks good.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1145740612",
      "submitted_at": "2022-10-19T08:05:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "referenced",
      "id": 7648533848,
      "node_id": "REFE_lADOABII585L6FX5zwAAAAHH411Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7648533848",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5984166da695ad241a3affb56e8e8a5f71fb1108",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/5984166da695ad241a3affb56e8e8a5f71fb1108",
      "created_at": "2022-10-23T15:26:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7723201388,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHMVrNs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7723201388",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T13:08:09Z"
    },
    {
      "event": "commented",
      "id": 1300379783,
      "node_id": "IC_kwDOABII585NgjiH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300379783",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T13:08:29Z",
      "updated_at": "2022-11-02T13:08:29Z",
      "author_association": "MEMBER",
      "body": "`70dac32e76...c3e4c34219`: rebase and address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1300379783",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7762587818,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHOr7Cq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7762587818",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T13:07:52Z"
    },
    {
      "event": "commented",
      "id": 1307191594,
      "node_id": "IC_kwDOABII585N6ikq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1307191594",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T13:08:42Z",
      "updated_at": "2022-11-08T13:08:42Z",
      "author_association": "MEMBER",
      "body": "`c3e4c34219...0f457d2bdd`: rebase and go back to a single macro `SYNCED_LOCK()` with 2 arguments.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1307191594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7764694659,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHOz9aD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7764694659",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T16:33:53Z"
    },
    {
      "event": "commented",
      "id": 1307499020,
      "node_id": "IC_kwDOABII585N7toM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1307499020",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T16:34:10Z",
      "updated_at": "2022-11-08T16:34:10Z",
      "author_association": "MEMBER",
      "body": "`0f457d2bdd...6c0bcd0928`: update comment",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1307499020",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7792646438,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHQelkm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7792646438",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-11T14:40:55Z"
    },
    {
      "event": "commented",
      "id": 1311779599,
      "node_id": "IC_kwDOABII585OMCsP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1311779599",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-11T14:45:52Z",
      "updated_at": "2022-11-11T14:45:52Z",
      "author_association": "MEMBER",
      "body": "`6c0bcd0928...f8f7e62f81`: don't change the type of the variable that holds the list of reachable networks (an array of `bool`s), see https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998202653",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1311779599",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "labeled",
      "id": 8391634226,
      "node_id": "LE_lADOABII585L6FX5zwAAAAH0Li0y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8391634226",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T19:15:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8411365291,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAH1Wz-r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8411365291",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:02:45Z"
    },
    {
      "event": "commented",
      "id": 1412208407,
      "node_id": "IC_kwDOABII585ULJcX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412208407",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:04:14Z",
      "updated_at": "2023-02-01T15:04:14Z",
      "author_association": "MEMBER",
      "body": "`f8f7e62f81...3db109e794`: rebase due to conflicts\r\n\r\n@ajtowns, I think I addressed all your suggestions?",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1412208407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "mentioned",
      "id": 8411383294,
      "node_id": "MEE_lADOABII585L6FX5zwAAAAH1W4X-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8411383294",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:04:15Z"
    },
    {
      "event": "subscribed",
      "id": 8411383316,
      "node_id": "SE_lADOABII585L6FX5zwAAAAH1W4YU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8411383316",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:04:15Z"
    },
    {
      "event": "unlabeled",
      "id": 8412022687,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAH1ZUef",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8412022687",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T16:02:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8550190113,
      "node_id": "LE_lADOABII585L6FX5zwAAAAH9oYwh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8550190113",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T19:16:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8602239815,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAIAu8NH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8602239815",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-24T14:09:08Z"
    },
    {
      "event": "commented",
      "id": 1443734529,
      "node_id": "IC_kwDOABII585WDaQB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1443734529",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-24T14:09:44Z",
      "updated_at": "2023-02-24T14:09:44Z",
      "author_association": "MEMBER",
      "body": "`3db109e794...e42ce20c65`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1443734529",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unlabeled",
      "id": 8602857508,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAIAxTAk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8602857508",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-24T15:07:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8913432756,
      "node_id": "LE_lADOABII585L6FX5zwAAAAITSDC0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8913432756",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-03T14:05:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM3M2RmNjFiYzU2YjFmYjc0YTg2MjNlNGQ1YWE5YmI3MTU4OGQ0ZmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/373df61bc56b1fb74a8623e4d5aa9bb71588d4ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/373df61bc56b1fb74a8623e4d5aa9bb71588d4ff",
      "tree": {
        "sha": "7efae0f958b3ca4b1068f9218ca1e70958edb980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7efae0f958b3ca4b1068f9218ca1e70958edb980"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7efae0f958b3ca4b1068f9218ca1e70958edb980\nparent db720b5a703c90625fa7a4773bd2db5672427cbe\nauthor Vasil Dimov <vd@FreeBSD.org> 1655310458 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680882228 +0200\n\nsync: introduce a thread safe generic container\n\nIt can contain anything, encapsulates a mutex to synchronize access to\nit and enfoces access through it.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwOjUACgkQVN8G9ktV\ny79+kx/+Lt5EADiYSt+qa4vrZps/nwKYX1P4xgdvh/tagq+b28+FH4rvELzdft2S\nSSPd13y0/5gk+7AgduLUyED1EcDssNtDYkCRkGd71FAekWBSTsCJbK6AQ5l87Q9L\nZcgpnHIKzzd9UECQH2Ug+2z9f05dj71B4GdGPWwO8bkEn2mIlvnC7PR+x3O0pCgG\nRWylWokmNs7av4+HS+rhExFguQKdcHO8Jpx2TDT31MurPW4WNlmXgBWQEP2sYvez\ng04PxCG9QCosMThFeR7TWGd8pS/+5uyzfTt8EDL3lvzGcLt1tweLwOu/x3HXA3uL\nbJvXeQ6ODraaqfs3QhMv122YD5ocsw34iDwzfM0lohF5uu14c0hyIVlSITTcFosC\nsToaryH8KKceUSoHBqN6w75BJooV3b7KxH8KiFmGPtNk6kBGESIdusIOX3qOdxaK\nrZk5QP4VwFu5TlBzwRHPdbJDnmtKVO8G5tT+XR6egquODA07mKNBJc23603N1l4N\nAsua3Y0zNM9IIlbeUck5qtHws7p4wKNq+SJe3S0YTq8j7Lvun3y/tZWw4EivoBkC\nIXegDTbUKE/5Anew0qVYxL3PoTkTE5OxMTYuDi33BiBCtl+of33DRhl03xISSxen\n8u3TrseT69Uad5skLvjKbwaareu7IAaNKbLDEQWrtGxkhC6hzzSotnkzi2CfeSLZ\ncNXkx6qunlP9F2hu0I7AmSaS5lERAjISLJ3H8pMoQ5aFJQhVcyx5i/26nZBHQWtC\n5eBf7Cyg8EgVf6Op2Nlivw7c4b6KkTmu5pmzIW4tHFkimAgdBkXJRiMjpSqFco+i\n0nHZ98/tLCkxzlVJQjrPB9lDA0+hqTFfJ/RQ3V0x7VMUA8b8xvE3YktZTRjFLMgl\n54cCOyRm3/QL97coT4XLZq+3Utqqaq8GaLZ+vDuPOhxDDlqzHnV2nGxwBuNy748z\nd1uYP6SwXit3EcCVxWP/B6GeHjLlAo798JcbccKmF3D/w0ug1L++ZWS5jtIPcy4f\n8MpFUGYTUPPttf+ZXAqABYrysFpf9HZkxqIM9rXm6fjTbldHcWFs4NR+8l+pLtgl\nZH5cBXponwSF6TdADdxMS5Kt0qHrFPydoPjvXqwE0XhhHYXOx6QNr/InmCrW+p71\nTJ6E+fKM0KfWeTri5b0+Go2SZLa2RRUp2/eluTrSBQCTIsWPkCMbhBqAz2MvM8cO\nTlJFTijeQS6AHNbdfYaPBuX+0jFPeklwaG4Je5Etmc9OsF5PHiIBBlmI6vXxcztO\nN137FjLwTv8UAwOTL1WoqTlep344t50x3tHGEF96/dKGUVS50/xB/5cXLRoTcSmL\nujpxw0HNCv9B+4tw8Egr9j7Q7yjM/g==\n=N5/h\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db720b5a703c90625fa7a4773bd2db5672427cbe",
          "sha": "db720b5a703c90625fa7a4773bd2db5672427cbe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/db720b5a703c90625fa7a4773bd2db5672427cbe"
        }
      ],
      "message": "sync: introduce a thread safe generic container\n\nIt can contain anything, encapsulates a mutex to synchronize access to\nit and enfoces access through it.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T15:43:48Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-15T16:27:38Z"
      },
      "sha": "373df61bc56b1fb74a8623e4d5aa9bb71588d4ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNjOTVlMzRkYmVmYmZlMGRlMGZhNWE1YTllZGM2NjE1M2M3YzgyZmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc95e34dbefbfe0de0fa5a5a9edc66153c7c82ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc95e34dbefbfe0de0fa5a5a9edc66153c7c82ff",
      "tree": {
        "sha": "0b2351e5db5ada5a89e00555782f8e6f94c41d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b2351e5db5ada5a89e00555782f8e6f94c41d41"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0b2351e5db5ada5a89e00555782f8e6f94c41d41\nparent 373df61bc56b1fb74a8623e4d5aa9bb71588d4ff\nauthor Vasil Dimov <vd@FreeBSD.org> 1655311045 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680882281 +0200\n\nnet: detach vfLimited from g_maplocalhost_mutex\n\n`g_maplocalhost_mutex` also protects `mapLocalHost`, however it is not\nrelated to `vfLimited` and both need not be protected by the same mutex.\n\nThus, use `Synced<T>` for `vfLimited` and rename it to\n`g_unreachable_networks`.\n\nThis reduces the scope of the global mutex `g_maplocalhost_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwOm0ACgkQVN8G9ktV\ny78Xlx//bOoXlcPq2u6UVhvpZoKUsFTliBC2iE4b+RxP2cRbHdTK42hlmy/lKLDx\nLSXmqjSfaBI/+KU1Lq6aGmLEKzVxpa2xewu/LL6VR8ev133YCYz8CrlL2KBLIzL0\nn0Izja+soC4jsHlVxuwvdrHZ84iHCAkqPLnXIT9seyQ/03UD0Af6z6o3eLmCIjRo\nJxzEvMDB223BMQ8qmnTtJErixjryVGjlL/kgnjAN4SJxtOw7YKZEoBfRMFiBVTUM\nYyifzgPVo0nf6jP34Ox2ZNf1ci+HJSkrgiO1DWTHSnP+FLvIY+IaHvrZERZkHyCu\n92HOaZUi9GX0WsxLERxrwpw7tO87j182eJCX/scQz+lfyZJwFmtSzZe8kSxnvFJH\nnwbVucnKZoWG8d8uHONyowGDpyRuCB9uBAoZdKeeaAjc8QHA7pv69IXB8NSB3qYY\nLILClDNvl93saR5WDjIyZXnqbejhpMOzK2BbN1hDw7wgMy76YWzjhvndxTJ2Fx22\nTmHop4mZelWrRjU7cSAe86qJD/V1njL+q/PSWBJOWkKX+6qv9Xhm1+XvjoRMJBdk\ntHdTFLvJXWj3AnikDFq4TABlpP7DufbEN288UnUOsWk1Tl//roiPNSQiudkN+p2S\nT9wTUdrLut9wibDdzaOdZJ1S0sstYxM2prJJO2TK9EciQQpVdCwzNVq+KXX/orFc\nI3qHb+fxbNq5wenlikWIDmyVXOs04x0Y1Z82kPQ9pSUaIB5xaR0d9pTnh1PJZJWU\nSM4w7Q4oTmCiSCcuPrYMHBvxrN/z8WKKouT0iB+o/3wZGui2/nWB7V5hW2TReQ/2\n/x8bqjnCUUCOJPUmT7oV0+YWvEtkOXAEavjEqdAFccpoysVvjT8bX/Plf25dCPak\njG819/PyrDwQ0yJhP7um7kxXKhDqaKCG1DpsJMP2oAq0DKN20CM1Qjr6aI7cBJ+T\ng2ai7PGoZV6UUzDhUhZystWyU2obPqe6dtbnOaRrl3gAmiIZK6akSnL9W2wxMzaE\n8jO7hzgs7G6ueBlQocMqqVG/YiIKokbplyC0fN3hA0TQB8r4SahjqbBReqrrDbgt\nzsI6HM2WbGgvUMw58afm19y0n6aM9mB6uAVUkHM11lqhT67PI4lu4uC4X/1SPLX3\nu+SlKMVWhihtpkDME6qJrbiSdrVLkwbtCZaA/3YIkX/EbqaAg5Qi+JsSeZ6SG8Vg\ng7NzR5yPpcq4C2FT6ChrqA2xynLxm0pY0N82QG7DwnO3MFSYu8jF0MFcBt8l0hzc\nHcgDGROYlYkLnXA0DpHT5h6+5vJtyAFAgnmrz+93ew3eku4rbrhOcp7IyKXXJDo4\nhFWIdskFDIaQXaSiFKg0tuboSo0CMQ==\n=WC20\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/373df61bc56b1fb74a8623e4d5aa9bb71588d4ff",
          "sha": "373df61bc56b1fb74a8623e4d5aa9bb71588d4ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/373df61bc56b1fb74a8623e4d5aa9bb71588d4ff"
        }
      ],
      "message": "net: detach vfLimited from g_maplocalhost_mutex\n\n`g_maplocalhost_mutex` also protects `mapLocalHost`, however it is not\nrelated to `vfLimited` and both need not be protected by the same mutex.\n\nThus, use `Synced<T>` for `vfLimited` and rename it to\n`g_unreachable_networks`.\n\nThis reduces the scope of the global mutex `g_maplocalhost_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T15:44:41Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-15T16:37:25Z"
      },
      "sha": "cc95e34dbefbfe0de0fa5a5a9edc66153c7c82ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRlMTNkNjE1OTNlZGFmNmJmMzhiZWQ1N2ZiZDk3MjVlZWY4OGU1MWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de13d61593edaf6bf38bed57fbd9725eef88e51c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/de13d61593edaf6bf38bed57fbd9725eef88e51c",
      "tree": {
        "sha": "438871570044506f9bcb9c09d49684fd24b5fd2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/438871570044506f9bcb9c09d49684fd24b5fd2a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 438871570044506f9bcb9c09d49684fd24b5fd2a\nparent cc95e34dbefbfe0de0fa5a5a9edc66153c7c82ff\nauthor Vasil Dimov <vd@FreeBSD.org> 1656494852 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680882285 +0200\n\nscripted-diff: rename mapLocalHost to g_my_net_addr\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/mapLocalHost/g_my_net_addr/g' $(git grep -l mapLocalHost)\n-END VERIFY SCRIPT-\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwOm0ACgkQVN8G9ktV\ny7+XbB/+LEJuzMOf0NfoGHlrqIFItHXt60Gc/6izAIYJvjw8SYbRFJEySr4Itl/R\naymCz5jNXX+rQSwspr3YIbUY0xPGJG0sHfbrmtlQPNs2i/fJDdBEpV2exmZKDpR+\nz9ZSLic7b1Kt9f/YN46qazrwAl6crJkFoh38Nj2z84URgWnFbREPHRXYGmAbjuYO\niBnaNUTBM2gAOYNO3m9EmWPhgr8c/6NLVZsK05VcCX2hGM+cYPGkpSUsTX8TUiox\n5DlTWireXv1607lcX19oGz/IJUNjk9uxrxk8oDIBhGuYHqJFAbc3/7hMzWNyjy4o\nGSREQS1xA2jmlrkX205AmD27qBlc4Ifw5qdnyD+yK9O5cLEdPKE7F1ruGVc9zREc\nxESOpPZpEcoRICgxEIcxywqrLDDLItrOScJ8de3AeFPYQPr1xCcnbse8WnrBXxXy\nE9FBAvgRI1UOdHP0+G9BDafzjOyflOt/Jfval/RQENx6LX+9LbCh2+9RKY1Q17oq\nPKJXfDNRy16P4kCEJv0qbx589Ivc8X7HwG6e+uRIuMg98Udkj2NnsrTZekv8MBgm\nr2ziVcfTfhlGNQH8S88gW+uHD/Eu3vApFRv/4vWfX8x18pfjYg/qJPC5QozC0rmD\npHP2ZOMMM30tIAltvbXN5basYYNQfOVqySWgTtpeYCoQet8umJSG7NyP50WhkN1n\nariW8eaFxMXr0zWhFQxltFNfnalw6R6sNwhsGx08hod1qtmCYxjBKzWdCYRIxwXq\nBnw1uFguvAiz4vPAC7Jwp/up6RgucSifyBPzvtWMVzUtvU91b9OTN4DyrZyL4exo\nYZnDeep+I4Vl7slXcV0ccxEokYikGGnuU+JVw0fPWMjiGdie4HgljKsy0la+0N+H\nyfQ1xgxPfFhnq0Du/Qn3MEWsvpeTvOaVt4q4Xv6hKzzwexYoX/RmhDflB0pbSKuI\nHbEtpBqwjdNmjQ6JQ6ZSzbDp+2RYDacFraUr/ei0vqkCXoQt3Z3P1Py/DF5RubVa\nGYCjox8UDTOBfLT+r/eledOLqsfrGLvlgR0wHHIEWpsTK0OdGCyW6qCh8c+WRBdQ\nhhvH21fxl5bb3PFi/m1lGXYXnOM1lnqZQVwXag9+2D8B7GmUktyYxk67mw+4J94R\nTb+9frF/+nWeKHZX+W5wO9px5c1zGDaUbXSMJiXTctXL8T34aIoYocLvoroeoU3p\nTMk4VxQBBeXJ4JAwvVWSATmRy42e08JJ9KRiM1lh4RtNNz2Ffe3hHyR1a376Eh0y\neKps3HtIiM3Drmb4HoHRftujl1xK31CXZDoFjxn+yQYRNCSHSxmYPvXErGplhWew\nXJLY0H95HfsKEOuXBhoZiPDRKXbWOg==\n=wuvQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc95e34dbefbfe0de0fa5a5a9edc66153c7c82ff",
          "sha": "cc95e34dbefbfe0de0fa5a5a9edc66153c7c82ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cc95e34dbefbfe0de0fa5a5a9edc66153c7c82ff"
        }
      ],
      "message": "scripted-diff: rename mapLocalHost to g_my_net_addr\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/mapLocalHost/g_my_net_addr/g' $(git grep -l mapLocalHost)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T15:44:45Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-29T09:27:32Z"
      },
      "sha": "de13d61593edaf6bf38bed57fbd9725eef88e51c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE0OTkwNzMxOGZmZjZkMjkxNTUzNzg1NWVkN2U3M2IwNTc5Y2Q3ZGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49907318fff6d2915537855ed7e73b0579cd7da",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a49907318fff6d2915537855ed7e73b0579cd7da",
      "tree": {
        "sha": "43f18ac7aac1e9c90358fb436c7a856ae60f9769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43f18ac7aac1e9c90358fb436c7a856ae60f9769"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 43f18ac7aac1e9c90358fb436c7a856ae60f9769\nparent de13d61593edaf6bf38bed57fbd9725eef88e51c\nauthor Vasil Dimov <vd@FreeBSD.org> 1655367186 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680882285 +0200\n\nnet: use Synced<T> for g_my_net_addr and remove g_maplocalhost_mutex\n\nConvert `g_my_net_addr` to use `Synced<T>` and ditch the global mutex\n`g_maplocalhost_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwOm4ACgkQVN8G9ktV\ny78JiR//YKea2F9qauguQPQ5V6kxutpsMrWvRB3sokixCkOCitOvw9LzftcDhK2n\nvJ1xj9rlDbZ+5O115olcWPj9hGCd5A5+h/4CGhgxc0BeOlsgb7LRTVMsgxQMb1BA\nH1Jld5e52WJ8W3uxnarCNZUpsSU7T9Ykv80G0c9pp7b1gWYZ63WWNmRv4iwyS8c8\nsdTqE3Y3Go9qTUYipToJGAQClkT/AlQLYKJu7tbKWdhOLAnFQX7x/lQ+HZLIWBxH\nlWqxknLzQPbuiDn6ImBbke9xJjR3XLsYabv+Cvr/w6mIe8ct3XfVmUebVqIAax73\nveUZg3x/yrDkuRuzDbZazA4U1LHTY18rFpYvkIvQg6RiRndmmPUGyLT/3WGQldFK\ndHlRImQgdsXEkQA9aDYCaDp7t8vk4zpaBicEbBdvnZ9Vk1eoGHDDbi2OLjr4gDub\nqfBXwsez5u2ELJmh7PvDJ289ErX1WK4cpIcqnsQJlW4dqqXxCy6EGj0NJqz4TunP\nx3GRUGhoeq0HGPj2Z6oYg0gApUW20Vq76YEn/m5xMuPI6Htgdh0uCW5wKMuLYCXY\nFjLf4LfuJAmatrlPYwRuLVtcvzD2QhYK5aKFTTgqgerA0qpFPRTvcymMzgk1H+IM\nTHPwyfhznP2Htr9d2t5J8koBGuOAN7NTeh2ziEuVjdeNUz9lUHrgLfb8UHGrJjRw\nSsaMwLmS4NkaeIZS8uVOj6htjt7+M2VsP9GToI/rIAPjW2U0xGmKjXr+H9sDhRBR\nOPungwB+8eCezSghg1BXo25tpY1sxe5iUACStBGlAWE/ANiU/60nBtqrXLgDLVXq\nEgwqZp9ZFm51OjdkExqzSTpbZkSTHsQqZhR4Kvda6Dn9+R3SXqpjGYNWrot9Sgax\np6dqkK9kW2k5R2w43cY8TGVqlaOaRVZ7IPCFf+ESJ5NjC073TJKu9FmCrlo84RY0\nK03fF14AAY/w1Gw36pSfoq/rMrVLr2+Prtkc36j9wdDM38dRrR2nBAeN/mXvpNc3\nLPKdtn9EUkKs4qiQg2Er1kcgUeK6BY6K1NQ1+zZoaA6TI4tzMv7gIsOOWzq4K9fo\ndphSSsUoKUNRDk6CTBJkee5E5iqF44vqY5+ujyT1uL4myCXRd3G8AGAauK0dlqWM\nR9eWBZZDfI84NZBXmJ4FTThbZhzrjWr37CpVgG736yZeUeGBC0FTNqiw4PCierc0\ng2urOBfU+2vr2qqWgelLTeLhQ56RUluoVUiEPHY91aBxoGcHmmcQzd2+GG+hNdeV\nbbVBVNpspu2Scp1jYOYJu4jxQ0wjJxu75F/kJl3cbs8QPENer0Ey5dCeyvPc5xob\nbVE4eDsXkY+HALn5wHgoDCIP9oF1Tg==\n=0M27\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de13d61593edaf6bf38bed57fbd9725eef88e51c",
          "sha": "de13d61593edaf6bf38bed57fbd9725eef88e51c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/de13d61593edaf6bf38bed57fbd9725eef88e51c"
        }
      ],
      "message": "net: use Synced<T> for g_my_net_addr and remove g_maplocalhost_mutex\n\nConvert `g_my_net_addr` to use `Synced<T>` and ditch the global mutex\n`g_maplocalhost_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T15:44:45Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-16T08:13:06Z"
      },
      "sha": "a49907318fff6d2915537855ed7e73b0579cd7da"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJjMDc4Nzg0MzFkMzk0NjI5MzE2OGJhNzY1NTUyODA2MTExNzgyMjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c07878431d3946293168ba76555280611178220",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2c07878431d3946293168ba76555280611178220",
      "tree": {
        "sha": "7732aade0549f03e7c17d86483edfcd1454c557f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7732aade0549f03e7c17d86483edfcd1454c557f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7732aade0549f03e7c17d86483edfcd1454c557f\nparent a49907318fff6d2915537855ed7e73b0579cd7da\nauthor Vasil Dimov <vd@FreeBSD.org> 1656334725 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680882286 +0200\n\nscripted-diff: rename deadlineTimers to g_deadline_timers\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/deadlineTimers/g_deadline_timers/g' $(git grep -l deadlineTimers)\n-END VERIFY SCRIPT-\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwOm4ACgkQVN8G9ktV\ny79Frx//c7hRrIFQSL0jh5xw+hf3vJgItNFsqCc4GIfK0NKZGpn9L5iaKyfZCIqN\n7RRHAa9Lt5b6LEs7c+LPU98RJthLSy0Bt2tyGs/Zn+n0n7h+oxTRb9VoleoiRyK5\nKZZCUT6DMI32tfXRVKhbT7V9ndpByTGIZOJoNkfrJv0lUGTxO5TgctJ3cG/tEA0y\nvLAQ6I7vnA99DaEh1bQpNaQ6BWSXWimfH1/1bIM4RV2QM055cLBDHsX8+ik78jv1\ndKny6mvDCDm7DYhE6M74/cUDGSzUtx1Iian/PlLpHivZ2K+9DKTSXlUWG50pzc+N\nOO6OOTjwe58MD8DblBQ3HapjYMBpvHiZo6W1DQ9TZq+F08ku7pV6scdJyO7hS9tM\nOGoz9GqgsvVdM7ckfLWFBsfZgw2W2XdP1xZagbDuLlIOrHQcJG4acU6dErDYzNOt\nQ43qndevVO4y95dsfPeMVll9j7M5jDPEM+P3crKc9cevTmvi9j+HpiMPotl+i6K8\n0/NO6IPgwhpI5yIg7pSMhTeQzSdgxt1flFVyiQQMyhhb7qALblj2tFZ5ac5BFRDp\nHgOU31D2L2F/cAm5UCVvdo5u+xUyo+BMgZ4WK+XTSK50HfaKlzQPgC8ksjqlCgkw\nKhizhXdUS97qr/+zRpbZ1NJgUT2zcoKJqc2CUDsCvy4TB1lvUtbcrMvMzUsCJsmL\n8sKXRPBUu3fq6/IQRWxgeKRf/D76quOuII6kdyAFxxH8Jg45ZZM8Do+31+Va5ppV\n3BhReTJRLW+Mj6j4BinkVa/xZEy263KUPcgljcKRRZZOm41z3QgUQVD+TaAyQpnU\ny3IP+uc4odnmtDkIjY0sO0+NOfKbsiKo3TYUof7lOs8+EDAEwt1x3P2a9RL1sJqj\nwgX7iqC/hzIYHYu1bsMB3i0TnpRZmMj0QueNWhb1GU2HwwWVDZls6Y9TifRHMGtv\nyPC9gs+f04qUiagMGWDeOa6R4aeCmC8TlyUkCxGDS0W/BCYqVhXkAQ5vG5B41vtw\nTEyEyw1yGipJ8lzZdHQO10P/Sd3Z1ltwtiTUcxTiIyBkNxgZSXA5PAfp0N6uz1na\nGJExzDIwk9XAofi4Wm0MG1icRfexeKk4TSq4VMlD1nf1a1oKqtbS57MDAYsJEl75\nzIS5BmXVBuu0b8PoSsFtuW90yWcYuKI4MZFKYu8dN8vbfojPDNQSDz54dLBisBqX\nkwd9vBrMDd4me8rcDfs6coqNw3cQN2n1DRnokUPsxp70hnqCZZJqoj+sJAkzJiFZ\noE2ywsI9TwSX0IzxtMr0n7uVz9AKXnz2r4ACVL23riG5Gva17Nvmk6xLrKVIPG/+\nrRI3BG2IzxJz+CxEFGtIR+fB8zWTPA==\n=i4f/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49907318fff6d2915537855ed7e73b0579cd7da",
          "sha": "a49907318fff6d2915537855ed7e73b0579cd7da",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a49907318fff6d2915537855ed7e73b0579cd7da"
        }
      ],
      "message": "scripted-diff: rename deadlineTimers to g_deadline_timers\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/deadlineTimers/g_deadline_timers/g' $(git grep -l deadlineTimers)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T15:44:46Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T12:58:45Z"
      },
      "sha": "2c07878431d3946293168ba76555280611178220"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFmYTA0YTFkYjBkNzlmNzJhYTJiMDc2NTk0YjYyMmU5NDU1Nzc5MmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fa04a1db0d79f72aa2b076594b622e94557792b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa04a1db0d79f72aa2b076594b622e94557792b",
      "tree": {
        "sha": "c1b7062981c0413d59f1a5cc4663623251c3761b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1b7062981c0413d59f1a5cc4663623251c3761b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c1b7062981c0413d59f1a5cc4663623251c3761b\nparent 2c07878431d3946293168ba76555280611178220\nauthor Vasil Dimov <vd@FreeBSD.org> 1656334971 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680882287 +0200\n\nrpc: use Synced<T> for g_deadline_timers and remove g_deadline_timers_mutex\n\nConvert `g_deadline_timers` to use `Synced<T>` and ditch the global mutex\n`g_deadline_timers_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwOm8ACgkQVN8G9ktV\ny7/tXSAAmQKwhXFlFDY8vVR46BneSEzAKc6yXPnkquE5SPoHdJIFQgB756SkBazP\nyt6NzDrlzSwT4RGn/vT87oayMnd/GnHSYGqOYEbYYSQnt+54Vcg/k73gljKLbrKh\nfvbKGuO82PNC+4ugKPyeGQrDi2rTGxgTG/uQelOvI4BEFrFEaP8vyqO2SUzSVazm\nitST0awlrQhAwjx9cRmBfLLbiQokdAQ4Qw9tvaz/Lbd0AFWcBeEHwvGKfiQHlH6S\n4UZIsFHrcxHhd1zAze9oLO1t17pjKC6rpVuonK0PDCd/XJWHnN+O/HCw5rgPGx1t\ndxF4iiwoPtUyE42thia8cG5y8VbPNm5oLs93mw/UHmWcLMFUl1caxUcWAd1xYV/+\neW9acy77YzWBQkwb2KhUqnm9R+M2RIUKlwX5EfEqbygHzrvhgK+eNps/ZmXhk6NX\nt4wOvQg6OMOZrqwkTqXlOoSCs6+JbHZZmZ8Mpp6FDu4JkTMKdF6fek/HZ+/lDZSs\nd20RY/lw/OsaeEF3tsUoHNMP37LYasbLaadTbq6EFcwgk2MFdXzE6MOcSCiqAyXm\nRQgReFYvWDIQ1T45wnFB8FomBKbOngDypmOsex0AUb67AXnmaC6sU4Ze1q0vn9Ar\nV60SxBeUHrQ/TwVL1VZvw3APgvuL/bs0DnG7fmuF6KsIDZ37RL1y3rN9SQk872NW\n+ftj3x5VnuA64YdavEBsPohB3agOZaGMIWns2vDDyebEg4xE4IWF2eOWPV4pd8op\nNFnaBZ97eia0f+yNNvDSFCUapIcCSGvTJHvR60mXO9UV1hP6Ezd8ymCYORf5pYAx\nQ3e8oSt1ohHLTZrmM6qqF3YDJAqHAWg6ElMGyw2G2YvT68+sw0TrGVIeYKTp7cTw\nkDLBXE8ndm2HnWvhkfVC+IXUcM3Bio4hcMuwv8nnfrHuUZMYsEs1LJz0G2n5g4JO\nWbGOY/JPIkgIo4wFWNcdUg0tw/E+hMankdWTEutfanZdS+xQKPktpo+phS/IX/jH\nmtF9Uh/RGA+bWBg8x3xZ2ZqGmC4gUyA3dXcMF/k+zeSBEsXo05mqIn5jJQU0WGGM\n9hjIbYxnkwoW5PNbePwEMkN8dI9HMcrp0YUR40if87rMjFiKp5AFrM78TkH5lOze\n34ZgGuxmP/SINO/qctbHqxiODtF4EPUD191CByiG/CfkXPHwWVFq8Zr6jp5Dnopm\neFGQE3qCyZ2niAXq7Dx8+Tkaftm2XpEwUQsYwvs00OPmOU/bsrrI96BxzAjeDFEi\nM8PFfyHs2wmY7j7ra8TLCrjSPnWHzEQu7biZQcChYbmj/1rlu94bBb+oJlm1hzZG\n/ShnZCE9SEykE61znDPdmVR2VpMMEQ==\n=yVp9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c07878431d3946293168ba76555280611178220",
          "sha": "2c07878431d3946293168ba76555280611178220",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2c07878431d3946293168ba76555280611178220"
        }
      ],
      "message": "rpc: use Synced<T> for g_deadline_timers and remove g_deadline_timers_mutex\n\nConvert `g_deadline_timers` to use `Synced<T>` and ditch the global mutex\n`g_deadline_timers_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T15:44:47Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:02:51Z"
      },
      "sha": "1fa04a1db0d79f72aa2b076594b622e94557792b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhhNTRkNmI3MGE0ZGFmMGY4ODY3NDM5OTQ4NDZiZGM4N2Y3MmM4NDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a54d6b70a4daf0f886743994846bdc87f72c848",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8a54d6b70a4daf0f886743994846bdc87f72c848",
      "tree": {
        "sha": "a30713dcd6883ab54213f8dfdd5c6e579f23d062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a30713dcd6883ab54213f8dfdd5c6e579f23d062"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a30713dcd6883ab54213f8dfdd5c6e579f23d062\nparent 1fa04a1db0d79f72aa2b076594b622e94557792b\nauthor Vasil Dimov <vd@FreeBSD.org> 1656335931 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680882823 +0200\n\nscripted-diff: rename dir_locks to g_dir_locks\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/\\<dir_locks\\>/g_dir_locks/g' $(git grep -l dir_locks)\n-END VERIFY SCRIPT-\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwPIwACgkQVN8G9ktV\ny78ssB//R8mIQgrdIyYjGY4uZZL4j3IWPbOZCyInYRESA1PF4N4uYoNhCldNVMLN\nY0iKJdlUliDJWcvpUGXV6/TIjSoltjw4PAjc5bVtN2EvSmfI4FMlE/pKcPl3udLy\nwvL0SpoVadycBjsMGJ8TvXZi+wg4x2Sl0Z+/rNpwKYTlQFcZMfPpuadvIYeXs3eU\nHONR7a0qDRGQfCnljVLJzS44XSeP7xt1C8DDRYt45UAOL4Hb3CjpnbbUhD0UKFzX\nVFWjEEXS6hlZoQkKAhPzC/ZzBSzx6umS+r5sNcYrdEqX5Fk1EKuj937I9Mxx4KfU\nfz0AQ0Z6viM4Movf34vnRxY7lqYw0o9XhzCAzFD7fvZoYSTbJ0DEcNsGv4Og0uRY\nCLHDd0QZrGvlDFdCyFPqZ/cJ1lBeklNJdbd0bSAMRX+xe+TORgB8DiAhiqtIuJO2\nRjBCKf889JKbFWlPiCEMzk4/LnDGSBLpl2J5+IZR9Kckqh9IxPeawFI/5hHtRbES\nbIzxH9EOvpnAL/qwZsFuCALeRyAcDIXZOGEYGkw3jafT2SQaxQ2csalTrC2EMlSZ\nnAgfF7JKXtx6r05oS9Xf90Qs8dF7TubFAu+xyFP5QtXviALVHOjH2iDO5rSKiWIW\n/zAGrb4TmKLTzCRQACk+Lp3T6xUu04yU/uMDcgRstKEly1qDW8aQY5f6YTgieo0+\nfQjYf056wX7c9rTbQHuiCUDMejz3Z8VlW6AaumUEcrK1M/riCckA4ahiuOPwdjnw\n4hAof/8G2C3urRjKssht9aReMlNfbYHe5B0X0MTeKtrZizu+Ym5XgYX999XDXfl1\nMdpLZJ77Z0mF1HAjNLjBZjb0uXOWAf50LowO9IxpZvAc8YhwGbgmyj1oybU6o+c1\nsiVtP04euAQMqNLhGC+sxk/c2XlyVZBIgHiV3Hds4URPjQlkDaJaVd3aJDBzCRoo\n42LqOglhjEWgBEpNn/aW0qttmbM7K/Rs/+2SlIk6opWW6b7UPrrbXXWUUZ4Culjt\nSQAHfnEnEaJT5AbWBTVVnh0wxYnFTkqQuIUCRjqPyt+NliS2uumry0NDXWA9XsJu\nacaUpbTmrPXpRkASE2NrxqfrGTNCJ6zilT8FB0mLFeSECXO5fsuFeuLrGrmvrlWv\ndk+eeZvlrdFkgqRgIx64hWI6Q6bu2zksvHUfCa7WGf6HrzgAU59AbibaQAdQfm3h\nN+HrFBXvDN6q/mothNRZ1YBkRx9vFg/2cqjzMJddgwo+FaZlhFglOCQiD3IPllCu\noBsc8k2+Ekik89Uu2Mc4CB+Ax38lspoUwi0ZFfbb6c665j/T/gMcJuD2xWUrQLmC\ncGVJaoMQeljZGACjSv/viK6L9F+eVw==\n=1mnJ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fa04a1db0d79f72aa2b076594b622e94557792b",
          "sha": "1fa04a1db0d79f72aa2b076594b622e94557792b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa04a1db0d79f72aa2b076594b622e94557792b"
        }
      ],
      "message": "scripted-diff: rename dir_locks to g_dir_locks\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/\\<dir_locks\\>/g_dir_locks/g' $(git grep -l dir_locks)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T15:53:43Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:18:51Z"
      },
      "sha": "8a54d6b70a4daf0f886743994846bdc87f72c848"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEwMDE4NjUxYzMzYTk2MTllYTAwNzVmODAwNmU4M2NiMjkxZmQ4MmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10018651c33a9619ea0075f8006e83cb291fd82e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/10018651c33a9619ea0075f8006e83cb291fd82e",
      "tree": {
        "sha": "db1b25a463f8c6d61e68bbb44ecde2d9d7d77136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db1b25a463f8c6d61e68bbb44ecde2d9d7d77136"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree db1b25a463f8c6d61e68bbb44ecde2d9d7d77136\nparent 8a54d6b70a4daf0f886743994846bdc87f72c848\nauthor Vasil Dimov <vd@FreeBSD.org> 1656336083 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680883248 +0200\n\nrpc: use Synced<T> for g_dir_locks and remove cs_dir_locks\n\nConvert `g_dir_locks` to use `Synced<T>` and ditch the global mutex\n`cs_dir_locks`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwPjQACgkQVN8G9ktV\ny7/Dex/+OKcz3TDvVhavusPVw8b021G2UoTws9Relig+zzvFSgg1HgS3gmuvB3XO\nYyDoL2kdiQSb9mAiGgjNd4eoINqU+ocKOOveRxipwNjkZWxT2hAPj3KhiH4AFIbk\nZ/d8NFJRH4dEtRkBXq+ChbAk/UQlpJRh95RiLLPuvLru2xhIZvA7mTygfwdUbra4\nSf/F8SQJQ+gCvfwIALdJwWZUDYP0ArYxb+vPHEEf9iGxOhIIY1ZktMwi/toZfUaC\nxbj1K71V+tmlJ6Pz+6dpmqDKRzT4rNuSlrJBVEz0bDmFtiLDG3xnyWauvtZgx4EA\ndJOxvL+rj9d1XFYjlNzv5lsGrAI4SBR4FDuD3bszENA8KCBme7w5U/I3s18X6s14\nZbL6utZKCZBQLFz0hVIaYSR87E1tpFoahdw2YgdahTba38tSAISWbyw1z/Am3WzV\n25Tz8ts42yPHKxHc+H9qnpV0wVGWBewRTPC/GrGafWC0dVE/WrIGUEnv93yIS52g\nhKcpg4Hr/6GOkTyjvLd0rjMDa5mpNlhqG2XJ4Ju7Vr5xFO9GyQUPTBxYlo+nrDYA\nCox1wcbRs3uYDeeXcNharLUclOYjITLXhqL6nwuKFdeda7dj6xN4Wyo+YZVSfK1e\nWYe7yA4KlQpIoRXKx1JK6+wRJlShjAJnER6kYUtC+yxmJLUnVvzln6wL9ztokdhA\n6yL2iGbf4Vm6+Ak9KWPCS4jhoZT4NqjnzdW9qe3Nrwvl5UxMxp8AefPKlYt4Ld5j\nY3SBj+GbgGya5VBEpaJL+YHPLbbZXA6pUCQwdTCEHFvv2bYp5nY+MfmMEWgHYl/Z\nVbBPI+jk2cIGbyuSdMT21Xu26MxGfRA0vwnAVKqrtFy4PoTw18he5/NqDw/OIhvT\nfjmhZGJrOOkT+l/neeCqaUulhCGa/b0/+bVzfZvvEQa22koDeNZYQNffeZ0A66oZ\nRVpSfp/K+OlGj2MlNQEe0wBi2TzIRc62vZ9hUjz1+6OSGLSMHe3I8+MnitRl0dDt\ni1557YqjCWlE7t7X61wfR4gXyF55VHW5jd/UN+Bpc9a2zcv4WXQyTuW3f1in5HuF\ncUzJNHFyBVEFpwIJ1sEnY+FT6zlYFMu5pDgv669wqK2/9QH54GYRJ9z/rH7bw03r\niJqiu5w/xBBlPmDp1GSrR/lHJ9kIY3SiwSOu6uGN9iPz2p84iGHMWu2v3pu07GDS\njk2eTKBBqeVhdBRcSeddlE1x2dtbPoircqeeFddjk/SmdHT4LEy7J9gnY/UexkIk\naldRfarJu4srpjHC/8y0OQOhdQI8HNk73qoe/pVUp9I+KbocmLqtsKIw7cH8/Cer\nSXqMqcGBjrlHwxCcZFObbx/4yPg0BQ==\n=l1D5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a54d6b70a4daf0f886743994846bdc87f72c848",
          "sha": "8a54d6b70a4daf0f886743994846bdc87f72c848",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8a54d6b70a4daf0f886743994846bdc87f72c848"
        }
      ],
      "message": "rpc: use Synced<T> for g_dir_locks and remove cs_dir_locks\n\nConvert `g_dir_locks` to use `Synced<T>` and ditch the global mutex\n`cs_dir_locks`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T16:00:48Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:21:23Z"
      },
      "sha": "10018651c33a9619ea0075f8006e83cb291fd82e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRiNmUwNThhYmJjZmFmY2FlZWNiNDhlYWUyMGE0NzgzZjgyZDNjM2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b6e058abbcfafcaeecb48eae20a4783f82d3c3a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4b6e058abbcfafcaeecb48eae20a4783f82d3c3a",
      "tree": {
        "sha": "74009362879cff2d2ec2e1406603042fad7f8b22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74009362879cff2d2ec2e1406603042fad7f8b22"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 74009362879cff2d2ec2e1406603042fad7f8b22\nparent 10018651c33a9619ea0075f8006e83cb291fd82e\nauthor Vasil Dimov <vd@FreeBSD.org> 1656336877 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680883252 +0200\n\nwallet: use Synced<T> for g_loading_wallet_set and remove g_loading_wallet_mutex\n\nConvert `g_loading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_loading_wallet_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwPjQACgkQVN8G9ktV\ny7+2ah//XAP/NmvsFLoZGr/DdsEarOd/iPyqXFPovQMbonErCTxBqewfzorfDNFF\nrelk+5N38cBjBjSI4EIn7LITTr6k7GyZG2ZoICJn8kaX0jTWXnTf+lCmHhztXw2A\n8wydl5Qw+10mtmqqOJ72yfgpwCHlSqZadg2lHcIwfdVEBKfditEwzKTBqirN2MrX\nxSj4EHMmPPzdoMn+fHywb9s/LLoyAqXXcUhBq69esluwI4soogY0DFrOZGoUM+tt\n3ht1VkcLOxPtVSEo3TDV2oQKb2JxYai9BwqM9kXThszVxQOSw53XXpV5Z/QTiNrB\n5/qarKgE3MLr+UlPGIsIy/mCBFsE3lKnRlunotVXzfylDXGvVqcUAXwT6saF37fj\nIiHZvF9yXG9a6maPXEiu18NWTXxqXQLQ9OGbzc3XLwlKY3BhUiuQa8EdPxBfbnRF\n0qAEdKmMl4WdYhA3j0K4oUK88sUchRmr8OAPDb+NghMNYktT/HeuZi2NvHMxdIhQ\naO1YQu9YtzLnp6OLbYxHx0yloJDz23t8eIH3M1TdnUu/p2qvCX3Aq3UUyvszWI66\nw/BuNyxU43OFMvC3Fn8K9R4fDV2OJ7DAxvIODaVPbNTPXVJjnSRw/jZABRyH0KWN\ni9XRVGoWiG/8aEbDgkxbCXyY4tT0eRgcvYxuXjYhvRuOCLZQP6GdGG4SbfLvOZyq\n8zX+m3DMkI+phAu1U05+ql8QiJyHOWI7tzs0lRF9d4hWaynjgJQXq5q6/HhatBHN\nK6l+WMy21oKrBUh9SV6S8HZBPmj3D0RPB+DuW1LTZYwPCyJBqU41+kYlhUKNmjTN\n58XTltZxBJqYopT/WltFV9nBFegyw8Znp9ezZt1tgOtuiNCOHN/ylMaoIWcqYmXO\nhp6fsYAnh0RqxnG+ca5y0E9ix5NauL/H9zHoWkAYTAJvRv9TQW/bEHt1oGZqYMXf\n5RuI9g8iWLa+yskg4c0m5Y769q1IuCi0S1hq/JCa9+wz1gMETy0Vz46FhLCSBO4d\npvg23SAXIYrzFOwYmm6uckEABKcGLo1FlJRh9JwUjUeSlparMbJObTaigT2caCQv\nstgtyN53toVeHM16Dit5irdqtjxvR8qlekAP4SomM1FoY4+pYi0ou33+X7psUNVQ\nDWPsyvHdX3zi/Mq/Ql9jCeYEX65PTGNXRb7rePZW/KAlC3kk/g9yPfInBcx2zblr\naBB3KLXABCtcokzRJsjptuxzoMA3IxAMQ/Fe/d3tWYAY2KpUg8Irr0vb7/MLIF7s\nOijo+Snedw+T/9kMlHavOZ5LNuHTC/4bbcaeqQypaw6QJgjdbqY66Rv3DfGIo35m\nPcITygyB4B5XQ+Gu0qdiOhs70svMQQ==\n=O782\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10018651c33a9619ea0075f8006e83cb291fd82e",
          "sha": "10018651c33a9619ea0075f8006e83cb291fd82e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/10018651c33a9619ea0075f8006e83cb291fd82e"
        }
      ],
      "message": "wallet: use Synced<T> for g_loading_wallet_set and remove g_loading_wallet_mutex\n\nConvert `g_loading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_loading_wallet_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T16:00:52Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:34:37Z"
      },
      "sha": "4b6e058abbcfafcaeecb48eae20a4783f82d3c3a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViZmU0N2U1OTQyZmE1ZTBjZTIxYjQ0NTExMjU4YjZkZmE0Y2Y2MjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "tree": {
        "sha": "eebcbd170c89ff53c6831dd10529987641de85a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eebcbd170c89ff53c6831dd10529987641de85a3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree eebcbd170c89ff53c6831dd10529987641de85a3\nparent 4b6e058abbcfafcaeecb48eae20a4783f82d3c3a\nauthor Vasil Dimov <vd@FreeBSD.org> 1656337162 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1680883252 +0200\n\nwallet: use Synced<T> for g_unloading_wallet_set and remove g_wallet_release_mutex\n\nConvert `g_unloading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_wallet_release_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmQwPjUACgkQVN8G9ktV\ny7/c9R//eBFOVe5p3JbjzMYmHRNN9vHliG7TbVtkxMtW8AUdxwGbP5sk0rGjxkMN\nIvqD7hZnip3BdxL36tzHXCiM0g9V6QxMgD0nuL3jkvgo17ldLadyz6Rb1FTmmNil\n09k/XNbDMD3R9V1zraoP3Gw4KKJFLfWupZs6c3YWI+JWlsiwya28SJS4Qa2M689b\nnquxARwZBMO4mJRexN2Q4dXnTiKfzGbo+TvIcSchAnxhWAbWaRZf14GiI+9D3atN\n5/8SH7z01eJmr9V0xLQA018938N4AC6owBC3ND+VOZsxDtJhv6dB7aD/cnHn4gt7\n43w4IqQVDxnPcHE/TqcffaGL8keLy6iyF1VsI5EKh7QyAnk07dx72CpYKVWMy6qv\nzsB95OtOnduvx/cEImJnQKdVmrS/Ziv0KBsompBG0149KWHp6H+jR+JKfrTM8/cR\nmCvQRK8RuL6z+Fsi99O8VpQHLj85js9s1eoNmzfUGqXxckKbcQF4YOGTxLVTRrHn\nUkZopvokz/2A+O1sFwKwqvsvzuxQvTf5kfF7t416xFr1hn3STxkTLL20n0CKq+79\nRh10UPewYXisNmQrihsa4jHBed+APnqNpRVVWeiyAeJIC0bluGbHB8TwcKaCBNZ2\nb60KI8mCaXDtaEBl3+yUdX7aCOCuO7xUuvEu8J0e5QsQEukk0E+IFJaRkn8cfQMJ\n2E9hB28yxGBzGZbK2a+vWRz5agb5UIJHaSzpqVe4LhAv4repZwbnDcDzXNu9ielC\ngUmwK14jODYTqCd6en7o97v5/UGeWIFWuTnfNojkbprIWaGdtTuOAUGtGpzmmMhP\n4biWvfJiBkMg454z6o8VbDCD0ivpivCwWegkJFXLCCpTvhZ3inGxrGb6IZbo+93g\nYB8JjO0YlDFhBxYMlpTAv66aWE0cuOHz8XJx4gXN3Dolq7ll5FtmyI8Lbvizl1qx\nWQ4EHx2a8huPvTIulh49yKcN6TqELhZd3rHnEXXL8zTKh/XuzU2oJt2CogCU64wE\ncKbRweAebdcnhghoyBrb394B4Ho6Pumr8NjDmKebSknyjK9syNg1NlXtUZaxQTJT\nA3H/wtKrasVOeN+Z00o83rMsty8nTP6Fd+QIJVLq4U3yCuQ4DsCOBiQ5TaFXba+g\nt6H4BbXzmr2iwqDbj68Z2sLBRIOCedI5dfJEdfQCvugNZoieOIx2gaeBOxvVtv43\nFLnD5vCcKagFdRayXRily3//Ya67osSWyeu9u3MSwWWNJj0Pqt4GtZevDXn0LtJL\nuhTLQRcFOuKogUFq1/VbWUQQiw4/BlNexRbZe4H2E3InGzyAkMA5zrwj6EnqLiQH\nrE6f9vQA5Js0lTL/LY4XwwQMTbCF4Q==\n=CC9U\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b6e058abbcfafcaeecb48eae20a4783f82d3c3a",
          "sha": "4b6e058abbcfafcaeecb48eae20a4783f82d3c3a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4b6e058abbcfafcaeecb48eae20a4783f82d3c3a"
        }
      ],
      "message": "wallet: use Synced<T> for g_unloading_wallet_set and remove g_wallet_release_mutex\n\nConvert `g_unloading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_wallet_release_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-07T16:00:52Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:39:22Z"
      },
      "sha": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8954837008,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAIVv_gQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8954837008",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-07T16:20:54Z"
    },
    {
      "event": "commented",
      "id": 1500433830,
      "node_id": "IC_kwDOABII585Zbs2m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1500433830",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-07T16:21:08Z",
      "updated_at": "2023-04-07T16:21:08Z",
      "author_association": "MEMBER",
      "body": "`e42ce20c65...ebfe47e594`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1500433830",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unlabeled",
      "id": 8954909041,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAIVwRFx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8954909041",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-07T16:36:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1513345887,
      "node_id": "IC_kwDOABII585aM9Nf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1513345887",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-18T15:17:58Z",
      "updated_at": "2023-04-18T15:17:58Z",
      "author_association": "MEMBER",
      "body": "Light Approach ACK after reading the code and the excellent review discussions. It looks like this has been progressively honed and improved quite a bit. Will test and review.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1513345887",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "reviewed",
      "id": 1390434676,
      "node_id": "PRR_kwDOABII585S4Fl0",
      "url": null,
      "actor": null,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Light initial ACK ebfe47e5942fa5e0ce21b44511258b6dfa4cf621 modulo poking around with the thread safety coverage/guarantees to break them. Compiled and ran unit tests at each commit with ARM64 clang 16 (except the scripted-diff ones).\r\n\r\nFeel free to ignore the comments below unless you need to repush.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1390434676",
      "submitted_at": "2023-04-18T16:09:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "commented",
      "id": 1557425242,
      "node_id": "IC_kwDOABII585c1Gxa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1557425242",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:26:38Z",
      "updated_at": "2023-05-22T15:26:38Z",
      "author_association": "MEMBER",
      "body": "Concept ~0. While the first commit introduces new code in `sync.h` that needs maintaining and unit test coverage, the following commits do not demonstrate convincing reasons for it.\r\n\r\n> but it is possible to abuse the mutex and start using it to protect some more, possibly unrelated stuff (we already have this in the current code).\r\n\r\nConcept ACK on improving this.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1557425242",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unsubscribed",
      "id": 9304393598,
      "node_id": "UE_lADOABII585L6FX5zwAAAAIqlcd-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9304393598",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:51:38Z"
    },
    {
      "event": "labeled",
      "id": 9382045097,
      "node_id": "LE_lADOABII585L6FX5zwAAAAIvNqWp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9382045097",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T19:14:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9391459478,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAIvxkyW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9391459478",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T14:37:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899366531",
      "pull_request_review_id": 1009459470,
      "id": 899366531,
      "node_id": "PRRC_kwDOABII5841mz6D",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }\n+\n+    Proxy operator*() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator*() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 91,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sync: introduce a thread safe smart pointer\" (3d77fdb3127649d560c8f39d8ab83d32c9d0dff6)\r\n\r\nI think it would be an improvement to just give these methods a normal name like `Lock` instead of making them operators. Calling code would change from:\r\n\r\n```c++\r\nauto v_locked = *v;\r\nfor (auto& i : v_locked) ...\r\n```\r\n\r\nto \r\n\r\n```c++\r\nauto v_locked = v.Lock();\r\nfor (auto& i : v_locked) ...\r\n```\r\n\r\nwhich would be clearer and simpler. Proxy class is the actual class acting like a pointer so it needs `*` and `->` methods. But outer `ThreadSafePtr` class is not really a pointer at all, but a container, so there is not a concrete reason it needs to have `*` and `->` members unless that's an aesthetic preference.",
      "created_at": "2022-06-16T17:42:39Z",
      "updated_at": "2022-06-16T18:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899366531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899366531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 486,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899380437",
      "pull_request_review_id": 1009459470,
      "id": 899380437,
      "node_id": "PRRC_kwDOABII5841m3TV",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 88,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sync: introduce a thread safe smart pointer\" (3d77fdb3127649d560c8f39d8ab83d32c9d0dff6)\r\n\r\nI'm pretty sure the const version of these -> and * methods are unusable and will always lead to compile errors if you ever tried to call them. If you want to allow accessing contents of const `ThreadSafePtr` objects, probably you need to introduce Proxy/ConstProxy classes similar to c++ iterator/const_interator classes. Otherwise you could drop these const methods.",
      "created_at": "2022-06-16T17:59:12Z",
      "updated_at": "2022-06-16T18:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899380437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899380437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901851921",
      "pull_request_review_id": 1012544031,
      "id": 901851921,
      "node_id": "PRRC_kwDOABII5841wSsR",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 88,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": 899380437,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I removed them because they are not needed (currently). In a previous incarnation of this I had it working with `const ThreadSafePtr`, but removed the complications that were required for that.\r\n\r\nCan always extend it (restore these) if `const` objects are necessary.",
      "created_at": "2022-06-20T16:43:10Z",
      "updated_at": "2022-06-20T16:43:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901851921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901851921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901853708",
      "pull_request_review_id": 1012546455,
      "id": 901853708,
      "node_id": "PRRC_kwDOABII5841wTIM",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }\n+\n+    Proxy operator*() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator*() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 91,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": 899366531,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed `operator*()` to `Lock()`. The `operator->()` is needed in order to cause a chained `->` calls.\r\n\r\nNotice that the call:\r\n\r\n```cpp\r\n(*g_my_net_addr)[my_net_addr_entry] = lsi;\r\n```\r\n\r\nnow becomes:\r\n\r\n```cpp\r\ng_my_net_addr.Lock()[my_net_addr_entry] = lsi;\r\n```",
      "created_at": "2022-06-20T16:46:10Z",
      "updated_at": "2022-06-20T16:46:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901853708",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901853708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 486,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919129254",
      "pull_request_review_id": 1036036999,
      "id": 919129254,
      "node_id": "PRRC_kwDOABII5842yMym",
      "diff_hunk": "@@ -400,4 +405,178 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects the owned object with a mutex.\n+ * Every time the container is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * for (auto& i : v.Lock()) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not change between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_owner{}, m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object.\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            // Avoid double-lock if the current thread is already the owner.\n+            // This read of parent.m_owner is unprotected but that is ok because\n+            // the result of the comparison to the current thread cannot be\n+            // changed by other, concurrently executing, threads.\n+            : m_lock{parent.m_owner == std::this_thread::get_id() ? nullptr : &parent.m_mutex,\n+                     mutex_name,\n+                     file_name,\n+                     line},",
      "path": "src/sync.h",
      "position": null,
      "original_position": 79,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "618809ab6b1f1c67ea3e299626f1ccb89f55d9f1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sync: introduce a thread safe smart container\" (618809ab6b1f1c67ea3e299626f1ccb89f55d9f1)\r\n\r\nIt seems like you could avoid this `m_owner` stuff by just replacing `Mutex` with `RecursiveMutex` below. Otherwise this code just seems like it is implementing `RecursiveMutex` on top of `Mutex`, which only makes it more complex and probably less efficient than using `RecursiveMutex` directly.\r\n\r\nMaybe it would be better to disallow double locking and use clang thread annotations to prevent obvious cases of double locking at compile time. But maybe this is not possible. And allowing double locking doesn't seem like an inherently bad thing here apart from the slight performance overhead. Code fragility problems associated with recursive mutex usage don't seem like they would be an problem here since the mutex is private and the class has a limited interface.",
      "created_at": "2022-07-12T15:44:27Z",
      "updated_at": "2022-07-12T16:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919129254",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919129254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 457,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 464,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919824769",
      "pull_request_review_id": 1037006128,
      "id": 919824769,
      "node_id": "PRRC_kwDOABII584202mB",
      "diff_hunk": "@@ -400,4 +405,178 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects the owned object with a mutex.\n+ * Every time the container is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * for (auto& i : v.Lock()) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not change between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_owner{}, m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object.\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            // Avoid double-lock if the current thread is already the owner.\n+            // This read of parent.m_owner is unprotected but that is ok because\n+            // the result of the comparison to the current thread cannot be\n+            // changed by other, concurrently executing, threads.\n+            : m_lock{parent.m_owner == std::this_thread::get_id() ? nullptr : &parent.m_mutex,\n+                     mutex_name,\n+                     file_name,\n+                     line},",
      "path": "src/sync.h",
      "position": null,
      "original_position": 79,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "618809ab6b1f1c67ea3e299626f1ccb89f55d9f1",
      "in_reply_to_id": 919129254,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. Simplified this by removing `m_owner` and using `RecursiveMutex`.\r\n\r\nThis reduced the `Synced` implementation from 110 to 58 lines (excluding comments).\r\n\r\nIt is possible to further reduce it by removing `Synced::UniqueLock` but then call sites would have to use `auto lock = foo.Lock();` instead of the sweet `LOCK(foo);`. I think either way is fine.\r\n\r\n> Maybe it would be better to disallow double locking and use clang thread annotations to prevent obvious cases of double locking at compile time. But maybe this is not possible.\r\n\r\nI will look at this again, but last time I tried I couldn't do that - stumbled on some limitations and bizarre behavior that looked like a bug in the thread safety annotations. Notice that even now some cases are prevented at compile time, like:\r\n\r\n```cpp\r\nLOCK(foo);\r\n...\r\nLOCK(foo);\r\n```",
      "created_at": "2022-07-13T08:54:51Z",
      "updated_at": "2022-07-13T08:54:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919824769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919824769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 457,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 464,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978269158",
      "pull_request_review_id": 1117913698,
      "id": 978269158,
      "node_id": "PRRC_kwDOABII5846TzPm",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After a lot of poking at this, I believe what's necessary to make clang's thread safety logic actually notice that this function grabs a lock is to annotate the move constructor of `Proxy`, ie `Proxy(Proxy&&) EXCLUSIVE_LOCK_FUNCTION(mutex) = default`. https://reviews.llvm.org/D41933?id=129496\r\n\r\nUnfortunately, I don't think that's sufficient to avoid clang getting confused about aliasing; at least the ways I've tried haven't worked.",
      "created_at": "2022-09-23T05:07:40Z",
      "updated_at": "2022-09-28T17:07:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r978269158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978269158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982661098",
      "pull_request_review_id": 1117913698,
      "id": 982661098,
      "node_id": "PRRC_kwDOABII5846kjfq",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we should be doing more recursive mutex stuff (they're harder to reason about, and less efficient any time that matters). I haven't been able to figure out a way of doing this sensibly otherwise, however -- clang just gets too confused about aliasing.",
      "created_at": "2022-09-28T17:03:13Z",
      "updated_at": "2022-09-28T17:07:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r982661098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982661098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983367668",
      "pull_request_review_id": 1125046640,
      "id": 983367668,
      "node_id": "PRRC_kwDOABII5846nP_0",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, me too. Clang keeps emitting bogus warnings about loops like `for (auto& a : *obj)` for everything I tried, so I gave up. It has its limitations after all.",
      "created_at": "2022-09-29T10:30:58Z",
      "updated_at": "2022-09-29T10:30:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983367668",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983367668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983384482",
      "pull_request_review_id": 1125068091,
      "id": 983384482,
      "node_id": "PRRC_kwDOABII5846nUGi",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": 982661098,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It used `Mutex` before and mimicked a `RecursiveMutex`, but I totally agree with @ryanofsky's [comment](https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919129254) and changed it to `RecursiveMutex`.\r\n\r\nEven before that there was another approach which did not need a recursive mutex, and double locking was not allowed, but [you did not like that](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634).",
      "created_at": "2022-09-29T10:48:14Z",
      "updated_at": "2022-09-29T10:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983384482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983384482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983877979",
      "pull_request_review_id": 1125785021,
      "id": 983877979,
      "node_id": "PRRC_kwDOABII5846pMlb",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": 982661098,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In my opinion: we shouldn't allow double locking (for almost all locks), and should give compile time errors when double locking is attempted. I'd love to see a variant of this that achieved both those things.",
      "created_at": "2022-09-29T18:06:47Z",
      "updated_at": "2022-09-29T18:06:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983877979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983877979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983913168",
      "pull_request_review_id": 1125836760,
      "id": 983913168,
      "node_id": "PRRC_kwDOABII5846pVLQ",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh!! How about this:\r\n\r\n```c++\r\ntemplate<typename T>\r\nstruct Guarded\r\n{\r\nprivate:\r\n    mutable Mutex m;\r\n    T obj GUARDED_BY(m);\r\npublic:\r\n    class SCOPED_LOCKABLE Proxy\r\n    {\r\n    private:\r\n        Guarded& g;\r\n    public:\r\n        Proxy(Guarded& g) EXCLUSIVE_LOCK_FUNCTION(g.m) : g{g}\r\n        {\r\n            g.m.lock();\r\n        }\r\n        ~Proxy() UNLOCK_FUNCTION() { g.m.unlock(); }\r\n\r\n        T& operator*() { return g.obj; }\r\n        T* operator->() { return &g.obj; }\r\n    };\r\n};\r\n\r\n#define PROXY(name, guarded) decltype(guarded)::Proxy name{guarded};\r\n\r\nGuarded<uint32_t> global_i;\r\nGuarded<std::vector<uint32_t>> global_nums;\r\nvoid foo()\r\n{\r\n    PROXY(p, global_i);\r\n    *p = 5;\r\n    *p += 6;\r\n    // PROXY(p2, global_i); // error: acquiring mutex 'global_i.m' that is already held [-Werror,-Wthread-safety-analysis]\r\n    // *p2 = 9;\r\n}\r\n\r\nint64_t lock_already_held(Guarded<std::vector<uint32_t>>::Proxy &p)\r\n{\r\n    int64_t j = 0;\r\n    for (auto i : *p) { j += i; }\r\n    return j;\r\n}\r\n\r\nint64_t bar()\r\n{\r\n    PROXY(p, global_nums);\r\n    int64_t j = 0;\r\n    for (auto i : *p) { j += i; }\r\n    return j + lock_already_held(p);\r\n}\r\n```\r\n\r\nThat:\r\n\r\n * gives compile time errors if you try accessing without a lock\r\n * doesn't require recursive locks\r\n * gives clang compile time errors if you try double locking\r\n\r\nwhich hits everything I wanted, and doesn't even seem too klunky. Perhaps needs some additional work to handle `const`.",
      "created_at": "2022-09-29T18:48:14Z",
      "updated_at": "2022-09-29T18:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983913168",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983913168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984000714",
      "pull_request_review_id": 1125965581,
      "id": 984000714,
      "node_id": "PRRC_kwDOABII5846pqjK",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re; https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983913168\r\n\r\nThis suggestion seems very good. I'm still not sure how broadly useful this locking container would be, but I agree having recursive mutex semantics (however they are implemented) would make using it less safe, so better to avoid that if possible.\r\n\r\nAbout the `Guarded`/`PROXY` suggestion specifically:\r\n\r\n- I wonder if `PROXY` macro is necessary. Could `Guarded` class just have a `auto Lock() { return Proxy{*this}; }` method instead? It seems like that could work just as well in a `for` loop or `auto nums = global_nums->Lock()` statement.\r\n- Maybe rename `s/PROXY/GUARDED_LOCK/` so macro name and class name match. This would also be more consistent with other locking macro names `WAIT_LOCK` and `TRY_LOCK` \r\n- Maybe switch `PROXY(name, guarded)` argument order for consistency with `WAIT_LOCK` and `TRY_LOCK` where the new variable name argument is last, and the existing mutex argument is first.\r\n",
      "created_at": "2022-09-29T20:35:14Z",
      "updated_at": "2022-09-29T20:35:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r984000714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984000714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984106710",
      "pull_request_review_id": 1126113893,
      "id": 984106710,
      "node_id": "PRRC_kwDOABII5846qEbW",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the macro is necessary -- otherwise `return Proxy{*this}` means you have to annotate the `Proxy(Proxy&&)` move constructor, but the only thing you can annotate that with is locking its internal reference to `g.m` but that then creates an alias of the mutex which prevents clang from detecting when double locking is happening since clang can't tell that two different invocations are locking aliases of the same lock.\r\n\r\nChanging the name and the argument order makes lots of sense, I just posted it as soon as I found something that worked. `Guarded<T>` probably isn't a great name either. (I think it makes sense for `Proxy` to match whatever the macro is named)",
      "created_at": "2022-09-30T00:01:59Z",
      "updated_at": "2022-09-30T00:01:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r984106710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984106710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985802251",
      "pull_request_review_id": 1128402641,
      "id": 985802251,
      "node_id": "PRRC_kwDOABII5846wiYL",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What about this:\r\n\r\n```cpp\r\ntemplate <typename T>\r\nclass Synced\r\n{\r\npublic:\r\n    template <typename... Args>\r\n    Synced(Args... args) : m_obj{args...}\r\n    {\r\n    }\r\n\r\n    class SCOPED_LOCKABLE Proxy : ::UniqueLock<Mutex>\r\n    {\r\n    public:\r\n        Proxy(Synced& parent) EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\r\n            : ::UniqueLock<Mutex>{parent.m_mutex, \"...\", \"...\", 123}, m_parent{parent}\r\n        {\r\n        }\r\n\r\n        ~Proxy() UNLOCK_FUNCTION() {}\r\n\r\n        T& operator*()\r\n        {\r\n            return m_parent.m_obj;\r\n        }\r\n\r\n        T* operator->()\r\n        {\r\n            return &m_parent.m_obj;\r\n        }\r\n\r\n    private:\r\n        Synced& m_parent;\r\n    };\r\n\r\nprivate:\r\n    mutable Mutex m_mutex;\r\n    T m_obj GUARDED_BY(m_mutex);\r\n};\r\n\r\n#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced}\r\n```\r\n\r\nWith example usage:\r\n\r\n```cpp\r\nSynced<std::vector<int>> synced{1, 2, 3, 4};\r\n\r\n{\r\n    SYNCED_LOCK(synced, p);\r\n\r\n    p->push_back(5);\r\n}\r\n\r\n{\r\n    SYNCED_LOCK(synced, p);\r\n\r\n    std::cout << (*p)[0] << std::endl;\r\n\r\n    for (auto& i : *p) {\r\n        std::cout << i << std::endl;\r\n    }\r\n}\r\n```\r\n\r\nWe lose the sweet syntax:\r\n\r\n```cpp\r\nSynced<std::vector<int>> synced{1, 2, 3, 4};\r\n\r\nsynced->push_back(5);\r\n```\r\n\r\ncompared to the other variants, but this would still offer simplifications in higher level code and if you are ok with it, then I am fine.\r\n",
      "created_at": "2022-10-03T13:46:53Z",
      "updated_at": "2022-10-03T13:51:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r985802251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985802251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986153213",
      "pull_request_review_id": 1128915124,
      "id": 986153213,
      "node_id": "PRRC_kwDOABII5846x4D9",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure what the differences are between you're quoting above vs what I suggested? They currently look pretty much the same to me? (I was going to check that `begin`/`end`/`op[]` didn't create double locking issues, but you've gotten rid of them already)\r\n\r\nI think it'd be worth adding `LIFETIMEBOUND` annotations (from attributes.h) as well. Perhaps you should delete the move constructor for `Synced`?\r\n\r\nI agree `synced->push_back(5)` is pretty, but it seems likely to be bug prone to me: consider `it = synced_map->find(key)` -- the lock will be released as soon as the iterator is returned, allowing `it` to be immediately invalidated. So I kind of think we should just count ourselves lucky that we can't make it work and callers have to be explicit about the lock scope...",
      "created_at": "2022-10-03T19:37:33Z",
      "updated_at": "2022-10-03T19:37:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986153213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986153213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986156191",
      "pull_request_review_id": 1128919465,
      "id": 986156191,
      "node_id": "PRRC_kwDOABII5846x4yf",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It might be nice to have a `ConstProxy` variant too, so that if you have a `const` reference to an object containing a `Synced<foo>` you can still access have synced access to the object as `const foo`. On the other hand, maybe better to worry about that when an actual use comes up.",
      "created_at": "2022-10-03T19:41:27Z",
      "updated_at": "2022-10-03T19:41:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986156191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986156191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986218855",
      "pull_request_review_id": 1129009189,
      "id": 986218855,
      "node_id": "PRRC_kwDOABII5846yIFn",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`Proxy : ::UniqueLock<Mutex>` -- isn't it better to say `private` explicitly? (Guess who just assumed it defaulted to `public` until the compiler told him otherwise...)",
      "created_at": "2022-10-03T20:52:05Z",
      "updated_at": "2022-10-03T20:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986218855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986218855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986548377",
      "pull_request_review_id": 1129459998,
      "id": 986548377,
      "node_id": "PRRC_kwDOABII5846zYiZ",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I'm not sure what the differences are between you're quoting above vs what I suggested?\r\n\r\nYes, they are pretty much the same. The question was maybe more directed to @ryanofsky - if he is ok with that. I want to avoid pushing another iteration of this PR and it to be shot by somebody shortly after :) If you both agree on the above, then lets do that!\r\n\r\nTo-polish: LIFETIMEBOUND, delete the Synced move constructor, consider const, explicit inheritance type.",
      "created_at": "2022-10-04T07:59:19Z",
      "updated_at": "2022-10-04T07:59:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986548377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986548377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987678673",
      "pull_request_review_id": 1131084530,
      "id": 987678673,
      "node_id": "PRRC_kwDOABII58463sfR",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you made `m_obj` and `m_mutex` be protected instead of private, that would allow you to write:\r\n\r\n```c++\r\nclass MyFoo : public Synced<foo>\r\n{\r\npublic:\r\n    int pretty() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex) { LOCK(m_mutex); return m_obj.pretty(); }\r\n};\r\n```\r\n\r\nand then do `i = myfoo.pretty();` -- gets you the same end result as the `synced->pretty()` stuff, but only for things you explicitly add a wrapper for, which at least also gives you a chance to make sure it's actually safe to be used in isolation?",
      "created_at": "2022-10-05T08:43:45Z",
      "updated_at": "2022-10-05T08:44:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r987678673",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987678673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987701975",
      "pull_request_review_id": 1131117742,
      "id": 987701975,
      "node_id": "PRRC_kwDOABII58463yLX",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I wouldn't add features that are not used anywhere, but `s/private/protected` is not actually more code. Makes sense if somebody wants to inherit it and do more involved things.\r\n\r\nTo-polish: LIFETIMEBOUND, delete the Synced move constructor, consider const, explicit inheritance type, protected `m_mutex` and `m_obj`.\r\n\r\n@ryanofsky, what do you think?",
      "created_at": "2022-10-05T09:09:05Z",
      "updated_at": "2022-10-05T09:09:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r987701975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987701975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/988059337",
      "pull_request_review_id": 1131632960,
      "id": 988059337,
      "node_id": "PRRC_kwDOABII58465JbJ",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> To-polish: LIFETIMEBOUND, delete the Synced move constructor, consider const, explicit inheritance type, protected `m_mutex` and `m_obj`.\r\n> \r\n> @ryanofsky, what do you think?\r\n\r\nAll of these tweaks sound good to me.\r\n\r\nGenerally speaking about the PR as a whole, I'm skeptical the `Synced` class will be broadly useful, but I think it's a simple enough utility that can be used in a few places without many drawbacks, and that it's worth experimenting with. I was more interested in the class previously when I thought it was a locking pointer enforcing use of an external mutex (that could be used to migrate code away from using `cs_main`), than a locking container that just used an internal mutex. But it seems like a good thing to use in places where it fits.",
      "created_at": "2022-10-05T15:26:01Z",
      "updated_at": "2022-10-05T15:27:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r988059337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/988059337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993246868",
      "pull_request_review_id": 1138790112,
      "id": 993246868,
      "node_id": "PRRC_kwDOABII5847M76U",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": 982661098,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done - in the latest incarnation no double locking is allowed.",
      "created_at": "2022-10-12T09:51:05Z",
      "updated_at": "2022-10-12T09:51:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r993246868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993246868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993256070",
      "pull_request_review_id": 1138803669,
      "id": 993256070,
      "node_id": "PRRC_kwDOABII5847M-KG",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated, I only left the `const` stuff away, since it is not needed now and can be added later if needed.\r\n\r\nFor the usefulness of the `Synced` class, see the OP, I updated it with some of the benefits.",
      "created_at": "2022-10-12T10:00:23Z",
      "updated_at": "2022-10-12T10:22:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r993256070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993256070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/997762368",
      "pull_request_review_id": 1145151729,
      "id": 997762368,
      "node_id": "PRRC_kwDOABII5847eKVA",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, when used with shared locks, it seems like clang's thread safety analysis doesn't actually prevent you from calling non-const member functions of a `GUARDED_BY` object when only holding the lock in shared mode (it does prevent you from doing `a = b`, just not `a.set(b)`). So if you take a shared lock over a vector, then resize it and invalidate everyone elses iterators, clang thinks it's all fine.\r\n\r\nWhich I think means that if we wanted to do shared locking more broadly, then this method might be the safest way we have of it: ie have `SYNCED_SHARED(foo,  fooproxy)` take a shared lock and have `*fooproxy` give a `const Foo&` so you can't accidently modify `foo` while you're potentially sharing it with other threads.\r\n\r\nEDIT: for possible future reference, just doing this looks like it works sensibly:\r\n\r\n```c++\r\nclass Synced\r\n{\r\n...\r\n    class SCOPED_LOCKABLE ConstProxy : public ::UniqueLock<Mutex>\r\n    {\r\n    public:\r\n        ConstProxy(const Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\r\n            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\r\n            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\r\n        {\r\n        }\r\n\r\n        ~ConstProxy() UNLOCK_FUNCTION() {}\r\n\r\n        const T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\r\n\r\n        const T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\r\n\r\n    private:\r\n        const Synced& m_parent;\r\n    };\r\n...\r\n};\r\n\r\n#define SYNCED_SHARED(synced, name) decltype(synced)::ConstProxy name{synced, #synced, __FILE__, __LINE__}\r\n```\r\n\r\nTweaking that to use a `std::shared_lock` instead of `unique_lock` and marking it as `SHARED_LOCK_FUNCTION` instead of exclusive would let us use shared locks pretty easily and safely, I think.\r\n",
      "created_at": "2022-10-18T06:21:09Z",
      "updated_at": "2022-10-18T12:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r997762368",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/997762368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998159732",
      "pull_request_review_id": 1145740612,
      "id": 998159732,
      "node_id": "PRRC_kwDOABII5847frV0",
      "diff_hunk": "@@ -325,14 +330,17 @@ void SetReachable(enum Network net, bool reachable)\n {\n     if (net == NET_UNROUTABLE || net == NET_INTERNAL)\n         return;\n-    LOCK(g_maplocalhost_mutex);\n-    vfLimited[net] = !reachable;\n+    SYNCED_LOCK(g_reachable_networks, p);\n+    if (reachable) {\n+        p->insert(net);\n+    } else {\n+        p->erase(net);\n+    }\n }\n \n bool IsReachable(enum Network net)\n {\n-    LOCK(g_maplocalhost_mutex);\n-    return !vfLimited[net];\n+    return WITH_SYNCED_LOCK(g_reachable_networks, p, return p->count(net) > 0);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems clearer to write that as two lines (`SYNCED_LOCK(); return ..`) to me.",
      "created_at": "2022-10-18T12:44:56Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998159732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998159732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998164319",
      "pull_request_review_id": 1145740612,
      "id": 998164319,
      "node_id": "PRRC_kwDOABII5847fsdf",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if hardcoding the proxy name would be better; something like:\r\n\r\n```c++\r\n#define SYNCED_LOCK(synced) decltype(synced)::Proxy synced##_proxy{synced, #synced, __FILE__, __LINE__}\r\n``` \r\n\r\nthen you write `SYNCED_LOCK(foo); foo_proxy->bar()` and don't have to choose a name, and don't have to worry about remembering what `p` was a proxy for.",
      "created_at": "2022-10-18T12:48:54Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998164319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998164319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 466,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998202653",
      "pull_request_review_id": 1145740612,
      "id": 998202653,
      "node_id": "PRRC_kwDOABII5847f10d",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changing this from a bool array to an unordered set seems surprising, and inverting the logic means introducing an extra place that has to be modified when adding new nets. Wouldn't `Synced<std::bitset<NET_MAX>> g_limited_networks` make more sense?",
      "created_at": "2022-10-18T13:14:38Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998202653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998202653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998213646",
      "pull_request_review_id": 1145740612,
      "id": 998213646,
      "node_id": "PRRC_kwDOABII5847f4gO",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": 22,
      "original_position": 24,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "An alternative approach to splitting these two entries between separate mutexes would be to create an additional struct:\r\n\r\n```c++\r\nstruct NetworkReachability\r\n{\r\n    std::map<CNetAddr, LocalServiceInfo> local_addrs;\r\n    std::set<Network> reachable_nets;\r\n};\r\nSynced<NetworkReachability> g_network_reachability;\r\n```\r\n\r\nand then `SYNCED_LOCK(g_network_reachability, p);` lets you access `p->local_addrs` or `p->reachable_nets`. Hard to see it making much practical difference here either way though.",
      "created_at": "2022-10-18T13:21:56Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998213646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998213646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011738259",
      "pull_request_review_id": 1165214971,
      "id": 1011738259,
      "node_id": "PRRC_kwDOABII5848TeaT",
      "diff_hunk": "@@ -325,14 +330,17 @@ void SetReachable(enum Network net, bool reachable)\n {\n     if (net == NET_UNROUTABLE || net == NET_INTERNAL)\n         return;\n-    LOCK(g_maplocalhost_mutex);\n-    vfLimited[net] = !reachable;\n+    SYNCED_LOCK(g_reachable_networks, p);\n+    if (reachable) {\n+        p->insert(net);\n+    } else {\n+        p->erase(net);\n+    }\n }\n \n bool IsReachable(enum Network net)\n {\n-    LOCK(g_maplocalhost_mutex);\n-    return !vfLimited[net];\n+    return WITH_SYNCED_LOCK(g_reachable_networks, p, return p->count(net) > 0);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998159732,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-11-02T13:08:53Z",
      "updated_at": "2022-11-02T13:08:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011738259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011738259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011742090",
      "pull_request_review_id": 1165219536,
      "id": 1011742090,
      "node_id": "PRRC_kwDOABII5848TfWK",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sometimes the hardcoded name could become too long/verbose for a too short scope: e.g. `g_reachable_networks_proxy` or `g_reachable_networks_locked` when it is just used on the line below and nowhere else.\r\n\r\nI added now the possibility to call `SYNCED_LOCK()` with 1 or 2 arguments and opted for a `_locked` suffix instead of `_proxy` for the 1-arg case. So the callers have complete flexibility on how to call it.",
      "created_at": "2022-11-02T13:11:43Z",
      "updated_at": "2022-11-02T13:11:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011742090",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011742090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 466,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011743933",
      "pull_request_review_id": 1165221632,
      "id": 1011743933,
      "node_id": "PRRC_kwDOABII5848Tfy9",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998202653,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My reasoning is that the most natural way to express this is to have a list of networks that are reachable (or unreachable if the logic is to be inverted) and `std::set` is the best way to do that. Having an array of `bool`s is a bit hackish as it requires that all enums are sequential and start at `0` and requires the existence of `NET_MAX` which smells bad. My plan is to remove `NET_MAX`. Ideally, enum lables should be used without depending on their specific integer values.\r\n\r\nAnyway, if this is controveral I will ditch that change and leave it as `vfLimited[NET_MAX]` since it is not the main topic of this PR. Should I?",
      "created_at": "2022-11-02T13:13:04Z",
      "updated_at": "2022-11-02T13:13:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011743933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011743933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011745178",
      "pull_request_review_id": 1165223092,
      "id": 1011745178,
      "node_id": "PRRC_kwDOABII5848TgGa",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": 22,
      "original_position": 24,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998213646,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> ... separate mutexes ...\r\n\r\nWhat you propose will use just one mutex? Anyway, the list of reachable networks is unrelated to the list of local addresses. I do not think they should be grouped into one `struct` or protected by the same mutex.\r\n",
      "created_at": "2022-11-02T13:13:59Z",
      "updated_at": "2022-11-02T13:13:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011745178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011745178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011820462",
      "pull_request_review_id": 1165317969,
      "id": 1011820462,
      "node_id": "PRRC_kwDOABII5848Tyeu",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That does not compile on windows: https://cirrus-ci.com/task/4559637407072256?logs=build#L814 :-/\r\n\r\nIf you are ok with this, I will fall back to the 2-arg macro. Then the caller can pick the name depending on their preferences - `p`, `foo_proxy`, `foo_locked` or whatever.",
      "created_at": "2022-11-02T14:06:32Z",
      "updated_at": "2022-11-02T14:06:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011820462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011820462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 466,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012389456",
      "pull_request_review_id": 1166137516,
      "id": 1012389456,
      "node_id": "PRRC_kwDOABII5848V9ZQ",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": 22,
      "original_position": 24,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998213646,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it was an \"alternative .. to .. separate mutexes\". Mostly intended to show using this pattern doesn't require moving everything to a dedicated mutex if that's not desired. In this case, like I said \"hard to see it making much practical difference\" though.",
      "created_at": "2022-11-02T23:50:53Z",
      "updated_at": "2022-11-02T23:50:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1012389456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012389456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012393276",
      "pull_request_review_id": 1166142677,
      "id": 1012393276,
      "node_id": "PRRC_kwDOABII5848V-U8",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you want naming it to be optional, probably better to have different macros, same as `LOCK(m)` and `WAIT_LOCK(m,g)`. I'm not really sure what I prefer here.",
      "created_at": "2022-11-03T00:00:19Z",
      "updated_at": "2022-11-03T00:00:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1012393276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012393276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 466,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016616242",
      "pull_request_review_id": 1172097338,
      "id": 1016616242,
      "node_id": "PRRC_kwDOABII5848mFUy",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": 22,
      "original_position": 24,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998213646,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I am leaving it as it is and marking this as resolved. I think it is natural to guard unrelated things with separate mutexes.",
      "created_at": "2022-11-08T13:12:33Z",
      "updated_at": "2022-11-08T13:12:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1016616242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016616242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016618877",
      "pull_request_review_id": 1172101345,
      "id": 1016618877,
      "node_id": "PRRC_kwDOABII5848mF99",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I went back to what it was before - `SYNCED_LOCK(object, name)`. The 1-arg macro was used in just one place and it did not compile on windows, not worth it. By selecting the name the caller can choose whether to use a short one for small scopes of a few lines, or a longer and more descriptive one for bigger scopes.",
      "created_at": "2022-11-08T13:15:05Z",
      "updated_at": "2022-11-08T13:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1016618877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016618877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 466,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017546338",
      "pull_request_review_id": 1173494530,
      "id": 1017546338,
      "node_id": "PRRC_kwDOABII5848poZi",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998202653,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "enums are sequential and automatically start at 0; and `NET_MAX` is added for precisely that purpose. That's the way these things are designed to be used, it's not hackish or a bad smell...",
      "created_at": "2022-11-09T07:48:35Z",
      "updated_at": "2022-11-09T07:48:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1017546338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017546338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020279585",
      "pull_request_review_id": 1177431099,
      "id": 1020279585,
      "node_id": "PRRC_kwDOABII58480Dsh",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998202653,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I disagree, but that discussion is for another PR. I reverted it back to what it is in `master` - an array of `bool`s.",
      "created_at": "2022-11-11T14:43:04Z",
      "updated_at": "2022-11-11T14:43:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1020279585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020279585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170236041",
      "pull_request_review_id": 1390434676,
      "id": 1170236041,
      "node_id": "PRRC_kwDOABII585FwGKJ",
      "diff_hunk": "@@ -115,9 +116,14 @@ static const uint64_t RANDOMIZER_ID_ADDRCACHE = 0x1cf2e4ddd306dda9ULL; // SHA256\n //\n bool fDiscover = true;\n bool fListen = true;\n-GlobalMutex g_maplocalhost_mutex;\n-std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+/**\n+ * The local network addresses of this node.\n+ */\n+Synced<std::map<CNetAddr, LocalServiceInfo>> g_my_net_addr;",
      "path": "src/net.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a49907318fff6d Naming nit, would this be better plural i.e. `g_my_net_addrs`, `g_local_addrs` or `g_my_local_addrs`?",
      "created_at": "2023-04-18T15:46:01Z",
      "updated_at": "2023-04-18T16:09:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170236041",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170236041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170240470",
      "pull_request_review_id": 1390434676,
      "id": 1170240470,
      "node_id": "PRRC_kwDOABII585FwHPW",
      "diff_hunk": "@@ -318,23 +323,20 @@ bool AddLocal(const CNetAddr &addr, int nScore)\n \n void RemoveLocal(const CService& addr)\n {\n-    LOCK(g_maplocalhost_mutex);\n     LogPrintf(\"RemoveLocal(%s)\\n\", addr.ToStringAddrPort());\n-    mapLocalHost.erase(addr);\n+    WITH_SYNCED_LOCK(g_my_net_addr, p, p->erase(addr));",
      "path": "src/net.cpp",
      "position": 69,
      "original_position": 69,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Style nit, unsure, would it be a good idea to use named args in the `WITH_SYNCED_LOCK` and `SYNCED_LOCK` calls? More verbose but more clear, though it's not too non-intuitive.\r\n\r\n```suggestion\r\n    WITH_SYNCED_LOCK(g_my_net_addr, /*name=*/p, /*code=*/p->erase(addr));\r\n```",
      "created_at": "2023-04-18T15:48:44Z",
      "updated_at": "2023-04-18T16:22:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170240470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170240470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 327,
      "original_line": 327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170242796",
      "pull_request_review_id": 1390434676,
      "id": 1170242796,
      "node_id": "PRRC_kwDOABII585FwHzs",
      "diff_hunk": "@@ -660,13 +660,12 @@ static RPCHelpMan getnetworkinfo()\n     }\n     UniValue localAddresses(UniValue::VARR);\n     {\n-        LOCK(g_maplocalhost_mutex);\n-        for (const std::pair<const CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n-        {\n+        SYNCED_LOCK(g_my_net_addr, p);\n+        for (const auto& [addr, service_info] : *p) {",
      "path": "src/rpc/net.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice cleanup.",
      "created_at": "2023-04-18T15:50:07Z",
      "updated_at": "2023-04-18T16:09:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170242796",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170242796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 664,
      "original_line": 664,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170250884",
      "pull_request_review_id": 1390434676,
      "id": 1170250884,
      "node_id": "PRRC_kwDOABII585FwJyE",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(7); }};\n+ * std::thread t2{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, v_locked);\n+ * const size_t size = v_locked->size();\n+ * for (auto& i : *v_locked) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == v_locked->size());\n+ *\n+ * std::cout << (*v_locked)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "373df61bc56 Style nit, unsure, would something like `local_instance` or `local_name` read better than `name` if callers use named args? Feel free to ignore.",
      "created_at": "2023-04-18T15:54:57Z",
      "updated_at": "2023-04-18T16:09:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170250884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170250884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 466,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170892009",
      "pull_request_review_id": 1391381278,
      "id": 1170892009,
      "node_id": "PRRC_kwDOABII585FymTp",
      "diff_hunk": "@@ -318,23 +323,20 @@ bool AddLocal(const CNetAddr &addr, int nScore)\n \n void RemoveLocal(const CService& addr)\n {\n-    LOCK(g_maplocalhost_mutex);\n     LogPrintf(\"RemoveLocal(%s)\\n\", addr.ToStringAddrPort());\n-    mapLocalHost.erase(addr);\n+    WITH_SYNCED_LOCK(g_my_net_addr, p, p->erase(addr));",
      "path": "src/net.cpp",
      "position": 69,
      "original_position": 69,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": 1170240470,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that's a bit too verbose.",
      "created_at": "2023-04-19T07:02:21Z",
      "updated_at": "2023-04-19T07:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170892009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170892009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 327,
      "original_line": 327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170894501",
      "pull_request_review_id": 1391385235,
      "id": 1170894501,
      "node_id": "PRRC_kwDOABII585Fym6l",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(7); }};\n+ * std::thread t2{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, v_locked);\n+ * const size_t size = v_locked->size();\n+ * for (auto& i : *v_locked) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == v_locked->size());\n+ *\n+ * std::cout << (*v_locked)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": 1170250884,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Named args at call sites look too verbose to me and here a short `name` is ok because the scope if very limited - only used on one line.",
      "created_at": "2023-04-19T07:05:09Z",
      "updated_at": "2023-04-19T07:05:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170894501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170894501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 466,
      "original_line": 466,
      "side": "RIGHT"
    }
  ]
}