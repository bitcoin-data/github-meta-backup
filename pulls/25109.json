{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109",
    "id": 933948780,
    "node_id": "PR_kwDOABII5843qu1s",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25109",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25109.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25109.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/436ce0233c276e263dcb441255dc0b881cb39cfb",
    "number": 25109,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Strengthen AssertLockNotHeld assertions",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This changes `AssertLockNotHeld` so that it is annotated with the negative capability for the mutex it refers to. clang applies negative capabilities recursively, so this helps avoid forgetting to annotate functions.\r\n\r\nNote that this can't reasonably be used for globals, because clang would require every function to be annotated with `EXCLUSIVE_LOCKS_REQUIRED(!g_mutex)` for each global mutex. At present, the only global mutexes that use `AssertLockNotHeld` are `RecursiveMutex` so we treat that as an exception in order to avoid having to add an excessive number of negative annotations.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2022-05-11T17:15:03Z",
    "updated_at": "2023-05-16T10:01:51Z",
    "closed_at": "2022-05-16T12:19:23Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-05-16T12:19:23Z",
    "merge_commit_sha": "aa3200d8967215dc93ea75e19db0aca537ec3d35",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ajtowns:202205-neg-anno-assertnotheld-only",
      "ref": "202205-neg-anno-assertnotheld-only",
      "sha": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 53941525,
        "node_id": "MDEwOlJlcG9zaXRvcnk1Mzk0MTUyNQ==",
        "name": "bitcoin",
        "full_name": "ajtowns/bitcoin",
        "owner": {
          "login": "ajtowns",
          "id": 127186,
          "node_id": "MDQ6VXNlcjEyNzE4Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ajtowns",
          "html_url": "https://github.com/ajtowns",
          "followers_url": "https://api.github.com/users/ajtowns/followers",
          "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
          "organizations_url": "https://api.github.com/users/ajtowns/orgs",
          "repos_url": "https://api.github.com/users/ajtowns/repos",
          "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ajtowns/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ajtowns/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ajtowns/bitcoin",
        "archive_url": "https://api.github.com/repos/ajtowns/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ajtowns/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ajtowns/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ajtowns/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ajtowns/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ajtowns/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ajtowns/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ajtowns/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ajtowns/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ajtowns/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ajtowns/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ajtowns/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ajtowns/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ajtowns/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ajtowns/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ajtowns/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ajtowns/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ajtowns/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ajtowns/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ajtowns/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ajtowns/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ajtowns/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ajtowns/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ajtowns/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ajtowns/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ajtowns/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ajtowns/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ajtowns/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ajtowns/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ajtowns/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ajtowns/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ajtowns/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ajtowns/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ajtowns/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ajtowns/bitcoin/hooks",
        "svn_url": "https://github.com/ajtowns/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 262427,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T19:54:41Z",
        "created_at": "2016-03-15T12:11:24Z",
        "updated_at": "2023-03-19T19:22:46Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "9db941d7737406b8593024ba130c3f9c186af4c6",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 108,
    "deletions": 89,
    "changed_files": 13,
    "commits": 2,
    "review_comments": 13,
    "comments": 9
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdkNzNmNThlOWNlYThmNGIwYmMxNjUxMjk4Mzg5OGZkZGRlM2Q3NjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "tree": {
        "sha": "f66b9dd960d017efd1af4a56c626e439d121890f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f66b9dd960d017efd1af4a56c626e439d121890f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9db941d7737406b8593024ba130c3f9c186af4c6",
          "sha": "9db941d7737406b8593024ba130c3f9c186af4c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9db941d7737406b8593024ba130c3f9c186af4c6"
        }
      ],
      "message": "Increase threadsafety annotation coverage",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-05-11T16:25:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-04-20T06:47:29Z"
      },
      "sha": "7d73f58e9cea8f4b0bc16512983898fddde3d764"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQzNmNlMDIzM2MyNzZlMjYzZGNiNDQxMjU1ZGMwYjg4MWNiMzljZmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/436ce0233c276e263dcb441255dc0b881cb39cfb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/436ce0233c276e263dcb441255dc0b881cb39cfb",
      "tree": {
        "sha": "5f406b00debd824d6e0334fe038c57bc6dfdfa16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f406b00debd824d6e0334fe038c57bc6dfdfa16"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d73f58e9cea8f4b0bc16512983898fddde3d764",
          "sha": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7d73f58e9cea8f4b0bc16512983898fddde3d764"
        }
      ],
      "message": "sync.h: strengthen AssertLockNotHeld assertion",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-05-11T16:25:56Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-04-20T06:49:33Z"
      },
      "sha": "436ce0233c276e263dcb441255dc0b881cb39cfb"
    },
    {
      "event": "commented",
      "id": 1124036445,
      "node_id": "IC_kwDOABII585C_29d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124036445",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:20Z",
      "updated_at": "2022-05-11T17:17:55Z",
      "author_association": "MEMBER",
      "body": "cc @vasild @w0xlt @jonatack @hebasto \r\n\r\nThis is the first two commits from #24931 so we can hopefully make some progress..",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1124036445",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "mentioned",
      "id": 6592265515,
      "node_id": "MEE_lADOABII585JfWjpzwAAAAGI7f0r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265515",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "subscribed",
      "id": 6592265521,
      "node_id": "SE_lADOABII585JfWjpzwAAAAGI7f0x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265521",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "mentioned",
      "id": 6592265532,
      "node_id": "MEE_lADOABII585JfWjpzwAAAAGI7f08",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265532",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "subscribed",
      "id": 6592265536,
      "node_id": "SE_lADOABII585JfWjpzwAAAAGI7f1A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265536",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "mentioned",
      "id": 6592265550,
      "node_id": "MEE_lADOABII585JfWjpzwAAAAGI7f1O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265550",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "subscribed",
      "id": 6592265556,
      "node_id": "SE_lADOABII585JfWjpzwAAAAGI7f1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265556",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "mentioned",
      "id": 6592265566,
      "node_id": "MEE_lADOABII585JfWjpzwAAAAGI7f1e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265566",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "subscribed",
      "id": 6592265575,
      "node_id": "SE_lADOABII585JfWjpzwAAAAGI7f1n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592265575",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:17:21Z"
    },
    {
      "event": "labeled",
      "id": 6592375516,
      "node_id": "LE_lADOABII585JfWjpzwAAAAGI76rc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6592375516",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-11T17:33:45Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "commented",
      "id": 1124625585,
      "node_id": "IC_kwDOABII585DCGyx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124625585",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-12T07:24:10Z",
      "updated_at": "2022-05-13T17:52:19Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24970](https://github.com/bitcoin/bitcoin/pull/24970) (net processing: Move cleanSubVer, fPreferredDownload and nLocalHostNonce to Peer by jnewbery)\n* [#24474](https://github.com/bitcoin/bitcoin/pull/24474) (Additional thread safety annotations for CNode/Peer by ajtowns)\n* [#24356](https://github.com/bitcoin/bitcoin/pull/24356) (refactor: replace CConnman::SocketEvents() with mockable Sock::WaitMany() by vasild)\n* [#24230](https://github.com/bitcoin/bitcoin/pull/24230) (indexes: Stop using node internal types and locking cs_main, improve sync logic by ryanofsky)\n* [#24170](https://github.com/bitcoin/bitcoin/pull/24170) (p2p, rpc: Manual block-relay-only connections with addnode by mzumsande)\n* [#24122](https://github.com/bitcoin/bitcoin/pull/24122) (refactor: replace RecursiveMutex `cs_vProcessMsg` with Mutex (and rename) by theStack)\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n* [#21527](https://github.com/bitcoin/bitcoin/pull/21527) (net_processing: lock clean up by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1124625585",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "reviewed",
      "id": 972324937,
      "node_id": "PRR_kwDOABII58459IBJ",
      "url": null,
      "actor": null,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 436ce0233c276e263dcb441255dc0b881cb39cfb\r\n\r\nLooks like replacing `LOCKS_EXCLUDED(::cs_main)` with `EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)` or adding the latter where missing is not too many changes and is in line with the direction of this PR. Consider the diff below, then we don't need to distinguish between `Mutex` and `RecursiveMutex` in `AssertLockNotHeld()`.\r\n\r\n<details>\r\n<summary>diff</summary>\r\n\r\n```diff\r\ndiff --git i/src/index/base.h w/src/index/base.h\r\nindex a8f6a18c8d..989cbcf824 100644\r\n--- i/src/index/base.h\r\n+++ w/src/index/base.h\r\n@@ -115,13 +115,13 @@ public:\r\n \r\n     /// Blocks the current thread until the index is caught up to the current\r\n     /// state of the block chain. This only blocks if the index has gotten in\r\n     /// sync once and only needs to process blocks in the ValidationInterface\r\n     /// queue. If the index is catching up from far behind, this method does\r\n     /// not block and immediately returns false.\r\n-    bool BlockUntilSyncedToCurrentChain() const LOCKS_EXCLUDED(::cs_main);\r\n+    bool BlockUntilSyncedToCurrentChain() const EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n \r\n     void Interrupt();\r\n \r\n     /// Start initializes the sync state and registers the instance as a\r\n     /// ValidationInterface so that it stays in sync with blockchain updates.\r\n     [[nodiscard]] bool Start(CChainState& active_chainstate);\r\ndiff --git i/src/net_processing.cpp w/src/net_processing.cpp\r\nindex 46a5e54e32..d436b63d9b 100644\r\n--- i/src/net_processing.cpp\r\n+++ w/src/net_processing.cpp\r\n@@ -451,13 +451,13 @@ public:\r\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\r\n \r\n     /** Implement NetEventsInterface */\r\n     void InitializeNode(CNode* pnode) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\r\n     void FinalizeNode(const CNode& node) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\r\n     bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override\r\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex);\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main, !m_peer_mutex, !m_recent_confirmed_transactions_mutex);\r\n     bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing)\r\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex);\r\n \r\n     /** Implement PeerManager */\r\n     void StartScheduledTasks(CScheduler& scheduler) override;\r\n     void CheckForStaleTipAndEvictPeers() override;\r\n@@ -467,13 +467,13 @@ public:\r\n     void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\r\n     void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\r\n     void SetBestHeight(int height) override { m_best_height = height; };\r\n     void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\r\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\r\n                         const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) override\r\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex);\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main, !m_peer_mutex, !m_recent_confirmed_transactions_mutex);\r\n     void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) override;\r\n \r\n private:\r\n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\r\n     void ConsiderEviction(CNode& pto, std::chrono::seconds time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\r\n \r\n@@ -732,16 +732,16 @@ private:\r\n     /** When our tip was last updated. */\r\n     std::atomic<std::chrono::seconds> m_last_tip_update{0s};\r\n \r\n     /** Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed). */\r\n     CTransactionRef FindTxForGetData(const CNode& peer, const GenTxid& gtxid, const std::chrono::seconds mempool_req, const std::chrono::seconds now) LOCKS_EXCLUDED(cs_main);\r\n \r\n-    void ProcessGetData(CNode& pfrom, Peer& peer, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(peer.m_getdata_requests_mutex) LOCKS_EXCLUDED(::cs_main);\r\n+    void ProcessGetData(CNode& pfrom, Peer& peer, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main, peer.m_getdata_requests_mutex);\r\n \r\n     /** Process a new block. Perform any post-processing housekeeping */\r\n-    void ProcessBlock(CNode& node, const std::shared_ptr<const CBlock>& block, bool force_processing);\r\n+    void ProcessBlock(CNode& node, const std::shared_ptr<const CBlock>& block, bool force_processing) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n \r\n     /** Relay map (txid or wtxid -> CTransactionRef) */\r\n     typedef std::map<uint256, CTransactionRef> MapRelay;\r\n     MapRelay mapRelay GUARDED_BY(cs_main);\r\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\r\n     std::deque<std::pair<std::chrono::microseconds, MapRelay::iterator>> g_relay_expiration GUARDED_BY(cs_main);\r\ndiff --git i/src/qt/test/wallettests.cpp w/src/qt/test/wallettests.cpp\r\nindex c4cd0f4cd1..5624125121 100644\r\n--- i/src/qt/test/wallettests.cpp\r\n+++ w/src/qt/test/wallettests.cpp\r\n@@ -139,13 +139,13 @@ void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, st\r\n //\r\n // This also requires overriding the default minimal Qt platform:\r\n //\r\n //     QT_QPA_PLATFORM=xcb     src/qt/test/test_bitcoin-qt  # Linux\r\n //     QT_QPA_PLATFORM=windows src/qt/test/test_bitcoin-qt  # Windows\r\n //     QT_QPA_PLATFORM=cocoa   src/qt/test/test_bitcoin-qt  # macOS\r\n-void TestGUI(interfaces::Node& node)\r\n+void TestGUI(interfaces::Node& node) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Set up wallet and chain with 105 blocks (5 mature blocks for spending).\r\n     TestChain100Setup test;\r\n     for (int i = 0; i < 5; ++i) {\r\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\r\n     }\r\ndiff --git i/src/qt/test/wallettests.h w/src/qt/test/wallettests.h\r\nindex 6044bedb1d..a819ad5127 100644\r\n--- i/src/qt/test/wallettests.h\r\n+++ w/src/qt/test/wallettests.h\r\n@@ -2,12 +2,15 @@\r\n // Distributed under the MIT software license, see the accompanying\r\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n \r\n #ifndef BITCOIN_QT_TEST_WALLETTESTS_H\r\n #define BITCOIN_QT_TEST_WALLETTESTS_H\r\n \r\n+#include <chain.h>\r\n+#include <sync.h>\r\n+\r\n #include <QObject>\r\n #include <QTest>\r\n \r\n namespace interfaces {\r\n class Node;\r\n } // namespace interfaces\r\n@@ -18,10 +21,10 @@ class WalletTests : public QObject\r\n     explicit WalletTests(interfaces::Node& node) : m_node(node) {}\r\n     interfaces::Node& m_node;\r\n \r\n     Q_OBJECT\r\n \r\n private Q_SLOTS:\r\n-    void walletTests();\r\n+    void walletTests() EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n };\r\n \r\n #endif // BITCOIN_QT_TEST_WALLETTESTS_H\r\ndiff --git i/src/rest.cpp w/src/rest.cpp\r\nindex 22b5d2e074..f26d4e1d3b 100644\r\n--- i/src/rest.cpp\r\n+++ w/src/rest.cpp\r\n@@ -635,12 +635,13 @@ static bool rest_mempool_contents(const std::any& context, HTTPRequest* req, con\r\n         return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\r\n     }\r\n     }\r\n }\r\n \r\n static bool rest_tx(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n+    EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     if (!CheckWarmup(req))\r\n         return false;\r\n     std::string hashStr;\r\n     const RESTResponseFormat rf = ParseDataFormat(hashStr, strURIPart);\r\n \r\ndiff --git i/src/rpc/blockchain.cpp w/src/rpc/blockchain.cpp\r\nindex 50bf764e53..354a391da7 100644\r\n--- i/src/rpc/blockchain.cpp\r\n+++ w/src/rpc/blockchain.cpp\r\n@@ -130,12 +130,13 @@ static const CBlockIndex* ParseHashOrHeight(const UniValue& param, ChainstateMan\r\n \r\n         return pindex;\r\n     }\r\n }\r\n \r\n UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex)\r\n+    EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Serialize passed information without accessing chain state of the active chain!\r\n     AssertLockNotHeld(cs_main); // For performance reasons\r\n \r\n     UniValue result(UniValue::VOBJ);\r\n     result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\r\n@@ -158,13 +159,13 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\r\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\r\n     if (pnext)\r\n         result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\r\n     return result;\r\n }\r\n \r\n-UniValue blockToJSON(BlockManager& blockman, const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity)\r\n+UniValue blockToJSON(BlockManager& blockman, const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     UniValue result = blockheaderToJSON(tip, blockindex);\r\n \r\n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\r\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, PROTOCOL_VERSION));\r\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\r\ndiff --git i/src/rpc/mempool.cpp w/src/rpc/mempool.cpp\r\nindex 27080d3881..d6f897b0ca 100644\r\n--- i/src/rpc/mempool.cpp\r\n+++ w/src/rpc/mempool.cpp\r\n@@ -45,13 +45,13 @@ static RPCHelpMan sendrawtransaction()\r\n             + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\r\n             \"\\nSend the transaction (signed hex)\\n\"\r\n             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\r\n             \"\\nAs a JSON-RPC call\\n\"\r\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\r\n                 },\r\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\r\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) -> UniValue\r\n         {\r\n             RPCTypeCheck(request.params, {\r\n                 UniValue::VSTR,\r\n                 UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\r\n             });\r\n \r\ndiff --git i/src/rpc/mining.cpp w/src/rpc/mining.cpp\r\nindex b552528951..fddfb04be6 100644\r\n--- i/src/rpc/mining.cpp\r\n+++ w/src/rpc/mining.cpp\r\n@@ -111,13 +111,13 @@ static RPCHelpMan getnetworkhashps()\r\n     LOCK(cs_main);\r\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1, chainman.ActiveChain());\r\n },\r\n     };\r\n }\r\n \r\n-static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t& max_tries, uint256& block_hash)\r\n+static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t& max_tries, uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     block_hash.SetNull();\r\n     block.hashMerkleRoot = BlockMerkleRoot(block);\r\n \r\n     CChainParams chainparams(Params());\r\n \r\n@@ -138,13 +138,13 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\r\n     }\r\n \r\n     block_hash = block.GetHash();\r\n     return true;\r\n }\r\n \r\n-static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& mempool, const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)\r\n+static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& mempool, const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     UniValue blockHashes(UniValue::VARR);\r\n     while (nGenerate > 0 && !ShutdownRequested()) {\r\n         std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(chainman.ActiveChainstate(), mempool, Params()).CreateNewBlock(coinbase_script));\r\n         if (!pblocktemplate.get())\r\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\r\n@@ -212,13 +212,13 @@ static RPCHelpMan generatetodescriptor()\r\n             {\r\n                 {RPCResult::Type::STR_HEX, \"\", \"blockhash\"},\r\n             }\r\n         },\r\n         RPCExamples{\r\n             \"\\nGenerate 11 blocks to mydesc\\n\" + HelpExampleCli(\"generatetodescriptor\", \"11 \\\"mydesc\\\"\")},\r\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\r\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) -> UniValue\r\n {\r\n     const int num_blocks{request.params[0].get_int()};\r\n     const uint64_t max_tries{request.params[2].isNull() ? DEFAULT_MAX_TRIES : request.params[2].get_int()};\r\n \r\n     CScript coinbase_script;\r\n     std::string error;\r\n@@ -259,13 +259,13 @@ static RPCHelpMan generatetoaddress()\r\n          RPCExamples{\r\n             \"\\nGenerate 11 blocks to myaddress\\n\"\r\n             + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\r\n             + \"If you are using the \" PACKAGE_NAME \" wallet, you can get a new address to send the newly generated bitcoin to with:\\n\"\r\n             + HelpExampleCli(\"getnewaddress\", \"\")\r\n                 },\r\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\r\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) -> UniValue\r\n {\r\n     const int num_blocks{request.params[0].get_int()};\r\n     const uint64_t max_tries{request.params[2].isNull() ? DEFAULT_MAX_TRIES : request.params[2].get_int()};\r\n \r\n     CTxDestination destination = DecodeDestination(request.params[1].get_str());\r\n     if (!IsValidDestination(destination)) {\r\ndiff --git i/src/rpc/rawtransaction.cpp w/src/rpc/rawtransaction.cpp\r\nindex e8713fbd2e..1b82795952 100644\r\n--- i/src/rpc/rawtransaction.cpp\r\n+++ w/src/rpc/rawtransaction.cpp\r\n@@ -205,13 +205,13 @@ static RPCHelpMan getrawtransaction()\r\n                     HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\r\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\r\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\r\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\r\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\r\n                 },\r\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\r\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) -> UniValue\r\n {\r\n     const NodeContext& node = EnsureAnyNodeContext(request.context);\r\n     ChainstateManager& chainman = EnsureChainman(node);\r\n \r\n     bool in_active_chain = true;\r\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\r\ndiff --git i/src/test/blockfilter_index_tests.cpp w/src/test/blockfilter_index_tests.cpp\r\nindex 82b9617384..785ef6f852 100644\r\n--- i/src/test/blockfilter_index_tests.cpp\r\n+++ w/src/test/blockfilter_index_tests.cpp\r\n@@ -21,13 +21,13 @@ using node::BlockAssembler;\r\n using node::CBlockTemplate;\r\n \r\n BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\r\n \r\n struct BuildChainTestingSetup : public TestChain100Setup {\r\n     CBlock CreateBlock(const CBlockIndex* prev, const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey);\r\n-    bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key, size_t length, std::vector<std::shared_ptr<CBlock>>& chain);\r\n+    bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key, size_t length, std::vector<std::shared_ptr<CBlock>>& chain) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n };\r\n \r\n static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\r\n                                uint256& last_header)\r\n {\r\n     BlockFilter expected_filter;\r\ndiff --git i/src/test/coinstatsindex_tests.cpp w/src/test/coinstatsindex_tests.cpp\r\nindex 5b73481bc1..59caa7cdde 100644\r\n--- i/src/test/coinstatsindex_tests.cpp\r\n+++ w/src/test/coinstatsindex_tests.cpp\r\n@@ -15,13 +15,13 @@\r\n \r\n using node::CCoinsStats;\r\n using node::CoinStatsHashType;\r\n \r\n BOOST_AUTO_TEST_SUITE(coinstatsindex_tests)\r\n \r\n-static void IndexWaitSynced(BaseIndex& index)\r\n+static void IndexWaitSynced(BaseIndex& index) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Allow the CoinStatsIndex to catch up with the block index that is syncing\r\n     // in a background thread.\r\n     const auto timeout = GetTime<std::chrono::seconds>() + 120s;\r\n     while (!index.BlockUntilSyncedToCurrentChain()) {\r\n         BOOST_REQUIRE(timeout > GetTime<std::chrono::milliseconds>());\r\n@@ -84,13 +84,13 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\r\n \r\n     // Rest of shutdown sequence and destructors happen in ~TestingSetup()\r\n }\r\n \r\n // Test shutdown between BlockConnected and ChainStateFlushed notifications,\r\n // make sure index is not corrupted and is able to reload.\r\n-BOOST_FIXTURE_TEST_CASE(coinstatsindex_unclean_shutdown, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(coinstatsindex_unclean_shutdown, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     CChainState& chainstate = Assert(m_node.chainman)->ActiveChainstate();\r\n     const CChainParams& params = Params();\r\n     {\r\n         CoinStatsIndex index{1 << 20};\r\n         BOOST_REQUIRE(index.Start(chainstate));\r\ndiff --git i/src/test/fuzz/utxo_snapshot.cpp w/src/test/fuzz/utxo_snapshot.cpp\r\nindex e513f1883c..3c9b2fb76c 100644\r\n--- i/src/test/fuzz/utxo_snapshot.cpp\r\n+++ w/src/test/fuzz/utxo_snapshot.cpp\r\n@@ -24,13 +24,13 @@ void initialize_chain()\r\n {\r\n     const auto params{CreateChainParams(ArgsManager{}, CBaseChainParams::REGTEST)};\r\n     static const auto chain{CreateBlockChain(2 * COINBASE_MATURITY, *params)};\r\n     g_chain = &chain;\r\n }\r\n \r\n-FUZZ_TARGET_INIT(utxo_snapshot, initialize_chain)\r\n+FUZZ_TARGET_INIT(utxo_snapshot, initialize_chain) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\r\n     std::unique_ptr<const TestingSetup> setup{MakeNoLogFileContext<const TestingSetup>()};\r\n     const auto& node = setup->m_node;\r\n     auto& chainman{*node.chainman};\r\n \r\ndiff --git i/src/test/interfaces_tests.cpp w/src/test/interfaces_tests.cpp\r\nindex 49b7d2003b..a6288d8ee6 100644\r\n--- i/src/test/interfaces_tests.cpp\r\n+++ w/src/test/interfaces_tests.cpp\r\n@@ -88,13 +88,13 @@ BOOST_AUTO_TEST_CASE(findAncestorByHash)\r\n     int height = -1;\r\n     BOOST_CHECK(chain->findAncestorByHash(active[20]->GetBlockHash(), active[10]->GetBlockHash(), FoundBlock().height(height)));\r\n     BOOST_CHECK_EQUAL(height, 10);\r\n     BOOST_CHECK(!chain->findAncestorByHash(active[10]->GetBlockHash(), active[20]->GetBlockHash()));\r\n }\r\n \r\n-BOOST_AUTO_TEST_CASE(findCommonAncestor)\r\n+BOOST_AUTO_TEST_CASE(findCommonAncestor) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     auto& chain = m_node.chain;\r\n     const CChain& active = Assert(m_node.chainman)->ActiveChain();\r\n     auto* orig_tip = active.Tip();\r\n     for (int i = 0; i < 10; ++i) {\r\n         BlockValidationState state;\r\ndiff --git i/src/test/txindex_tests.cpp w/src/test/txindex_tests.cpp\r\nindex 15213f826b..bce6d8b297 100644\r\n--- i/src/test/txindex_tests.cpp\r\n+++ w/src/test/txindex_tests.cpp\r\n@@ -10,13 +10,13 @@\r\n #include <validation.h>\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n BOOST_AUTO_TEST_SUITE(txindex_tests)\r\n \r\n-BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     TxIndex txindex(1 << 20, true);\r\n \r\n     CTransactionRef tx_disk;\r\n     uint256 block_hash;\r\n \r\ndiff --git i/src/test/txpackage_tests.cpp w/src/test/txpackage_tests.cpp\r\nindex 079b753304..b08aec63f3 100644\r\n--- i/src/test/txpackage_tests.cpp\r\n+++ w/src/test/txpackage_tests.cpp\r\n@@ -339,13 +339,13 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\r\n         BOOST_CHECK(submit_deduped.m_package_feerate == std::nullopt);\r\n     }\r\n }\r\n \r\n // Tests for packages containing transactions that have same-txid-different-witness equivalents in\r\n // the mempool.\r\n-BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Mine blocks to mature coinbases.\r\n     mineBlocks(5);\r\n     LOCK(cs_main);\r\n \r\n     // Transactions with a same-txid-different-witness transaction in the mempool should be ignored,\r\n@@ -595,13 +595,13 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\r\n         BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\r\n                             strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\r\n                                       mixed_result.m_package_feerate.value().ToString()));\r\n     }\r\n }\r\n \r\n-BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     mineBlocks(5);\r\n     LOCK(::cs_main);\r\n     size_t expected_pool_size = m_node.mempool->size();\r\n     CKey child_key;\r\n     child_key.MakeNewKey(true);\r\ndiff --git i/src/test/txvalidationcache_tests.cpp w/src/test/txvalidationcache_tests.cpp\r\nindex d41b54af20..d8bd91cace 100644\r\n--- i/src/test/txvalidationcache_tests.cpp\r\n+++ w/src/test/txvalidationcache_tests.cpp\r\n@@ -22,13 +22,13 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,\r\n                        const CCoinsViewCache& inputs, unsigned int flags, bool cacheSigStore,\r\n                        bool cacheFullScriptStore, PrecomputedTransactionData& txdata,\r\n                        std::vector<CScriptCheck>* pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\r\n \r\n BOOST_AUTO_TEST_SUITE(txvalidationcache_tests)\r\n \r\n-BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, Dersig100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, Dersig100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Make sure skipping validation of transactions that were\r\n     // validated going into the memory pool does not allow\r\n     // double-spends in blocks to pass validation when they should not.\r\n \r\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\r\ndiff --git i/src/test/util/mining.cpp w/src/test/util/mining.cpp\r\nindex 5ed8598e8e..8699c19622 100644\r\n--- i/src/test/util/mining.cpp\r\n+++ w/src/test/util/mining.cpp\r\n@@ -57,12 +57,13 @@ std::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const\r\n         }\r\n     }\r\n     return ret;\r\n }\r\n \r\n CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\r\n+    EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     auto block = PrepareBlock(node, coinbase_scriptPubKey);\r\n \r\n     while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\r\n         ++block->nNonce;\r\n         assert(block->nNonce);\r\ndiff --git i/src/test/util/setup_common.h w/src/test/util/setup_common.h\r\nindex a1b7525cf4..69abd9437f 100644\r\n--- i/src/test/util/setup_common.h\r\n+++ w/src/test/util/setup_common.h\r\n@@ -128,25 +128,26 @@ struct TestChain100Setup : public TestingSetup {\r\n      * Create a new block with just given transactions, coinbase paying to\r\n      * scriptPubKey, and try to add it to the current chain.\r\n      * If no chainstate is specified, default to the active.\r\n      */\r\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\r\n                                  const CScript& scriptPubKey,\r\n-                                 CChainState* chainstate = nullptr);\r\n+                                 CChainState* chainstate = nullptr)\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n \r\n     /**\r\n      * Create a new block with just given transactions, coinbase paying to\r\n      * scriptPubKey.\r\n      */\r\n     CBlock CreateBlock(\r\n         const std::vector<CMutableTransaction>& txns,\r\n         const CScript& scriptPubKey,\r\n         CChainState& chainstate);\r\n \r\n     //! Mine a series of new blocks on the active chain.\r\n-    void mineBlocks(int num_blocks);\r\n+    void mineBlocks(int num_blocks) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n \r\n     /**\r\n      * Create a transaction and submit to the mempool.\r\n      *\r\n      * @param input_transaction  The transaction to spend\r\n      * @param input_vout         The vout to spend from the input_transaction\r\ndiff --git i/src/test/validation_block_tests.cpp w/src/test/validation_block_tests.cpp\r\nindex c5b1dabcb7..7fd265b74c 100644\r\n--- i/src/test/validation_block_tests.cpp\r\n+++ w/src/test/validation_block_tests.cpp\r\n@@ -21,16 +21,20 @@\r\n \r\n using node::BlockAssembler;\r\n \r\n namespace validation_block_tests {\r\n struct MinerTestingSetup : public RegTestingSetup {\r\n     std::shared_ptr<CBlock> Block(const uint256& prev_hash);\r\n-    std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash);\r\n-    std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash);\r\n-    std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock);\r\n-    void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks);\r\n+    std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n+    std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n+    std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n+    void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n };\r\n } // namespace validation_block_tests\r\n \r\n BOOST_FIXTURE_TEST_SUITE(validation_block_tests, MinerTestingSetup)\r\n \r\n struct TestSubscriber final : public CValidationInterface {\r\n@@ -143,13 +147,13 @@ void MinerTestingSetup::BuildChain(const uint256& root, int height, const unsign\r\n     if (gen_fork) {\r\n         blocks.push_back(GoodBlock(root));\r\n         BuildChain(blocks.back()->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\r\n     }\r\n }\r\n \r\n-BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\r\n+BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // build a large-ish chain that's likely to have some forks\r\n     std::vector<std::shared_ptr<const CBlock>> blocks;\r\n     while (blocks.size() < 50) {\r\n         blocks.clear();\r\n         BuildChain(Params().GenesisBlock().GetHash(), 100, 15, 10, 500, blocks);\r\n@@ -171,13 +175,13 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\r\n \r\n     // create a bunch of threads that repeatedly process a block generated above at random\r\n     // this will create parallelism and randomness inside validation - the ValidationInterface\r\n     // will subscribe to events generated during block validation and assert on ordering invariance\r\n     std::vector<std::thread> threads;\r\n     for (int i = 0; i < 10; i++) {\r\n-        threads.emplace_back([&]() {\r\n+        threads.emplace_back([&]() EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) {\r\n             bool ignored;\r\n             FastRandomContext insecure;\r\n             for (int i = 0; i < 1000; i++) {\r\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\r\n                 Assert(m_node.chainman)->ProcessNewBlock(Params(), block, true, &ignored);\r\n             }\r\n@@ -217,16 +221,16 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\r\n  * from another thread during the reorg and checking that its size only changes\r\n  * once. The size changing exactly once indicates that the polling thread's\r\n  * view of the mempool is either consistent with the chain state before reorg,\r\n  * or consistent with the chain state after the reorg, and not just consistent\r\n  * with some intermediate state during the reorg.\r\n  */\r\n-BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\r\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     bool ignored;\r\n-    auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) -> bool {\r\n+    auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) -> bool {\r\n         return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, /*force_processing=*/true, /*new_block=*/&ignored);\r\n     };\r\n \r\n     // Process all mined blocks\r\n     BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\r\n     auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\r\ndiff --git i/src/test/validation_chainstate_tests.cpp w/src/test/validation_chainstate_tests.cpp\r\nindex 2a3990bb7c..12ad0fd485 100644\r\n--- i/src/test/validation_chainstate_tests.cpp\r\n+++ w/src/test/validation_chainstate_tests.cpp\r\n@@ -75,13 +75,13 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\r\n }\r\n \r\n //! Test UpdateTip behavior for both active and background chainstates.\r\n //!\r\n //! When run on the background chainstate, UpdateTip should do a subset\r\n //! of what it does for the active chainstate.\r\n-BOOST_FIXTURE_TEST_CASE(chainstate_update_tip, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(chainstate_update_tip, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     ChainstateManager& chainman = *Assert(m_node.chainman);\r\n     uint256 curr_tip = ::g_best_block;\r\n \r\n     // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\r\n     // be found.\r\ndiff --git i/src/validation.cpp w/src/validation.cpp\r\nindex b5d6a66088..6c8cf79649 100644\r\n--- i/src/validation.cpp\r\n+++ w/src/validation.cpp\r\n@@ -2951,21 +2951,22 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\r\n     if (fNotify) {\r\n         uiInterface.NotifyHeaderTip(GetSynchronizationState(fInitialBlockDownload), pindexHeader);\r\n     }\r\n     return fNotify;\r\n }\r\n \r\n-static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {\r\n+static void LimitValidationInterfaceQueue() EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) {\r\n     AssertLockNotHeld(cs_main);\r\n \r\n     if (GetMainSignals().CallbacksPending() > 10) {\r\n         SyncWithValidationInterfaceQueue();\r\n     }\r\n }\r\n \r\n bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr<const CBlock> pblock)\r\n+    EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     AssertLockNotHeld(m_chainstate_mutex);\r\n \r\n     // Note that while we're often called here from ProcessNewBlock, this is\r\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\r\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\r\ndiff --git i/src/validation.h w/src/validation.h\r\nindex 42e41502f9..fa1cfd778f 100644\r\n--- i/src/validation.h\r\n+++ w/src/validation.h\r\n@@ -660,19 +660,17 @@ public:\r\n     // Manual block validity manipulation:\r\n     /** Mark a block as precious and reorganize.\r\n      *\r\n      * May not be called in a validationinterface callback.\r\n      */\r\n     bool PreciousBlock(BlockValidationState& state, CBlockIndex* pindex)\r\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_chainstate_mutex)\r\n-        LOCKS_EXCLUDED(::cs_main);\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main, !m_chainstate_mutex);\r\n \r\n     /** Mark a block as invalid. */\r\n     bool InvalidateBlock(BlockValidationState& state, CBlockIndex* pindex)\r\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_chainstate_mutex)\r\n-        LOCKS_EXCLUDED(::cs_main);\r\n+        EXCLUSIVE_LOCKS_REQUIRED(!::cs_main, !m_chainstate_mutex);\r\n \r\n     /** Remove invalidity status from a block and its descendants. */\r\n     void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\r\n \r\n     /** Replay blocks that aren't fully applied to the database. */\r\n     bool ReplayBlocks();\r\n@@ -957,26 +955,26 @@ public:\r\n      *\r\n      * @param[in]   block The block we want to process.\r\n      * @param[in]   force_processing Process this block even if unrequested; used for non-network block sources.\r\n      * @param[out]  new_block A boolean which is set to indicate if the block was first received via this call\r\n      * @returns     If the block was processed, independently of block validity\r\n      */\r\n-    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& block, bool force_processing, bool* new_block) LOCKS_EXCLUDED(cs_main);\r\n+    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& block, bool force_processing, bool* new_block) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n \r\n     /**\r\n      * Process incoming block headers.\r\n      *\r\n      * May not be called in a\r\n      * validationinterface callback.\r\n      *\r\n      * @param[in]  block The block headers themselves\r\n      * @param[out] state This may be set to an Error state if any error occurred processing them\r\n      * @param[in]  chainparams The params for the chain we want to connect to\r\n      * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\r\n      */\r\n-    bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr) LOCKS_EXCLUDED(cs_main);\r\n+    bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\r\n \r\n     /**\r\n      * Try to add a transaction to the memory pool.\r\n      *\r\n      * @param[in]  tx              The transaction to submit for mempool acceptance.\r\n      * @param[in]  test_accept     When true, run validation checks but don't submit to mempool.\r\ndiff --git i/src/validationinterface.cpp w/src/validationinterface.cpp\r\nindex 3f7fad3f87..a1d094164e 100644\r\n--- i/src/validationinterface.cpp\r\n+++ w/src/validationinterface.cpp\r\n@@ -154,13 +154,13 @@ void UnregisterAllValidationInterfaces()\r\n \r\n void CallFunctionInValidationInterfaceQueue(std::function<void()> func)\r\n {\r\n     g_signals.m_internals->m_schedulerClient.AddToProcessQueue(std::move(func));\r\n }\r\n \r\n-void SyncWithValidationInterfaceQueue()\r\n+void SyncWithValidationInterfaceQueue() EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     AssertLockNotHeld(cs_main);\r\n     // Block until the validation queue drains\r\n     std::promise<void> promise;\r\n     CallFunctionInValidationInterfaceQueue([&promise] {\r\n         promise.set_value();\r\ndiff --git i/src/wallet/bdb.cpp w/src/wallet/bdb.cpp\r\nindex 1aa0339445..459c64aeab 100644\r\n--- i/src/wallet/bdb.cpp\r\n+++ w/src/wallet/bdb.cpp\r\n@@ -421,13 +421,13 @@ void BerkeleyEnvironment::CloseDb(const fs::path& filename)\r\n             database.m_db->close(0);\r\n             database.m_db.reset();\r\n         }\r\n     }\r\n }\r\n \r\n-void BerkeleyEnvironment::ReloadDbEnv()\r\n+void BerkeleyEnvironment::ReloadDbEnv() EXCLUSIVE_LOCKS_REQUIRED(!cs_db)\r\n {\r\n     // Make sure that no Db's are in use\r\n     AssertLockNotHeld(cs_db);\r\n     std::unique_lock<RecursiveMutex> lock(cs_db);\r\n     m_db_in_use.wait(lock, [this](){\r\n         for (auto& db : m_databases) {\r\n@@ -653,13 +653,13 @@ void BerkeleyDatabase::Flush()\r\n \r\n void BerkeleyDatabase::Close()\r\n {\r\n     env->Flush(true);\r\n }\r\n \r\n-void BerkeleyDatabase::ReloadDbEnv()\r\n+void BerkeleyDatabase::ReloadDbEnv() EXCLUSIVE_LOCKS_REQUIRED(!cs_db)\r\n {\r\n     env->ReloadDbEnv();\r\n }\r\n \r\n bool BerkeleyBatch::StartCursor()\r\n {\r\ndiff --git i/src/wallet/test/spend_tests.cpp w/src/wallet/test/spend_tests.cpp\r\nindex 334bd5b8bc..d10c4f1644 100644\r\n--- i/src/wallet/test/spend_tests.cpp\r\n+++ w/src/wallet/test/spend_tests.cpp\r\n@@ -12,13 +12,13 @@\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n namespace wallet {\r\n BOOST_FIXTURE_TEST_SUITE(spend_tests, WalletTestingSetup)\r\n \r\n-BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\r\n     auto wallet = CreateSyncedWallet(*m_node.chain, m_node.chainman->ActiveChain(), m_args, coinbaseKey);\r\n \r\n     // Check that a subtract-from-recipient transaction slightly less than the\r\n     // coinbase input amount does not create a change output (because it would\r\ndiff --git i/src/wallet/test/wallet_tests.cpp w/src/wallet/test/wallet_tests.cpp\r\nindex 683f0eb327..06eefaf2b7 100644\r\n--- i/src/wallet/test/wallet_tests.cpp\r\n+++ w/src/wallet/test/wallet_tests.cpp\r\n@@ -90,13 +90,13 @@ static void AddKey(CWallet& wallet, const CKey& key)\r\n     std::unique_ptr<Descriptor> desc = Parse(\"combo(\" + EncodeSecret(key) + \")\", provider, error, /* require_checksum=*/ false);\r\n     assert(desc);\r\n     WalletDescriptor w_desc(std::move(desc), 0, 0, 1, 1);\r\n     if (!wallet.AddWalletDescriptor(w_desc, provider, \"\", false)) assert(false);\r\n }\r\n \r\n-BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Cap last block file size, and mine new block in a new block file.\r\n     CBlockIndex* oldTip = m_node.chainman->ActiveChain().Tip();\r\n     WITH_LOCK(::cs_main, m_node.chainman->m_blockman.GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE);\r\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\r\n     CBlockIndex* newTip = m_node.chainman->ActiveChain().Tip();\r\n@@ -194,13 +194,13 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\r\n         BOOST_CHECK(result.last_scanned_block.IsNull());\r\n         BOOST_CHECK(!result.last_scanned_height);\r\n         BOOST_CHECK_EQUAL(GetBalance(wallet).m_mine_immature, 0);\r\n     }\r\n }\r\n \r\n-BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Cap last block file size, and mine new block in a new block file.\r\n     CBlockIndex* oldTip = m_node.chainman->ActiveChain().Tip();\r\n     WITH_LOCK(::cs_main, m_node.chainman->m_blockman.GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE);\r\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\r\n     CBlockIndex* newTip = m_node.chainman->ActiveChain().Tip();\r\n@@ -260,13 +260,13 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\r\n }\r\n \r\n // Verify importwallet RPC starts rescan at earliest block with timestamp\r\n // greater or equal than key birthday. Previously there was a bug where\r\n // importwallet RPC would start the scan at the latest block with timestamp less\r\n // than or equal to key birthday.\r\n-BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     // Create two blocks with same timestamp to verify that importwallet rescan\r\n     // will pick up both blocks, not just the first.\r\n     const int64_t BLOCK_TIME = m_node.chainman->ActiveChain().Tip()->GetBlockTimeMax() + 5;\r\n     SetMockTime(BLOCK_TIME);\r\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\r\n@@ -515,13 +515,13 @@ public:\r\n \r\n     ~ListCoinsTestingSetup()\r\n     {\r\n         wallet.reset();\r\n     }\r\n \r\n-    CWalletTx& AddTx(CRecipient recipient)\r\n+    CWalletTx& AddTx(CRecipient recipient) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n     {\r\n         CTransactionRef tx;\r\n         CAmount fee;\r\n         int changePos = -1;\r\n         bilingual_str error;\r\n         CCoinControl dummy;\r\n@@ -545,13 +545,13 @@ public:\r\n         return it->second;\r\n     }\r\n \r\n     std::unique_ptr<CWallet> wallet;\r\n };\r\n \r\n-BOOST_FIXTURE_TEST_CASE(ListCoinsTest, ListCoinsTestingSetup)\r\n+BOOST_FIXTURE_TEST_CASE(ListCoinsTest, ListCoinsTestingSetup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     std::string coinbaseAddress = coinbaseKey.GetPubKey().GetID().ToString();\r\n \r\n     // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\r\n     // address.\r\n     std::map<CTxDestination, std::vector<COutput>> list;\r\n@@ -712,13 +712,13 @@ BOOST_FIXTURE_TEST_CASE(wallet_descriptor_test, BasicTestingSetup)\r\n //! the test verifies the transactions are detected before they arrive.\r\n //!\r\n //! In the second case, block and mempool transactions are created after the\r\n //! wallet rescan and notifications are immediately synced, to verify the wallet\r\n //! must already have a handler in place for them, and there's no gap after\r\n //! rescanning where new transactions in new blocks could be lost.\r\n-BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     m_args.ForceSetArg(\"-unsafesqlitesync\", \"1\");\r\n     // Create new wallet with known key and unload it.\r\n     WalletContext context;\r\n     context.args = &m_args;\r\n     context.chain = m_node.chain.get();\r\n@@ -786,13 +786,13 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\r\n     // paying to the wallet as the wallet finishes loading and syncing the\r\n     // queue so the events have to be handled immediately. Releasing the wallet\r\n     // lock during the sync is a little artificial but is needed to avoid a\r\n     // deadlock during the sync and simulates a new block notification happening\r\n     // as soon as possible.\r\n     addtx_count = 0;\r\n-    auto handler = HandleLoadWallet(context, [&](std::unique_ptr<interfaces::Wallet> wallet) {\r\n+    auto handler = HandleLoadWallet(context, [&](std::unique_ptr<interfaces::Wallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) {\r\n             BOOST_CHECK(rescan_completed);\r\n             m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\r\n             block_tx = TestSimpleSpend(*m_coinbase_txns[2], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\r\n             m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\r\n             mempool_tx = TestSimpleSpend(*m_coinbase_txns[3], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\r\n             BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\r\n@@ -816,13 +816,13 @@ BOOST_FIXTURE_TEST_CASE(CreateWalletWithoutChain, BasicTestingSetup)\r\n     context.args = &m_args;\r\n     auto wallet = TestLoadWallet(context);\r\n     BOOST_CHECK(wallet);\r\n     UnloadWallet(std::move(wallet));\r\n }\r\n \r\n-BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\r\n+BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main)\r\n {\r\n     m_args.ForceSetArg(\"-unsafesqlitesync\", \"1\");\r\n     WalletContext context;\r\n     context.args = &m_args;\r\n     context.chain = m_node.chain.get();\r\n     auto wallet = TestLoadWallet(context);\r\n```\r\n</details>\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#pullrequestreview-972324937",
      "submitted_at": "2022-05-13T14:11:47Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
    },
    {
      "event": "commented",
      "id": 1126112871,
      "node_id": "IC_kwDOABII585DHx5n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126112871",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T14:19:31Z",
      "updated_at": "2022-05-13T14:19:31Z",
      "author_association": "MEMBER",
      "body": "> diff ...\r\n\r\nI don't think it is meaningful or useful to annotate lambdas, as annotations are stripped as soon as they are assigned to a `std::function<...>` type.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1126112871",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "commented",
      "id": 1126136958,
      "node_id": "IC_kwDOABII585DH3x-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126136958",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T14:44:46Z",
      "updated_at": "2022-05-13T14:44:46Z",
      "author_association": "MEMBER",
      "body": "> annotations are stripped\r\n\r\nHmm:\r\n\r\n```cpp\r\nvoid f()\r\n{\r\n    auto g = []() EXCLUSIVE_LOCKS_REQUIRED(!::cs_main) { AssertLockNotHeld(::cs_main); };\r\n    g(); // error: calling function 'operator()' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\r\n}\r\n```\r\n\r\n (clang 15)",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1126136958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "commented",
      "id": 1126159979,
      "node_id": "IC_kwDOABII585DH9Zr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126159979",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T15:08:51Z",
      "updated_at": "2022-05-13T15:08:51Z",
      "author_association": "MEMBER",
      "body": "> > diff ...\r\n\r\nI think that's large enough and independent enough that it warrants its own PR...\r\n\r\n> I don't think it is meaningful or useful to annotate lambdas, as annotations are stripped as soon as they are assigned to a `std::function<...>` type.\r\n\r\nThat means they're still useful when passed around via `auto` or templated types though. It gets pretty cumbersome anytime the lambda is passed to some generic function that wants a callback though.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1126159979",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "commented",
      "id": 1126176071,
      "node_id": "IC_kwDOABII585DIBVH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126176071",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T15:25:42Z",
      "updated_at": "2022-05-13T15:25:42Z",
      "author_association": "MEMBER",
      "body": "> Hmm `auto`\r\n\r\nauto in this context is not a `std::function`, so it may still have the annotations attached.\r\n\r\n> That means they're still useful when passed around via auto or templated types though.\r\n\r\nEh, isn't this what we want to avoid? For example, annotating an rpc method lambda with lock annotations will either:\r\n\r\n* get them stripped away (as they are assigned to a `std::function`)\r\n* pollute the rpc server code (if they are somehow templated) with global lock annotations\r\n* might result in a compile failure if the calling function can't be annotated (for example it is from an external library) \r\n\r\nNone of this sounds useful or like an improvement. The diff that @vasild posted above looks similar to the diff that I NACKed two years ago https://github.com/bitcoin/bitcoin/pull/20272#pullrequestreview-520824413",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1126176071",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "mentioned",
      "id": 6606641244,
      "node_id": "MEE_lADOABII585JfWjpzwAAAAGJyVhc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6606641244",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T15:25:42Z"
    },
    {
      "event": "subscribed",
      "id": 6606641252,
      "node_id": "SE_lADOABII585JfWjpzwAAAAGJyVhk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6606641252",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T15:25:42Z"
    },
    {
      "event": "commented",
      "id": 1126205612,
      "node_id": "IC_kwDOABII585DIIis",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126205612",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T15:58:28Z",
      "updated_at": "2022-05-13T15:59:13Z",
      "author_association": "MEMBER",
      "body": "Well, that diff above is required if we want to avoid the two `AssertLockNotHeldInline()` introduced in this PR and use just the first one:\r\n\r\n```cpp\r\ninline void AssertLockNotHeldInline(const char* name, const char* file, int line, Mutex* cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) { AssertLockNotHeldInternal(name, file, line, cs); }\r\ninline void AssertLockNotHeldInline(const char* name, const char* file, int line, RecursiveMutex* cs) LOCKS_EXCLUDED(cs) { AssertLockNotHeldInternal(name, file, line, cs); }\r\n```\r\n\r\nOr, in other words, to avoid this (from this PR description):\r\n\r\n> Note that this can't reasonably be used for globals, because clang would require every function to be annotated with EXCLUSIVE_LOCKS_REQUIRED(!g_mutex) for each global mutex.\r\n\r\nAnyway - I am ok with this PR as it is. It's an improvement from the current situation IMO, even with the two `AssertLockNotHeldInline()`s.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1126205612",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "commented",
      "id": 1126265489,
      "node_id": "IC_kwDOABII585DIXKR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126265489",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-13T17:05:25Z",
      "updated_at": "2022-05-13T17:05:25Z",
      "author_association": "MEMBER",
      "body": "> > That means they're still useful when passed around via `auto` or templated types though. It gets pretty cumbersome anytime the lambda is passed to some generic function that wants a callback though.\r\n>\r\n> Eh, isn't this what we want to avoid? For example, annotating an rpc method lambda with lock annotations will ...\r\n\r\nYeah, that's what I meant by cumbersome. Could be worthwhile in some cases maybe though (I know I've added annotations to some lambdas which didn't seem too bad).",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1126265489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "reviewed",
      "id": 973819164,
      "node_id": "PRR_kwDOABII5846C00c",
      "url": null,
      "actor": null,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "lgtm. I didn't get the `!m_added_nodes_mutex` thing in `Start()`.\r\n\r\nAlso left some unrelated comments.\r\n\r\nreview ACK 436ce0233c276e263dcb441255dc0b881cb39cfb 🌺\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK 436ce0233c276e263dcb441255dc0b881cb39cfb 🌺\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUj/3gv+LfVwadPBlDSmCSWLuam73ROet6lfw7CgJRFosylwqX2ePcHTQLbzDlmG\r\nqaSsa3tHEuWD4wjbUbq6cNF8st78YS4W/7geDhn8yeos9US0JeuXv9XaEWxGXmjU\r\nO9oDIQgJRB4bsc8lUBZ1W6do7zaQXsFepA0avd+DvJJ50EHeIMsnJ3e1TabGk2EM\r\nX53qeT50vMwK0SH3UCaVVF+yEH5Hcrt1TDddzy8QlP2kKoKX80AhIlCdxa+L1nAy\r\n0zzzDCFNuxopDECXzBv0XizGRC2EoklCi1ajnjzmVWctLygeEWOzYAx5izL2C8qC\r\nOCBjmVSRzgW4kTy5pkYO8z5KZDHb8zCoDOwicBSbaFz5n0RYaQKrFSxouhuNlkmE\r\np59l2jJN829m+jI6kI3wOWsmreRNwnm5NYUWJS2gty7J86PVHQ+Jsds63mKBdMcz\r\nZOoQ+HffljeKFIkqvp2jmTqUjxvgrPdRBpWg9kGswHVtHoRXwb9Zm8iG/GDenx5T\r\nO3C5661p\r\n=YVtl\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#pullrequestreview-973819164",
      "submitted_at": "2022-05-16T12:17:01Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
    },
    {
      "event": "merged",
      "id": 6615637704,
      "node_id": "ME_lADOABII585JfWjpzwAAAAGKUp7I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6615637704",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "aa3200d8967215dc93ea75e19db0aca537ec3d35",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3200d8967215dc93ea75e19db0aca537ec3d35",
      "created_at": "2022-05-16T12:19:23Z"
    },
    {
      "event": "closed",
      "id": 6615637721,
      "node_id": "CE_lADOABII585JfWjpzwAAAAGKUp7Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6615637721",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T12:19:23Z"
    },
    {
      "event": "reviewed",
      "id": 974060130,
      "node_id": "PRR_kwDOABII5846Dvpi",
      "url": null,
      "actor": null,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Post-merge ACK 436ce0233c276e263dcb441255dc0b881cb39cfb.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#pullrequestreview-974060130",
      "submitted_at": "2022-05-16T14:29:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
    },
    {
      "event": "reviewed",
      "id": 974066677,
      "node_id": "PRR_kwDOABII5846DxP1",
      "url": null,
      "actor": null,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Post-merge Approach ACK\r\n\r\nLGTM (modulo run-time assertions may be missing for the added annotations)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#pullrequestreview-974066677",
      "submitted_at": "2022-05-16T14:33:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
    },
    {
      "event": "commented",
      "id": 1127773639,
      "node_id": "IC_kwDOABII585DOHXH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1127773639",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T14:50:40Z",
      "updated_at": "2022-05-16T14:50:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Post-merge ACK https://github.com/bitcoin/bitcoin/pull/25109/commits/436ce0233c276e263dcb441255dc0b881cb39cfb",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#issuecomment-1127773639",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25109"
    },
    {
      "event": "referenced",
      "id": 6697616781,
      "node_id": "REFE_lADOABII585JfWjpzwAAAAGPNYWN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6697616781",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "43aeec7e63587d1dac080749b601f721a85a81f0",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/43aeec7e63587d1dac080749b601f721a85a81f0",
      "created_at": "2022-05-28T22:51:00Z"
    },
    {
      "event": "locked",
      "id": 9256079084,
      "node_id": "LOE_lADOABII585JfWjpzwAAAAIntI7s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9256079084",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T10:01:51Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873629811",
      "pull_request_review_id": 973819164,
      "id": 873629811,
      "node_id": "PRRC_kwDOABII5840Eohz",
      "diff_hunk": "@@ -795,7 +795,8 @@ class CConnman\n              bool network_active = true);\n \n     ~CConnman();\n-    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n+\n+    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !m_added_nodes_mutex, !m_addr_fetches_mutex, !mutexMsgProc);",
      "path": "src/net.h",
      "position": 48,
      "original_position": 48,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is `!m_added_nodes_mutex` needed? Recall that starting a thread that takes a lock has no lock annotation implications on the caller.",
      "created_at": "2022-05-16T11:47:13Z",
      "updated_at": "2022-05-16T12:17:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873629811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873629811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 799,
      "original_line": 799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873639165",
      "pull_request_review_id": 973819164,
      "id": 873639165,
      "node_id": "PRRC_kwDOABII5840Eqz9",
      "diff_hunk": "@@ -440,30 +440,37 @@ class PeerManagerImpl final : public PeerManager\n                     CTxMemPool& pool, bool ignore_incoming_txs);\n \n     /** Overridden from CValidationInterface. */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_recent_confirmed_transactions_mutex);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_recent_confirmed_transactions_mutex);\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void BlockChecked(const CBlock& block, const BlockValidationState& state) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n     /** Implement NetEventsInterface */\n-    void InitializeNode(CNode* pnode) override;\n-    void FinalizeNode(const CNode& node) override;\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n+    void InitializeNode(CNode* pnode) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void FinalizeNode(const CNode& node) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex);\n+    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex);\n \n     /** Implement PeerManager */\n     void StartScheduledTasks(CScheduler& scheduler) override;\n     void CheckForStaleTipAndEvictPeers() override;\n     std::optional<std::string> FetchBlock(NodeId peer_id, const CBlockIndex& block_index) override;\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) const override;\n+    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     bool IgnoresIncomingTxs() override { return m_ignore_incoming_txs; }\n-    void SendPings() override;\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override;\n+    void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SetBestHeight(int height) override { m_best_height = height; };\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override;\n+    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unrelated: This should probably be removed",
      "created_at": "2022-05-16T11:58:23Z",
      "updated_at": "2022-05-16T12:17:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873639165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873639165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 470,
      "original_line": 470,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873646983",
      "pull_request_review_id": 973819164,
      "id": 873646983,
      "node_id": "PRRC_kwDOABII5840EsuH",
      "diff_hunk": "@@ -495,14 +502,16 @@ class PeerManagerImpl final : public PeerManager\n      * @return Returns true if the peer was punished (probably disconnected)\n      */\n     bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+                                 bool via_compact_block, const std::string& message = \"\")\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 76,
      "original_position": 76,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here, as it would be better to just pass the `Peer&`",
      "created_at": "2022-05-16T12:07:58Z",
      "updated_at": "2022-05-16T12:17:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873646983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873646983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 506,
      "original_line": 506,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873647178",
      "pull_request_review_id": 973819164,
      "id": 873647178,
      "node_id": "PRRC_kwDOABII5840EsxK",
      "diff_hunk": "@@ -495,14 +502,16 @@ class PeerManagerImpl final : public PeerManager\n      * @return Returns true if the peer was punished (probably disconnected)\n      */\n     bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+                                 bool via_compact_block, const std::string& message = \"\")\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n \n     /**\n      * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n      *\n      * @return Returns true if the peer was punished (probably disconnected)\n      */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n+    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\")\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same",
      "created_at": "2022-05-16T12:08:10Z",
      "updated_at": "2022-05-16T12:17:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873647178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873647178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873648811",
      "pull_request_review_id": 973819164,
      "id": 873648811,
      "node_id": "PRRC_kwDOABII5840EtKr",
      "diff_hunk": "@@ -512,13 +521,16 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n+    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                                const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n+                               bool via_compact_block)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 101,
      "original_position": 101,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same",
      "created_at": "2022-05-16T12:10:04Z",
      "updated_at": "2022-05-16T12:17:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873648811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873648811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 530,
      "original_line": 530,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873649270",
      "pull_request_review_id": 973819164,
      "id": 873649270,
      "node_id": "PRRC_kwDOABII5840EtR2",
      "diff_hunk": "@@ -512,13 +521,16 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n+    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 95,
      "original_position": 95,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same",
      "created_at": "2022-05-16T12:10:34Z",
      "updated_at": "2022-05-16T12:17:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873649270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873649270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 525,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873713512",
      "pull_request_review_id": 973937659,
      "id": 873713512,
      "node_id": "PRRC_kwDOABII5840E89o",
      "diff_hunk": "@@ -795,7 +795,8 @@ class CConnman\n              bool network_active = true);\n \n     ~CConnman();\n-    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n+\n+    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !m_added_nodes_mutex, !m_addr_fetches_mutex, !mutexMsgProc);",
      "path": "src/net.h",
      "position": 48,
      "original_position": 48,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": 873629811,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was an extra assertion needed for the subsequent commits in #24931.",
      "created_at": "2022-05-16T13:16:14Z",
      "updated_at": "2022-05-16T13:16:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873713512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873713512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 799,
      "original_line": 799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873778526",
      "pull_request_review_id": 974031637,
      "id": 873778526,
      "node_id": "PRRC_kwDOABII5840FM1e",
      "diff_hunk": "@@ -495,14 +502,16 @@ class PeerManagerImpl final : public PeerManager\n      * @return Returns true if the peer was punished (probably disconnected)\n      */\n     bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+                                 bool via_compact_block, const std::string& message = \"\")\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 76,
      "original_position": 76,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": 873646983,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Tried this, but didn't work, as the Peer might be non-existent (disconnected) at this point.",
      "created_at": "2022-05-16T14:12:44Z",
      "updated_at": "2022-05-16T14:12:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873778526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873778526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 506,
      "original_line": 506,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873778698",
      "pull_request_review_id": 974031870,
      "id": 873778698,
      "node_id": "PRRC_kwDOABII5840FM4K",
      "diff_hunk": "@@ -495,14 +502,16 @@ class PeerManagerImpl final : public PeerManager\n      * @return Returns true if the peer was punished (probably disconnected)\n      */\n     bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+                                 bool via_compact_block, const std::string& message = \"\")\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n \n     /**\n      * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n      *\n      * @return Returns true if the peer was punished (probably disconnected)\n      */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n+    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\")\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": 873647178,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Tried this, but didn't work, as the Peer might be non-existent (disconnected) at this point.",
      "created_at": "2022-05-16T14:12:53Z",
      "updated_at": "2022-05-16T14:12:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873778698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873778698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873779713",
      "pull_request_review_id": 974033375,
      "id": 873779713,
      "node_id": "PRRC_kwDOABII5840FNIB",
      "diff_hunk": "@@ -512,13 +521,16 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n+    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 95,
      "original_position": 95,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": 873649270,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Tried this, but didn't work, as the Peer might be non-existent (disconnected) at this point.",
      "created_at": "2022-05-16T14:13:48Z",
      "updated_at": "2022-05-16T14:13:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873779713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873779713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 525,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873792664",
      "pull_request_review_id": 974051941,
      "id": 873792664,
      "node_id": "PRRC_kwDOABII5840FQSY",
      "diff_hunk": "@@ -512,13 +521,16 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n+    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                                const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n+                               bool via_compact_block)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 101,
      "original_position": 101,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": 873648811,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Attempt in #25144 ",
      "created_at": "2022-05-16T14:24:55Z",
      "updated_at": "2022-05-16T14:24:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873792664",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873792664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 530,
      "original_line": 530,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873792810",
      "pull_request_review_id": 974052177,
      "id": 873792810,
      "node_id": "PRRC_kwDOABII5840FQUq",
      "diff_hunk": "@@ -440,30 +440,37 @@ class PeerManagerImpl final : public PeerManager\n                     CTxMemPool& pool, bool ignore_incoming_txs);\n \n     /** Overridden from CValidationInterface. */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_recent_confirmed_transactions_mutex);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_recent_confirmed_transactions_mutex);\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void BlockChecked(const CBlock& block, const BlockValidationState& state) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n     /** Implement NetEventsInterface */\n-    void InitializeNode(CNode* pnode) override;\n-    void FinalizeNode(const CNode& node) override;\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n+    void InitializeNode(CNode* pnode) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void FinalizeNode(const CNode& node) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex);\n+    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex);\n \n     /** Implement PeerManager */\n     void StartScheduledTasks(CScheduler& scheduler) override;\n     void CheckForStaleTipAndEvictPeers() override;\n     std::optional<std::string> FetchBlock(NodeId peer_id, const CBlockIndex& block_index) override;\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) const override;\n+    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     bool IgnoresIncomingTxs() override { return m_ignore_incoming_txs; }\n-    void SendPings() override;\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override;\n+    void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SetBestHeight(int height) override { m_best_height = height; };\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override;\n+    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": 873639165,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Attempt in #25144",
      "created_at": "2022-05-16T14:25:02Z",
      "updated_at": "2022-05-16T14:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873792810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873792810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 470,
      "original_line": 470,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873811436",
      "pull_request_review_id": 974080173,
      "id": 873811436,
      "node_id": "PRRC_kwDOABII5840FU3s",
      "diff_hunk": "@@ -795,7 +795,8 @@ class CConnman\n              bool network_active = true);\n \n     ~CConnman();\n-    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n+\n+    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex, !m_added_nodes_mutex, !m_addr_fetches_mutex, !mutexMsgProc);",
      "path": "src/net.h",
      "position": 48,
      "original_position": 48,
      "commit_id": "436ce0233c276e263dcb441255dc0b881cb39cfb",
      "original_commit_id": "7d73f58e9cea8f4b0bc16512983898fddde3d764",
      "in_reply_to_id": 873629811,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah. For reference:\r\n\r\n```\r\nnet.cpp:2594:5: warning: calling function 'Init' requires negative capability '!m_added_nodes_mutex' [-Wthread-safety-analysis]\r\n    Init(connOptions);\r\n    ^\r\n1 warning generated.\r\n",
      "created_at": "2022-05-16T14:40:39Z",
      "updated_at": "2022-05-16T14:40:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25109#discussion_r873811436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873811436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25109"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 799,
      "original_line": 799,
      "side": "RIGHT"
    }
  ]
}