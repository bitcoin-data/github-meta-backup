{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
    "id": 1004149182,
    "node_id": "PR_kwDOABII58472hm-",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25665",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25665.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25665.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
    "number": 25665,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "refactor: Add util::Result failure values, multiple error and warning messages",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add `util::Result` support for returning more error information and make use of it in [LoadChainstate method](https://github.com/bitcoin/bitcoin/pull/25665/commits/885df2be844969fb6a35420aa8b6861e0f2a5103) as an initial application. Followup PR [#25722](https://github.com/bitcoin/bitcoin/pull/25722) uses it more broadly to return errors and warnings from wallet loading functions as well.\r\n\r\nThis change adds two major features to the result class:\r\n\r\n- For better error handling, adds the ability to return a value on failure, not just a value on success. This is a key missing feature that makes the result class not useful for functions like `LoadChainstate()` which produce different errors that need to be handled differently [^1].\r\n\r\n[^1]: Ability to return error values was actually present in the original implementation of [#25218](https://github.com/bitcoin/bitcoin/pull/25218), but unfortunately removed in later iterations.\r\n\r\n- For better error reporting, adds the ability to return warning messages and multiple errors, not just a single error string. This provides a way for functions to report errors and warnings in a standard way, and simplifies interfaces:\r\n\r\n    ```diff\r\n    -virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\r\n    +virtual util::Result<std::unique_ptr<Wallet>> loadWallet(const std::string& name) = 0;\r\n    ```\r\n\r\n    ```diff\r\n    -std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\r\n    +util::Result<std::unique_ptr<WalletDatabase>, DatabaseError> MakeDatabase(const fs::path& path, const DatabaseOptions& options);\r\n   ```\r\n\r\nThis change also makes some more minor improvements:\r\n\r\n- Smaller type size. `util::Result<int>` is 16 bytes, and `util::Result<void>` is 8 bytes. Previously `util::Result<int>` was 72 bytes and `util::Result<void>` was unimplemented.\r\n\r\n- Broader type compatibility. Supports `Result<void>` return values, so it is possible for functions that don't return values to still report errors. Supports noncopyable and nonmovable success and error types.\r\n\r\n### Alternatives & design notes\r\n\r\nThe main goal for the `util::Result` class is to provide a standard way for functions to report error and warnings strings. The interface tries to make it easy to provide detailed error feedback to end users, without cluttering code or making it harder to return other result information. There have been multiple iterations of the design using different internal representations and providing different capabilities:\r\n\r\n|   | Representation (approximate)                   | Notes |\r\n|---|------------------------------------------------|-------|\r\n| _(1)_ | `tuple<T,optional<bilingual_str>>`        | Original #25218 implementation in da98fd2efc1a6b9c6e876cf3e227a8c2e9a10827. Good capabilities, but larger type size. Supports error standardized error reporting and customized error handling with failure values. |\r\n| _(2)_ | `variant<T,bilingual_str>`                | Final #25218 implementation in 7a45c33d1f8a758850cf8e7bd6ad508939ba5c0d. No support for returning failure values so not useful in many cases.\r\n| _(3)_ | `variant<monostate,T,F>`                 | Pending #25601 implementation that allows choosing whether to use standardized error reporting or return custom failure values, but doesn't support having both at the same time, like approaches _(1)_, _(4)_, _(5)_, _(6)_ do. |\r\n | _(4)_ | `tuple<variant<T,F>,bilingual_str>`      | Original #25608 implementation in c29d3008de9314dd463ed08e8bff39fe55324498. Basically the same as _(1)_ except it uses separate success and failure types instead of the same type. Using separate success and failure types makes the result class a little less flexible but can help avoid some ambiguity and inconsistent result states. |\r\n| _(5)_ | `tuple<T,optional<bilingual_str>>`        | Final #25608 implementation in dd91f294206ac87b213d23bb76656a0a5f0f4781. Essentially the same as original implementation _(1)_ except has some usability improvements. |\r\n| _(6)_ | `tuple<T,unique_ptr<tuple<F,bilingual_str>>` | Pending #25665 implementation (this PR). Supports returning failure values, uses separate success and failure types to avoid ambiguity, uses `unique_ptr` to reduce result type size, and avoids heap allocation in the happy path. |\r\n\r\n### Prior discussions & history\r\n\r\n- _furszy_ introduced a `BResult` class providing a standard error reporting mechanism in [#25218](https://github.com/bitcoin/bitcoin/pull/25218). It was renamed to `util::Result` in [#25721](https://github.com/bitcoin/bitcoin/pull/25721) but kept the same representation and capabilities.\r\n\r\n- _MarcoFalke_ suggested using `BResult` for the `LoadChainstate` function in [#25308 (comment)](https://github.com/bitcoin/bitcoin/pull/25308#issuecomment-1181674645). Inability to use `BResult` there due to lack of support for failure values led to initial work on [#25608](https://github.com/bitcoin/bitcoin/pull/25608).\r\n\r\n- _w0xlt_ wrote a `StructuredResult` class in [#25308](https://github.com/bitcoin/bitcoin/pull/25601) adding the ability to return failure values but sacrificing standard error reporting, which led to more work on [#25608](https://github.com/bitcoin/bitcoin/pull/25608).\r\n\r\n- _martinus_ suggested a space optimization in [#25608 (comment)](https://github.com/bitcoin/bitcoin/pull/25608#discussion_r921049409) that also made it easier to support distinct failure & success types, leading to [#25665](https://github.com/bitcoin/bitcoin/pull/25665) as a replacement for [#25608](https://github.com/bitcoin/bitcoin/pull/25608).",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2022-07-21T12:46:09Z",
    "updated_at": "2023-05-26T13:35:05Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "9dc22eaa7200252702dfb721c6285fa75de6b88e",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "ryanofsky:pr/bresult2",
      "ref": "pr/bresult2",
      "sha": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 8,
        "watchers_count": 8,
        "size": 229522,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:24Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2023-05-05T12:10:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "da9f62f912294de07a595df0b4898aba4be6b69c",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 453,
    "deletions": 141,
    "changed_files": 15,
    "commits": 4,
    "review_comments": 112,
    "comments": 19
  },
  "events": [
    {
      "event": "reviewed",
      "id": 1046496463,
      "node_id": "PRR_kwDOABII584-YETP",
      "url": null,
      "actor": null,
      "commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1046496463",
      "submitted_at": "2022-07-21T13:05:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "commented",
      "id": 1191475306,
      "node_id": "IC_kwDOABII585HBHhq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191475306",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T13:18:25Z",
      "updated_at": "2022-07-21T13:18:25Z",
      "author_association": "MEMBER",
      "body": "Draft PR since I want to add a commit taking advantages of ability to return chain results and return warnings.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1191475306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7040053950,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGjnrK-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7040053950",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T17:02:18Z"
    },
    {
      "event": "commented",
      "id": 1191801425,
      "node_id": "IC_kwDOABII585HCXJR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191801425",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T18:24:49Z",
      "updated_at": "2023-05-26T08:30:42Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [hernanmarino](https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1423032563) |\n| Approach ACK | [hebasto](https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1294756069) |\n| Stale ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1091053363), [stickies-v](https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1099419063), [MarcoFalke](https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1245729262) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27596](https://github.com/bitcoin/bitcoin/pull/27596) (assumeutxo (2) by jamesob)\n* [#27576](https://github.com/bitcoin/bitcoin/pull/27576) (kernel: Remove args, chainparams, chainparamsbase from kernel library by TheCharlatan)\n* [#26022](https://github.com/bitcoin/bitcoin/pull/26022) (Add util::ResultPtr class by ryanofsky)\n* [#25977](https://github.com/bitcoin/bitcoin/pull/25977) (refactor: Replace `std::optional<bilingual_str>` with `util::Result` by ryanofsky)\n* [#19461](https://github.com/bitcoin/bitcoin/pull/19461) (multiprocess: Add bitcoin-gui -ipcconnect option by ryanofsky)\n* [#19460](https://github.com/bitcoin/bitcoin/pull/19460) (multiprocess: Add bitcoin-wallet -ipcconnect option by ryanofsky)\n* [#10102](https://github.com/bitcoin/bitcoin/pull/10102) (Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1191801425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7040701722,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGjqJUa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7040701722",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T18:49:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7041010055,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGjrUmH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7041010055",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T19:43:35Z"
    },
    {
      "event": "labeled",
      "id": 7044308116,
      "node_id": "LE_lADOABII585ORepCzwAAAAGj35yU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7044308116",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-22T07:54:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7045552178,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGj8pgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7045552178",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-22T10:43:15Z"
    },
    {
      "event": "unlabeled",
      "id": 7045704792,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAGj9OxY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7045704792",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-22T11:10:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7060171269,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGk0aoF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7060171269",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-25T22:22:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7066053315,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGlK2rD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7066053315",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-26T15:36:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7066991960,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGlOb1Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7066991960",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-26T17:43:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7068198568,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGlTCao",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7068198568",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-26T21:19:08Z"
    },
    {
      "event": "renamed",
      "id": 7074601665,
      "node_id": "RTE_lADOABII585ORepCzwAAAAGlrdrB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7074601665",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T16:45:33Z",
      "rename": {
        "from": "BResult improvements, allow returning separate value on failure",
        "to": "refactor: Add util::Result class and use it in LoadChainstate"
      }
    },
    {
      "event": "labeled",
      "id": 7074955463,
      "node_id": "LE_lADOABII585ORepCzwAAAAGls0DH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7074955463",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T17:39:43Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7076009817,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGlw1dZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076009817",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T19:27:53Z"
    },
    {
      "event": "ready_for_review",
      "id": 7076022534,
      "node_id": "RFRE_lADOABII585ORepCzwAAAAGlw4kG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076022534",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T19:30:07Z"
    },
    {
      "event": "commented",
      "id": 1197277837,
      "node_id": "IC_kwDOABII585HXQKN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197277837",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T19:32:29Z",
      "updated_at": "2022-07-27T19:32:29Z",
      "author_association": "MEMBER",
      "body": "Moved out of draft, since result interface is more complete now and there's more code using it",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197277837",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "commented",
      "id": 1197289390,
      "node_id": "IC_kwDOABII585HXS-u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197289390",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T19:44:30Z",
      "updated_at": "2022-07-27T19:51:04Z",
      "author_association": "MEMBER",
      "body": "As said on the previous pull, I'd prefer if the order of the changes was inversed: First, change the existing interface methods and names, then change the internal class implementation. Otherwise we'll end up with the odd state of two classes that do the same thing but have a different name and people will continue to add more used of the \"deprecated\" class. I'd also find it easier to review an incremental diff than having a full separate implementation. But no strong opinion, if you and the other reviewers prefer it as-is now.\r\n\r\nEdit: My comment was https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927707935 and I just realized that it was ambiguous and could be interpreted the opposite of what I meant.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197289390",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "commented",
      "id": 1197317760,
      "node_id": "IC_kwDOABII585HXZ6A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197317760",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T20:13:40Z",
      "updated_at": "2022-07-27T20:13:40Z",
      "author_association": "MEMBER",
      "body": "Thanks, Marco! I will just tweak #25721 to be a standalone PR instead of depending on this PR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197317760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "referenced",
      "id": 7076650572,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGlzR5M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076650572",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2aa408b4ccc57539a7f6b383e6c98acac10e39c0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2aa408b4ccc57539a7f6b383e6c98acac10e39c0",
      "created_at": "2022-07-27T21:27:19Z"
    },
    {
      "event": "referenced",
      "id": 7076684303,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGlzaIP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076684303",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e71b858bc0f30784191725d71a77bab4d280a6f9",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e71b858bc0f30784191725d71a77bab4d280a6f9",
      "created_at": "2022-07-27T21:34:40Z"
    },
    {
      "event": "commented",
      "id": 1197397362,
      "node_id": "IC_kwDOABII585HXtVy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197397362",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:39:43Z",
      "updated_at": "2022-07-27T21:39:43Z",
      "author_association": "MEMBER",
      "body": "> Thanks, Marco! I will just tweak #25721 to be a standalone PR instead of depending on this PR\r\n\r\nThis is done now",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197397362",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "referenced",
      "id": 7076742518,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGlzoV2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076742518",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "created_at": "2022-07-27T21:48:08Z"
    },
    {
      "event": "referenced",
      "id": 7104229418,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGncfAq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7104229418",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e0289b1cdfe80644cb7045f74e6bd63562e092f8",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e0289b1cdfe80644cb7045f74e6bd63562e092f8",
      "created_at": "2022-08-01T19:19:21Z"
    },
    {
      "event": "referenced",
      "id": 7106418909,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGnk1jd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7106418909",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "created_at": "2022-08-02T04:00:47Z"
    },
    {
      "event": "referenced",
      "id": 7106418974,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGnk1ke",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7106418974",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1e1f5ca8aca24476a0a1bf9ab880284e90979810",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/1e1f5ca8aca24476a0a1bf9ab880284e90979810",
      "created_at": "2022-08-02T04:00:48Z"
    },
    {
      "event": "referenced",
      "id": 7111197256,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGn3EJI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111197256",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6777df621a8c3deef033fcf815b297ee4bf3ee0f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6777df621a8c3deef033fcf815b297ee4bf3ee0f",
      "created_at": "2022-08-02T15:47:58Z"
    },
    {
      "event": "referenced",
      "id": 7111783251,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGn5TNT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111783251",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c654ec55f88c980bb085e4096435d69e97a09663",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c654ec55f88c980bb085e4096435d69e97a09663",
      "created_at": "2022-08-02T17:06:34Z"
    },
    {
      "event": "referenced",
      "id": 7111901404,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGn5wDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111901404",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7b249b3a163effc08c9faca841647c936d22ee7a",
      "created_at": "2022-08-02T17:24:31Z"
    },
    {
      "event": "referenced",
      "id": 7119778304,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGoXzIA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7119778304",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a23cca56c0a7f4a267915b4beba3af3454c51603",
      "created_at": "2022-08-03T15:35:56Z"
    },
    {
      "event": "referenced",
      "id": 7119778489,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGoXzK5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7119778489",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0e508480645495840122fb4bb1d88dce2b4b0eb3",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0e508480645495840122fb4bb1d88dce2b4b0eb3",
      "created_at": "2022-08-03T15:35:58Z"
    },
    {
      "event": "referenced",
      "id": 7135993880,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGpVqAY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7135993880",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "006740b6f6475ed6ae08803c60dd82027602695b",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/006740b6f6475ed6ae08803c60dd82027602695b",
      "created_at": "2022-08-05T13:36:13Z"
    },
    {
      "event": "labeled",
      "id": 7136132220,
      "node_id": "LE_lADOABII585ORepCzwAAAAGpWLx8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7136132220",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T13:55:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 7137948498,
      "node_id": "RTE_lADOABII585ORepCzwAAAAGpdHNS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7137948498",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T18:45:12Z",
      "rename": {
        "from": "refactor: Add util::Result class and use it in LoadChainstate",
        "to": "refactor: Add util::Result failure values, multiple error and warning messages"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7137958104,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGpdJjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7137958104",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T18:47:15Z"
    },
    {
      "event": "commented",
      "id": 1206754307,
      "node_id": "IC_kwDOABII585H7ZwD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206754307",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T18:48:33Z",
      "updated_at": "2022-08-05T18:48:33Z",
      "author_association": "MEMBER",
      "body": "Rebased c2dc8a8a747d639acfa4a26db2c61c25b6f82571 -> 590bc615a3120a8f11712220546f9654058b82f0 ([`pr/bresult2.10`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.10) -> [`pr/bresult2.11`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.10-rebase..pr/bresult2.11)) due to conflicts with #25721",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1206754307",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "unlabeled",
      "id": 7138483715,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAGpfJ4D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7138483715",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T20:13:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1070947229,
      "node_id": "PRR_kwDOABII584_1Vud",
      "url": null,
      "actor": null,
      "commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1070947229",
      "submitted_at": "2022-08-12T11:18:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1071979503,
      "node_id": "PRR_kwDOABII584_5Rvv",
      "url": null,
      "actor": null,
      "commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "Riahiamirreza",
        "id": 54557628,
        "node_id": "MDQ6VXNlcjU0NTU3NjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54557628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Riahiamirreza",
        "html_url": "https://github.com/Riahiamirreza",
        "followers_url": "https://api.github.com/users/Riahiamirreza/followers",
        "following_url": "https://api.github.com/users/Riahiamirreza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Riahiamirreza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Riahiamirreza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Riahiamirreza/subscriptions",
        "organizations_url": "https://api.github.com/users/Riahiamirreza/orgs",
        "repos_url": "https://api.github.com/users/Riahiamirreza/repos",
        "events_url": "https://api.github.com/users/Riahiamirreza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Riahiamirreza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1071979503",
      "submitted_at": "2022-08-13T16:47:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1072373197,
      "node_id": "PRR_kwDOABII584_6x3N",
      "url": null,
      "actor": null,
      "commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "Riahiamirreza",
        "id": 54557628,
        "node_id": "MDQ6VXNlcjU0NTU3NjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54557628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Riahiamirreza",
        "html_url": "https://github.com/Riahiamirreza",
        "followers_url": "https://api.github.com/users/Riahiamirreza/followers",
        "following_url": "https://api.github.com/users/Riahiamirreza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Riahiamirreza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Riahiamirreza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Riahiamirreza/subscriptions",
        "organizations_url": "https://api.github.com/users/Riahiamirreza/orgs",
        "repos_url": "https://api.github.com/users/Riahiamirreza/repos",
        "events_url": "https://api.github.com/users/Riahiamirreza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Riahiamirreza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1072373197",
      "submitted_at": "2022-08-15T08:49:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1072653423,
      "node_id": "PRR_kwDOABII584_72Rv",
      "url": null,
      "actor": null,
      "commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "Riahiamirreza",
        "id": 54557628,
        "node_id": "MDQ6VXNlcjU0NTU3NjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54557628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Riahiamirreza",
        "html_url": "https://github.com/Riahiamirreza",
        "followers_url": "https://api.github.com/users/Riahiamirreza/followers",
        "following_url": "https://api.github.com/users/Riahiamirreza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Riahiamirreza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Riahiamirreza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Riahiamirreza/subscriptions",
        "organizations_url": "https://api.github.com/users/Riahiamirreza/orgs",
        "repos_url": "https://api.github.com/users/Riahiamirreza/repos",
        "events_url": "https://api.github.com/users/Riahiamirreza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Riahiamirreza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1072653423",
      "submitted_at": "2022-08-15T13:07:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7190548364,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGslw-M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7190548364",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T18:14:55Z"
    },
    {
      "event": "commented",
      "id": 1215557266,
      "node_id": "IC_kwDOABII585Ic-6S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215557266",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T18:16:04Z",
      "updated_at": "2022-08-15T18:16:04Z",
      "author_association": "MEMBER",
      "body": "Updated 590bc615a3120a8f11712220546f9654058b82f0 -> 65481de0646f21349f24327410e4d7eb5189e5b3 ([`pr/bresult2.11`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.11) -> [`pr/bresult2.12`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.11..pr/bresult2.12)) just adding some comments to answer review questions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1215557266",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "reviewed",
      "id": 1074563820,
      "node_id": "PRR_kwDOABII585ADIrs",
      "url": null,
      "actor": null,
      "commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1074563820",
      "submitted_at": "2022-08-16T18:08:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1075933057,
      "node_id": "PRR_kwDOABII585AIW-B",
      "url": null,
      "actor": null,
      "commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "AryanJ-NYC",
        "id": 8263430,
        "node_id": "MDQ6VXNlcjgyNjM0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8263430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AryanJ-NYC",
        "html_url": "https://github.com/AryanJ-NYC",
        "followers_url": "https://api.github.com/users/AryanJ-NYC/followers",
        "following_url": "https://api.github.com/users/AryanJ-NYC/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AryanJ-NYC/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AryanJ-NYC/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AryanJ-NYC/subscriptions",
        "organizations_url": "https://api.github.com/users/AryanJ-NYC/orgs",
        "repos_url": "https://api.github.com/users/AryanJ-NYC/repos",
        "events_url": "https://api.github.com/users/AryanJ-NYC/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AryanJ-NYC/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1075933057",
      "submitted_at": "2022-08-17T15:10:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1076136266,
      "node_id": "PRR_kwDOABII585AJIlK",
      "url": null,
      "actor": null,
      "commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1076136266",
      "submitted_at": "2022-08-17T17:21:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208669826,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGtq5KC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7208669826",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T19:24:26Z"
    },
    {
      "event": "reviewed",
      "id": 1076183597,
      "node_id": "PRR_kwDOABII585AJUIt",
      "url": null,
      "actor": null,
      "commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 65481de0646f21349f24327410e4d7eb5189e5b3 -> 9bd10728bada8b04d86f5621ee127713f628a9ad ([`pr/bresult2.12`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.12) -> [`pr/bresult2.13`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.13), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.12..pr/bresult2.13)) with suggestions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1076183597",
      "submitted_at": "2022-08-17T19:26:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1076687479,
      "node_id": "PRR_kwDOABII585ALPJ3",
      "url": null,
      "actor": null,
      "commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK and Code review ACK. I got a few warnings while compiling though (missing-field-initializers)",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1076687479",
      "submitted_at": "2022-08-18T04:38:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "commented",
      "id": 1219551815,
      "node_id": "IC_kwDOABII585IsOJH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219551815",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T14:18:21Z",
      "updated_at": "2022-08-18T14:18:21Z",
      "author_association": "MEMBER",
      "body": "> Tested ACK and Code review ACK. I got a few warnings while compiling though (missing-field-initializers)\r\n\r\nThanks for testing! @hernanmarino could you post the warnings, and maybe post your compiler version? I don't think I'm seeing these and I don't think they are happening on CI because those builds treat warnings as errors. I'd like to fix this if possible.\r\n\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1219551815",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "mentioned",
      "id": 7214834801,
      "node_id": "MEE_lADOABII585ORepCzwAAAAGuCaRx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7214834801",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T14:18:21Z"
    },
    {
      "event": "subscribed",
      "id": 7214834805,
      "node_id": "SE_lADOABII585ORepCzwAAAAGuCaR1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7214834805",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T14:18:21Z"
    },
    {
      "event": "commented",
      "id": 1220755709,
      "node_id": "IC_kwDOABII585Iw0D9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1220755709",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:36:53Z",
      "updated_at": "2022-08-19T14:36:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Thanks for testing! @hernanmarino could you post the warnings, and maybe post your compiler version? I don't think I'm seeing these and I don't think they are happening on CI because those builds treat warnings as errors. I'd like to fix this if possible.\r\n\r\nYes, this is one of them (there are a few more , all similar)\r\n\r\n```\r\n In file included from ./interfaces/wallet.h:15,\r\n                 from wallet/interfaces.cpp:5:\r\n./util/result.h: In instantiation of ‘util::Result<OT, OF>&& util::Result<T, F>::operator<<(util::Result<OT, OF>&&) [with OT = std::unique_ptr<interfaces::Wallet>; OF = void; T = std::unique_ptr<interfaces::Wallet>; F = void]’:\r\n\r\n./util/result.h:187:15:   required from ‘void util::Result<T, F>::MoveConstruct(util::Result<OT, OF>&) [with OT = std::unique_ptr<interfaces::Wallet>; OF = void; T = std::unique_ptr<interfaces::Wallet>; F = void]’\r\n\r\n./util/result.h:202:51:   required from ‘util::Result<T, F>::Result(util::Result<OT, OF>&&) [with OT = std::unique_ptr<interfaces::Wallet>; OF = void; T = std::unique_ptr<interfaces::Wallet>; F = void]’\r\n\r\nwallet/interfaces.cpp:580:16:   required from here\r\n\r\n./util/result.h:218:32: warning: missing initializer for member ‘util::detail::ErrorInfo<void>::failure’ [-Wmissing-field-initializers]\r\n  218 |             this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\r\n      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  219 |                                                         .warnings = std::move(other.m_info->warnings)});\r\n      |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n```\r\n\r\nI'm using  gcc  11.2.0 . If you need them all, just let me know\r\n\r\n\r\n\r\n\r\n",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1220755709",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "mentioned",
      "id": 7222757275,
      "node_id": "MEE_lADOABII585ORepCzwAAAAGugoeb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7222757275",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:36:53Z"
    },
    {
      "event": "subscribed",
      "id": 7222757288,
      "node_id": "SE_lADOABII585ORepCzwAAAAGugoeo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7222757288",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:36:53Z"
    },
    {
      "event": "commented",
      "id": 1220773746,
      "node_id": "IC_kwDOABII585Iw4dy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1220773746",
      "actor": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:53:26Z",
      "updated_at": "2022-08-24T16:08:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ryanofsky, @hernanmarino I also get those warnings.\r\n\r\nMy version of g++ is 9.4.0; please let me know if you need any other details.",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1220773746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "mentioned",
      "id": 7222882958,
      "node_id": "MEE_lADOABII585ORepCzwAAAAGuhHKO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7222882958",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:53:26Z"
    },
    {
      "event": "subscribed",
      "id": 7222882964,
      "node_id": "SE_lADOABII585ORepCzwAAAAGuhHKU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7222882964",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:53:26Z"
    },
    {
      "event": "mentioned",
      "id": 7222882974,
      "node_id": "MEE_lADOABII585ORepCzwAAAAGuhHKe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7222882974",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:53:26Z"
    },
    {
      "event": "subscribed",
      "id": 7222882981,
      "node_id": "SE_lADOABII585ORepCzwAAAAGuhHKl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7222882981",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T14:53:26Z"
    },
    {
      "event": "reviewed",
      "id": 1079113915,
      "node_id": "PRR_kwDOABII585AUfi7",
      "url": null,
      "actor": null,
      "commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1079113915",
      "submitted_at": "2022-08-19T16:59:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1069943757,
      "node_id": "PRR_kwDOABII584_xgvN",
      "url": null,
      "actor": null,
      "commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK 9bd10728bada8b04d86f5621ee127713f628a9ad\r\n\r\nI'm not getting any compilation warnings:\r\n```sh\r\ng++ --version\r\nApple clang version 13.1.6 (clang-1316.0.21.2.5)\r\nTarget: arm64-apple-darwin21.5.0\r\n```\r\n\r\nIt's a beautiful implementation and I've learned a lot while reviewing this. That's both a compliment and a warning that my review shouldn't weigh heavily, even if I'm doing it as thoroughly as I can. My main concern is that for everyone not already intimately familiar with C++, I think this takes a _long_ time to review thoroughly. The genericness made it difficult to reason about for me. I haven't come up with a simpler alternative so I don't think I'll want that to stand in the way of anything, though. Just something to be mindful of.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1069943757",
      "submitted_at": "2022-08-19T17:05:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "referenced",
      "id": 7227067897,
      "node_id": "REFE_lADOABII585ORepCzwAAAAGuxE35",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7227067897",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f2f8c5be4998eabe94eca291c7dff63a9f6d929e",
      "commit_url": "https://api.github.com/repos/Rspigler/bitcoin/commits/f2f8c5be4998eabe94eca291c7dff63a9f6d929e",
      "created_at": "2022-08-21T01:43:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7253318829,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGwVNyt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7253318829",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T18:25:10Z"
    },
    {
      "event": "reviewed",
      "id": 1081114599,
      "node_id": "PRR_kwDOABII585AcH_n",
      "url": null,
      "actor": null,
      "commit_id": "10e158a5b57ba3a26e5046a9b42fcc757652f35a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for testing and reviews!\r\n\r\nUpdated 9bd10728bada8b04d86f5621ee127713f628a9ad -> 10e158a5b57ba3a26e5046a9b42fcc757652f35a ([`pr/bresult2.13`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.13) -> [`pr/bresult2.14`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.14), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.13..pr/bresult2.14)) with suggestions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1081114599",
      "submitted_at": "2022-08-24T18:30:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7261103560,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGwy6XI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7261103560",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T16:30:27Z"
    },
    {
      "event": "reviewed",
      "id": 1085638384,
      "node_id": "PRR_kwDOABII585AtYbw",
      "url": null,
      "actor": null,
      "commit_id": "5aff7baf375c432746dff6862e9d06064ea1fb18",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 10e158a5b57ba3a26e5046a9b42fcc757652f35a -> 5aff7baf375c432746dff6862e9d06064ea1fb18 ([`pr/bresult2.14`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.14) -> [`pr/bresult2.15`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.14..pr/bresult2.15)) adding MoveMessages suggestion and few more comments and simplifications.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1085638384",
      "submitted_at": "2022-08-25T16:34:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1088926315,
      "node_id": "PRR_kwDOABII585A57Jr",
      "url": null,
      "actor": null,
      "commit_id": "5aff7baf375c432746dff6862e9d06064ea1fb18",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1088926315",
      "submitted_at": "2022-08-29T15:36:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1088932989,
      "node_id": "PRR_kwDOABII585A58x9",
      "url": null,
      "actor": null,
      "commit_id": "5aff7baf375c432746dff6862e9d06064ea1fb18",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1088932989",
      "submitted_at": "2022-08-29T15:39:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7289939681,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGyg6bh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7289939681",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-30T18:19:54Z"
    },
    {
      "event": "reviewed",
      "id": 1090610240,
      "node_id": "PRR_kwDOABII585BAWRA",
      "url": null,
      "actor": null,
      "commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 5aff7baf375c432746dff6862e9d06064ea1fb18 -> 834857e56b8de0bfabee7315622c0211b4a48746 ([`pr/bresult2.15`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.15) -> [`pr/bresult2.16`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.15..pr/bresult2.16)) with suggestions, and splitting the main commit",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1090610240",
      "submitted_at": "2022-08-30T18:27:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1091053363,
      "node_id": "PRR_kwDOABII585BCCcz",
      "url": null,
      "actor": null,
      "commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/25665/commits/834857e56b8de0bfabee7315622c0211b4a48746",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1091053363",
      "submitted_at": "2022-08-30T22:42:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1090849342,
      "node_id": "PRR_kwDOABII585BBQo-",
      "url": null,
      "actor": null,
      "commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK 834857e56",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1090849342",
      "submitted_at": "2022-08-31T11:33:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7306298640,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGzfUUQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7306298640",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T15:17:53Z"
    },
    {
      "event": "reviewed",
      "id": 1093461843,
      "node_id": "PRR_kwDOABII585BLOdT",
      "url": null,
      "actor": null,
      "commit_id": "82c549aa538a5318fdb56d91117b4c9fc43737de",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for the reviews! Just tweaked a few things as suggested.\r\n\r\nUpdated 834857e56b8de0bfabee7315622c0211b4a48746 -> 82c549aa538a5318fdb56d91117b4c9fc43737de ([`pr/bresult2.16`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.16) -> [`pr/bresult2.17`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.16..pr/bresult2.17)) with suggestions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1093461843",
      "submitted_at": "2022-09-01T15:21:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7308610288,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAGzoIrw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7308610288",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T20:57:46Z"
    },
    {
      "event": "commented",
      "id": 1234778363,
      "node_id": "IC_kwDOABII585JmTj7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1234778363",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T21:02:16Z",
      "updated_at": "2022-09-01T21:02:39Z",
      "author_association": "MEMBER",
      "body": "Some changes made earlier in https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1085638384 broke derived-to-base type conversions used in followup PR #25722. Latest push fixes this and adds a test.\r\n\r\nUpdated 82c549aa538a5318fdb56d91117b4c9fc43737de -> c14e904f66505b3e89ca1138c8d2fa4e3d0916d0 ([`pr/bresult2.17`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.17) -> [`pr/bresult2.18`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.18), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.17..pr/bresult2.18)) adding fix and test for derived to base conversions\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1234778363",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "reviewed",
      "id": 1099419063,
      "node_id": "PRR_kwDOABII585Bh823",
      "url": null,
      "actor": null,
      "commit_id": "c14e904f66505b3e89ca1138c8d2fa4e3d0916d0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review re-ACK c14e904f66505b3e89ca1138c8d2fa4e3d0916d0",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1099419063",
      "submitted_at": "2022-09-07T16:40:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1103995676,
      "node_id": "PRR_kwDOABII585BzaMc",
      "url": null,
      "actor": null,
      "commit_id": "c14e904f66505b3e89ca1138c8d2fa4e3d0916d0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "review ACK f7b4fa870783ecd5f9a408bd603ff9cf0399cc3e 🛍\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK f7b4fa870783ecd5f9a408bd603ff9cf0399cc3e 🛍\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGyBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjixAv439pj0FjYrwKsRqf1jJfBZhalBe6IAeD8yperLaCmdGfmSp0udgbTwuGI\r\n5YMasCELJ3PikDrscmn6snYiYBb+0PMgPMqriUKMWxmmMDW5v9aiqefxSgEGBQro\r\n2euNt+qSvycWOHt2We2oZiRyqGZZooQNMBOETo4y6v164pdysueFKNFac3ppI3AW\r\nLLepp/FEaId5t8dIlaVo7q49I55AQ0xdduptslA2GmZCcXyVA7bNZrcQxc2NxoH7\r\nXZFFTbkYri51Nn8bRcD/EK47Cc04CCqw8p9XVeD4xpkZBzqoHKIk/3wlaqN2qgJb\r\n8cgK6xoBOQIsKk43ez3Kxhip6pjQ3fAVwqThz9S9Csf7Td1qCmrhM59n/2eMOz5Y\r\n30XwsiGigRr9IDr5Hi3XxrRZzyUwmqZyvN+n3JvT7lkzQhCDPkIozJPGFWgQEfRC\r\nXuJQdRQW7LOZH1GVnXRP1/wCSNpcXwjqNDT+syYEQk91/qezM+NJ1yfToQJkXC7i\r\neIhpCy8=\r\n=b8pq\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1103995676",
      "submitted_at": "2022-09-12T15:36:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7377634647,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAG3vcVX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7377634647",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-13T15:07:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7377736126,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAG3v1G-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7377736126",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-13T15:18:55Z"
    },
    {
      "event": "reviewed",
      "id": 1104682926,
      "node_id": "PRR_kwDOABII585B2B-u",
      "url": null,
      "actor": null,
      "commit_id": "e04d8a754ff1b25cab483996319a583e6e3e680a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for the reviews! New pushes implement all the suggested changes.\r\n\r\nUpdated c14e904f66505b3e89ca1138c8d2fa4e3d0916d0 -> 05a97d3208cc365cdeac9de281529568b3cd056c ([`pr/bresult2.18`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.18) -> [`pr/bresult2.19`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.19), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.18..pr/bresult2.19)) with suggestions. Also replaced operator<< with operator>> to simplify followup PR #25722 a bit\r\nRebased 05a97d3208cc365cdeac9de281529568b3cd056c -> e04d8a754ff1b25cab483996319a583e6e3e680a ([`pr/bresult2.19`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.19) -> [`pr/bresult2.20`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.20), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.19-rebase..pr/bresult2.20)) due to conflict with #24513",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1104682926",
      "submitted_at": "2022-09-13T15:22:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "commented",
      "id": 1245729262,
      "node_id": "IC_kwDOABII585KQFHu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1245729262",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-13T17:36:10Z",
      "updated_at": "2022-09-13T17:36:10Z",
      "author_association": "MEMBER",
      "body": "Still need to review the last commit\r\n\r\n\r\nreview ACK 3af5f5adbb 🍒\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK 3af5f5adbb 🍒\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUg+kgv/VMHBkcM/thQ5I6k4qE4vJdWFYuZQJFTe/KVPIpkC6nxuEr6Gi3staL6n\r\nmdRzkHsqS1Wpsm/kMUREBvEuTqUk+SPyv+spyWhnd86VSTa66clfJvrp0AD2kV6w\r\nuX5DlPzhb5fvgK59gJZ59Yq8bIcwqLe+hzvRBKdlqh5qxqnm1zSAB0O+KK4pwk9N\r\nz0mlPBWnM8qgmB3nnS9tWN58E4PUsue1Xb89GgNHh4DrnZTo/UrAPC9qsABeSU7+\r\nu1pU1Z9rpn57qmQI1LkQ9FDjZE8mL5NZ12OpISsNiXYVzQey6IiKsxzjfVtg3R4q\r\n5qtHzHtzx7XjDT40oAeb1Z1EWm+an5KME7Gk4/olR0PqDo2f2LILuwp9kCJJY7qt\r\nIdRWvHwAmU5J9EvgPOTWzWtU+LbsVwS3qoBwee2tlWrAxBjkdezuESFCDepq42wL\r\nTqzGBWAL40+MdjLBSeOYJm0ZuZHSHmqIDfykVyDmdM9SBaPstfkRmBngRIEKoCpM\r\n9PGi4h4Y\r\n=W7bY\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1245729262",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7379443505,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAG32V8x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7379443505",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-13T19:14:09Z"
    },
    {
      "event": "reviewed",
      "id": 1106306853,
      "node_id": "PRR_kwDOABII585B8Ocl",
      "url": null,
      "actor": null,
      "commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated e04d8a754ff1b25cab483996319a583e6e3e680a -> 52a4e50fb4b1171ee0f6814b0a50bc70cdd77134 ([`pr/bresult2.20`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.20) -> [`pr/bresult2.21`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.21), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.20..pr/bresult2.21)) fixing unintentional GetFailure copy introduced last push, and adding test to detect this copy",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1106306853",
      "submitted_at": "2022-09-13T19:17:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1107131542,
      "node_id": "PRR_kwDOABII585B_XyW",
      "url": null,
      "actor": null,
      "commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1107131542",
      "submitted_at": "2022-09-14T09:34:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7396092041,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAG412iJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7396092041",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-15T15:25:29Z"
    },
    {
      "event": "reviewed",
      "id": 1109415289,
      "node_id": "PRR_kwDOABII585CIFV5",
      "url": null,
      "actor": null,
      "commit_id": "f9accbc6e296adadac374eca085f8b2ce095c8a4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 52a4e50fb4b1171ee0f6814b0a50bc70cdd77134 -> f9accbc6e296adadac374eca085f8b2ce095c8a4 ([`pr/bresult2.21`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.21) -> [`pr/bresult2.22`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.22), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.21..pr/bresult2.22)) just renaming `operator=` to `Set` to avoid some confusion\r\nUpdated f9accbc6e296adadac374eca085f8b2ce095c8a4 -> 776d9b3fbb4cf83c81cc38c44cae10d3f3344b1b ([`pr/bresult2.22`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.22) -> [`pr/bresult2.23`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.22..pr/bresult2.23)) tweaking commit message\r\nRebased 776d9b3fbb4cf83c81cc38c44cae10d3f3344b1b -> 456e3d4eccf010eba30096061b83adc45c371b92 ([`pr/bresult2.23`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.23) -> [`pr/bresult2.24`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.23-rebase..pr/bresult2.24)) due to conflict with #25499\r\nRebased 456e3d4eccf010eba30096061b83adc45c371b92 -> 28a6934da980703006e028776d276ae77121c586 ([`pr/bresult2.24`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.24) -> [`pr/bresult2.25`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.25), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.24-rebase..pr/bresult2.25)) due to conflict with #25667\r\nRebased 28a6934da980703006e028776d276ae77121c586 -> f4d55d858d9da08612a8ba3b7ceeaf36dfe6cc30 ([`pr/bresult2.25`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.25) -> [`pr/bresult2.26`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.26), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.25-rebase..pr/bresult2.26)) due to conflicts with #26289 and #26661\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1109415289",
      "submitted_at": "2022-09-15T15:31:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7396169211,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAG42JX7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7396169211",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-15T15:33:53Z"
    },
    {
      "event": "labeled",
      "id": 7401993932,
      "node_id": "LE_lADOABII585ORepCzwAAAAG5MXbM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7401993932",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-16T10:15:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7423643611,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAG6e8_b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7423643611",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-20T15:52:50Z"
    },
    {
      "event": "unlabeled",
      "id": 7424582243,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAG6iiJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7424582243",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-20T18:07:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 7582962084,
      "node_id": "LE_lADOABII585ORepCzwAAAAHD-tGk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7582962084",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-13T16:07:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7593460897,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAHEmwSh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7593460897",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-14T20:59:22Z"
    },
    {
      "event": "unlabeled",
      "id": 7593584303,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAHEnOav",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7593584303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-14T21:19:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8145063845,
      "node_id": "LE_lADOABII585ORepCzwAAAAHle8-l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8145063845",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-03T18:09:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8171550647,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAHnD_e3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8171550647",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-06T18:50:37Z"
    },
    {
      "event": "unlabeled",
      "id": 8172220118,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAHnGi7W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8172220118",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-06T20:35:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 8318734956,
      "node_id": "REFE_lADOABII585ORepCzwAAAAHv1dJs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8318734956",
      "actor": {
        "login": "janus",
        "id": 6726,
        "node_id": "MDQ6VXNlcjY3MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6726?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janus",
        "html_url": "https://github.com/janus",
        "followers_url": "https://api.github.com/users/janus/followers",
        "following_url": "https://api.github.com/users/janus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janus/subscriptions",
        "organizations_url": "https://api.github.com/users/janus/orgs",
        "repos_url": "https://api.github.com/users/janus/repos",
        "events_url": "https://api.github.com/users/janus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "56ca68bb231d928434cd90936ce5e4f4c42f887b",
      "commit_url": "https://api.github.com/repos/BitgesellOfficial/bitgesell/commits/56ca68bb231d928434cd90936ce5e4f4c42f887b",
      "created_at": "2023-01-20T06:53:13Z"
    },
    {
      "event": "labeled",
      "id": 8375549081,
      "node_id": "LE_lADOABII585ORepCzwAAAAHzOLyZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8375549081",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T17:27:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8493579542,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAH6Qb0W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8493579542",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-10T20:41:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8494293928,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAH6TKOo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8494293928",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-10T22:38:10Z"
    },
    {
      "event": "unlabeled",
      "id": 8494308274,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAH6TNuy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8494308274",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-10T22:41:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1427053301,
      "node_id": "IC_kwDOABII585VDxr1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1427053301",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-12T14:54:59Z",
      "updated_at": "2023-02-12T14:54:59Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1427053301",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "commented",
      "id": 1427060487,
      "node_id": "IC_kwDOABII585VDzcH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1427060487",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-12T15:27:31Z",
      "updated_at": "2023-02-12T15:27:31Z",
      "author_association": "MEMBER",
      "body": "It seems the 7cdb7d1e9573ae60e7335af5d3de99191ad68b3f commit adds `src/wallet/test/availablecoins_tests.cpp` by accident, doesn't it?",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1427060487",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "reviewed",
      "id": 1294756069,
      "node_id": "PRR_kwDOABII585NLGjl",
      "url": null,
      "actor": null,
      "commit_id": "eb50fcd6859d1730663159995e8477f6d892e7f4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK eb50fcd6859d1730663159995e8477f6d892e7f4.\r\n\r\n---\r\nStyle nit:\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/25665/files#r954244319:\r\n> In that case I'd prefer `if` and `else` on separate lines\r\n\r\nAgree. From [Developer Notes](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c):\r\n> In every other case, braces are required, and the `then` and `else` clauses must appear correctly indented on a new line.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1294756069",
      "submitted_at": "2023-02-12T17:42:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "reviewed",
      "id": 1295372964,
      "node_id": "PRR_kwDOABII585NNdKk",
      "url": null,
      "actor": null,
      "commit_id": "eb50fcd6859d1730663159995e8477f6d892e7f4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1295372964",
      "submitted_at": "2023-02-13T10:42:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8540227600,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAH9CYgQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8540227600",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T18:53:42Z"
    },
    {
      "event": "commented",
      "id": 1433568160,
      "node_id": "IC_kwDOABII585VcoOg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433568160",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T18:54:47Z",
      "updated_at": "2023-02-16T18:54:47Z",
      "author_association": "MEMBER",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1294756069\r\n\r\nThanks for the review! I got rid of the unused test file and changed the `if` formatting as suggested\r\n\r\n---\r\n\r\nUpdated eb50fcd6859d1730663159995e8477f6d892e7f4 -> 501ef88b9412b0d924abf32cf2de7fbcbbb69b8d ([`pr/bresult2.28`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.28) -> [`pr/bresult2.29`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.29), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.28..pr/bresult2.29)) with suggested changes",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1433568160",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "labeled",
      "id": 8585357555,
      "node_id": "LE_lADOABII585ORepCzwAAAAH_uijz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8585357555",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-22T20:57:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8639973520,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAIC-4iQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8639973520",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-01T16:05:51Z"
    },
    {
      "event": "unlabeled",
      "id": 8640943457,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAIDClVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8640943457",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-01T17:45:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8691797257,
      "node_id": "LE_lADOABII585ORepCzwAAAAIGEk0J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8691797257",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-08T00:33:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8771116688,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAIKzJ6Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8771116688",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-16T19:05:19Z"
    },
    {
      "event": "unlabeled",
      "id": 8771981286,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAIK2c_m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8771981286",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-16T20:49:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8829896303,
      "node_id": "LE_lADOABII585ORepCzwAAAAIOTYZv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8829896303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T16:56:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8928557140,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAIULvhU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8928557140",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-04T20:31:21Z"
    },
    {
      "event": "unlabeled",
      "id": 8928982302,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAIUNXUe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8928982302",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-04T21:23:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9075910688,
      "node_id": "LE_lADOABII585ORepCzwAAAAIc92gg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9075910688",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-24T01:07:40Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRmMjM0OTk2NTM1ZWQ4MmYyMTVhZGJhODcxYTJhNGUxZTI0NWRiMjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df234996535ed82f215adba871a2a4e1e245db20",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/df234996535ed82f215adba871a2a4e1e245db20",
      "tree": {
        "sha": "d2e1ef67650a01e35d85e9f78f87701a1ba373a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2e1ef67650a01e35d85e9f78f87701a1ba373a9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da9f62f912294de07a595df0b4898aba4be6b69c",
          "sha": "da9f62f912294de07a595df0b4898aba4be6b69c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/da9f62f912294de07a595df0b4898aba4be6b69c"
        }
      ],
      "message": "refactor: Drop util::Result operator=\n\nIn cases where different error conditions need to be handled differently, it is\nuseful for `util::`Result` objects to be able to hold failure values and error\nmessages simultaneously. Also it is useful for `util::Result` objects to be\nable to hold multiple error message strings and warnings, instead of just\nsingle error strings.\n\nIn both of these cases, which are supported in upcoming commits, having an\n`operator=` method is potentially dangerous if it clears existing error and\nwarnings strings while setting result values, or confusing if it doesn't clear\nthem, so the safest thing is to disable `operator=` and provide an explicit\n`Set()` method so callers have a way of setting result values without having to\nclear message strings.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2023-05-02T15:50:45Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-09-15T15:15:06Z"
      },
      "sha": "df234996535ed82f215adba871a2a4e1e245db20"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNiYzQxMTA3YWMxODdjNGQ3N2NiZDAwYTFkMzk5Y2RmODMzMGE0ZmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbc41107ac187c4d77cbd00a1d399cdf8330a4fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cbc41107ac187c4d77cbd00a1d399cdf8330a4fd",
      "tree": {
        "sha": "afcae0731a29e84a54a96ca8dc007ce53b1b568d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afcae0731a29e84a54a96ca8dc007ce53b1b568d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df234996535ed82f215adba871a2a4e1e245db20",
          "sha": "df234996535ed82f215adba871a2a4e1e245db20",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/df234996535ed82f215adba871a2a4e1e245db20"
        }
      ],
      "message": "refactor: Add util::Result failure values\n\nAdd util::Result support for returning more error information. For better error\nhandling, adds the ability to return a value on failure, not just a value on\nsuccess. This is a key missing feature that made the result class not useful\nfor functions like LoadChainstate() which produce different errors that need to\nbe handled differently.\n\nThis change also makes some more minor improvements:\n\n- Smaller type size. util::Result<int> is 16 bytes, and util::Result<void> is 8\n  bytes. Previously util::Result<int> was 72 bytes and util::Result<void> was\n  unimplemented.\n\n- Broader type compatibility. Supports Result<void> return values, so it is\n  possible for functions that don't return values to still report errors.\n  Supports noncopyable and nonmovable success and error types.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2023-05-02T15:50:45Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-07-18T19:48:04Z"
      },
      "sha": "cbc41107ac187c4d77cbd00a1d399cdf8330a4fd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUzMDE5YzZmYjk0NDFhZDliMjg5YjBjNDRmNmMyMDdlNDc1ZDczN2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53019c6fb9441ad9b289b0c44f6c207e475d737e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/53019c6fb9441ad9b289b0c44f6c207e475d737e",
      "tree": {
        "sha": "6ddcf254df9725bc317967a3d07dbfb3a89fea26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ddcf254df9725bc317967a3d07dbfb3a89fea26"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbc41107ac187c4d77cbd00a1d399cdf8330a4fd",
          "sha": "cbc41107ac187c4d77cbd00a1d399cdf8330a4fd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cbc41107ac187c4d77cbd00a1d399cdf8330a4fd"
        }
      ],
      "message": "refactor: Use util::Result class in LoadChainstate and VerifyLoadedChainstate",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2023-05-02T15:50:45Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-07-21T04:46:20Z"
      },
      "sha": "53019c6fb9441ad9b289b0c44f6c207e475d737e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI4YTk1NGM3MDM0MDc3YWMzYTQ1MDgzZGQ1ZTJiNWNkYjRkNGNkZGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "tree": {
        "sha": "25b2a178e3db676af8b6ce2647dae4682d0ec380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25b2a178e3db676af8b6ce2647dae4682d0ec380"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53019c6fb9441ad9b289b0c44f6c207e475d737e",
          "sha": "53019c6fb9441ad9b289b0c44f6c207e475d737e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/53019c6fb9441ad9b289b0c44f6c207e475d737e"
        }
      ],
      "message": "refactor: Add util::Result multiple error and warning messages\n\nAdd util::Result support for returning warning messages and multiple errors,\nnot just a single error string. This provides a way for functions to report\nerrors and warnings in a standard way, and simplifies interfaces.\n\nThe functionality is unit tested here, and put to use in followup PR\nhttps://github.com/bitcoin/bitcoin/pull/25722",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2023-05-02T15:50:45Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-07-18T19:48:04Z"
      },
      "sha": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9149375415,
      "node_id": "HRFPE_lADOABII585ORepCzwAAAAIhWGO3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9149375415",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T19:59:11Z"
    },
    {
      "event": "unlabeled",
      "id": 9150425271,
      "node_id": "UNLE_lADOABII585ORepCzwAAAAIhaGi3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9150425271",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T22:53:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1423032563,
      "node_id": "PRR_kwDOABII585U0cDz",
      "url": null,
      "actor": null,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re ACK 28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#pullrequestreview-1423032563",
      "submitted_at": "2023-05-11T16:42:27Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
    },
    {
      "event": "review_requested",
      "id": 9224625335,
      "node_id": "RRE_lADOABII585ORepCzwAAAAIl1Jy3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9224625335",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T16:42:33Z",
      "requested_reviewer": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9224625355,
      "node_id": "RRE_lADOABII585ORepCzwAAAAIl1JzL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9224625355",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T16:42:33Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9224625369,
      "node_id": "RRE_lADOABII585ORepCzwAAAAIl1JzZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9224625369",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T16:42:33Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1544405658,
      "node_id": "IC_kwDOABII585cDcKa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1544405658",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T17:30:02Z",
      "updated_at": "2023-05-11T17:30:02Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review.\r\n\r\nNote: @martinus left several review comments on https://github.com/bitcoin/bitcoin/pull/25722#pullrequestreview-1386736519, which is based on this PR, which apply to this PR and can improve it a little. I'm planning to update this PR to incorporate the suggestions.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1544405658",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "mentioned",
      "id": 9225059071,
      "node_id": "MEE_lADOABII585ORepCzwAAAAIl2zr_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9225059071",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T17:30:02Z"
    },
    {
      "event": "subscribed",
      "id": 9225059100,
      "node_id": "SE_lADOABII585ORepCzwAAAAIl2zsc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9225059100",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T17:30:03Z"
    },
    {
      "event": "review_request_removed",
      "id": 9225059763,
      "node_id": "RRRE_lADOABII585ORepCzwAAAAIl2z2z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9225059763",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T17:30:07Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9225059896,
      "node_id": "RRE_lADOABII585ORepCzwAAAAIl2z44",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9225059896",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T17:30:07Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 9350908327,
      "node_id": "LE_lADOABII585ORepCzwAAAAItW4mn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9350908327",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-26T13:32:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1564403355,
      "node_id": "IC_kwDOABII585dPuab",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1564403355",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-26T13:32:45Z",
      "updated_at": "2023-05-26T13:32:45Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1564403355",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "commented",
      "id": 1564406303,
      "node_id": "IC_kwDOABII585dPvIf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1564406303",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-26T13:35:00Z",
      "updated_at": "2023-05-26T13:35:00Z",
      "author_association": "MEMBER",
      "body": "`void` can be removed from OP?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1564406303",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665"
    },
    {
      "event": "review_request_removed",
      "id": 9350931065,
      "node_id": "RRRE_lADOABII585ORepCzwAAAAItW-J5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9350931065",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-26T13:35:04Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9350931182,
      "node_id": "RRE_lADOABII585ORepCzwAAAAItW-Lu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9350931182",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-26T13:35:05Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926651294",
      "pull_request_review_id": 1046496463,
      "id": 926651294,
      "node_id": "PRRC_kwDOABII5843O5Oe",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This pull changes both the interface, as well as the internal representation. I wonder if changing the interface and renames can be done separate from the restructuring.\r\n\r\nHopefully those would be uncontroversial and could be reviewed easier/faster, so that less silent merge conflicts arise as the class gets used more and more. Also, less code will need to be changes if the interface changes are made earlier rather than later.",
      "created_at": "2022-07-21T13:05:47Z",
      "updated_at": "2022-07-21T13:07:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926651294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926651294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926658150",
      "pull_request_review_id": 1046506217,
      "id": 926658150,
      "node_id": "PRRC_kwDOABII5843O65m",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": 926651294,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This pull changes both the interface, as well as the internal representation. I wonder if changing the interface and renames can be done separate from the restructuring.\r\n\r\nOnly the third commit drops BResult usages, so the answer should be yes. IMO std::optional has a nice interface and it is a shame to reinvent it with stranger HasRes GetObj ReleaseObj methods.",
      "created_at": "2022-07-21T13:12:19Z",
      "updated_at": "2022-07-21T13:12:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926658150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926658150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926660730",
      "pull_request_review_id": 1046510212,
      "id": 926660730,
      "node_id": "PRRC_kwDOABII5843O7h6",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": 926651294,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With separate I meant separate pulls :sweat_smile: ",
      "created_at": "2022-07-21T13:14:54Z",
      "updated_at": "2022-07-21T13:14:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926660730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926660730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926667440",
      "pull_request_review_id": 1046519522,
      "id": 926667440,
      "node_id": "PRRC_kwDOABII5843O9Kw",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": 926651294,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> With separate I meant separate pulls sweat_smile\r\n\r\nOh sorry, I thought you were asking literally if it is possible",
      "created_at": "2022-07-21T13:20:49Z",
      "updated_at": "2022-07-21T13:20:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926667440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926667440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927648344",
      "pull_request_review_id": 1047899737,
      "id": 927648344,
      "node_id": "PRRC_kwDOABII5843SspY",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": 926651294,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the stuff that can be split out:\r\n\r\n* Makes Result class provide same operators and methods as std::optional\r\n* Puts src/util/ code in the util:: namespace so naming reflects code organization and it is obvious where the class is coming from. Drops \"B\" from name because it is undocumented what it stands for (bilingual?)\r\n* Supports Result<bilingual_str> return values. Drops ambiguous and potentially misleading BResult constructor that treats any bilingual string as an error, and any other type as a non-error. Adds util::Error constructor so errors have to be explicitly constructed and not any bilingual_str will be turned into one.\r\n",
      "created_at": "2022-07-22T13:23:40Z",
      "updated_at": "2022-07-22T13:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927648344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927648344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927703509",
      "pull_request_review_id": 1047980709,
      "id": 927703509,
      "node_id": "PRRC_kwDOABII5843S6HV",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": 926651294,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think these things are already split out. The first two commits do not change the interface or naming or functionality of BResult in any way. If you want me to move the last commit to another, PR I can do that.",
      "created_at": "2022-07-22T14:22:33Z",
      "updated_at": "2022-07-22T14:22:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927703509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927703509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927707935",
      "pull_request_review_id": 1047987255,
      "id": 927707935,
      "node_id": "PRRC_kwDOABII5843S7Mf",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": 926651294,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I think that makes sense, so that we can first figure out the interface, and then start using it more widely, not the other way round.",
      "created_at": "2022-07-22T14:27:20Z",
      "updated_at": "2022-07-22T14:27:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927707935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927707935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930446676",
      "pull_request_review_id": 1051660331,
      "id": 930446676,
      "node_id": "PRRC_kwDOABII5843dX1U",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "in_reply_to_id": 926651294,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927707935\r\n\r\n> Yeah, I think that makes sense, so that we can first figure out the interface, and then start using it more widely, not the other way round.\r\n\r\nThanks, moved to #25721 now and rewrote PR description\r\n",
      "created_at": "2022-07-26T21:58:03Z",
      "updated_at": "2022-07-27T19:29:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r930446676",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930446676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943789301",
      "pull_request_review_id": 1069943757,
      "id": 943789301,
      "node_id": "PRRC_kwDOABII5844QRT1",
      "diff_hunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+#include <util/string.h>\n+\n+namespace util {\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors)\n+{\n+    return Join(errors, Untranslated(\" \"));\n+}\n+\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings)\n+{\n+    bilingual_str result = ErrorString(errors);",
      "path": "src/util/result.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    bilingual_str result{ErrorString(errors)};\r\n```",
      "created_at": "2022-08-11T18:12:09Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r943789301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943789301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943807162",
      "pull_request_review_id": 1069943757,
      "id": 943807162,
      "node_id": "PRRC_kwDOABII5844QVq6",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 8,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure why iwyu [doesn't](https://cirrus-ci.com/task/6358959639494656) catch it, but shouldn't `forward`, `types` and `utility` also be included here?",
      "created_at": "2022-08-11T18:33:11Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r943807162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943807162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 11,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944367210",
      "pull_request_review_id": 1070947229,
      "id": 944367210,
      "node_id": "PRRC_kwDOABII5844SeZq",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could probably make sense to split this up and use it there: https://github.com/bitcoin/bitcoin/pull/25616#discussion_r942704207",
      "created_at": "2022-08-12T11:18:55Z",
      "updated_at": "2022-08-12T11:18:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r944367210",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944367210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945167440",
      "pull_request_review_id": 1071979503,
      "id": 945167440,
      "node_id": "PRRC_kwDOABII5844VhxQ",
      "diff_hunk": "@@ -31,54 +148,84 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([this](auto&&... x) { this->InitFailure(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n+    {\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        Construct([this](auto&&... x) { this->InitValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 232,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": null,
      "user": {
        "login": "Riahiamirreza",
        "id": 54557628,
        "node_id": "MDQ6VXNlcjU0NTU3NjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54557628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Riahiamirreza",
        "html_url": "https://github.com/Riahiamirreza",
        "followers_url": "https://api.github.com/users/Riahiamirreza/followers",
        "following_url": "https://api.github.com/users/Riahiamirreza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Riahiamirreza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Riahiamirreza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Riahiamirreza/subscriptions",
        "organizations_url": "https://api.github.com/users/Riahiamirreza/orgs",
        "repos_url": "https://api.github.com/users/Riahiamirreza/repos",
        "events_url": "https://api.github.com/users/Riahiamirreza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Riahiamirreza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the difference between when the `this->m_info` is `true` and when it is `false`? While as far as I understand in both cases the `this->m_info` is destroyed and replaced by `other.m_info`.  Am I correct? So why bother to check `other.m_info && !this->m_info` and  `other.m_info && this->m_info`?",
      "created_at": "2022-08-13T16:42:21Z",
      "updated_at": "2022-08-13T16:47:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945167440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945167440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945184751",
      "pull_request_review_id": 1071993521,
      "id": 945184751,
      "node_id": "PRRC_kwDOABII5844Vl_v",
      "diff_hunk": "@@ -31,54 +148,84 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([this](auto&&... x) { this->InitFailure(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n+    {\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        Construct([this](auto&&... x) { this->InitValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 232,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 945167440,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> What is the difference between when the `this->m_info` is `true` and when it is `false`?\r\n\r\nThe implementation is optimized for the \"happy path\" where a success value is set and there is no failure value and no error or warning message strings. In the happy path case, `m_info` is null and no allocation is needed. Otherwise, if there has been any kind of error or warning `m_info` will be non-null.\r\n\r\n> While as far as I understand in both cases the `this->m_info` is destroyed and replaced by `other.m_info`.  Am I correct?\r\n\r\nNo that's not really correct. As the comment \"Operator moving warning and error messages from one result to another\" says, only warning and error strings are moved from `other` to `*this`. The success and value statuses of `other` and `*this` objects are unchanged, and the success and failure values of both objects (if any) are also unchanged. Existing warning and error strings in `*this` are also not affected, the new errors and warnings just get appended and don't replace existing one.\r\n\r\n> So why bother to check `other.m_info && !this->m_info` and `other.m_info && this->m_info`?\r\n\r\nI'm not sure what other code you might expect to see here, but in both cases this is just moving `other.m_info->errors` strings to `this->m_info->errors` and moving `other.m_info->warnings` strings to `this->m_info->warnings` while not deleting any existing strings and not changing `other.m_info->failure` and `this->m_info->failure` values.",
      "created_at": "2022-08-13T20:02:49Z",
      "updated_at": "2022-08-13T20:03:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945184751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945184751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945529940",
      "pull_request_review_id": 1072373197,
      "id": 945529940,
      "node_id": "PRRC_kwDOABII5844W6RU",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    union { T m_value; };",
      "path": "src/util/result.h",
      "position": 76,
      "original_position": 84,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": null,
      "user": {
        "login": "Riahiamirreza",
        "id": 54557628,
        "node_id": "MDQ6VXNlcjU0NTU3NjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54557628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Riahiamirreza",
        "html_url": "https://github.com/Riahiamirreza",
        "followers_url": "https://api.github.com/users/Riahiamirreza/followers",
        "following_url": "https://api.github.com/users/Riahiamirreza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Riahiamirreza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Riahiamirreza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Riahiamirreza/subscriptions",
        "organizations_url": "https://api.github.com/users/Riahiamirreza/orgs",
        "repos_url": "https://api.github.com/users/Riahiamirreza/repos",
        "events_url": "https://api.github.com/users/Riahiamirreza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Riahiamirreza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand why the `m_value` is in a `union` while there is only one member in the `union`? Would you explain why?",
      "created_at": "2022-08-15T08:39:35Z",
      "updated_at": "2022-08-15T08:51:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945529940",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945529940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945536621",
      "pull_request_review_id": 1072373197,
      "id": 945536621,
      "node_id": "PRRC_kwDOABII5844W75t",
      "diff_hunk": "@@ -31,54 +148,84 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([this](auto&&... x) { this->InitFailure(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n+    {\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        Construct([this](auto&&... x) { this->InitValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 232,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 945167440,
      "user": {
        "login": "Riahiamirreza",
        "id": 54557628,
        "node_id": "MDQ6VXNlcjU0NTU3NjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54557628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Riahiamirreza",
        "html_url": "https://github.com/Riahiamirreza",
        "followers_url": "https://api.github.com/users/Riahiamirreza/followers",
        "following_url": "https://api.github.com/users/Riahiamirreza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Riahiamirreza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Riahiamirreza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Riahiamirreza/subscriptions",
        "organizations_url": "https://api.github.com/users/Riahiamirreza/orgs",
        "repos_url": "https://api.github.com/users/Riahiamirreza/repos",
        "events_url": "https://api.github.com/users/Riahiamirreza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Riahiamirreza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for your explanation. My wrong assumption was that by replacing the warnings and errors the `this` is completely like the `other`, so why checking whether `this->m_info` is null or not. \r\nBut as you mentioned the success and value statuses remained unchanged.",
      "created_at": "2022-08-15T08:49:22Z",
      "updated_at": "2022-08-15T08:49:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945536621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945536621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945688134",
      "pull_request_review_id": 1072625079,
      "id": 945688134,
      "node_id": "PRRC_kwDOABII5844Xg5G",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    union { T m_value; };",
      "path": "src/util/result.h",
      "position": 76,
      "original_position": 84,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 945529940,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I don't understand why the `m_value` is in a `union` while there is only one member in the `union`? Would you explain why?\r\n\r\nI'll add a code comment, but using a union avoids `m_value` getting constructor and destructor being called automatically, so in the failure case `m_value` is never constructed.",
      "created_at": "2022-08-15T12:47:28Z",
      "updated_at": "2022-08-15T12:48:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945688134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945688134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945877898",
      "pull_request_review_id": 1072845525,
      "id": 945877898,
      "node_id": "PRRC_kwDOABII5844YPOK",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r944367210\r\n\r\n> Could probably make sense to split this up and use it there: [#25616 (comment)](https://github.com/bitcoin/bitcoin/pull/25616#discussion_r942704207)\r\n\r\nIs the suggestion to add the GetErrors() method in this PR, but delay adding the GetWarnings() method until followup PR  #25722? I could do that, but I don't think it would simplify this PR very much (it would remove a few lines) and it would add more churn to result implementation/documentation/unit tests review\r\n\r\n",
      "created_at": "2022-08-15T15:31:51Z",
      "updated_at": "2022-08-15T15:31:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945877898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945877898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945880218",
      "pull_request_review_id": 1072848647,
      "id": 945880218,
      "node_id": "PRRC_kwDOABII5844YPya",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, I was wondering if `GetWarnings` could be added by itself in the other pull, maybe conflicting with this one, but otherwise unrelated from this one.",
      "created_at": "2022-08-15T15:34:24Z",
      "updated_at": "2022-08-15T15:34:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945880218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945880218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945881360",
      "pull_request_review_id": 1072850297,
      "id": 945881360,
      "node_id": "PRRC_kwDOABII5844YQEQ",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would allow reviewers to just look at the `GetWarnings` implementation, API, and proposed usage, without having to think about `union/void/...` etc.",
      "created_at": "2022-08-15T15:35:48Z",
      "updated_at": "2022-08-15T15:35:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945881360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945881360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945935114",
      "pull_request_review_id": 1072924299,
      "id": 945935114,
      "node_id": "PRRC_kwDOABII5844YdMK",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945881360\r\n\r\n> This would allow reviewers to just look at the `GetWarnings` implementation, API, and proposed usage, without having to think about `union/void/...` etc.\r\n\r\nOh. I guess there could be a third PR independent of this PR and #25722 that adds a `std::vector<bilingual_str> m_warnings;` field to `util::Result` and `AddWarning()/GetWarnings()` methods. I don't think it would be as useful as you might be thinking without template constructors that can move errors & warnings from one result object to another, though.\r\n\r\nMaybe if you are interested you could open a PR that does this? I'd be happy to review it. I'm just not sure exactly what you want to do here because the goal of #25722 is a lot broader. Not just dropping `std::vector<bilingual_str>& warnings` output arguments but also dropping `DatabaseStatus& status` output arguments and returning errors and warnings directly from nested calls.",
      "created_at": "2022-08-15T16:41:01Z",
      "updated_at": "2022-08-15T16:41:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945935114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945935114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947098272",
      "pull_request_review_id": 1074563820,
      "id": 947098272,
      "node_id": "PRRC_kwDOABII5844c5Kg",
      "diff_hunk": "@@ -31,14 +32,11 @@ struct ChainstateLoadOptions {\n     std::function<void()> coins_error_cb;\n };\n \n-//! Chainstate load status. Simple applications can just check for the success\n-//! case, and treat other cases as errors. More complex applications may want to\n-//! try reindexing in the generic failure case, and pass an interrupt callback\n-//! and exit cleanly in the interrupted case.\n-enum class ChainstateLoadStatus { SUCCESS, FAILURE, FAILURE_INCOMPATIBLE_DB, INTERRUPTED };\n-\n-//! Chainstate load status code and optional error string.\n-using ChainstateLoadResult = std::tuple<ChainstateLoadStatus, bilingual_str>;\n+//! Chainstate load errors. Simple applications can just treat all errors as\n+//! failures. More complex applications may want to try reindexing in the\n+//! generic error case, and pass an interrupt callback and exit cleanly in the\n+//! interrupted case.\n+enum class ChainstateLoadError { FAILURE, FAILURE_INCOMPATIBLE_DB, INTERRUPTED };",
      "path": "src/node/chainstate.h",
      "position": null,
      "original_position": 24,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "in_reply_to_id": null,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps could take the opportunity to make this something like:\r\n\r\n```suggestion\r\nenum class ChainstateLoadError { FAILURE_TRY_REINDEX, FAILURE_FATAL, INTERRUPTED };\r\n```\r\n\r\nSo that it's more inline with indicating \"what to do about the failure\".\r\n\r\nCould also move the \"4 types of outcomes\" comment up here where it's clearer.",
      "created_at": "2022-08-16T18:08:37Z",
      "updated_at": "2022-08-16T18:08:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r947098272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947098272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948068576",
      "pull_request_review_id": 1075933057,
      "id": 948068576,
      "node_id": "PRRC_kwDOABII5844gmDg",
      "diff_hunk": "@@ -53,9 +51,9 @@ using ChainstateLoadResult = std::tuple<ChainstateLoadStatus, bilingual_str>;\n  *\n  *  LoadChainstate returns a (status code, error string) tuple.",
      "path": "src/node/chainstate.h",
      "position": null,
      "original_position": 30,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "in_reply_to_id": null,
      "user": {
        "login": "AryanJ-NYC",
        "id": 8263430,
        "node_id": "MDQ6VXNlcjgyNjM0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8263430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AryanJ-NYC",
        "html_url": "https://github.com/AryanJ-NYC",
        "followers_url": "https://api.github.com/users/AryanJ-NYC/followers",
        "following_url": "https://api.github.com/users/AryanJ-NYC/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AryanJ-NYC/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AryanJ-NYC/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AryanJ-NYC/subscriptions",
        "organizations_url": "https://api.github.com/users/AryanJ-NYC/orgs",
        "repos_url": "https://api.github.com/users/AryanJ-NYC/repos",
        "events_url": "https://api.github.com/users/AryanJ-NYC/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AryanJ-NYC/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment is no longer true.",
      "created_at": "2022-08-17T15:10:04Z",
      "updated_at": "2022-08-17T15:10:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948068576",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948068576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948230244",
      "pull_request_review_id": 1076136266,
      "id": 948230244,
      "node_id": "PRRC_kwDOABII5844hNhk",
      "diff_hunk": "@@ -8,16 +8,135 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 70,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be sufficient to use `explicit operator bool() const` instead here? That would avoid e.g. \"(result + 3)\" from compiling (and evaluating to 3 or 4).",
      "created_at": "2022-08-17T17:21:13Z",
      "updated_at": "2022-08-17T17:21:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948230244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948230244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948262782",
      "pull_request_review_id": 1076183597,
      "id": 948262782,
      "node_id": "PRRC_kwDOABII5844hVd-",
      "diff_hunk": "@@ -53,9 +51,9 @@ using ChainstateLoadResult = std::tuple<ChainstateLoadStatus, bilingual_str>;\n  *\n  *  LoadChainstate returns a (status code, error string) tuple.",
      "path": "src/node/chainstate.h",
      "position": null,
      "original_position": 30,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "in_reply_to_id": 948068576,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948068576\r\n\r\n> This comment is no longer true.\r\n\r\nThanks, removed",
      "created_at": "2022-08-17T17:59:50Z",
      "updated_at": "2022-08-17T19:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948262782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948262782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948263551",
      "pull_request_review_id": 1076183597,
      "id": 948263551,
      "node_id": "PRRC_kwDOABII5844hVp_",
      "diff_hunk": "@@ -8,16 +8,135 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 70,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "in_reply_to_id": 948230244,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948230244\r\n\r\n> Would it be sufficient to use `explicit operator bool() const` instead here? That would avoid e.g. \"(result + 3)\" from compiling (and evaluating to 3 or 4).\r\n\r\nGood catch, added explicit. This was an unintended regression (operator bool was explicit before this PR)",
      "created_at": "2022-08-17T18:00:42Z",
      "updated_at": "2022-08-17T19:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948263551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948263551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948281038",
      "pull_request_review_id": 1076209823,
      "id": 948281038,
      "node_id": "PRRC_kwDOABII5844hZ7O",
      "diff_hunk": "@@ -8,16 +8,135 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 70,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "in_reply_to_id": 948230244,
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1 to @sipa 's comment.",
      "created_at": "2022-08-17T18:22:16Z",
      "updated_at": "2022-08-17T18:22:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948281038",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948281038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948288448",
      "pull_request_review_id": 1076183597,
      "id": 948288448,
      "node_id": "PRRC_kwDOABII5844hbvA",
      "diff_hunk": "@@ -31,14 +32,11 @@ struct ChainstateLoadOptions {\n     std::function<void()> coins_error_cb;\n };\n \n-//! Chainstate load status. Simple applications can just check for the success\n-//! case, and treat other cases as errors. More complex applications may want to\n-//! try reindexing in the generic failure case, and pass an interrupt callback\n-//! and exit cleanly in the interrupted case.\n-enum class ChainstateLoadStatus { SUCCESS, FAILURE, FAILURE_INCOMPATIBLE_DB, INTERRUPTED };\n-\n-//! Chainstate load status code and optional error string.\n-using ChainstateLoadResult = std::tuple<ChainstateLoadStatus, bilingual_str>;\n+//! Chainstate load errors. Simple applications can just treat all errors as\n+//! failures. More complex applications may want to try reindexing in the\n+//! generic error case, and pass an interrupt callback and exit cleanly in the\n+//! interrupted case.\n+enum class ChainstateLoadError { FAILURE, FAILURE_INCOMPATIBLE_DB, INTERRUPTED };",
      "path": "src/node/chainstate.h",
      "position": null,
      "original_position": 24,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "65481de0646f21349f24327410e4d7eb5189e5b3",
      "in_reply_to_id": 947098272,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r947098272\r\n\r\n> So that it's more inline with indicating \"what to do about the failure\".\r\n\r\nI agree it's good to suggest how failures can be handled, so I tried to do that in the comment. But I think if failure has a clear cause it's best for the error name to describe the cause, especially since not every application will want to handle errors the same way, and `bitcoin-qt`, `bitcoind`, and `bitcoin-chainstate` all handle errors differently.\r\n\r\nI'm also don't think `FAILURE_TRY_REINDEX` is an appropriate synonym for `FAILURE`, since generic failures can happen on any exception, even if reindexing was already requested. Trying to reindex when reindexing fails does not make a lot of sense. I'd be happy to rename `FAILURE` to `FAILURE_GENERIC`. But would probably do it in a separate PR to not complicate this one.\r\n\r\n> Could also move the \"4 types of outcomes\" comment up here where it's clearer.\r\n\r\nThanks for pointing it out. I think that comment actually does not add much information anymore, and is a little confusing because it is mentioning shutdowns when the `check_interrupt` callback and `INTERRUPTED` error could indicate any custom interruption, not just a shutdown.\r\n\r\nI can add more documentation if you think anything is missing, but I think a simple message of \"It is fine to treat any error code as a failure and ignore the specific cause\" is the most helpful takeaway. Setting interrupt callbacks and trying to reindex are optional enhancements mostly helpful for interactive applications.",
      "created_at": "2022-08-17T18:31:20Z",
      "updated_at": "2022-08-17T19:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r948288448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948288448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950214121",
      "pull_request_review_id": 1069943757,
      "id": 950214121,
      "node_id": "PRRC_kwDOABII5844ox3p",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }\n+        return std::move(other);\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Helper methods to format error strings.\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors);\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 250,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we want to expose these 2 helper methods in the header?",
      "created_at": "2022-08-19T13:53:02Z",
      "updated_at": "2022-08-19T17:09:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950214121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950214121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 226,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950215859",
      "pull_request_review_id": 1069943757,
      "id": 950215859,
      "node_id": "PRRC_kwDOABII5844oySz",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }\n+        return std::move(other);\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Helper methods to format error strings.\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors);\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+template <typename T, typename F>\n+bilingual_str ErrorString(const Result<T, F>& result) { return ErrorString(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 252,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What about renaming this function to `ErrorWarningString()` since at the moment it can contain both? I can see some scenario where people would want to access just the error but not the warning string (and of course it's just a convenience fn), so that would allow them to create the more narrow `ErrorString()` later on?\r\n\r\nPerhaps a brief docstring above this fn would be beneficial as well since that's the one people will mostly use.",
      "created_at": "2022-08-19T13:54:55Z",
      "updated_at": "2022-08-19T17:06:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950215859",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950215859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950223870",
      "pull_request_review_id": 1069943757,
      "id": 950223870,
      "node_id": "PRRC_kwDOABII5844o0P-",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.",
      "path": "src/util/result.h",
      "position": 25,
      "original_position": 23,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think this docstring is more relevant for `m_info`, perhaps move it to above its declaration in `ResultBase`?",
      "created_at": "2022-08-19T14:02:58Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950223870",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950223870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950228362",
      "pull_request_review_id": 1069943757,
      "id": 950228362,
      "node_id": "PRRC_kwDOABII5844o1WK",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.",
      "path": "src/util/result.h",
      "position": 33,
      "original_position": 31,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: You could add a bit more info on T, F for quick understanding?\r\n```suggestion\r\n//! Result base class which is inherited by Result<T, F>.\r\n//! T is the type of the success return value, or void if there is none.\r\n//! F is the type of the failure return value, or void if there is none.\r\n```",
      "created_at": "2022-08-19T14:07:37Z",
      "updated_at": "2022-08-19T17:06:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950228362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950228362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950253178",
      "pull_request_review_id": 1069943757,
      "id": 950253178,
      "node_id": "PRRC_kwDOABII5844o7Z6",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 52,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is repeated a few times, what do you think about this:\r\n\r\n```diff\r\ndiff --git a/src/util/result.h b/src/util/result.h\r\nindex 60e0b3db6..c6aa65891 100644\r\n--- a/src/util/result.h\r\n+++ b/src/util/result.h\r\n@@ -56,17 +56,19 @@ public:\r\n     void AddError(bilingual_str error)\r\n     {\r\n         if (error.empty()) return;\r\n-        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\r\n+        CheckInitInfo();\r\n         m_info->errors.emplace_back(std::move(error));\r\n     }\r\n \r\n     void AddWarning(bilingual_str warning)\r\n     {\r\n         if (warning.empty()) return;\r\n-        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\r\n+        CheckInitInfo();\r\n         m_info->warnings.emplace_back(std::move(warning));\r\n     }\r\n \r\n+    void CheckInitInfo() { if (!m_info) m_info = std::make_unique<ErrorInfo<F>>(); }\r\n+\r\n     //! Success check.\r\n     explicit operator bool() const { return !m_info || !m_info->failure; }\r\n \r\n@@ -159,7 +161,7 @@ protected:\r\n     {\r\n         this->AddError(std::move(error.message));\r\n         Construct([&](auto&&... x) {\r\n-            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\r\n+            this->CheckInitInfo();\r\n             this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\r\n         }, std::forward<Args>(args)...);\r\n     }\r\n\r\n```",
      "created_at": "2022-08-19T14:30:07Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950253178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950253178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950293020",
      "pull_request_review_id": 1069943757,
      "id": 950293020,
      "node_id": "PRRC_kwDOABII5844pFIc",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    explicit operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    //! Result success value. Uses anonymous union so success value is never\n+    //! constructed in failure case.\n+    union { T m_value; };\n+\n+    template <typename... Args>\n+    void ConstructValue(Args&&... args) { new (&m_value) T{std::forward<Args>(args)...}; }\n+    template <typename O>\n+    void MoveValue(O& other) { new (&m_value) T{std::move(other.m_value)}; }\n+    void DestroyValue() { m_value.~T(); }\n+\n+    ResultBase() {}\n+    ~ResultBase() {}\n+\n+    template <typename FT, typename FF>\n+    friend class ResultBase;\n+\n+public:\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return *this ? true : false; }\n+    const T& value() const LIFETIMEBOUND { assert(*this); return m_value; }\n+    T& value() LIFETIMEBOUND { assert(*this); return m_value; }\n+    template <class U>\n+    T value_or(U&& default_value) const&\n+    {\n+        return has_value() ? value() : std::forward<U>(default_value);\n+    }\n+    template <class U>\n+    T value_or(U&& default_value) &&\n+    {\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+    }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 109,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As part of the public interface, I think these could benefit from a very brief per-method docstring (that probably just mirrors the std::optional docstring)?",
      "created_at": "2022-08-19T15:05:22Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950293020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950293020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 102,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950310915",
      "pull_request_review_id": 1069943757,
      "id": 950310915,
      "node_id": "PRRC_kwDOABII5844pJgD",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    explicit operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    //! Result success value. Uses anonymous union so success value is never\n+    //! constructed in failure case.\n+    union { T m_value; };\n+\n+    template <typename... Args>\n+    void ConstructValue(Args&&... args) { new (&m_value) T{std::forward<Args>(args)...}; }\n+    template <typename O>\n+    void MoveValue(O& other) { new (&m_value) T{std::move(other.m_value)}; }\n+    void DestroyValue() { m_value.~T(); }\n+\n+    ResultBase() {}\n+    ~ResultBase() {}\n+\n+    template <typename FT, typename FF>\n+    friend class ResultBase;\n+\n+public:\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return *this ? true : false; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 97,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: slightly more concise and clear on intent imo\r\n```suggestion\r\n    bool has_value() const { return bool(*this); }\r\n```",
      "created_at": "2022-08-19T15:24:59Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950310915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950310915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950331132",
      "pull_request_review_id": 1069943757,
      "id": 950331132,
      "node_id": "PRRC_kwDOABII5844pOb8",
      "diff_hunk": "@@ -51,36 +80,106 @@ util::Result<NoCopy> NoCopyFn(int i, bool success)\n     return util::Error{Untranslated(strprintf(\"nocopy %i error.\", i))};\n }\n \n-template <typename T>\n-void ExpectResult(const util::Result<T>& result, bool success, const bilingual_str& str)\n+util::Result<NoCopyNoMove> NoCopyNoMoveFn(int i, bool success)\n+{\n+    if (success) return {i};\n+    return util::Error{Untranslated(strprintf(\"nocopynomove %i error.\", i))};\n+}\n+\n+enum FnError { ERR1, ERR2 };\n+\n+util::Result<int, FnError> IntFailFn(int i, bool success)\n+{\n+    if (success) return i;\n+    return {util::Error{Untranslated(strprintf(\"int %i error.\", i))}, i % 2 ? ERR1 : ERR2};\n+}\n+\n+util::Result<NoCopyNoMove, FnError> EnumFailFn(FnError ret)\n+{\n+    return {util::Error{Untranslated(\"enum fail.\")}, ret};\n+}\n+\n+util::Result<void> WarnFn()\n+{\n+    return {util::Warning{Untranslated(\"warn.\")}};\n+}\n+\n+util::Result<int> MultiWarnFn(int ret)\n+{\n+    util::Result<void> result;\n+    for (int i = 0; i < ret; ++i) {\n+        result.AddWarning(strprintf(Untranslated(\"warn %i.\"), i));\n+    }\n+    return {std::move(result), ret};\n+}\n+\n+util::Result<void, int> ChainedFailFn(FnError arg, int ret)\n+{\n+    return {util::Error{Untranslated(\"chained fail.\")}, EnumFailFn(arg), WarnFn(), ret};\n+}\n+\n+util::Result<int, FnError> AccumulateFn(bool success)\n+{\n+    util::Result<int, FnError> result;\n+    util::Result<int> x = result << MultiWarnFn(1);\n+    BOOST_REQUIRE(x);\n+    util::Result<int> y = result << MultiWarnFn(2);\n+    BOOST_REQUIRE(y);\n+    result = IntFailFn(*x + *y, success);\n+    return result;\n+}\n+\n+template<typename T, typename F>\n+void ExpectResult(const util::Result<T, F>& result, bool success, const bilingual_str& str)\n {\n     BOOST_CHECK_EQUAL(bool(result), success);\n     BOOST_CHECK_EQUAL(util::ErrorString(result), str);\n }\n \n-template <typename T, typename... Args>\n-void ExpectSuccess(const util::Result<T>& result, const bilingual_str& str, Args&&... args)\n+template<typename T, typename F, typename... Args>\n+void ExpectSuccess(const util::Result<T, F>& result, const bilingual_str& str, Args&&... args)\n {\n     ExpectResult(result, true, str);\n     BOOST_CHECK_EQUAL(result.has_value(), true);\n     BOOST_CHECK_EQUAL(result.value(), T{std::forward<Args>(args)...});\n     BOOST_CHECK_EQUAL(&result.value(), &*result);\n }\n \n-template <typename T, typename... Args>\n-void ExpectFail(const util::Result<T>& result, const bilingual_str& str)\n+template<typename T, typename F, typename... Args>\n+void ExpectFail(const util::Result<T, F>& result, bilingual_str str, Args&&... args)\n {\n     ExpectResult(result, false, str);\n+    BOOST_CHECK_EQUAL(result.GetFailure(), F{std::forward<Args>(args)...});\n }\n \n BOOST_AUTO_TEST_CASE(check_returned)\n {\n+    ExpectResult(VoidSuccessFn(), true, {});",
      "path": "src/test/result_tests.cpp",
      "position": 141,
      "original_position": 120,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it would be helpful to also test success with a falsy non-void value and failure with a truthy non-void value",
      "created_at": "2022-08-19T15:43:55Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950331132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950331132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950338812",
      "pull_request_review_id": 1069943757,
      "id": 950338812,
      "node_id": "PRRC_kwDOABII5844pQT8",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 157,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this line is redundant since we already call `this->AddError()` right above?",
      "created_at": "2022-08-19T15:50:56Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950338812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950338812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950342467",
      "pull_request_review_id": 1069943757,
      "id": 950342467,
      "node_id": "PRRC_kwDOABII5844pRND",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 192,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think this should be on a new line",
      "created_at": "2022-08-19T15:54:14Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950342467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950342467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950365637",
      "pull_request_review_id": 1069943757,
      "id": 950365637,
      "node_id": "PRRC_kwDOABII5844pW3F",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 215,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: ternary looks more appropriate?\r\n```suggestion\r\n        *this ? this->DestroyValue() : this->m_info->failure.reset();\r\n```",
      "created_at": "2022-08-19T16:18:57Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950365637",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950365637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950369435",
      "pull_request_review_id": 1069943757,
      "id": 950369435,
      "node_id": "PRRC_kwDOABII5844pXyb",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 221,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    //! Operator moving warning and error messages from other Result to this.\r\n```",
      "created_at": "2022-08-19T16:23:58Z",
      "updated_at": "2022-08-19T17:05:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950369435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950369435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950383459",
      "pull_request_review_id": 1069943757,
      "id": 950383459,
      "node_id": "PRRC_kwDOABII5844pbNj",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 229,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since `ErrorInfo` doesn't have a move constructor, do the move semantics make sense here? _(I'm still easily confused by move semantics, so I'm probably missing something - sorry)_",
      "created_at": "2022-08-19T16:42:35Z",
      "updated_at": "2022-08-19T17:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950383459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950383459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 215,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950398142",
      "pull_request_review_id": 1079113915,
      "id": 950398142,
      "node_id": "PRRC_kwDOABII5844pey-",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 26,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": null,
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ryanofsky the following change fixes the warnings for me, but i don't know if this is the best way to deal with this\r\n  \r\n```suggestion\r\n    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure = std::nullopt;\r\n```",
      "created_at": "2022-08-19T16:58:43Z",
      "updated_at": "2022-08-19T16:59:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950398142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950398142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889008",
      "pull_request_review_id": 1081114599,
      "id": 951889008,
      "node_id": "PRRC_kwDOABII5844vKxw",
      "diff_hunk": "@@ -51,36 +80,106 @@ util::Result<NoCopy> NoCopyFn(int i, bool success)\n     return util::Error{Untranslated(strprintf(\"nocopy %i error.\", i))};\n }\n \n-template <typename T>\n-void ExpectResult(const util::Result<T>& result, bool success, const bilingual_str& str)\n+util::Result<NoCopyNoMove> NoCopyNoMoveFn(int i, bool success)\n+{\n+    if (success) return {i};\n+    return util::Error{Untranslated(strprintf(\"nocopynomove %i error.\", i))};\n+}\n+\n+enum FnError { ERR1, ERR2 };\n+\n+util::Result<int, FnError> IntFailFn(int i, bool success)\n+{\n+    if (success) return i;\n+    return {util::Error{Untranslated(strprintf(\"int %i error.\", i))}, i % 2 ? ERR1 : ERR2};\n+}\n+\n+util::Result<NoCopyNoMove, FnError> EnumFailFn(FnError ret)\n+{\n+    return {util::Error{Untranslated(\"enum fail.\")}, ret};\n+}\n+\n+util::Result<void> WarnFn()\n+{\n+    return {util::Warning{Untranslated(\"warn.\")}};\n+}\n+\n+util::Result<int> MultiWarnFn(int ret)\n+{\n+    util::Result<void> result;\n+    for (int i = 0; i < ret; ++i) {\n+        result.AddWarning(strprintf(Untranslated(\"warn %i.\"), i));\n+    }\n+    return {std::move(result), ret};\n+}\n+\n+util::Result<void, int> ChainedFailFn(FnError arg, int ret)\n+{\n+    return {util::Error{Untranslated(\"chained fail.\")}, EnumFailFn(arg), WarnFn(), ret};\n+}\n+\n+util::Result<int, FnError> AccumulateFn(bool success)\n+{\n+    util::Result<int, FnError> result;\n+    util::Result<int> x = result << MultiWarnFn(1);\n+    BOOST_REQUIRE(x);\n+    util::Result<int> y = result << MultiWarnFn(2);\n+    BOOST_REQUIRE(y);\n+    result = IntFailFn(*x + *y, success);\n+    return result;\n+}\n+\n+template<typename T, typename F>\n+void ExpectResult(const util::Result<T, F>& result, bool success, const bilingual_str& str)\n {\n     BOOST_CHECK_EQUAL(bool(result), success);\n     BOOST_CHECK_EQUAL(util::ErrorString(result), str);\n }\n \n-template <typename T, typename... Args>\n-void ExpectSuccess(const util::Result<T>& result, const bilingual_str& str, Args&&... args)\n+template<typename T, typename F, typename... Args>\n+void ExpectSuccess(const util::Result<T, F>& result, const bilingual_str& str, Args&&... args)\n {\n     ExpectResult(result, true, str);\n     BOOST_CHECK_EQUAL(result.has_value(), true);\n     BOOST_CHECK_EQUAL(result.value(), T{std::forward<Args>(args)...});\n     BOOST_CHECK_EQUAL(&result.value(), &*result);\n }\n \n-template <typename T, typename... Args>\n-void ExpectFail(const util::Result<T>& result, const bilingual_str& str)\n+template<typename T, typename F, typename... Args>\n+void ExpectFail(const util::Result<T, F>& result, bilingual_str str, Args&&... args)\n {\n     ExpectResult(result, false, str);\n+    BOOST_CHECK_EQUAL(result.GetFailure(), F{std::forward<Args>(args)...});\n }\n \n BOOST_AUTO_TEST_CASE(check_returned)\n {\n+    ExpectResult(VoidSuccessFn(), true, {});",
      "path": "src/test/result_tests.cpp",
      "position": 141,
      "original_position": 120,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950331132,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950331132\r\n\r\n> I think it would be helpful to also test success with a falsy non-void value and failure with a truthy non-void value\r\n\r\nMakes sense, added tests",
      "created_at": "2022-08-22T20:37:18Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889116",
      "pull_request_review_id": 1081114599,
      "id": 951889116,
      "node_id": "PRRC_kwDOABII5844vKzc",
      "diff_hunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+#include <util/string.h>\n+\n+namespace util {\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors)\n+{\n+    return Join(errors, Untranslated(\" \"));\n+}\n+\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings)\n+{\n+    bilingual_str result = ErrorString(errors);",
      "path": "src/util/result.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 943789301,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r943789301\r\n\r\n> nit:\r\n\r\nThanks, used suggestion.",
      "created_at": "2022-08-22T20:37:26Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889202",
      "pull_request_review_id": 1081114599,
      "id": 951889202,
      "node_id": "PRRC_kwDOABII5844vK0y",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 8,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 943807162,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r943807162\r\n\r\n> I'm not sure why iwyu [doesn't](https://cirrus-ci.com/task/6358959639494656) catch it, but shouldn't `forward`, `types` and `utility` also be included here?\r\n\r\nThanks, added `utility`. (I think the others are nonstandard.) IWYU might not catch references to code in templates that aren't instantiated, so I'm not too surprised it didn't add this.",
      "created_at": "2022-08-22T20:37:34Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889202",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 11,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889285",
      "pull_request_review_id": 1081114599,
      "id": 951889285,
      "node_id": "PRRC_kwDOABII5844vK2F",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 21,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r943776125\r\n\r\n> Since we're expecting `T` to be a container type, would this benefit from living in `span.h` for reusability? The generic implementation/naming isn't really necessary in `result.h`, and people won't come looking here when they need something to move elements between containers.\r\n\r\nIt would be ok to move this somewhere, especially if something else was calling it. But I don't think span.h would be the right place since this shouldn't work on a span due to spans having fixed size. It also seems ok to me to keep this as a private helper function in a detail namespace as long as it is only called one place.",
      "created_at": "2022-08-22T20:37:42Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889391",
      "pull_request_review_id": 1081114599,
      "id": 951889391,
      "node_id": "PRRC_kwDOABII5844vK3v",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.",
      "path": "src/util/result.h",
      "position": 25,
      "original_position": 23,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950223870,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950223870\r\n\r\n> nit: I think this docstring is more relevant for `m_info`, perhaps move it to above its declaration in `ResultBase`?\r\n\r\nI think it's relevant here because the struct is pretty big thing to have in a return type, so good to say it won't typically be needed.\r\n\r\nAlso, this may be a stylistic thing, but I tend to prefer class-level documentation that gets at _why/how_ questions, over member level documentation only answers more basic _what_ questions, and can also clutter the class definition.",
      "created_at": "2022-08-22T20:37:50Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889535",
      "pull_request_review_id": 1081114599,
      "id": 951889535,
      "node_id": "PRRC_kwDOABII5844vK5_",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.",
      "path": "src/util/result.h",
      "position": 33,
      "original_position": 31,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950228362,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950228362\r\n\r\n> nit: You could add a bit more info on T, F for quick understanding?\r\n\r\nAdded. Nice suggestion!",
      "created_at": "2022-08-22T20:38:00Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889724",
      "pull_request_review_id": 1081114599,
      "id": 951889724,
      "node_id": "PRRC_kwDOABII5844vK88",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 52,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950253178,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950253178\r\n\r\n> This is repeated a few times, what do you think about this:\r\n\r\nNice catch! I implemented something similar to what you suggested to dedup",
      "created_at": "2022-08-22T20:38:14Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889985",
      "pull_request_review_id": 1081114599,
      "id": 951889985,
      "node_id": "PRRC_kwDOABII5844vLBB",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    explicit operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    //! Result success value. Uses anonymous union so success value is never\n+    //! constructed in failure case.\n+    union { T m_value; };\n+\n+    template <typename... Args>\n+    void ConstructValue(Args&&... args) { new (&m_value) T{std::forward<Args>(args)...}; }\n+    template <typename O>\n+    void MoveValue(O& other) { new (&m_value) T{std::move(other.m_value)}; }\n+    void DestroyValue() { m_value.~T(); }\n+\n+    ResultBase() {}\n+    ~ResultBase() {}\n+\n+    template <typename FT, typename FF>\n+    friend class ResultBase;\n+\n+public:\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return *this ? true : false; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 97,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950310915,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950310915\r\n\r\n> nit: slightly more concise and clear on intent imo\r\n\r\nOk! I would have defaulted to that but had seen some feedback `bool()` was not good https://github.com/bitcoin/bitcoin/pull/25616#discussion_r940933709, https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938763403 so was trying to avoid it. Switched to `bool{}` for now.",
      "created_at": "2022-08-22T20:38:34Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951889985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951889985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951890286",
      "pull_request_review_id": 1081114599,
      "id": 951890286,
      "node_id": "PRRC_kwDOABII5844vLFu",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    explicit operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    //! Result success value. Uses anonymous union so success value is never\n+    //! constructed in failure case.\n+    union { T m_value; };\n+\n+    template <typename... Args>\n+    void ConstructValue(Args&&... args) { new (&m_value) T{std::forward<Args>(args)...}; }\n+    template <typename O>\n+    void MoveValue(O& other) { new (&m_value) T{std::move(other.m_value)}; }\n+    void DestroyValue() { m_value.~T(); }\n+\n+    ResultBase() {}\n+    ~ResultBase() {}\n+\n+    template <typename FT, typename FF>\n+    friend class ResultBase;\n+\n+public:\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return *this ? true : false; }\n+    const T& value() const LIFETIMEBOUND { assert(*this); return m_value; }\n+    T& value() LIFETIMEBOUND { assert(*this); return m_value; }\n+    template <class U>\n+    T value_or(U&& default_value) const&\n+    {\n+        return has_value() ? value() : std::forward<U>(default_value);\n+    }\n+    template <class U>\n+    T value_or(U&& default_value) &&\n+    {\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+    }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 109,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950293020,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950293020\r\n\r\n> As part of the public interface, I think these could benefit from a very brief per-method docstring (that probably just mirrors the std::optional docstring)?\r\n\r\nI'm a little reluctant to change this code here because it is just moving (not new), but would encourage you to submit a separate PR to add more documentation to existing code if it would be helpful. I'm happy to rebase this as other PR are merged.\r\n\r\nI do personally tend not to like documenting individual class members if it's obvious what they do, and save comments for when there is something non-obvious or higher level to point out, but I wouldn't have any objection to more detailed documentation.",
      "created_at": "2022-08-22T20:38:55Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951890286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951890286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 102,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951890463",
      "pull_request_review_id": 1081114599,
      "id": 951890463,
      "node_id": "PRRC_kwDOABII5844vLIf",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 157,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950338812,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950338812\r\n\r\n> I think this line is redundant since we already call `this->AddError()` right above?\r\n\r\nI think it was needed to avoid a segfault if the error message was empty, but in any case this line is gone now from implementing your earlier suggestion to dedup this.",
      "created_at": "2022-08-22T20:39:12Z",
      "updated_at": "2022-08-24T18:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951890463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951890463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951905203",
      "pull_request_review_id": 1081114599,
      "id": 951905203,
      "node_id": "PRRC_kwDOABII5844vOuz",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 26,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950398142,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950398142\r\n\r\n> @ryanofsky the following change fixes the warnings for me, but i don't know if this is the best way to deal with this\r\n\r\nThanks! I think it might be sufficient to replace `= std::nullopt` with `{}`, so I will try that first.",
      "created_at": "2022-08-22T20:56:19Z",
      "updated_at": "2022-08-24T18:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r951905203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951905203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953058726",
      "pull_request_review_id": 1081114599,
      "id": 953058726,
      "node_id": "PRRC_kwDOABII5844zoWm",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }\n+        return std::move(other);\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Helper methods to format error strings.\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors);\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 250,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950214121,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r943807162\r\n\r\n> Do we want to expose these 2 helper methods in the header?\r\n\r\nNope, good point. Moved these to the details namespace.",
      "created_at": "2022-08-23T19:59:10Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r953058726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953058726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 226,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953059049",
      "pull_request_review_id": 1081114599,
      "id": 953059049,
      "node_id": "PRRC_kwDOABII5844zobp",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }\n+        return std::move(other);\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Helper methods to format error strings.\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors);\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+template <typename T, typename F>\n+bilingual_str ErrorString(const Result<T, F>& result) { return ErrorString(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 252,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950215859,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950215859\r\n\r\n> What about renaming this function to `ErrorWarningString()` since at the moment it can contain both? I can see some scenario where people would want to access just the error but not the warning string (and of course it's just a convenience fn), so that would allow them to create the more narrow `ErrorString()` later on?\r\n\r\nAdded some more documentation about how this should be used. I think a function that just puts errors not warnings in a result message could be a potential footgun, because warnings could be unintentionally dropped if errors and warnings are returned together. For example if code initially doesn't generate any warnings, then someone adds one not realizing it won't show up anywhere.",
      "created_at": "2022-08-23T19:59:34Z",
      "updated_at": "2022-08-24T18:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r953059049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953059049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953061469",
      "pull_request_review_id": 1081114599,
      "id": 953061469,
      "node_id": "PRRC_kwDOABII5844zpBd",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 192,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950342467,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950342467\r\n\r\n> nit: I think this should be on a new line\r\n\r\nI dropped the `else if` here since it was redundant, but I think I do prefer the compact style with one line",
      "created_at": "2022-08-23T20:02:34Z",
      "updated_at": "2022-08-24T18:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r953061469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953061469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062290",
      "pull_request_review_id": 1081114599,
      "id": 953062290,
      "node_id": "PRRC_kwDOABII5844zpOS",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 215,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950365637,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950365637\r\n\r\n> nit: ternary looks more appropriate?\r\n\r\nI think I prefer `if` statement to ternary here, and I'm not used to seeing ternary statements rather than expressions in the codebase, but would be happy to change if there are other opinions.",
      "created_at": "2022-08-23T20:03:40Z",
      "updated_at": "2022-08-24T18:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r953062290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062553",
      "pull_request_review_id": 1081114599,
      "id": 953062553,
      "node_id": "PRRC_kwDOABII5844zpSZ",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 221,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950369435,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950369435\r\n\r\n> nit:\r\n\r\nThanks, that's clearer",
      "created_at": "2022-08-23T20:04:01Z",
      "updated_at": "2022-08-24T18:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r953062553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062706",
      "pull_request_review_id": 1081114599,
      "id": 953062706,
      "node_id": "PRRC_kwDOABII5844zpUy",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 229,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950383459,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r950383459\r\n\r\n> Since `ErrorInfo` doesn't have a move constructor, do the move semantics make sense here? _(I'm still easily confused by move semantics, so I'm probably missing something - sorry)_\r\n\r\n`ErrorInfo` should have an implicit `ErrorInfo(ErrorInfo&&)` move constructor, but it actually isn't relevant here, because the new ErrorInfo object that's being allocated isn't being constructed with that constructor. Instead the newly allocated ErrorInfo is [aggregate initialized](https://en.cppreference.com/w/cpp/language/aggregate_initialization), and the two `errors` and `warnings` variables are individually move-constructed, rather than the whole `ErrorInfo` object being move constructed.\r\n\r\nIf the question here is whether the `std::move` calls here have any effect, the answer is yes they do because `errors` and `warnings` variables are vectors, and vectors have move constructors.",
      "created_at": "2022-08-23T20:04:14Z",
      "updated_at": "2022-08-24T18:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r953062706",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953062706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 215,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954186225",
      "pull_request_review_id": 1084363199,
      "id": 954186225,
      "node_id": "PRRC_kwDOABII584437nx",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 229,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950383459,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you for the thoughtful response, that was very helpful. Your usage of move semantics here now makes sense to me.\r\n\r\nNow I'm just confused that the [designated initialization](https://en.cppreference.com/w/cpp/language/aggregate_initialization#Designated_initializers) compiles fine even though the spec says it's since C++20 and I haven't configured with `--enable-c++20` (as does the CI I think)?",
      "created_at": "2022-08-24T18:58:34Z",
      "updated_at": "2022-08-24T18:58:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954186225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954186225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 215,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954191181",
      "pull_request_review_id": 1084368855,
      "id": 954191181,
      "node_id": "PRRC_kwDOABII5844381N",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 229,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950383459,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Now I'm just confused that the [designated initialization](https://en.cppreference.com/w/cpp/language/aggregate_initialization#Designated_initializers) compiles fine even though the spec says it's since C++20 and I haven't configured with `--enable-c++20` (as does the CI I think)?\r\n\r\nOh, we are just outside of the c++17 spec there. The build enables designated initializers as an extension since #24531",
      "created_at": "2022-08-24T19:03:05Z",
      "updated_at": "2022-08-24T19:03:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954191181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954191181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 215,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954200376",
      "pull_request_review_id": 1084379302,
      "id": 954200376,
      "node_id": "PRRC_kwDOABII58443_E4",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 21,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 951889285,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry for the ghost comment. I had realized after posting that this comment about moving it to span.h wasn't really applicable so I removed it, but apparently not timely enough. I agree with you.\r\n\r\nThe only further thought I had was that if there's no need to be generic (yet - and maybe never) it might be worth not doing that to simplify things a bit where possible? E.g. the below is easier to quickly understand imo (and maybe compiles a bit faster?):\r\n\r\n```suggestion\r\n//! Helper to move warnings and errors from one ErrorInfo to another.\r\nvoid MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest)\r\n{\r\n    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\r\n    src.clear();\r\n}\r\n```\r\n\r\nNo strong views either way though, so feel free to ignore. Just trying to minimize on what's already a lot of genericness.",
      "created_at": "2022-08-24T19:11:40Z",
      "updated_at": "2022-08-24T19:22:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954200376",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954200376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954211552",
      "pull_request_review_id": 1084391049,
      "id": 954211552,
      "node_id": "PRRC_kwDOABII58444Bzg",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }\n+        return std::move(other);\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Helper methods to format error strings.\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors);\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+template <typename T, typename F>\n+bilingual_str ErrorString(const Result<T, F>& result) { return ErrorString(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 252,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950215859,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I didn't think about the footgun, that's a good point why we probably indeed won't want to add the other fn later. I still think it's a bit awkward that the function name doesn't entirely capture what the function is doing, but I think it's within reason and may be worth the trade-off for brevity (vs `ErrorWarningString()`. Not sure what I prefer, so feel free to ignore.\r\n\r\nThe new docstring is great, thanks!",
      "created_at": "2022-08-24T19:21:36Z",
      "updated_at": "2022-08-24T19:21:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954211552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954211552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954223480",
      "pull_request_review_id": 1084403711,
      "id": 954223480,
      "node_id": "PRRC_kwDOABII58444Et4",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 52,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950253178,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I like your solution, very elegant!",
      "created_at": "2022-08-24T19:32:52Z",
      "updated_at": "2022-08-24T19:32:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954223480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954223480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954244319",
      "pull_request_review_id": 1084431154,
      "id": 954244319,
      "node_id": "PRRC_kwDOABII58444Jzf",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 215,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950365637,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm you're right, we're not using ternaries as statements it seems. I couldn't find a single instance of a one-line `if ...; else` either though, and unfortunately the developer notes are rather ambiguous on the topic.\r\n\r\nIn that case I'd prefer `if` and `else` on separate lines (personal preference and to not be the first in the repo) but no strong view so won't comment on it further.",
      "created_at": "2022-08-24T19:53:58Z",
      "updated_at": "2022-08-24T19:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954244319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/954244319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955075009",
      "pull_request_review_id": 1085606694,
      "id": 955075009,
      "node_id": "PRRC_kwDOABII58447UnB",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }\n+        return std::move(other);\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Helper methods to format error strings.\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors);\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+template <typename T, typename F>\n+bilingual_str ErrorString(const Result<T, F>& result) { return ErrorString(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 252,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950215859,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954211552\r\n\r\n> I still think it's a bit awkward that the function name doesn't entirely capture what the function is doing, but I think it's within reason and may be worth the trade-off for brevity (vs `ErrorWarningString()`. Not sure what I prefer, so feel free to ignore.\r\n\r\nCould call it `util::MessageString(result)` instead of `util::ErrorString(result)`. I think the longer name would be ok too. I was pushing back more against changing the functionality than changing the name.\r\n\r\nI do think any renaming should happen in a separate PR, before or after this one. The function already exists and is called in current code. This PR is backwards compatible just extends the Result API without requiring changes to existing code.",
      "created_at": "2022-08-25T14:55:36Z",
      "updated_at": "2022-08-25T14:55:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r955075009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955075009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955097005",
      "pull_request_review_id": 1085638384,
      "id": 955097005,
      "node_id": "PRRC_kwDOABII58447Z-t",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 21,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 951889285,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r954200376\r\n\r\nInteresting! I do think the generic version is shorter and easier to understand. But I like moving more code from the `.h` file to the `.cpp` file, and I like the consistency between `JoinMessages` and `MoveMessages`, so I took this suggestion. Thanks!",
      "created_at": "2022-08-25T15:13:44Z",
      "updated_at": "2022-08-25T16:34:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r955097005",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955097005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955114057",
      "pull_request_review_id": 1085668250,
      "id": 955114057,
      "node_id": "PRRC_kwDOABII58447eJJ",
      "diff_hunk": "@@ -31,54 +144,89 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            if (!this->m_info) this->m_info = std::make_unique<detail::ErrorInfo<F>>();\n+            this->m_info->failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n+    }\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n+    {\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }\n+        return std::move(other);\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Helper methods to format error strings.\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors);\n+bilingual_str ErrorString(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+template <typename T, typename F>\n+bilingual_str ErrorString(const Result<T, F>& result) { return ErrorString(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 252,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950215859,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The function already exists and is called in current code.\r\n\r\nRight, I did not consider that. Don't think it's worth the extra PR without more demand for it so I'm happy to just leave it at `ErrorString` until then.",
      "created_at": "2022-08-25T15:28:02Z",
      "updated_at": "2022-08-25T15:28:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r955114057",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/955114057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957494674",
      "pull_request_review_id": 1088925380,
      "id": 957494674,
      "node_id": "PRRC_kwDOABII5845EjWS",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The thing is that you are basically adding a ton of dead code in this pull. `bitcoind` compiles fine without it, so I might be picky, but my preference would be to only add the code when it is needed. This also makes it easier for reviewers because they can think about actual use cases and don't have to imagine them from the unit tests.\r\n\r\n\r\n```diff\r\ndiff --git a/src/util/result.cpp b/src/util/result.cpp\r\nindex 9526b5b785..199a6579d7 100644\r\n--- a/src/util/result.cpp\r\n+++ b/src/util/result.cpp\r\n@@ -3,26 +3,8 @@\r\n // file COPYING or https://www.opensource.org/licenses/mit-license.php.\r\n \r\n #include <util/result.h>\r\n-#include <util/string.h>\r\n \r\n namespace util {\r\n namespace detail {\r\n-bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str> warnings)\r\n-{\r\n-    bilingual_str result;\r\n-    for (const auto& messages : {errors, warnings}) {\r\n-        for (const auto& message : messages) {\r\n-            if (!result.empty()) result += Untranslated(\" \");\r\n-            result += message;\r\n-        }\r\n-    }\r\n-    return result;\r\n-}\r\n-\r\n-void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest)\r\n-{\r\n-    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\r\n-    src.clear();\r\n-}\r\n } // namespace detail\r\n } // namespace util\r\ndiff --git a/src/util/result.h b/src/util/result.h\r\nindex 32fe40763f..8eb5b552d3 100644\r\n--- a/src/util/result.h\r\n+++ b/src/util/result.h\r\n@@ -17,21 +17,11 @@\r\n \r\n namespace util {\r\n namespace detail {\r\n-//! Empty string list\r\n-const std::vector<bilingual_str> EMPTY_LIST{};\r\n-\r\n-//! Helper function to join messages in space separated string.\r\n-bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str> warnings);\r\n-\r\n-//! Helper function to move messages from one vector to another.\r\n-void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest);\r\n-\r\n-//! Error information only allocated if there are errors or warnings.\r\n+//! Error information only allocated if there is an error.\r\n template <typename F>\r\n struct ErrorInfo {\r\n     std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure{};\r\n-    std::vector<bilingual_str> errors;\r\n-    std::vector<bilingual_str> warnings;\r\n+    bilingual_str error;\r\n };\r\n \r\n //! Result base class which is inherited by Result<T, F>.\r\n@@ -66,25 +56,7 @@ protected:\r\n public:\r\n     void AddError(bilingual_str error)\r\n     {\r\n-        if (!error.empty()) Info().errors.emplace_back(std::move(error));\r\n-    }\r\n-\r\n-    void AddWarning(bilingual_str warning)\r\n-    {\r\n-        if (!warning.empty()) Info().warnings.emplace_back(std::move(warning));\r\n-    }\r\n-\r\n-    //! Operator moving warning and error messages from other result to this.\r\n-    //! Only moves message strings, does not change success or failure values of\r\n-    //! either Result object.\r\n-    template<typename O>\r\n-    O&& operator<<(O&& other)\r\n-    {\r\n-        if (other.m_info) {\r\n-            if (!other.m_info->errors.empty()) MoveMessages(other.m_info->errors, Info().errors);\r\n-            if (!other.m_info->warnings.empty()) MoveMessages(other.m_info->warnings, Info().warnings);\r\n-        }\r\n-        return std::forward<O>(other);\r\n+        Info().error = std::move(error);\r\n     }\r\n \r\n     //! Success check.\r\n@@ -93,8 +65,7 @@ public:\r\n     //! Error retrieval.\r\n     template <typename _F = F>\r\n     std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\r\n-    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\r\n-    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\r\n+    bilingual_str GetError() const { return m_info ? m_info->error : bilingual_str{}; }\r\n };\r\n \r\n //! Result base class for T value type. Holds value and provides accessor methods.\r\n@@ -145,9 +116,6 @@ public:\r\n struct Error {\r\n     bilingual_str message;\r\n };\r\n-struct Warning {\r\n-    bilingual_str message;\r\n-};\r\n \r\n //! The util::Result class provides a standard way for functions to return error\r\n //! and warning strings in addition to optional result values.\r\n@@ -190,23 +158,11 @@ protected:\r\n         }, std::forward<Args>(args)...);\r\n     }\r\n \r\n-    template <typename Fn, typename... Args>\r\n-    void Construct(const Fn& fn, Warning warning, Args&&... args)\r\n-    {\r\n-        this->AddWarning(std::move(warning.message));\r\n-        Construct(fn, std::forward<Args>(args)...);\r\n-    }\r\n-\r\n-    template <typename Fn, typename OT, typename OF, typename... Args>\r\n-    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\r\n-    {\r\n-        *this << other;\r\n-        Construct(fn, std::forward<Args>(args)...);\r\n-    }\r\n-\r\n     void MoveConstruct(Result& other)\r\n     {\r\n-        *this << other;\r\n+        if (other.m_info) {\r\n+            this->AddError(std::move(other.m_info->error));\r\n+        }\r\n         if (other) this->MoveValue(other); else this->Info().failure = std::move(other.m_info->failure);\r\n     }\r\n \r\n@@ -233,7 +189,7 @@ public:\r\n //! are present. More complicated applications should use GetErrors() and\r\n //! GetWarning() methods directly.\r\n template <typename T, typename F>\r\n-bilingual_str ErrorString(const Result<T, F>& result) { return detail::JoinMessages(result.GetErrors(), result.GetWarnings()); }\r\n+bilingual_str ErrorString(const Result<T, F>& result) { return result.GetError(); }\r\n } // namespace util\r\n \r\n #endif // BITCOIN_UTIL_RESULT_H\r\n",
      "created_at": "2022-08-29T15:35:26Z",
      "updated_at": "2022-08-29T15:35:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957494674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957494674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957495310",
      "pull_request_review_id": 1088926315,
      "id": 957495310,
      "node_id": "PRRC_kwDOABII5845EjgO",
      "diff_hunk": "@@ -8,16 +8,149 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str> warnings);",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 17,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "5aff7baf375c432746dff6862e9d06064ea1fb18",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In case you don't remove this, this is wrong anyway, as it is missing a `&` in the second argument",
      "created_at": "2022-08-29T15:36:04Z",
      "updated_at": "2022-08-29T15:36:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957495310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957495310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957498746",
      "pull_request_review_id": 1088932989,
      "id": 957498746,
      "node_id": "PRRC_kwDOABII5845EkV6",
      "diff_hunk": "@@ -8,16 +8,149 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str> warnings);\n+\n+//! Helper function to move messages from one vector to another.\n+void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest);\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure{};\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    ErrorInfo<F>& Info()\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        return *m_info;\n+    }\n+\n+    //! Value accessors that do nothing this because class is specializing value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+    template <typename, typename>\n+    friend class ResultBase;\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (!error.empty()) Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from other result to this.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template<typename O>\n+    O&& operator<<(O&& other)\n+    {\n+        if (other.m_info) {\n+            if (!other.m_info->errors.empty()) MoveMessages(other.m_info->errors, Info().errors);\n+            if (!other.m_info->warnings.empty()) MoveMessages(other.m_info->warnings, Info().warnings);\n+        }\n+        return std::forward<O>(other);\n+    }\n+\n+    //! Success check.\n+    explicit operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 88,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "5aff7baf375c432746dff6862e9d06064ea1fb18",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Can use `is_same_v` instead of `...::value`? Also, missing LIFETIMEBOUND?\r\n\r\n(Same feedback on other lines where this is applicable)",
      "created_at": "2022-08-29T15:39:32Z",
      "updated_at": "2022-08-29T15:39:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957498746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957498746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957539651",
      "pull_request_review_id": 1088988856,
      "id": 957539651,
      "node_id": "PRRC_kwDOABII5845EuVD",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957494674\r\n\r\n> The thing is that you are basically adding a ton of dead code in this pull\r\n\r\nInteresting and thanks for the diff! Now I understand what you are suggesting, and I think I'd be ok with making that change. I wasn't really looking at that code as dead because I'm immediately using it in the next pull #25722 and also using it in unit tests this PR. I also didn't consider it to be a ton of code, since the code in your diff is just getter/setter functions that provide access to errors/warnings variables. But no objection to splitting it off into another pull.",
      "created_at": "2022-08-29T16:15:49Z",
      "updated_at": "2022-08-29T16:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957539651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957539651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958050929",
      "pull_request_review_id": 1089693226,
      "id": 958050929,
      "node_id": "PRRC_kwDOABII5845GrJx",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I don't feel too strong as well. Though, if you keep it, it would be good to fixup the typo: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957495310",
      "created_at": "2022-08-30T06:22:43Z",
      "updated_at": "2022-08-30T06:22:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958050929",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958050929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958679862",
      "pull_request_review_id": 1090610240,
      "id": 958679862,
      "node_id": "PRRC_kwDOABII5845JEs2",
      "diff_hunk": "@@ -8,16 +8,149 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str> warnings);",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 17,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "5aff7baf375c432746dff6862e9d06064ea1fb18",
      "in_reply_to_id": 957495310,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957495310\r\n\r\n> In case you don't remove this, this is wrong anyway, as it is missing a `&` in the second argument\r\n\r\nThanks, removed from the main commit and added&",
      "created_at": "2022-08-30T16:11:29Z",
      "updated_at": "2022-08-30T18:27:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958679862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958679862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958680008",
      "pull_request_review_id": 1090610240,
      "id": 958680008,
      "node_id": "PRRC_kwDOABII5845JEvI",
      "diff_hunk": "@@ -8,16 +8,149 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str> warnings);\n+\n+//! Helper function to move messages from one vector to another.\n+void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest);\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure{};\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    ErrorInfo<F>& Info()\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        return *m_info;\n+    }\n+\n+    //! Value accessors that do nothing this because class is specializing value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+    template <typename, typename>\n+    friend class ResultBase;\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (!error.empty()) Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from other result to this.\n+    //! Only moves message strings, does not change success or failure values of\n+    //! either Result object.\n+    template<typename O>\n+    O&& operator<<(O&& other)\n+    {\n+        if (other.m_info) {\n+            if (!other.m_info->errors.empty()) MoveMessages(other.m_info->errors, Info().errors);\n+            if (!other.m_info->warnings.empty()) MoveMessages(other.m_info->warnings, Info().warnings);\n+        }\n+        return std::forward<O>(other);\n+    }\n+\n+    //! Success check.\n+    explicit operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 88,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "5aff7baf375c432746dff6862e9d06064ea1fb18",
      "in_reply_to_id": 957498746,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957498746\r\n\r\n> nit: Can use `is_same_v` instead of `...::value`? Also, missing LIFETIMEBOUND?\r\n\r\nThanks, added these improvements",
      "created_at": "2022-08-30T16:11:38Z",
      "updated_at": "2022-08-30T18:27:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958680008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958680008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958800957",
      "pull_request_review_id": 1090610240,
      "id": 958800957,
      "node_id": "PRRC_kwDOABII5845JiQ9",
      "diff_hunk": "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "590bc615a3120a8f11712220546f9654058b82f0",
      "in_reply_to_id": 944367210,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958050929\r\n\r\n> Yeah, I don't feel too strong as well. Though, if you keep it, it would be good to fixup the typo: [#25665 (comment)](https://github.com/bitcoin/bitcoin/pull/25665#discussion_r957495310)\r\n\r\nOk, I'm hedging right now by moving multiple error & warning support into a separate commit but not a separate PR. I maybe have a slight preference for just squashing the commits again to reduce churn, but I'm also fine with keeping separate commits, or moving the commit to another PR if one of those alternatives seems better, so let me know!\r\n\r\nAlso fixed the typo",
      "created_at": "2022-08-30T18:25:17Z",
      "updated_at": "2022-08-30T18:27:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958800957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958800957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958847991",
      "pull_request_review_id": 1090849342,
      "id": 958847991,
      "node_id": "PRRC_kwDOABII5845Jtv3",
      "diff_hunk": "@@ -8,16 +8,146 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};",
      "path": "src/util/result.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `EMPTY_LIST` ( and `#include <vector>` ) seems unnecessary in this commit, think it belongs in \"[refactor: Add util::Result multiple error and warning messages](https://github.com/bitcoin/bitcoin/pull/25665/commits/834857e56b8de0bfabee7315622c0211b4a48746)\"",
      "created_at": "2022-08-30T19:21:03Z",
      "updated_at": "2022-08-31T11:33:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958847991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958847991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": 19,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958993493",
      "pull_request_review_id": 1091053363,
      "id": 958993493,
      "node_id": "PRRC_kwDOABII5845KRRV",
      "diff_hunk": "@@ -8,16 +8,146 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+\n+//! Helper function to move messages from one vector to another.\n+void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest);\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same_v<F, void>, std::monostate, F>> failure{};\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;",
      "path": "src/util/result.h",
      "position": 37,
      "original_position": 34,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's a little confusing.\r\nIf I understand correctly, `template <typename F> class ResultBase<void, F>` needs to know about `template <typename T, typename F> class ResultBase;` but the latter can only be declared after the former because it is a derived class. Therefore, a forward declaration is required.\r\n\r\nIf the `ResultBase` classes shouldn't be used anywhere outside of `result.h` and their only purpose is to be the base class of `Result`, I would suggest merging them all into a single class.\r\n\r\n",
      "created_at": "2022-08-30T22:41:54Z",
      "updated_at": "2022-08-30T22:42:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958993493",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958993493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959071851",
      "pull_request_review_id": 1091208071,
      "id": 959071851,
      "node_id": "PRRC_kwDOABII5845KkZr",
      "diff_hunk": "@@ -8,16 +8,146 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+\n+//! Helper function to move messages from one vector to another.\n+void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest);\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same_v<F, void>, std::monostate, F>> failure{};\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;",
      "path": "src/util/result.h",
      "position": 37,
      "original_position": 34,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "in_reply_to_id": 958993493,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, I wonder if you can say more about what is confusing or misleading. This is just a forward declaration for a template class.\r\n\r\n It is true that the reason for the forward declaring `ResultBase<T, F>` is to allow it to inherit from `ResultBase<void, F>`. So `ResultBase<T, F>` must be defined after `ResultBase<void, F>`, but declared before it.\r\n\r\nBut this is a pretty standard thing for C and C++ code. Definition of one thing 1 depends on declaration of thing 2, so thing 2 needs to be forward declared. It can happen for normal classes and functions as well as templates.\r\n\r\n> If the ResultBase classes shouldn't be used anywhere outside of result.h and their only purpose is to be the base class of Result, I would suggest merging them all into a single class.\r\n\r\nThis isn't easily possible because `Result<void, F>` inherits directly from `detail::ResultBase<void, F>` and does **not** inherit from `detail::ResultBase<T, F>`. It does not have an `m_value` member or `value()` functions or a dereferencing operator. If the result type `T` is void the `Result` class doesn't hold a value and can't be dereferenced.",
      "created_at": "2022-08-31T01:57:58Z",
      "updated_at": "2022-08-31T01:57:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r959071851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959071851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959440278",
      "pull_request_review_id": 1090849342,
      "id": 959440278,
      "node_id": "PRRC_kwDOABII5845L-WW",
      "diff_hunk": "@@ -31,54 +161,76 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+//!\n+//! Most code does not need different error-handling behavior for different\n+//! types of errors, and can suffice just using the type `T` success value on\n+//! success, and descriptive error strings when there's a failure. But\n+//! applications that do need more complicated error-handling behavior can\n+//! override the default `F = void` failure type and get failure values by\n+//! calling result.GetFailure().\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            this->Info().failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << other;\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    void MoveConstruct(Result& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << other;\n+        if (other) this->MoveValue(other); else this->Info().failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    Result(Result&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n+    ~Result() { if (*this) this->DestroyValue(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Join error and warning messages in a space separated string. This is\n+//! intended for simple applications where there's probably only one error or\n+//! warning message to report, but multiple messages should not be lost if they\n+//! are present. More complicated applications should use GetErrors() and\n+//! GetWarning() methods directly.\n+template <typename T, typename F>\n+bilingual_str ErrorString(const Result<T, F>& result) { return detail::JoinMessages(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": 277,
      "original_position": 256,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since the `friend` declaration is gone, I think this should be `inline`?\r\n```suggestion\r\ninline bilingual_str ErrorString(const Result<T, F>& result) { return detail::JoinMessages(result.GetErrors(), result.GetWarnings()); }\r\n```",
      "created_at": "2022-08-31T10:50:34Z",
      "updated_at": "2022-08-31T11:33:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r959440278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959440278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959467658",
      "pull_request_review_id": 1090849342,
      "id": 959467658,
      "node_id": "PRRC_kwDOABII5845MFCK",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.",
      "path": "src/util/result.h",
      "position": 25,
      "original_position": 23,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950223870,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe I'm confused, but I don't think I agree. Since the optional allocation of an `ErrorInfo` is a result of how `Info()` is implemented, not of how the `ErrorInfo` struct is defined - isn't that where it should be documented? Unless you're talking about the optional allocation of `failure` instead of `ErrorInfo`, in which case I would agree that this should be explained at this location (and you might want to add another one to info explaining the dynamic allocation of `m_info`)?",
      "created_at": "2022-08-31T11:23:55Z",
      "updated_at": "2022-08-31T11:33:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r959467658",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959467658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960699702",
      "pull_request_review_id": 1093461843,
      "id": 960699702,
      "node_id": "PRRC_kwDOABII5845Qx02",
      "diff_hunk": "@@ -8,16 +8,146 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};",
      "path": "src/util/result.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "in_reply_to_id": 958847991,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r958847991\r\n\r\n> nit: `EMPTY_LIST` ( and `#include <vector>` ) seems unnecessary in this commit, think it belongs in \"[refactor: Add util::Result multiple error and warning messages](https://github.com/bitcoin/bitcoin/pull/25665/commits/834857e56b8de0bfabee7315622c0211b4a48746)\"\r\n\r\nGood catch! Removed",
      "created_at": "2022-09-01T14:05:27Z",
      "updated_at": "2022-09-01T15:21:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r960699702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960699702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": 19,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960701013",
      "pull_request_review_id": 1093461843,
      "id": 960701013,
      "node_id": "PRRC_kwDOABII5845QyJV",
      "diff_hunk": "@@ -31,54 +161,76 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+//!\n+//! Most code does not need different error-handling behavior for different\n+//! types of errors, and can suffice just using the type `T` success value on\n+//! success, and descriptive error strings when there's a failure. But\n+//! applications that do need more complicated error-handling behavior can\n+//! override the default `F = void` failure type and get failure values by\n+//! calling result.GetFailure().\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([&](auto&&... x) {\n+            this->Info().failure.emplace(std::forward<decltype(x)>(x)...);\n+        }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << other;\n+        Construct(fn, std::forward<Args>(args)...);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    void MoveConstruct(Result& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << other;\n+        if (other) this->MoveValue(other); else this->Info().failure = std::move(other.m_info->failure);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    Result(Result&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    explicit operator bool() const noexcept { return has_value(); }\n-    const T* operator->() const LIFETIMEBOUND { return &value(); }\n-    const T& operator*() const LIFETIMEBOUND { return value(); }\n-    T* operator->() LIFETIMEBOUND { return &value(); }\n-    T& operator*() LIFETIMEBOUND { return value(); }\n+    ~Result() { if (*this) this->DestroyValue(); }\n };\n \n-template <typename T>\n-bilingual_str ErrorString(const Result<T>& result)\n-{\n-    return result ? bilingual_str{} : std::get<0>(result.m_variant);\n-}\n+//! Join error and warning messages in a space separated string. This is\n+//! intended for simple applications where there's probably only one error or\n+//! warning message to report, but multiple messages should not be lost if they\n+//! are present. More complicated applications should use GetErrors() and\n+//! GetWarning() methods directly.\n+template <typename T, typename F>\n+bilingual_str ErrorString(const Result<T, F>& result) { return detail::JoinMessages(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": 277,
      "original_position": 256,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "834857e56b8de0bfabee7315622c0211b4a48746",
      "in_reply_to_id": 959440278,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r959440278\r\n\r\n> Since the `friend` declaration is gone, I think this should be `inline`?\r\n\r\nYes, makes sense to be inline.\r\n\r\n",
      "created_at": "2022-09-01T14:06:34Z",
      "updated_at": "2022-09-01T15:21:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r960701013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960701013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960702129",
      "pull_request_review_id": 1093461843,
      "id": 960702129,
      "node_id": "PRRC_kwDOABII5845Qyax",
      "diff_hunk": "@@ -8,16 +8,129 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.",
      "path": "src/util/result.h",
      "position": 25,
      "original_position": 23,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "9bd10728bada8b04d86f5621ee127713f628a9ad",
      "in_reply_to_id": 950223870,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r959467658\r\n\r\n> Maybe I'm confused, but I don't think I agree. Since the optional allocation of an `ErrorInfo` is a result of how `Info()` is implemented, not of how the `ErrorInfo` struct is defined - isn't that where it should be documented?\r\n\r\nI'm only pushing back against removing this comment here. I'm happy to add more documentation anywhere would would like.\r\n\r\nI think the answer to your question is no, because this isn't a general purpose API. This is a custom, private struct that is never exposed externally and exists for one purpose. The comment is describing what the purpose is. If I were reading this code and saw this struct, I would be wondering why there is such a heavyweight struct being used in a lightweight result type, why error information is segregated from normal result information, and why a separate struct definition is needed at all instead using normal class members. This comment explains what the purpose of the struct is, why it exists and how it is used, and I think is appropriate documentation for an single-purpose piece of a larger implementation.",
      "created_at": "2022-09-01T14:07:34Z",
      "updated_at": "2022-09-01T15:21:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r960702129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960702129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/965007804",
      "pull_request_review_id": 1099419063,
      "id": 965007804,
      "node_id": "PRRC_kwDOABII5845hNm8",
      "diff_hunk": "@@ -8,16 +8,149 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+\n+//! Helper function to move messages from one vector to another.\n+void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest);\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same_v<F, void>, std::monostate, F>> failure{};\n+    std::vector<bilingual_str> errors{};\n+    std::vector<bilingual_str> warnings{};\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    ErrorInfo<F>& Info() LIFETIMEBOUND\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        return *m_info;\n+    }\n+\n+    //! Value accessors that do nothing this because class has value type T=void.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 50,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "c14e904f66505b3e89ca1138c8d2fa4e3d0916d0",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: typo\r\n```suggestion\r\n    //! Value accessors that do nothing because this class has value type T=void.\r\n```",
      "created_at": "2022-09-07T15:42:05Z",
      "updated_at": "2022-09-07T16:40:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r965007804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/965007804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968378495",
      "pull_request_review_id": 1103995676,
      "id": 968378495,
      "node_id": "PRRC_kwDOABII5845uEh_",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    //! Success check.\n+    explicit operator bool() const { return !m_info; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same_v<_F, void>, const _F&> GetFailure() const LIFETIMEBOUND { assert(!*this); return m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 46,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/3507da864a1dd7be1bc72ada26d830a4da0c37ae:\r\n\r\nI think in C++17 you can remove all of the template and enable_if_t stuff and just write `const auto& GetFailure() const` for the return type.",
      "created_at": "2022-09-12T12:51:18Z",
      "updated_at": "2022-09-12T15:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968378495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968378495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968432479",
      "pull_request_review_id": 1103995676,
      "id": 968432479,
      "node_id": "PRRC_kwDOABII5845uRtf",
      "diff_hunk": "@@ -154,26 +219,26 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n     ~Result() { if (*this) this->DestroyValue(); }\n-\n-    inline friend bilingual_str _ErrorString(const Result& result)\n-    {\n-        return result ? bilingual_str{} : result.m_info->error;\n-    }\n };\n \n-template<typename T, typename F>\n-inline bilingual_str ErrorString(const Result<T, F>& result) { return _ErrorString(result); }\n+//! Join error and warning messages in a space separated string. This is\n+//! intended for simple applications where there's probably only one error or\n+//! warning message to report, but multiple messages should not be lost if they\n+//! are present. More complicated applications should use GetErrors() and\n+//! GetWarning() methods directly.\n+template <typename T, typename F>\n+inline bilingual_str ErrorString(const Result<T, F>& result) { return detail::JoinMessages(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 180,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "c14e904f66505b3e89ca1138c8d2fa4e3d0916d0",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in c14e904f66505b3e89ca1138c8d2fa4e3d0916d0:\r\n\r\nCan remove `inline`, as all `template` are `inline` by definition.",
      "created_at": "2022-09-12T13:38:07Z",
      "updated_at": "2022-09-12T15:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968432479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968432479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968475794",
      "pull_request_review_id": 1103995676,
      "id": 968475794,
      "node_id": "PRRC_kwDOABII5845ucSS",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    //! Success check.\n+    explicit operator bool() const { return !m_info; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same_v<_F, void>, const _F&> GetFailure() const LIFETIMEBOUND { assert(!*this); return m_info->failure; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    //! Result success value. Uses anonymous union so success value is never\n+    //! constructed in failure case.\n+    union { T m_value; };\n+\n+    template <typename... Args>\n+    void ConstructValue(Args&&... args) { new (&m_value) T{std::forward<Args>(args)...}; }\n+    template <typename O>\n+    void MoveValue(O& other) { new (&m_value) T{std::move(other.m_value)}; }\n+    void DestroyValue() { m_value.~T(); }\n+\n+    ResultBase() {}\n+    ~ResultBase() {}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 65,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 3507da864a1dd7be1bc72ada26d830a4da0c37ae:\r\n\r\nMaybe add a comment to explain those a bit more? While the `ResultBase()` constructor leaves the object uninitialized, the `Result` constructor guarantees that the object is either filled with a value or an error.",
      "created_at": "2022-09-12T14:14:31Z",
      "updated_at": "2022-09-12T15:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968475794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968475794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968480620",
      "pull_request_review_id": 1103995676,
      "id": 968480620,
      "node_id": "PRRC_kwDOABII5845udds",
      "diff_hunk": "@@ -31,54 +117,63 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+//!\n+//! Most code does not need different error-handling behavior for different\n+//! types of errors, and can suffice just using the type `T` success value on\n+//! success, and descriptive error strings when there's a failure. But\n+//! applications that do need more complicated error-handling behavior can\n+//! override the default `F = void` failure type and get failure values by\n+//! calling result.GetFailure().\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n-\n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+protected:\n+    template <typename... Args>\n+    void Construct(Args&&... args)\n+    {\n+        this->ConstructValue(std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename... Args>\n+    void Construct(Error error, Args&&... args)\n+    {\n+        this->m_info.reset(new detail::ErrorInfo<F>{.failure{std::forward<Args>(args)...}, .error{std::move(error.message)}});\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template<typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        if (other) this->MoveValue(other); else this->m_info.reset(new detail::ErrorInfo<F>{std::move(*other.m_info)});\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename, typename>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 159,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 3507da864a1dd7be1bc72ada26d830a4da0c37ae:\r\n\r\ndoxygen will attach the comment to the constructor. In any case, I think this can be removed since it is not adding any info that isn't already there.",
      "created_at": "2022-09-12T14:18:44Z",
      "updated_at": "2022-09-12T15:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968480620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968480620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968486440",
      "pull_request_review_id": 1103995676,
      "id": 968486440,
      "node_id": "PRRC_kwDOABII5845ue4o",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 34,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 3507da864a1dd7be1bc72ada26d830a4da0c37ae:\r\n\r\nAre those really \"accessors\", not \"setters\"?",
      "created_at": "2022-09-12T14:23:40Z",
      "updated_at": "2022-09-12T15:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968486440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968486440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968493416",
      "pull_request_review_id": 1103995676,
      "id": 968493416,
      "node_id": "PRRC_kwDOABII5845uglo",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 8,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 3507da864a1dd7be1bc72ada26d830a4da0c37ae:\r\n\r\nSeems overkill to include variant, when it could be replaced by copy-pasting the one line:\r\n\r\n```\r\nstruct MonoState{}; // Similar to std::monostate",
      "created_at": "2022-09-12T14:29:21Z",
      "updated_at": "2022-09-12T15:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968493416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968493416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968815960",
      "pull_request_review_id": 1104682926,
      "id": 968815960,
      "node_id": "PRRC_kwDOABII5845vvVY",
      "diff_hunk": "@@ -8,16 +8,149 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper function to join messages in space separated string.\n+bilingual_str JoinMessages(const std::vector<bilingual_str>& errors, const std::vector<bilingual_str>& warnings);\n+\n+//! Helper function to move messages from one vector to another.\n+void MoveMessages(std::vector<bilingual_str>& src, std::vector<bilingual_str>& dest);\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same_v<F, void>, std::monostate, F>> failure{};\n+    std::vector<bilingual_str> errors{};\n+    std::vector<bilingual_str> warnings{};\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    ErrorInfo<F>& Info() LIFETIMEBOUND\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        return *m_info;\n+    }\n+\n+    //! Value accessors that do nothing this because class has value type T=void.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 50,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "c14e904f66505b3e89ca1138c8d2fa4e3d0916d0",
      "in_reply_to_id": 965007804,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r965007804\r\n\r\n> nit: typo\r\n\r\nThanks, fixed",
      "created_at": "2022-09-12T18:59:40Z",
      "updated_at": "2022-09-13T15:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968815960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968815960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968819074",
      "pull_request_review_id": 1104682926,
      "id": 968819074,
      "node_id": "PRRC_kwDOABII5845vwGC",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    //! Success check.\n+    explicit operator bool() const { return !m_info; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same_v<_F, void>, const _F&> GetFailure() const LIFETIMEBOUND { assert(!*this); return m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 46,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": 968378495,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968378495\r\n\r\n> I think in C++17 you can remove all of the template and enable_if_t stuff and just write `const auto& GetFailure() const` for the return type.\r\n\r\nThanks, that is better. Simplified now.",
      "created_at": "2022-09-12T19:01:21Z",
      "updated_at": "2022-09-13T15:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968819074",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968819074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968821496",
      "pull_request_review_id": 1104682926,
      "id": 968821496,
      "node_id": "PRRC_kwDOABII5845vwr4",
      "diff_hunk": "@@ -154,26 +219,26 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n     ~Result() { if (*this) this->DestroyValue(); }\n-\n-    inline friend bilingual_str _ErrorString(const Result& result)\n-    {\n-        return result ? bilingual_str{} : result.m_info->error;\n-    }\n };\n \n-template<typename T, typename F>\n-inline bilingual_str ErrorString(const Result<T, F>& result) { return _ErrorString(result); }\n+//! Join error and warning messages in a space separated string. This is\n+//! intended for simple applications where there's probably only one error or\n+//! warning message to report, but multiple messages should not be lost if they\n+//! are present. More complicated applications should use GetErrors() and\n+//! GetWarning() methods directly.\n+template <typename T, typename F>\n+inline bilingual_str ErrorString(const Result<T, F>& result) { return detail::JoinMessages(result.GetErrors(), result.GetWarnings()); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 180,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "c14e904f66505b3e89ca1138c8d2fa4e3d0916d0",
      "in_reply_to_id": 968432479,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968432479\r\n\r\n> Can remove `inline`, as all `template` are `inline` by definition.\r\n\r\nThanks, removed `inline`",
      "created_at": "2022-09-12T19:02:44Z",
      "updated_at": "2022-09-13T15:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968821496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968821496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968822785",
      "pull_request_review_id": 1104682926,
      "id": 968822785,
      "node_id": "PRRC_kwDOABII5845vxAB",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    //! Success check.\n+    explicit operator bool() const { return !m_info; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same_v<_F, void>, const _F&> GetFailure() const LIFETIMEBOUND { assert(!*this); return m_info->failure; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    //! Result success value. Uses anonymous union so success value is never\n+    //! constructed in failure case.\n+    union { T m_value; };\n+\n+    template <typename... Args>\n+    void ConstructValue(Args&&... args) { new (&m_value) T{std::forward<Args>(args)...}; }\n+    template <typename O>\n+    void MoveValue(O& other) { new (&m_value) T{std::move(other.m_value)}; }\n+    void DestroyValue() { m_value.~T(); }\n+\n+    ResultBase() {}\n+    ~ResultBase() {}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 65,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": 968475794,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968475794\r\n\r\n> Maybe add a comment to explain those a bit more? While the `ResultBase()` constructor leaves the object uninitialized, the `Result` constructor guarantees that the object is either filled with a value or an error.\r\n\r\nSure, I moved the DestroyValue call to this `~ResultBase` destructor instead of the other `Result` constructor to make this more self contained and clear. Also added a comment explaining why the empty constructor is required. Hopefully these are improvements. Also happy to make other changes to clarify.\r\n",
      "created_at": "2022-09-12T19:03:27Z",
      "updated_at": "2022-09-13T15:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968822785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968822785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968824406",
      "pull_request_review_id": 1104682926,
      "id": 968824406,
      "node_id": "PRRC_kwDOABII5845vxZW",
      "diff_hunk": "@@ -31,54 +117,63 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+//!\n+//! Most code does not need different error-handling behavior for different\n+//! types of errors, and can suffice just using the type `T` success value on\n+//! success, and descriptive error strings when there's a failure. But\n+//! applications that do need more complicated error-handling behavior can\n+//! override the default `F = void` failure type and get failure values by\n+//! calling result.GetFailure().\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n-\n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+protected:\n+    template <typename... Args>\n+    void Construct(Args&&... args)\n+    {\n+        this->ConstructValue(std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename... Args>\n+    void Construct(Error error, Args&&... args)\n+    {\n+        this->m_info.reset(new detail::ErrorInfo<F>{.failure{std::forward<Args>(args)...}, .error{std::move(error.message)}});\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template<typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        if (other) this->MoveValue(other); else this->m_info.reset(new detail::ErrorInfo<F>{std::move(*other.m_info)});\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename, typename>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 159,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": 968480620,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968480620\r\n\r\n> nit in [3507da8](https://github.com/bitcoin/bitcoin/commit/3507da864a1dd7be1bc72ada26d830a4da0c37ae):\r\n> \r\n> doxygen will attach the comment to the constructor. In any case, I think this can be removed since it is not adding any info that isn't already there.\r\n\r\nThanks, dropped. This was used to group methods in an earlier version of PR that had more methods below.",
      "created_at": "2022-09-12T19:04:32Z",
      "updated_at": "2022-09-13T15:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968824406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968824406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968825385",
      "pull_request_review_id": 1104682926,
      "id": 968825385,
      "node_id": "PRRC_kwDOABII5845vxop",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 34,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": 968486440,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968486440\r\n\r\n> nit in [3507da8](https://github.com/bitcoin/bitcoin/commit/3507da864a1dd7be1bc72ada26d830a4da0c37ae):\r\n> \r\n> Are those really \"accessors\", not \"setters\"?\r\n\r\nChanged to setters (I thought accessors was a general term for getters and setters)",
      "created_at": "2022-09-12T19:05:13Z",
      "updated_at": "2022-09-13T15:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968825385",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968825385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968826148",
      "pull_request_review_id": 1104682926,
      "id": 968826148,
      "node_id": "PRRC_kwDOABII5845vx0k",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 8,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": 968493416,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968493416\r\n\r\n> Seems overkill to include variant, when it could be replaced by copy-pasting the one line:\r\n\r\nThanks, dropped the dependency on variant",
      "created_at": "2022-09-12T19:05:49Z",
      "updated_at": "2022-09-13T15:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r968826148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/968826148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/969906681",
      "pull_request_review_id": 1106198898,
      "id": 969906681,
      "node_id": "PRRC_kwDOABII5845z5n5",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    //! Success check.\n+    explicit operator bool() const { return !m_info; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same_v<_F, void>, const _F&> GetFailure() const LIFETIMEBOUND { assert(!*this); return m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 46,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": 968378495,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, I meant `const auto&`, not `auto`, or is `auto` in this context magically the same as `const auto&`?",
      "created_at": "2022-09-13T17:33:07Z",
      "updated_at": "2022-09-13T17:33:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r969906681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/969906681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/969983461",
      "pull_request_review_id": 1106306853,
      "id": 969983461,
      "node_id": "PRRC_kwDOABII58450MXl",
      "diff_hunk": "@@ -8,16 +8,102 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n+#include <utility>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Error information only allocated on failure.\n+template <typename F>\n+struct ErrorInfo {\n+    std::conditional_t<std::is_same_v<F, void>, std::monostate, F> failure;\n+    bilingual_str error;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+//! T is the type of the success return value, or void if there is none.\n+//! F is the type of the failure return value, or void if there is none.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n \n+    //! Value accessors that do nothing this because class has value type T=void.\n+    void ConstructValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    //! Success check.\n+    explicit operator bool() const { return !m_info; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same_v<_F, void>, const _F&> GetFailure() const LIFETIMEBOUND { assert(!*this); return m_info->failure; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 46,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "3507da864a1dd7be1bc72ada26d830a4da0c37ae",
      "in_reply_to_id": 968378495,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r969906681\r\n\r\n> Hmm, I meant `const auto&`, not `auto`, or is `auto` in this context magically the same as `const auto&`?\r\n\r\nNo, I just messed up and unintentionally did a copy. Fixed this and added tests to make sure GetFailure() does not copy.",
      "created_at": "2022-09-13T18:56:49Z",
      "updated_at": "2022-09-13T19:17:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r969983461",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/969983461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/970561659",
      "pull_request_review_id": 1107131542,
      "id": 970561659,
      "node_id": "PRRC_kwDOABII58452Zh7",
      "diff_hunk": "@@ -155,25 +194,48 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n \n-    inline friend bilingual_str _ErrorString(const Result& result)\n+    void AddError(bilingual_str error)\n     {\n-        return result ? bilingual_str{} : result.m_info->error;\n+        if (!error.empty()) this->Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) this->Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from this result object to\n+    //! another one. Only moves message strings, does not change success or\n+    //! failure values of either Result object.",
      "path": "src/util/result.h",
      "position": 252,
      "original_position": 154,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134: I don't like that this takes over error strings, but leaves the value and failure untouched. It seems fine to have a result and warnings, but having a result and also an error at the same time seems odd.\r\n\r\nSame with operator=. I think this is the first time I've seen that after calling `=`, state is preserved from before `=` was called.",
      "created_at": "2022-09-14T09:34:25Z",
      "updated_at": "2022-09-14T09:34:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r970561659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/970561659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971273150",
      "pull_request_review_id": 1108175113,
      "id": 971273150,
      "node_id": "PRRC_kwDOABII58455HO-",
      "diff_hunk": "@@ -155,25 +194,48 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n \n-    inline friend bilingual_str _ErrorString(const Result& result)\n+    void AddError(bilingual_str error)\n     {\n-        return result ? bilingual_str{} : result.m_info->error;\n+        if (!error.empty()) this->Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) this->Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from this result object to\n+    //! another one. Only moves message strings, does not change success or\n+    //! failure values of either Result object.",
      "path": "src/util/result.h",
      "position": 252,
      "original_position": 154,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "in_reply_to_id": 970561659,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r970561659\r\n\r\n> [52a4e50](https://github.com/bitcoin/bitcoin/commit/52a4e50fb4b1171ee0f6814b0a50bc70cdd77134): I don't like that this takes over error strings, but leaves the value and failure untouched. It seems fine to have a result and warnings, but having a result and also an error at the same time seems odd.\r\n\r\nAgree having both a result value and an error message should be avoided. Also having neither a result value nor an error message should be avoided. But there are tradeoffs around where and how strictly you want to enforce these things. The main thing currently enforcing value/error consistency is having a constructor that sets error messages and failure values at the same time and does not allow setting a result value, and a constructor that only sets a success value and does not allow setting an error message.\r\n\r\nBut this leaves open the question of what helpers functions like `operator>>` should do when they combine multiple result values that have already been constructed.\r\n\r\nThe use-case for `operator>>` is when you have an outer function returning `Result<T, F>` calling inner functions returning `Result<T1, F1>`, and `Result<T2, F2>`, etc. Examples would be [`LoadWalletInternal`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/wallet.cpp#L229), [`CreateWallet`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/wallet.cpp#L298), and [`DoMigration`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/wallet.cpp#L3862) from #25722. The outer function can handle failures from inner functions it calls any way it wants: passing failure values up to its caller, translating failure values, ignoring failures, retrying after failures, falling back to an alternate approaches, etc. It sets success and failure values directly, and it can use `operator>>` to collect error and warning messages separately and pass them along. I don't think `operator>>` should be involved in success and failure value handling. I think it would be bad if `operator>>` discarded error messages, or it it threw runtime exceptions, instead of just passing messages on to ultimately get displayed or logged.\r\n\r\nIn C++ generally `operator>>` is used for things as varied as bit shifting and stream I/O and can be interpreted as \"move data from this place to another place\" so I think it reasonable that this `operator>>` just moves error and warning messages from one `Result` object to another, as long as behavior is clearly documented.\r\n\r\n> Same with operator=. I think this is the first time I've seen that after calling `=`, state is preserved from before `=` was called.\r\n\r\nYes it is true that assigning to an existing result does not erase warning and errors messages already accumulated in the result. It only sets the success or failure value and appends new warning and error messages to existing ones.\r\n\r\nI think this this behavior is safe and useful. Setting a value should not automatically erase warning and error messages that are meant to be displayed or logged. But if this behavior is too surprising for an `operator=` method, we don't actually need to make `Result` assignable, and could rename `operator=()` to `Set()` or `SetValue()`. It looks like even after #25722 there are only 3 `operator=` calls in the codebase outside of tests, so this would be an easy change.",
      "created_at": "2022-09-14T20:37:54Z",
      "updated_at": "2022-09-14T20:47:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r971273150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971273150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971650998",
      "pull_request_review_id": 1108707029,
      "id": 971650998,
      "node_id": "PRRC_kwDOABII58456je2",
      "diff_hunk": "@@ -155,25 +194,48 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n \n-    inline friend bilingual_str _ErrorString(const Result& result)\n+    void AddError(bilingual_str error)\n     {\n-        return result ? bilingual_str{} : result.m_info->error;\n+        if (!error.empty()) this->Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) this->Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from this result object to\n+    //! another one. Only moves message strings, does not change success or\n+    //! failure values of either Result object.",
      "path": "src/util/result.h",
      "position": 252,
      "original_position": 154,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "in_reply_to_id": 970561659,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Also having neither a result value nor an error message should be avoided.\r\n\r\nWell, this is already impossible for the reasons you gave. (Edit: When calling only the constructors)\r\n\r\n> Agree having both a result value and an error message should be avoided.\r\n\r\nThen, why not make it impossible? If there is an outer function returning `Result<T, F>` that wants to combine `Result<T1, F1>` and `Result<T2, F2>`, then it seems better if it explicitly takes (moves) the result T1/F1 out and translates it into T/F. For example, if it passes up a failure value, it seems best to just create a fresh Result (of the outer type) with the failure and return that. (Same if it translates failure values). If it ignores failures, it would be good to translate them to warnings first and not blindly take them over as errors with the `>>` operator. (Same if it retries or falls back).\r\n\r\n> I think this this behavior is safe and useful.\r\n\r\nWhy couldn't the same be achieved by explicitly constructing a new Result with either an error or a value?",
      "created_at": "2022-09-15T07:53:38Z",
      "updated_at": "2022-09-15T15:37:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r971650998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971650998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971748931",
      "pull_request_review_id": 1108846917,
      "id": 971748931,
      "node_id": "PRRC_kwDOABII584567ZD",
      "diff_hunk": "@@ -155,25 +194,48 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n \n-    inline friend bilingual_str _ErrorString(const Result& result)\n+    void AddError(bilingual_str error)\n     {\n-        return result ? bilingual_str{} : result.m_info->error;\n+        if (!error.empty()) this->Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) this->Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from this result object to\n+    //! another one. Only moves message strings, does not change success or\n+    //! failure values of either Result object.",
      "path": "src/util/result.h",
      "position": 252,
      "original_position": 154,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "in_reply_to_id": 970561659,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">> Also having neither a result value nor an error message should be avoided.\r\n\r\n> Well, this is already impossible for the reasons you gave.\r\n\r\n\"Should be avoided\" means that users should avoid it, and the implementation makes it easy to avoid by default. The reasons I gave were reasons why a function combining multiple result values needs to either (1) allow result values and error messages to exist at the same time or (2) discard error messages or result values or (3) throw exceptions. And I believe the best choice for `operator>>` is (1), just to be a plain message mover that moves message strings and leaves result values alone. I linked to use-cases showing how this works in practice.\r\n\r\n> > Agree having both a result value and an error message should be avoided.\r\n\r\n> Then, why not make it impossible? If there is an outer function returning `Result<T, F>` that wants to combine `Result<T1, F1>` and `Result<T2, F2>`, then it seems better if it explicitly takes (moves) the result T1/F1 out and translates it into T/F. For example, if it passes up a failure value, it seems best to just create a fresh Result (of the outer type) with the failure and return that.\r\n\r\nThis is actually what the implementation does. But if the outer function returns success value, and there are error messages, I don't think it is good default behavior to throw away the error messages or raise an exception. I think the best default behavior is to keep error messages so they can be displayed or logged.\r\n\r\n> (Same if it translates failure values). If it ignores failures, it would be good to translate them to warnings first and not blindly take them over as errors with the `>>` operator. (Same if it retries or falls back).\r\n\r\nSo change you are asking for there is basically:\r\n\r\n```diff\r\n--- a/src/util/result.h\r\n+++ b/src/util/result.h\r\n@@ -222,7 +222,7 @@ public:\r\n     Result&& operator>>(O&& other LIFETIMEBOUND) &&\r\n     {\r\n         if (this->m_info) {\r\n-            if (!this->m_info->errors.empty()) detail::MoveMessages(this->m_info->errors, other.Info().errors);\r\n+            if (!this->m_info->errors.empty()) detail::MoveMessages(this->m_info->errors, other ? other.Info().warnings : other.Info().errors);\r\n             if (!this->m_info->warnings.empty()) detail::MoveMessages(this->m_info->warnings, other.Info().warnings);\r\n         }\r\n         return std::move(*this);\r\n```\r\n\r\nI wouldn't object to it, but it just seems more invasive and doesn't offer practical benefits.\r\n\r\n> > I think this this behavior is safe and useful.\r\n\r\n> Why couldn't the same be achieved by explicitly constructing a new Result with either an error or a value?\r\n\r\nI think\r\n\r\n```c++\r\nWarnFn1() >> result;\r\nWarnFn2() >> result;\r\nresult = FailFn(...);\r\nreturn result;\r\n```\r\n\r\nor\r\n\r\n\r\n```c++\r\nWarnFn1() >> result;\r\nWarnFn2() >> result;\r\nresult.Set(FailFn(...));\r\nreturn result;\r\n``` \r\n\r\nis cleaner than\r\n\r\n```c++\r\nWarnFn1() >> result;\r\nWarnFn2() >> result;\r\nauto result2 = FailFn(...);\r\nstd::move(result) >> result2;\r\nreturn result2;\r\n```\r\n\r\nbecause it doesn't require introducing multiple result variables. If you are trying to get rid of both `operator=` and `operator>>`, I believe `operator=` or `Set` is also better than:\r\n\r\n```c++\r\nauto result2 = FailFn(...);\r\nreturn result2 ? Result<int, FnError>(std::move(result), result2.value()) : Result<int, FnError>(std::move(result), Error{}, resul2t.GetFailure());\r\n```\r\n\r\nI'm happy to rename `operator=` to `Set` if you think `operator=` is misleading. But if you look at the places where these functions are used, it is easier to see why they are useful. Conversely, if you think there is a footgun here, it would be helpful to see an example of the footgun.",
      "created_at": "2022-09-15T09:24:13Z",
      "updated_at": "2022-09-15T09:24:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r971748931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971748931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971782272",
      "pull_request_review_id": 1108893852,
      "id": 971782272,
      "node_id": "PRRC_kwDOABII58457DiA",
      "diff_hunk": "@@ -155,25 +194,48 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n \n-    inline friend bilingual_str _ErrorString(const Result& result)\n+    void AddError(bilingual_str error)\n     {\n-        return result ? bilingual_str{} : result.m_info->error;\n+        if (!error.empty()) this->Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) this->Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from this result object to\n+    //! another one. Only moves message strings, does not change success or\n+    //! failure values of either Result object.",
      "path": "src/util/result.h",
      "position": 252,
      "original_position": 154,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "in_reply_to_id": 970561659,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> But if you look at the places where these functions are used, it is easier to see why they are useful.\r\n\r\nI linked to some places where `operator>>` is used already: [`LoadWalletInternal`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/wallet.cpp#L229-L245), [`CreateWallet`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/wallet.cpp#L298-L346), and [`DoMigration`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/wallet.cpp#L3862-L3940) from #25722\r\n\r\nFor `operator=` (again happy to rename this to `Set`) examples are: [`AddressTableModel::addRow`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/qt/addresstablemodel.cpp#L381), [`SQLiteDatabase::Verify`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/sqlite.cpp#L172), [`AvailableCoinsTestingSetup`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/test/availablecoins_tests.cpp#L78-L99), [`FuzzedWallet::GetScriptPubKey`](https://github.com/ryanofsky/bitcoin/blob/4e533926fe5549aafb70caf94718447ea497c84c/src/wallet/test/fuzz/notifications.cpp#L72-L74)",
      "created_at": "2022-09-15T09:54:02Z",
      "updated_at": "2022-09-15T15:26:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r971782272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971782272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972138482",
      "pull_request_review_id": 1109415289,
      "id": 972138482,
      "node_id": "PRRC_kwDOABII58458afy",
      "diff_hunk": "@@ -155,25 +194,48 @@ class Result : public detail::ResultBase<T, F>\n     template <typename... Args>\n     Result(Args&&... args)\n     {\n-        Construct(std::forward<Args>(args)...);\n+        Construct([this](auto&&... x) { this->ConstructValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n     template<typename OT, typename OF>\n     Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n     Result& operator=(Result&& other) LIFETIMEBOUND\n     {\n-        if (*this) this->DestroyValue(); else this->m_info.reset();\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n         MoveConstruct(other);\n         return *this;\n     }\n \n-    inline friend bilingual_str _ErrorString(const Result& result)\n+    void AddError(bilingual_str error)\n     {\n-        return result ? bilingual_str{} : result.m_info->error;\n+        if (!error.empty()) this->Info().errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (!warning.empty()) this->Info().warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Operator moving warning and error messages from this result object to\n+    //! another one. Only moves message strings, does not change success or\n+    //! failure values of either Result object.",
      "path": "src/util/result.h",
      "position": 252,
      "original_position": 154,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "52a4e50fb4b1171ee0f6814b0a50bc70cdd77134",
      "in_reply_to_id": 970561659,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Went ahead and renamed `operator=` to `Set` for now. Seems like a good way to avoid some confusion.",
      "created_at": "2022-09-15T15:30:36Z",
      "updated_at": "2022-09-15T15:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r972138482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972138482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104282294",
      "pull_request_review_id": 1295372964,
      "id": 1104282294,
      "node_id": "PRRC_kwDOABII585B0gK2",
      "diff_hunk": "@@ -31,54 +140,110 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+//!\n+//! Most code does not need different error-handling behavior for different\n+//! types of errors, and can suffice just using the type `T` success value on\n+//! success, and descriptive error strings when there's a failure. But\n+//! applications that do need more complicated error-handling behavior can\n+//! override the default `F = void` failure type and get failure values by",
      "path": "src/util/result.h",
      "position": 140,
      "original_position": 140,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "eb50fcd6859d1730663159995e8477f6d892e7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Allowing for a `void` failure type seems to make this incompatible to be switched out to `std::expected` https://en.cppreference.com/w/cpp/utility/expected ?\r\n\r\nWith multiple warning and error messages this may already be incompatible, though?",
      "created_at": "2023-02-13T10:42:23Z",
      "updated_at": "2023-02-13T10:42:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r1104282294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104282294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 148,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104628124",
      "pull_request_review_id": 1295884713,
      "id": 1104628124,
      "node_id": "PRRC_kwDOABII585B10mc",
      "diff_hunk": "@@ -31,54 +140,110 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+//!\n+//! Most code does not need different error-handling behavior for different\n+//! types of errors, and can suffice just using the type `T` success value on\n+//! success, and descriptive error strings when there's a failure. But\n+//! applications that do need more complicated error-handling behavior can\n+//! override the default `F = void` failure type and get failure values by",
      "path": "src/util/result.h",
      "position": 140,
      "original_position": 140,
      "commit_id": "28a954c7034077ac3a45083dd5e2b5cdb4d4cdde",
      "original_commit_id": "eb50fcd6859d1730663159995e8477f6d892e7f4",
      "in_reply_to_id": 1104282294,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r1104282294\r\n\r\n> Allowing for a `void` failure type seems to make this incompatible to be switched out to `std::expected` https://en.cppreference.com/w/cpp/utility/expected ?\r\n> \r\n> With multiple warning and error messages this may already be incompatible, though?\r\n\r\nYes, if you are thinking that `util::Result` could wrap `std::expected`, that would be probably be awkward and not worth it.\r\n\r\nBut I don't think there is a conflict because the two classes are mostly doing different things. The `util::Result` class is mostly providing error-reporting functionality (passing error and warning strings up to the user). The `std::expected` class is only providing error-handling functionality (passing failure and success values between functions). Here is how I would choose the between the two classes:\r\n\r\n- If your function never fails, it should just return success value directly.\r\n- If your function can fail, but doesn't provide any error strings or specific failure information, it should return `std::optional`.\r\n- If your function can fail, and provides failure information but not error strings, it should return `std::expected`.\r\n- If your function can fail, and generates error or warning strings it should return `util::Result`.\r\n\r\nWe have a lot of functions that generate error strings as you can see by all the code using `util::Error` and `util::Result` presently, and in more code that is converted to use `util::Result` in this PR and #25722. After `std::expected` is available, most of these functions still be better off using `util::Result` instead of `std::expected` so they are able to pass back error strings in a uniform way.\r\n\r\nBut when `std::expected` is available, we may want to tweak the `util::Result` class to make it easier to switch between `std::expected` and `util::Result` with minimal code changes. For example, the `util::Result` already has a `value_or` method to be compatible with `std::optional`. It could also have `and_then` and `or_else` methods to be compatible with `std::expected`.",
      "created_at": "2023-02-13T15:27:49Z",
      "updated_at": "2023-02-13T15:28:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r1104628124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104628124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 148,
      "original_line": 148,
      "side": "RIGHT"
    }
  ]
}