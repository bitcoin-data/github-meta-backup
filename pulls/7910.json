{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910",
    "id": 67038135,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjcwMzgxMzU=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7910",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/7910.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/7910.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
    "number": 7910,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Segregated witness",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is the complete code for segregated witness on top of master (implementing BIP141, BIP143, BIP144, BIP145). Apart from commentary and merging (see further), the code is never rewritten/squashed/rebased, in order not to invalidate review. A rebased/squashed version is available here: #8149.\n\nSee also the detailed and up-to-date list of commits here: https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-211998958\n\nThere are certainly some items left to do:\n- [x] Incorporate changes to BIP145/BIP9 when finalized (see https://github.com/bitcoin/bips/pull/365)\n- [x] Define a deployment time for testnet\n- [x] Seed nodes that provide segwit-capable peers\n- [x] Do tests in a mixed network of upgraded and non-upgraded nodes\n- [x] Remove segnet from mainline merge\n- [ ] Define a deployment time for mainnet\n- [ ] Per-transaction caching of sighashes to fix the O(n^2) sighash problem (see https://github.com/sipa/bitcoin/pull/70)\n\nMany thanks to all contributors so far (including @jl2012, @NicolasDorier, @CodeShark, @sdaftuar, @morcos, @luke-jr, @afk11, @theuni, @TheBlueMatt, @MarcoFalke, @LongShao007, @jonasnick, @mruddy), the ideas it is based on (by @gmaxwell and @luke-jr), and many reviewers (including @SergioDemianLerner, @instagibbs, @dcousens, and @btcdrak).\n",
    "labels": [
      {
        "id": 192202000,
        "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
        "name": "Consensus",
        "color": "009800",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2016-04-19T15:22:33Z",
    "updated_at": "2021-09-08T11:03:33Z",
    "closed_at": "2016-06-24T16:20:54Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "bef8080d3ca2cbd467f2bc8c0c7a6c969a4155da",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "sipa:segwit-master",
      "ref": "segwit-master",
      "sha": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 20,
        "stargazers_count": 81,
        "watchers_count": 81,
        "size": 215860,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T11:52:48Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2023-04-30T00:52:17Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "9f1807af2422e3ac2d3702242b4a47c8df0be262",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 5305,
    "deletions": 571,
    "changed_files": 80,
    "commits": 128,
    "review_comments": 110,
    "comments": 35
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDRiMmM1MDkwZTgzNTU2NzZkNDNjMWRkZTRlMDIyMmM0ODQ1NWY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/644b2c5090e8355676d43c1dde4e0222c48455f6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/644b2c5090e8355676d43c1dde4e0222c48455f6",
      "tree": {
        "sha": "4acb0b878885339f8373c0d084c880d9f6127eec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4acb0b878885339f8373c0d084c880d9f6127eec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/187186b0fe039010ea4b81edb671b9bdfc63d29a",
          "sha": "187186b0fe039010ea4b81edb671b9bdfc63d29a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/187186b0fe039010ea4b81edb671b9bdfc63d29a"
        }
      ],
      "message": "Keep addrman's nService bits consistent with outbound observations",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T17:58:00Z"
      },
      "sha": "644b2c5090e8355676d43c1dde4e0222c48455f6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmRjNDEzODIzZTVkNmQ3YTVkYTg1MDRjYWI4NmZmMjQxOTU5ZDYw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afdc413823e5d6d7a5da8504cab86ff241959d60",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/afdc413823e5d6d7a5da8504cab86ff241959d60",
      "tree": {
        "sha": "8c3536dcede2303627c7c6df65c7adae4fec892c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c3536dcede2303627c7c6df65c7adae4fec892c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/644b2c5090e8355676d43c1dde4e0222c48455f6",
          "sha": "644b2c5090e8355676d43c1dde4e0222c48455f6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/644b2c5090e8355676d43c1dde4e0222c48455f6"
        }
      ],
      "message": "Verify that outbound connections have expected services",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T18:09:22Z"
      },
      "sha": "afdc413823e5d6d7a5da8504cab86ff241959d60"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGVjMmJjZTE2MGRlZTExNmVlMmY4NWI4YTlhZDhmN2U0ZDU3MzE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
      "tree": {
        "sha": "d0e5c488c090818704fdd346d5877b85d1582125",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e5c488c090818704fdd346d5877b85d1582125"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afdc413823e5d6d7a5da8504cab86ff241959d60",
          "sha": "afdc413823e5d6d7a5da8504cab86ff241959d60",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/afdc413823e5d6d7a5da8504cab86ff241959d60"
        }
      ],
      "message": "Only store and connect to NODE_NETWORK nodes",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:20Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-26T12:31:25Z"
      },
      "sha": "fdec2bce160dee116ee2f85b8a9ad8f7e4d57317"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjkyNjVkOWE0ZjgyMDQwNzI5YjFhODFkNDg4OGQ3NjhkM2IyYzRh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e69265d9a4f82040729b1a81d4888d768d3b2c4a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e69265d9a4f82040729b1a81d4888d768d3b2c4a",
      "tree": {
        "sha": "d0e5c488c090818704fdd346d5877b85d1582125",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e5c488c090818704fdd346d5877b85d1582125"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
          "sha": "fdec2bce160dee116ee2f85b8a9ad8f7e4d57317",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fdec2bce160dee116ee2f85b8a9ad8f7e4d57317"
        }
      ],
      "message": "--- [SEGWIT] begin: segnet ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:20Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:03Z"
      },
      "sha": "e69265d9a4f82040729b1a81d4888d768d3b2c4a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmRiZDgxOGY5NTc3Y2NlYmQ5NTBiMTQ5MDBiNjI1YTNmMThmMDU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66dbd818f9577ccebd950b14900b625a3f18f055",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/66dbd818f9577ccebd950b14900b625a3f18f055",
      "tree": {
        "sha": "53368b280a455b57652c1972d18351988a907617",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53368b280a455b57652c1972d18351988a907617"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e69265d9a4f82040729b1a81d4888d768d3b2c4a",
          "sha": "e69265d9a4f82040729b1a81d4888d768d3b2c4a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e69265d9a4f82040729b1a81d4888d768d3b2c4a"
        }
      ],
      "message": "Don't check the genesis block PoW\n\nInspired by Jorge Timon's \"Testchain: Don't check the genesis block\", but\nrestricted to just PoW check.\n\nCode by Matt Corallo, originally submitted as a patch to segwit.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T13:57:20Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-14T14:47:32Z"
      },
      "sha": "66dbd818f9577ccebd950b14900b625a3f18f055"
    },
    {
      "event": "mentioned",
      "id": 633111876,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTExODc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111876",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:33Z"
    },
    {
      "event": "subscribed",
      "id": 633111877,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzExMTg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111877",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:33Z"
    },
    {
      "event": "mentioned",
      "id": 633111878,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTExODc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111878",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "subscribed",
      "id": 633111879,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzExMTg3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111879",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "mentioned",
      "id": 633111880,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTExODgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111880",
      "actor": {
        "login": "CodeShark",
        "id": 894059,
        "node_id": "MDQ6VXNlcjg5NDA1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodeShark",
        "html_url": "https://github.com/CodeShark",
        "followers_url": "https://api.github.com/users/CodeShark/followers",
        "following_url": "https://api.github.com/users/CodeShark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CodeShark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CodeShark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
        "organizations_url": "https://api.github.com/users/CodeShark/orgs",
        "repos_url": "https://api.github.com/users/CodeShark/repos",
        "events_url": "https://api.github.com/users/CodeShark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CodeShark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "subscribed",
      "id": 633111881,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzExMTg4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111881",
      "actor": {
        "login": "CodeShark",
        "id": 894059,
        "node_id": "MDQ6VXNlcjg5NDA1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodeShark",
        "html_url": "https://github.com/CodeShark",
        "followers_url": "https://api.github.com/users/CodeShark/followers",
        "following_url": "https://api.github.com/users/CodeShark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CodeShark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CodeShark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
        "organizations_url": "https://api.github.com/users/CodeShark/orgs",
        "repos_url": "https://api.github.com/users/CodeShark/repos",
        "events_url": "https://api.github.com/users/CodeShark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CodeShark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "mentioned",
      "id": 633111882,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTExODgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111882",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "subscribed",
      "id": 633111883,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzExMTg4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111883",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "mentioned",
      "id": 633111884,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTExODg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111884",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "subscribed",
      "id": 633111885,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzExMTg4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111885",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "mentioned",
      "id": 633111887,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTExODg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111887",
      "actor": {
        "login": "afk11",
        "id": 5617245,
        "node_id": "MDQ6VXNlcjU2MTcyNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/afk11",
        "html_url": "https://github.com/afk11",
        "followers_url": "https://api.github.com/users/afk11/followers",
        "following_url": "https://api.github.com/users/afk11/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/afk11/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/afk11/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
        "organizations_url": "https://api.github.com/users/afk11/orgs",
        "repos_url": "https://api.github.com/users/afk11/repos",
        "events_url": "https://api.github.com/users/afk11/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/afk11/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "subscribed",
      "id": 633111888,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzExMTg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633111888",
      "actor": {
        "login": "afk11",
        "id": 5617245,
        "node_id": "MDQ6VXNlcjU2MTcyNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/afk11",
        "html_url": "https://github.com/afk11",
        "followers_url": "https://api.github.com/users/afk11/followers",
        "following_url": "https://api.github.com/users/afk11/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/afk11/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/afk11/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
        "organizations_url": "https://api.github.com/users/afk11/orgs",
        "repos_url": "https://api.github.com/users/afk11/repos",
        "events_url": "https://api.github.com/users/afk11/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/afk11/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:22:34Z"
    },
    {
      "event": "mentioned",
      "id": 633113083,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTEzMDgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633113083",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:23:20Z"
    },
    {
      "event": "subscribed",
      "id": 633113084,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzExMzA4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633113084",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:23:20Z"
    },
    {
      "event": "mentioned",
      "id": 633124869,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTI0ODY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633124869",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:30:30Z"
    },
    {
      "event": "subscribed",
      "id": 633124872,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzEyNDg3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633124872",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:30:30Z"
    },
    {
      "event": "mentioned",
      "id": 633124877,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTI0ODc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633124877",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:30:30Z"
    },
    {
      "event": "subscribed",
      "id": 633124878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzEyNDg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633124878",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:30:30Z"
    },
    {
      "event": "mentioned",
      "id": 633127610,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjMzMTI3NjEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633127610",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:32:16Z"
    },
    {
      "event": "subscribed",
      "id": 633127611,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzMzEyNzYxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633127611",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T15:32:16Z"
    },
    {
      "event": "commented",
      "id": 211998958,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTk5ODk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/211998958",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T16:09:32Z",
      "updated_at": "2016-06-16T18:32:36Z",
      "author_association": "MEMBER",
      "body": "Since github shows the commits sorted by author date rather than dependency order, here is a list of all commits:\n- preparation (https://github.com/sipa/bitcoin/compare/fb0ac482eee761ec17ed2c11df11e054347a026d...e69265d)\n  - 644b2c5 Keep addrman's nService bits consistent with outbound observations\n  - afdc413 Verify that outbound connections have expected services\n  - fdec2bc Only store and connect to NODE_NETWORK nodes\n- segnet (https://github.com/sipa/bitcoin/compare/e69265d...bb4bb47)\n  - 66dbd81 Don't check the genesis block PoW\n  - 70ebe86 Create segnet4\n  - f8bcd86 Add segnet seed nodes\n  - 58847fe qt: Work (don't crash) with -segnet\n- P2P/node/consensus (https://github.com/sipa/bitcoin/compare/bb4bb47...351a2fe)\n  - 3b1ff49 Add segregated witness transaction serialization\n  - e35d020 Removed ppszTypeName from protocol.cpp\n  - adb1c09 getdata enum issue fix\n  - ac6886d Introduce and preferentially peer with NODE_WITNESS service bit\n  - cb9d4d3 Witness commitment validation\n  - 2c87be1 Script validation logic for witnesses\n  - 1e47805 Enable SCRIPT_VERIFY_WITNESS for mempool transactions\n  - 97f34f7 Activate script consensus rules through BIP9\n  - 6a8021f Only download blocks from witness peers after fork\n  - 271e45e Observe input amounts: verification\n  - d374139 Add signature version 1 with updated sighash\n  - 92c6dc3 Return witness data\n  - 3955218 Implement block size/sigop cost rules, limits, and GBT support\n  - 5a47b98 Add command line options to loosen mempool acceptance rules\n  - e573571 bitcoinconsensus: add method that accepts amount, and return error when verify_script receives VERIFY_WITNESS flag\n  - a6386c2 Increase MAX_PROTOCOL_MESSAGE_LENGTH\n  - 1b6c6f1 Add rewind logic to deal with post-fork software updates\n- wallet (https://github.com/sipa/bitcoin/compare/351a2fe...a2d6f8a)\n  - abbe085 Witness script signing\n  - c3fe53f Add witness address RPCs (using P2SH)\n  - ec385fa signrawtransaction can sign P2WSH\n- tests (https://github.com/sipa/bitcoin/compare/a2d6f8a...cfb0a83)\n  - 2ed1d11 Signing tests\n  - 3c0b16f Add rpc test for segwit\n  - 24746d2 Add transaction tests for segwit\n  - 3409ad6 Add segwit support to script_tests\n  - e5ffcc1 Autogeneration support for witness in script_tests\n  - 5e6abe5 Update p2p test framework with segwit support\n  - 7b539f9 P2P test for segwit\n- fixups (https://github.com/sipa/bitcoin/compare/cfb0a83...77c613c)\n  - bb2bfca fixup Implement block size/sigop cost rules, limits, and GBT support: use int64_t for sigopcost everywhere\n  - 64c1527 fixup Implement block size/sigop cost rules, limits, and GBT support: update block cost comment\n  - cc741f5 fixup Add segregated witness transaction serialization: comments\n  - c28179f fixup Update p2p test framework with segwit support: fix comment\n  - 6a5da9b fixup Witness commitment validation: list the mentioned BIPs\n  - 88e0135 fixup Add command line options to loosen mempool acceptance rules: simplify comment\n  - da60fae fixup Witness commitment validation: factor out GetWitnessCommitmentPos\n  - 4f827be fixup Witness commitment validation: fix typo in comment\n  - 058f495 fixup Implement block size/sigop cost rules, limits, and GBT support: improve GBT help\n  - c1e7a95 fixup Add witness address RPCs (using P2SH): test hex & wallet available\n  - dbe6391 fixup Add segregated witness transaction serialization: revert extformat-if-empty-vin\n  - 97d7402 tidy up CInv::GetCommand\n  - f0f6123 fixup Witness commitment validation: function UpdateUncommitedBlockStructures redefine\n  - a613599 [qa] Use integer division, byte strings properly\n  - 5d6b6e2 fixup Add segregated witness transaction serialization: add missing witness flags\n- fixups 2 (https://github.com/sipa/bitcoin/compare/77c613c...f38671f)\n  - f889bec fixup Add segregated witness transaction serialization: add negative flag\n  - 3ddabe4 fixup Add segregated witness transaction serialization: test with no inputs no longer possible\n  - c744a1e fixup Add segregated witness transaction serialization: deal with overwrite and inconsistencies\n  - 4709595 fixup Witness commitment validation: revert adding of commitment in IncrementExtraNonce\n  - 122ca81 fixup Witness commitment validation: correct comment\n  - 5df3e51 fixup Witness commitment validation: add comment about witness checking in miner\n  - 36e1656 fixup Witness commitment validation: better validation error message\n  - f726402 fixup Implement block size/sigop cost rules, limits, and GBT support: update comment\n  - cf2c531 fixup Enable SCRIPT_VERIFY_WITNESS for mempool transactions: do not reject/punish invalid witness orphans\n  - 0fb6e4e fixup Return witness data: don't list nextblockhash twice\n  - ccd0e6c [qa] mininode: Use hexlify wrapper from util\n  - 3a62cb9 Implement RecursiveDynamicUsage for witness structures\n  - a541f0b Use an enum for signature versions\n- fixups 3 (https://github.com/sipa/bitcoin/compare/f38671f...8708de8)\n  - ba7e292 test: WITNESS flag must be used with P2SH flag\n  - e7821e9 BIP9 parameters for testnet\n  - 76142af Segwit script error unit tests\n- fixups 4 (https://github.com/sipa/bitcoin/compare/8708de8...306858f)\n  - b846298 f cb9d4d34: typo fix\n  - 38e3fcd f 3b1ff49f: remove redundant witness clean\n  - fd85b77 f 1b6c6f16: Cleanup mapBlocksUnlinked in RewindBlockIndex\n  - 433daf4 f ac6886d3: Get rid of leftover WITNESS_VERSION\n  - 9590289 f 2c87be12: fix typo\n  - 17277c9 f 39552185: GetBlockCost: Clarify comment description\n  - 1e9cba2 f 39552185: provide both -maxblocksize and -maxblockcost\n  - 8f50b96 [qa] segwit: Switch to py3\n  - 75335ca f 1b6c6f16: pass CChainParams rather than Consensus::Params to RewindBlockIndex\n- fixups 5 (https://github.com/sipa/bitcoin/compare/306858f...869f26e)\n  - 036fa47 Improve FindForkInGlobalIndex when locator contains chain tip\n  - 7eb0d75 VerifyDB: don't check blocks that have been pruned\n  - 8adb03a Improve RewindBlockIndex when pruning\n  - a1d1d0c Make sure upgraded nodes don't ask for non-wit blocks\n  - 019860e script_tests: witness tests can specify tx amount\n  - c815c16 [Qt] Add support for NODE_WITNESS in formatServicesStr\n  - f16067f bitcoinconsensus.h: Accept amount as int64_t\n  - 059d4d1 Add GetTransactionSigOpCost unit tests\n  - c1c38a2 segwit: fix gui wallet send transaction size calculation assertion failed\n  - 0acd1dc segwit: txout dust threshold calculation update\n- fixups 6 (https://github.com/sipa/bitcoin/compare/869f26e...f98de5f)\n  - 14d4d1d Extend the max witness program length to 40 bytes\n  - 4840f6d Prevent witness addresses from being constructed before fork\n  - 3dbf852 Remove positive SERIALIZE_TRANSACTION_WITNESS flag\n- fixups 7 (https://github.com/sipa/bitcoin/compare/f98de5f...7613bbb)\n  - c06c40b Actually count the witness data in memusage of CTransaction\n  - d8b5db9 Correctly count maximum size in mining\n  - 57d4bd2 Rework -maxblocksize and -maxblockcost\n  - 0bfbf60 Cache transaction cost in mempool\n  - 496d8c0 Delete segnet\n  - 7799a7c Do not send witnesses in response to bip37 blocks\n  - 4c19c18 33 to 40 bytes push should now be considered a witness scriptPubKey\n- fixups 8 (https://github.com/sipa/bitcoin/compare/7613bbb...1b9893f)\n  - a9bff09 Tests: add getblocktemplate/segwit test\n  - 92ab64c Add test for getrawtransaction\n  - 40f7829 p2p-segwit.py: more RPC coverage\n  - b644339 Rename deployment (witness -> segwit)\n  - 00bf5e1 Update p2p-segwit.py for new deployment name\n  - c8f2fb2 BIP143 P2WSH examples\n  - f3a7ed4 Fix unused variable in sigopcount test\n- fixups 9 (https://github.com/sipa/bitcoin/compare/1b9893f...b508f5b)\n  - 3483e5c DEPLOYMENT_WITNESS -> DEPLOYMENT_SEGWIT\n  - 2a6516f Behave as a non-witness node when start time is far away\n  - c7b5de5 test: BIP143 examples fix and clarify\n  - cc19adc Remove segnet from mininode\n  - efc251d Tests: ensure that signrawtransaction failures are caught in segwit.py\n  - 396f4b8 spelling fix: uncommited -> uncommitted\n- fixups 10 (https://github.com/sipa/bitcoin/compare/b508f5b...a6840e5)\n  - 10433cf Fix direct fetching of blocks after 2a6516fc\n  - 2948c02 Consistency in serialization flags\n- fixups 11 (https://github.com/sipa/bitcoin/compare/d7fe873...fb348c6)\n  - 0e177a2 Don't treat NODE_WITNESS as relevant before a fork is defined\n  - c7795ee Revert \"Don't check the genesis block PoW\" as segnet has been dropped.\n- merge (https://github.com/sipa/bitcoin/compare/fb348c6...e84733733d0ec3deee3b0d1cdcf643082b78ee1e)\n  - e847337 Merge remote-tracking branch 'upstream/master' into segwit-master\n\nCode to generate this list:\n\n```\nPREV=\"$(git rev-parse HEAD)\"; (git log --oneline upstream/master..HEAD; echo \"$(git rev-parse upstream/master) --- [SEGWIT] begin: preparation ---\") | while read C L; do if [ \"d${L:0:13}\" == \"d--- [SEGWIT] \" ]; then if [ \"d$PREV\" != \"\" ]; then echo \"* ${L:20:-4} (https://github.com/sipa/bitcoin/compare/$C...$PREV)\"; fi; PREV=$C; PREVL=$L; else echo \"  * $C $L\"; fi; done | tac\n```\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-211998958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGViZTg2ZjAwNzM5NzJhM2Q3ODM0ZmNkZDI0OTg5MTU4NTY0YWUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ebe86f0073972a3d7834fcdd24989158564ae3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/70ebe86f0073972a3d7834fcdd24989158564ae3",
      "tree": {
        "sha": "4143f7391cb49b6268357f61191ac10849791f91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4143f7391cb49b6268357f61191ac10849791f91"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66dbd818f9577ccebd950b14900b625a3f18f055",
          "sha": "66dbd818f9577ccebd950b14900b625a3f18f055",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66dbd818f9577ccebd950b14900b625a3f18f055"
        }
      ],
      "message": "Create segnet4",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:12Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-31T02:49:58Z"
      },
      "sha": "70ebe86f0073972a3d7834fcdd24989158564ae3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGJjZDg2ZDQzMjE4ZTJjYjlkNjBjMmE4OWJiNWY4OWFmODEzNDg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
      "tree": {
        "sha": "bf4aea4913113fc108183069f8573b9ae0f098d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf4aea4913113fc108183069f8573b9ae0f098d5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ebe86f0073972a3d7834fcdd24989158564ae3",
          "sha": "70ebe86f0073972a3d7834fcdd24989158564ae3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/70ebe86f0073972a3d7834fcdd24989158564ae3"
        }
      ],
      "message": "Add segnet seed nodes",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-21T16:21:46Z"
      },
      "sha": "f8bcd86d43218e2cb9d60c2a89bb5f89af813485"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODg0N2ZlMmM2ODBhMDQzMjU5OTBmMjZjYzM1NjAzYjQyOTI3MGU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58847fe2c680a04325990f26cc35603b429270e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/58847fe2c680a04325990f26cc35603b429270e7",
      "tree": {
        "sha": "1bf0eca647ce8bda4bc293ae7d4a50931e5aa521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bf0eca647ce8bda4bc293ae7d4a50931e5aa521"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
          "sha": "f8bcd86d43218e2cb9d60c2a89bb5f89af813485",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bcd86d43218e2cb9d60c2a89bb5f89af813485"
        }
      ],
      "message": "qt: Work (don't crash) with -segnet",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-16T00:26:25Z"
      },
      "sha": "58847fe2c680a04325990f26cc35603b429270e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjRiYjQ3ZDEyMTVlN2ZmM2FjNWY5MTBmOGE0YTlmNzg3Y2ZmZmJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
      "tree": {
        "sha": "1bf0eca647ce8bda4bc293ae7d4a50931e5aa521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bf0eca647ce8bda4bc293ae7d4a50931e5aa521"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58847fe2c680a04325990f26cc35603b429270e7",
          "sha": "58847fe2c680a04325990f26cc35603b429270e7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/58847fe2c680a04325990f26cc35603b429270e7"
        }
      ],
      "message": "--- [SEGWIT] begin: P2P/node/consensus ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:23Z"
      },
      "sha": "bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjFmZjQ5ZjBjMWI1ZmNlNWZiMGVkNDEyMWNhNjg0OTVhMGNlMDc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
      "tree": {
        "sha": "b044d019dcb97be59d8b823cba3c8e1556bcdb5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b044d019dcb97be59d8b823cba3c8e1556bcdb5f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
          "sha": "bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4bb47d1215e7ff3ac5f910f8a4a9f787cfffbd"
        }
      ],
      "message": "Add segregated witness transaction serialization\n\nContains refactorings by Eric Lombrozo.\nContains fixup by Nicolas Dorier.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:18Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:32:04Z"
      },
      "sha": "3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzVkMDIwMGViYzc5OTM4ZmQ3MmNkNWFlOTg2Y2ZlZjA0NmYyZDk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e35d0200ebc79938fd72cd5ae986cfef046f2d94",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e35d0200ebc79938fd72cd5ae986cfef046f2d94",
      "tree": {
        "sha": "c313e0770aa133b7a49e2fc05afeeb1823d0368e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c313e0770aa133b7a49e2fc05afeeb1823d0368e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
          "sha": "3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1ff49f0c1b5fce5fb0ed4121ca68495a0ce076"
        }
      ],
      "message": "Removed ppszTypeName from protocol.cpp",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-11T07:55:11Z"
      },
      "sha": "e35d0200ebc79938fd72cd5ae986cfef046f2d94"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGIxYzA5Yjg3MjllZTNlMWE4NDYwZTE1MmU2ZWY5ODcwNTFkMDFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adb1c09b8729ee3e1a8460e152e6ef987051d01a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/adb1c09b8729ee3e1a8460e152e6ef987051d01a",
      "tree": {
        "sha": "dd57341c449d55d08c37e4d7502f187c9564bc0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd57341c449d55d08c37e4d7502f187c9564bc0a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e35d0200ebc79938fd72cd5ae986cfef046f2d94",
          "sha": "e35d0200ebc79938fd72cd5ae986cfef046f2d94",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e35d0200ebc79938fd72cd5ae986cfef046f2d94"
        }
      ],
      "message": "getdata enum issue fix",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-16T01:29:35Z"
      },
      "sha": "adb1c09b8729ee3e1a8460e152e6ef987051d01a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzY4ODZkMzBkMjE1MDEzMDBlYzI4N2U5Y2M0ZDc5YTQ4MzAxYTlm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac6886d30d21501300ec287e9cc4d79a48301a9f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac6886d30d21501300ec287e9cc4d79a48301a9f",
      "tree": {
        "sha": "8e4302e17c854f4fbddf6d2a7643c43e3f6c6e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e4302e17c854f4fbddf6d2a7643c43e3f6c6e09"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adb1c09b8729ee3e1a8460e152e6ef987051d01a",
          "sha": "adb1c09b8729ee3e1a8460e152e6ef987051d01a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/adb1c09b8729ee3e1a8460e152e6ef987051d01a"
        }
      ],
      "message": "Introduce and preferentially peer with NODE_WITNESS service bit\n\nService bit logic by Nicolas Dorier.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-16T23:20:49Z"
      },
      "sha": "ac6886d30d21501300ec287e9cc4d79a48301a9f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjlkNGQzNGNhYjc4MzRmOTA1MDI5M2FiOTBhODdhMTliZDhmZjYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "tree": {
        "sha": "981ceba093fa81898dbc80a049be0fda5ed73f76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/981ceba093fa81898dbc80a049be0fda5ed73f76"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac6886d30d21501300ec287e9cc4d79a48301a9f",
          "sha": "ac6886d30d21501300ec287e9cc4d79a48301a9f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac6886d30d21501300ec287e9cc4d79a48301a9f"
        }
      ],
      "message": "Witness commitment validation\n\nIncludes a fix by Suhas Daftuar",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:42:38Z"
      },
      "sha": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzg3YmUxMjZmNGJhNDIwYWRiY2E0NzE5MGIwMjlmMGYxMDI5Njcw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c87be126f4ba420adbca47190b029f0f1029670",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2c87be126f4ba420adbca47190b029f0f1029670",
      "tree": {
        "sha": "31eb1bb7e6ee89a41fe4fafcc22f066af2546ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31eb1bb7e6ee89a41fe4fafcc22f066af2546ac9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
          "sha": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9d4d34cab7834f9050293ab90a87a19bd8ff61"
        }
      ],
      "message": "Script validation logic for witnesses",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-08T00:16:45Z"
      },
      "sha": "2c87be126f4ba420adbca47190b029f0f1029670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTQ3ODA1MmNhMzIyMmQxM2NlMzY0NmRkMTUyZWJjZjI3ZjA3ZTc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e478052ca3222d13ce3646dd152ebcf27f07e76",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e478052ca3222d13ce3646dd152ebcf27f07e76",
      "tree": {
        "sha": "246d5b2b2224e09b3549e012ed08a353582b6093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/246d5b2b2224e09b3549e012ed08a353582b6093"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c87be126f4ba420adbca47190b029f0f1029670",
          "sha": "2c87be126f4ba420adbca47190b029f0f1029670",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2c87be126f4ba420adbca47190b029f0f1029670"
        }
      ],
      "message": "Enable SCRIPT_VERIFY_WITNESS for mempool transactions",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T00:04:56Z"
      },
      "sha": "1e478052ca3222d13ce3646dd152ebcf27f07e76"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2YzNGY3OTNmZDllNzJkZmExOGQyZGMwNDk0MDJhZjBjZDIxN2Vh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97f34f793fd9e72dfa18d2dc049402af0cd217ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/97f34f793fd9e72dfa18d2dc049402af0cd217ea",
      "tree": {
        "sha": "ab9ef1627963607d31d9274e7fc48e0e30464fcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab9ef1627963607d31d9274e7fc48e0e30464fcc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e478052ca3222d13ce3646dd152ebcf27f07e76",
          "sha": "1e478052ca3222d13ce3646dd152ebcf27f07e76",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1e478052ca3222d13ce3646dd152ebcf27f07e76"
        }
      ],
      "message": "Activate script consensus rules through BIP9",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T15:27:00Z"
      },
      "sha": "97f34f793fd9e72dfa18d2dc049402af0cd217ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTgwMjFmYWM3MTM4ZDQyYWU2ZmNjZDMwNWU5NThlZjJmMWFjYjg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a8021fac7138d42ae6fccd305e958ef2f1acb88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6a8021fac7138d42ae6fccd305e958ef2f1acb88",
      "tree": {
        "sha": "d55a2f1a4ade63774e785a58bafadc7444ddb6eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d55a2f1a4ade63774e785a58bafadc7444ddb6eb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97f34f793fd9e72dfa18d2dc049402af0cd217ea",
          "sha": "97f34f793fd9e72dfa18d2dc049402af0cd217ea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/97f34f793fd9e72dfa18d2dc049402af0cd217ea"
        }
      ],
      "message": "Only download blocks from witness peers after fork",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-29T01:37:54Z"
      },
      "sha": "6a8021fac7138d42ae6fccd305e958ef2f1acb88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzFlNDVlZjA0NTg0MzI4ZDc5MWRiYTE4YzQ3YzE0ZDhkYTQ1ZjEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/271e45ef04584328d791dba18c47c14d8da45f13",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/271e45ef04584328d791dba18c47c14d8da45f13",
      "tree": {
        "sha": "9e08d02a6f901845556a78a49b1254b7595b77bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e08d02a6f901845556a78a49b1254b7595b77bb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a8021fac7138d42ae6fccd305e958ef2f1acb88",
          "sha": "6a8021fac7138d42ae6fccd305e958ef2f1acb88",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6a8021fac7138d42ae6fccd305e958ef2f1acb88"
        }
      ],
      "message": "Observe input amounts: verification",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:51:29Z"
      },
      "sha": "271e45ef04584328d791dba18c47c14d8da45f13"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzc0MTM5Yjg3ZDk2YTNhYjQ1ODIzNTFkZGY1MmY1N2I4NWFlZTNk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d374139b87d96a3ab4582351ddf52f57b85aee3d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d374139b87d96a3ab4582351ddf52f57b85aee3d",
      "tree": {
        "sha": "96e44496af1ad7170a841bd03559200ab17baaab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96e44496af1ad7170a841bd03559200ab17baaab"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/271e45ef04584328d791dba18c47c14d8da45f13",
          "sha": "271e45ef04584328d791dba18c47c14d8da45f13",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/271e45ef04584328d791dba18c47c14d8da45f13"
        }
      ],
      "message": "Add signature version 1 with updated sighash\n\nIncludes simplifications by Eric Lombrozo.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-27T18:49:08Z"
      },
      "sha": "d374139b87d96a3ab4582351ddf52f57b85aee3d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmM2ZGMzZWY4MDFjYjM0YjJlMDJmODE0OTg4ZDc3NmMwNzE0M2Qx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92c6dc3ef801cb34b2e02f814988d776c07143d1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/92c6dc3ef801cb34b2e02f814988d776c07143d1",
      "tree": {
        "sha": "2a82dc5c0ddf4d0d2a36325242faf73b56148cfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a82dc5c0ddf4d0d2a36325242faf73b56148cfc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d374139b87d96a3ab4582351ddf52f57b85aee3d",
          "sha": "d374139b87d96a3ab4582351ddf52f57b85aee3d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d374139b87d96a3ab4582351ddf52f57b85aee3d"
        }
      ],
      "message": "Return witness data\n\nIncludes RPC field name changes by Luke-jr.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:20Z"
      },
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-01-22T17:46:11Z"
      },
      "sha": "92c6dc3ef801cb34b2e02f814988d776c07143d1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTU1MjE4NTRlZmQ1ODA0NDMzZDU3YWFmNjlmNDY2NzZlNGI2ZWZj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/395521854efd5804433d57aaf69f46676e4b6efc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/395521854efd5804433d57aaf69f46676e4b6efc",
      "tree": {
        "sha": "ab36b3a7d553a9a4ab7eeb9461d4c5b26e064d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab36b3a7d553a9a4ab7eeb9461d4c5b26e064d07"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92c6dc3ef801cb34b2e02f814988d776c07143d1",
          "sha": "92c6dc3ef801cb34b2e02f814988d776c07143d1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/92c6dc3ef801cb34b2e02f814988d776c07143d1"
        }
      ],
      "message": "Implement block size/sigop cost rules, limits, and GBT support\n\nIncludes changes by Suhas Daftuar and Luke-jr.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:27:20Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-03T17:54:50Z"
      },
      "sha": "395521854efd5804433d57aaf69f46676e4b6efc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTQ3Yjk4NTM2MmNhOTM0OWUzOTFlZDZmZWNjNDg3ZDYyNjE2Yjg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a47b985362ca9349e391ed6fecc487d62616b87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47b985362ca9349e391ed6fecc487d62616b87",
      "tree": {
        "sha": "00ebb023d601e597926a410baeb55a07d369ae82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00ebb023d601e597926a410baeb55a07d369ae82"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/395521854efd5804433d57aaf69f46676e4b6efc",
          "sha": "395521854efd5804433d57aaf69f46676e4b6efc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/395521854efd5804433d57aaf69f46676e4b6efc"
        }
      ],
      "message": "Add command line options to loosen mempool acceptance rules",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:28:35Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-02T05:18:34Z"
      },
      "sha": "5a47b985362ca9349e391ed6fecc487d62616b87"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTczNTcxOWM0MzdhM2NkMTU2NjVlNTMzZTdkYjRiMzFlMjgwMzk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5735719c437a3cd15665e533e7db4b31e280397",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e5735719c437a3cd15665e533e7db4b31e280397",
      "tree": {
        "sha": "fdc96b2334e9b75df97a0d4f2e65962a4f7330dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdc96b2334e9b75df97a0d4f2e65962a4f7330dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a47b985362ca9349e391ed6fecc487d62616b87",
          "sha": "5a47b985362ca9349e391ed6fecc487d62616b87",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47b985362ca9349e391ed6fecc487d62616b87"
        }
      ],
      "message": "bitcoinconsensus: add method that accepts amount, and return error when verify_script receives VERIFY_WITNESS flag\n\nscript_tests: always test bitcoinconsensus_verify_script_with_amount if VERIFY_WITNESS isn't set\n\nRename internal method + make it static\n\ntrim bitcoinconsensus_ prefix\n\nAdd SERIALIZE_TRANSACTION_WITNESS flag",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "author": {
        "name": "Thomas Kerin",
        "email": "afk11@users.noreply.github.com",
        "date": "2016-01-24T16:29:39Z"
      },
      "sha": "e5735719c437a3cd15665e533e7db4b31e280397"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjM4NmMyNjRiYmZlM2I4MDY0ZjFlNTAzYmU2N2E3NzkwNmRiODg5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6386c264bbfe3b8064f1e503be67a77906db889",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a6386c264bbfe3b8064f1e503be67a77906db889",
      "tree": {
        "sha": "dac366a162e209e6ee60f1dbfca7355ba34954f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dac366a162e209e6ee60f1dbfca7355ba34954f4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5735719c437a3cd15665e533e7db4b31e280397",
          "sha": "e5735719c437a3cd15665e533e7db4b31e280397",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e5735719c437a3cd15665e533e7db4b31e280397"
        }
      ],
      "message": "Increase MAX_PROTOCOL_MESSAGE_LENGTH\n\nWitness blocks can be greater than 2MiB, but cannot be validly greater\nthan 4MB.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-01-18T02:41:42Z"
      },
      "sha": "a6386c264bbfe3b8064f1e503be67a77906db889"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjZjNmYxNmIzMDlkNjUwM2FlYWNhZjRjNTZiNTk2MzdmZWRjYzk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
      "tree": {
        "sha": "cd51635c327a722462faec5b23612448b418728c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd51635c327a722462faec5b23612448b418728c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6386c264bbfe3b8064f1e503be67a77906db889",
          "sha": "a6386c264bbfe3b8064f1e503be67a77906db889",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a6386c264bbfe3b8064f1e503be67a77906db889"
        }
      ],
      "message": "Add rewind logic to deal with post-fork software updates",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-18T16:20:12Z"
      },
      "sha": "1b6c6f16b309d6503aeacaf4c56b59637fedcc99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTFhMmZlZmY3NmJhMzc1MzY1M2Q2OTFiZGJmZmZkY2Y2Nzc0ZmEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/351a2feff76ba3753653d691bdbfffdcf6774fa2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/351a2feff76ba3753653d691bdbfffdcf6774fa2",
      "tree": {
        "sha": "cd51635c327a722462faec5b23612448b418728c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd51635c327a722462faec5b23612448b418728c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
          "sha": "1b6c6f16b309d6503aeacaf4c56b59637fedcc99",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1b6c6f16b309d6503aeacaf4c56b59637fedcc99"
        }
      ],
      "message": "--- [SEGWIT] begin: wallet ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:39Z"
      },
      "sha": "351a2feff76ba3753653d691bdbfffdcf6774fa2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmJlMDg1Y2FlZWNkMzNmNWM0YzlhMjdkNDk4MWY4NDg5Njg0NmI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abbe085caeecd33f5c4c9a27d4981f84896846b8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/abbe085caeecd33f5c4c9a27d4981f84896846b8",
      "tree": {
        "sha": "a3dfc705643adccd5501f53848dcc2f183fdd52b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3dfc705643adccd5501f53848dcc2f183fdd52b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/351a2feff76ba3753653d691bdbfffdcf6774fa2",
          "sha": "351a2feff76ba3753653d691bdbfffdcf6774fa2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/351a2feff76ba3753653d691bdbfffdcf6774fa2"
        }
      ],
      "message": "Witness script signing",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:29:04Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:54:58Z"
      },
      "sha": "abbe085caeecd33f5c4c9a27d4981f84896846b8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 633216667,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjMzMjE2NjY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633216667",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T16:29:15Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2ZlNTNmMzY0YjY0YmI4NTdlY2UyMmU4ZDRkZTFlZGQxYzIyZTJi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
      "tree": {
        "sha": "e7831c5f57603ff038bd5ff5e958172f4c2b4bab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7831c5f57603ff038bd5ff5e958172f4c2b4bab"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abbe085caeecd33f5c4c9a27d4981f84896846b8",
          "sha": "abbe085caeecd33f5c4c9a27d4981f84896846b8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/abbe085caeecd33f5c4c9a27d4981f84896846b8"
        }
      ],
      "message": "Add witness address RPCs (using P2SH)\n\nIncludes support for pushkeyhash wit v0 by Alex Morcos.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:03Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T00:13:08Z"
      },
      "sha": "c3fe53f364b64bb857ece22e8d4de1edd1c22e2b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzM4NWZhMWQzZjVmODU0MTk1NmNjYjM2Y2M0OGNiNmI0OGI4MGMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
      "tree": {
        "sha": "08b0404c1ac0cbc6517ab26c7aba3f1267c73a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b0404c1ac0cbc6517ab26c7aba3f1267c73a20"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
          "sha": "c3fe53f364b64bb857ece22e8d4de1edd1c22e2b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3fe53f364b64bb857ece22e8d4de1edd1c22e2b"
        }
      ],
      "message": "signrawtransaction can sign P2WSH",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:17Z"
      },
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-04-10T06:59:23Z"
      },
      "sha": "ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmQ2ZjhhNWQ5NThmMWZjYTExMWVkZmNlZDI4ZDdkNDc0MzIyOTA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2d6f8a5d958f1fca111edfced28d7d474322908",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d6f8a5d958f1fca111edfced28d7d474322908",
      "tree": {
        "sha": "08b0404c1ac0cbc6517ab26c7aba3f1267c73a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b0404c1ac0cbc6517ab26c7aba3f1267c73a20"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
          "sha": "ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ec385fa1d3f5f8541956ccb36cc48cb6b48b80c1"
        }
      ],
      "message": "--- [SEGWIT] begin: tests ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:17Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-31T12:43:46Z"
      },
      "sha": "a2d6f8a5d958f1fca111edfced28d7d474322908"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWQxZDExNDlhYTUwMjM2OTRjMTYyNzg2YmI3M2YzOTk3MDA5NjVl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ed1d1149aa5023694c162786bb73f399700965e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed1d1149aa5023694c162786bb73f399700965e",
      "tree": {
        "sha": "2642137390b2f0705948930840b2b09469d70ec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2642137390b2f0705948930840b2b09469d70ec4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2d6f8a5d958f1fca111edfced28d7d474322908",
          "sha": "a2d6f8a5d958f1fca111edfced28d7d474322908",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d6f8a5d958f1fca111edfced28d7d474322908"
        }
      ],
      "message": "Signing tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:17Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-20T15:22:47Z"
      },
      "sha": "2ed1d1149aa5023694c162786bb73f399700965e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzBiMTZmNDg3MDU5NzdjODViYmFkMDExOTlmNmNmY2ZiOTM4ZDRh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c0b16f48705977c85bbad01199f6cfcfb938d4a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3c0b16f48705977c85bbad01199f6cfcfb938d4a",
      "tree": {
        "sha": "c81bf8417a1f3ff153132a68d11ab80a9547da9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c81bf8417a1f3ff153132a68d11ab80a9547da9d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ed1d1149aa5023694c162786bb73f399700965e",
          "sha": "2ed1d1149aa5023694c162786bb73f399700965e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed1d1149aa5023694c162786bb73f399700965e"
        }
      ],
      "message": "Add rpc test for segwit\n\nAmended by Pieter Wuille to use multisig 1-of-1 for P2WSH tests, and BIP9\nbased switchover logic.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-02T05:18:47Z"
      },
      "sha": "3c0b16f48705977c85bbad01199f6cfcfb938d4a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDc0NmQyOGVmNDk0Y2Y0YzAzZDA2ZWY5MDE1ZTVkNWYyZGFjNjIx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24746d28ef494cf4c03d06ef9015e5d5f2dac621",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/24746d28ef494cf4c03d06ef9015e5d5f2dac621",
      "tree": {
        "sha": "8970d36308e5d65995fdb58438e259f772ea49f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8970d36308e5d65995fdb58438e259f772ea49f6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c0b16f48705977c85bbad01199f6cfcfb938d4a",
          "sha": "3c0b16f48705977c85bbad01199f6cfcfb938d4a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3c0b16f48705977c85bbad01199f6cfcfb938d4a"
        }
      ],
      "message": "Add transaction tests for segwit\n\n...with the four types of segwit payment, as well as all sighash combinaisons.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-04-03T14:48:50Z"
      },
      "sha": "24746d28ef494cf4c03d06ef9015e5d5f2dac621"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDA5YWQ2MmI4ZjRkZjAzZDQ0ZTMyYWE0ZjQ4NjkxYzBlMWQxYzk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
      "tree": {
        "sha": "376bccea2ea1e6ce782523306432178e460cee1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/376bccea2ea1e6ce782523306432178e460cee1f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24746d28ef494cf4c03d06ef9015e5d5f2dac621",
          "sha": "24746d28ef494cf4c03d06ef9015e5d5f2dac621",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/24746d28ef494cf4c03d06ef9015e5d5f2dac621"
        }
      ],
      "message": "Add segwit support to script_tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-04T14:01:27Z"
      },
      "sha": "3409ad62b8f4df03d44e32aa4f48691c0e1d1c97"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWZmY2MxOWFjNmE3OGVhNzVmODZhZDBhNDBkNTkyOGRkYTliYzRl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
      "tree": {
        "sha": "24d3e45380019cb37e395ecfa503f57978a1cb9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24d3e45380019cb37e395ecfa503f57978a1cb9a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
          "sha": "3409ad62b8f4df03d44e32aa4f48691c0e1d1c97",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3409ad62b8f4df03d44e32aa4f48691c0e1d1c97"
        }
      ],
      "message": "Autogeneration support for witness in script_tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T11:37:24Z"
      },
      "sha": "e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTZhYmU1NmRiZDBkNTdlMGU5ZTU5NTcwZTU2MGExZWUzYTc4MWJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
      "tree": {
        "sha": "4a2830bc70c67d87e68253afd27ee2c45dd0ba72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a2830bc70c67d87e68253afd27ee2c45dd0ba72"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
          "sha": "e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ffcc19ac6a78ea75f86ad0a40d5928dda9bc4e"
        }
      ],
      "message": "Update p2p test framework with segwit support\n\nmininode now supports witness transactions/blocks, blocktools\nhas a helper for adding witness commitments to blocks, and script\nhas a function to calculate hashes for signature under sigversion\n1, used by segwit.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-04-09T01:02:24Z"
      },
      "sha": "5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjUzOWY5YmZlNGU5NmE5YjMwZmZkYzg3NGFhODBlNDMwOGM5ZGVj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "tree": {
        "sha": "cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
          "sha": "5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6abe56dbd0d57e0e9e59570e560a1ee3a781bd"
        }
      ],
      "message": "P2P test for segwit\n\nRebased by Pieter Wuille",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-19T16:42:18Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-04-09T01:03:45Z"
      },
      "sha": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 633233835,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjMzMjMzODM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633233835",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T16:42:36Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwMDk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 212066524,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjA2NjUyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212066524",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T18:51:43Z",
      "updated_at": "2016-04-19T18:52:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Created pull request https://github.com/sipa/bitcoin/pull/75 on sipa's repository against this branch. Explanation of the proposed change:\n\n> The witness root is allowed to be placed at an arbitrary position up to seven layers deep in a Merkle tree structure. The witness nonce is now the branch through the commitment tree to the witness root, and a single byte is added to the commitment output specifying this path in compact form. This allows other consensus commitments to be added in the future with a minimal number of bytes and without committing at this time for a certain position for the segwit branch within the tree.\n> \n> In addition, switch to fast Merkle trees for witness. A fast Merkle branch uses midstate to perform a single SHA-256 compression per branch, and is not vulnerable to CVE-2012-2459. It produces different hashes though, so can only be used for new hash trees going forward.\n",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212066524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "labeled",
      "id": 633420159,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDYzMzQyMDE1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/633420159",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T18:54:09Z",
      "label": {
        "name": "Consensus",
        "color": "009800"
      }
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwMTI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 212079865,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjA3OTg2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212079865",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-19T19:31:35Z",
      "updated_at": "2016-04-19T19:31:35Z",
      "author_association": "MEMBER",
      "body": "See sipa#76 for fix to CInv::GetCommand\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212079865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 212190166,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjE5MDE2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212190166",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T01:03:19Z",
      "updated_at": "2016-04-20T01:03:19Z",
      "author_association": "NONE",
      "body": "Ayayay... a third of the original client's source base. I assume the items left to do will be committed to this PR #7910 ?\n",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212190166",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwMTY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 212383627,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjM4MzYyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212383627",
      "actor": {
        "login": "LongShao007",
        "id": 7669610,
        "node_id": "MDQ6VXNlcjc2Njk2MTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7669610?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LongShao007",
        "html_url": "https://github.com/LongShao007",
        "followers_url": "https://api.github.com/users/LongShao007/followers",
        "following_url": "https://api.github.com/users/LongShao007/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LongShao007/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LongShao007/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LongShao007/subscriptions",
        "organizations_url": "https://api.github.com/users/LongShao007/orgs",
        "repos_url": "https://api.github.com/users/LongShao007/repos",
        "events_url": "https://api.github.com/users/LongShao007/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LongShao007/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T11:10:11Z",
      "updated_at": "2016-04-20T11:14:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "function UpdateUncommitedBlockStructures redefine in main.h\n\n> +\n>  +void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex\\* pindexPrev, const Consensus::Params& consensusParams);\n>  +\n>  +/*\\* Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. _/\n>  +void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex_ pindexPrev, const Consensus::Params& consensusParams);\n>  +\n\nsee [sipa#78](https://github.com/sipa/bitcoin/pull/78)\n",
      "user": {
        "login": "LongShao007",
        "id": 7669610,
        "node_id": "MDQ6VXNlcjc2Njk2MTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7669610?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LongShao007",
        "html_url": "https://github.com/LongShao007",
        "followers_url": "https://api.github.com/users/LongShao007/followers",
        "following_url": "https://api.github.com/users/LongShao007/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LongShao007/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LongShao007/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LongShao007/subscriptions",
        "organizations_url": "https://api.github.com/users/LongShao007/orgs",
        "repos_url": "https://api.github.com/users/LongShao007/repos",
        "events_url": "https://api.github.com/users/LongShao007/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LongShao007/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212383627",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 212473734,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjQ3MzczNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212473734",
      "actor": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T15:18:13Z",
      "updated_at": "2016-04-20T15:18:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "I can sometimes repeat failed test (https://travis-ci.org/bitcoin/bitcoin/jobs/124242358#L4152) even on master - `wallet.py`, so it seems to be irrelevant to this PR.\n",
      "user": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212473734",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 212474862,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjQ3NDg2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212474862",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T15:21:06Z",
      "updated_at": "2016-04-20T15:21:06Z",
      "author_association": "MEMBER",
      "body": "Jup, since we are aware of the issue, this might be a good time to disable this specific test.\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212474862",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 212490581,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjQ5MDU4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212490581",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T16:02:20Z",
      "updated_at": "2016-04-20T16:02:20Z",
      "author_association": "MEMBER",
      "body": "@paveljanik Thanks, that was driving me crazy yesterday while trying to figure out wtf it has to do with segwit. Great to know it's not related.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212490581",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 634777527,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM0Nzc3NTI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/634777527",
      "actor": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T16:02:20Z"
    },
    {
      "event": "subscribed",
      "id": 634777528,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzNDc3NzUyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/634777528",
      "actor": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T16:02:20Z"
    },
    {
      "event": "commented",
      "id": 212494016,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjQ5NDAxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/212494016",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T16:10:50Z",
      "updated_at": "2016-04-20T16:10:50Z",
      "author_association": "MEMBER",
      "body": "@theuni 3rd retry of Travis, and now it succeeded. Perhaps just bad luck...\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-212494016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 634789313,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM0Nzg5MzEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/634789313",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T16:10:50Z"
    },
    {
      "event": "subscribed",
      "id": 634789314,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzNDc4OTMxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/634789314",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-20T16:10:50Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwMjY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwMzA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwMzM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwMzc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNDA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNDQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNDc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNTA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNTI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNTY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNTk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNjE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNjU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNjk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNzM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmIwYTgzZDQwZjU4YWFjMWMwZDQ2YzViZDJjNjFjYjBmYzdkNTIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
      "tree": {
        "sha": "cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdbacc7eb4e7edae3ae506d49fb59f1cf56b4c60"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
          "sha": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T09:52:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T09:52:26Z"
      },
      "sha": "cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjJiZmNhZGQ4MzMxNjBhMGM1MDRmN2Y5ZTY0NjE3NjQxZThhOGE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
      "tree": {
        "sha": "aefe8e8ab563336b92c98e579e2c058fcf393457",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aefe8e8ab563336b92c98e579e2c058fcf393457"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
          "sha": "cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb0a83d40f58aac1c0d46c5bd2c61cb0fc7d522"
        }
      ],
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: use int64_t for sigopcost everywhere",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:46Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:04:26Z"
      },
      "sha": "bb2bfcadd833160a0c504f7f9e64617641e8a8a9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGMxNTI3OWY1OTcxOGEwZDI1ZDdiOWQwYWQ2ZjQyNWNkNDM3MzA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64c15279f59718a0d25d7b9d0ad6f425cd437305",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/64c15279f59718a0d25d7b9d0ad6f425cd437305",
      "tree": {
        "sha": "6fdfc0a3c79fc28e449aaef9636c962862793aaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fdfc0a3c79fc28e449aaef9636c962862793aaf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
          "sha": "bb2bfcadd833160a0c504f7f9e64617641e8a8a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bb2bfcadd833160a0c504f7f9e64617641e8a8a9"
        }
      ],
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: update block cost comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:18:16Z"
      },
      "sha": "64c15279f59718a0d25d7b9d0ad6f425cd437305"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzc0MWY1MjUwMTMwMTllMDEyZjI4N2Y5OGVhMzI1YjI4ZWJiYTY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc741f525013019e012f287f98ea325b28ebba64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc741f525013019e012f287f98ea325b28ebba64",
      "tree": {
        "sha": "3dce9e8c142a759362c5446a6366046ef9108481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dce9e8c142a759362c5446a6366046ef9108481"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64c15279f59718a0d25d7b9d0ad6f425cd437305",
          "sha": "64c15279f59718a0d25d7b9d0ad6f425cd437305",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/64c15279f59718a0d25d7b9d0ad6f425cd437305"
        }
      ],
      "message": "fixup Add segregated witness transaction serialization: comments",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:24:10Z"
      },
      "sha": "cc741f525013019e012f287f98ea325b28ebba64"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjgxNzlmNGE3ZTc1ZGNhM2NiODk5N2Y1Y2FlZDBlYWFiY2EzNjQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28179f4a7e75dca3cb8997f5caed0eaabca3641",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c28179f4a7e75dca3cb8997f5caed0eaabca3641",
      "tree": {
        "sha": "18055ef808264906b63e5a6b3efb4052b55ca81c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18055ef808264906b63e5a6b3efb4052b55ca81c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc741f525013019e012f287f98ea325b28ebba64",
          "sha": "cc741f525013019e012f287f98ea325b28ebba64",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cc741f525013019e012f287f98ea325b28ebba64"
        }
      ],
      "message": "fixup Update p2p test framework with segwit support: fix comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:28:34Z"
      },
      "sha": "c28179f4a7e75dca3cb8997f5caed0eaabca3641"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTVkYTliZDBiYzMyMmYxMzRlOTgxNzQxNWRhMjgxYTc4OTk1ZTI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a5da9bd0bc322f134e9817415da281a78995e28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6a5da9bd0bc322f134e9817415da281a78995e28",
      "tree": {
        "sha": "cc2561a6ca89d7491db004b6eee934cdb2932b2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc2561a6ca89d7491db004b6eee934cdb2932b2d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28179f4a7e75dca3cb8997f5caed0eaabca3641",
          "sha": "c28179f4a7e75dca3cb8997f5caed0eaabca3641",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c28179f4a7e75dca3cb8997f5caed0eaabca3641"
        }
      ],
      "message": "fixup Witness commitment validation: list the mentioned BIPs",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:33:17Z"
      },
      "sha": "6a5da9bd0bc322f134e9817415da281a78995e28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGUwMTM1NjAxMjNiNWMyZjM1Y2U2YmYwYzk1YmVhNDU0YWRkMDAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88e013560123b5c2f35ce6bf0c95bea454add000",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/88e013560123b5c2f35ce6bf0c95bea454add000",
      "tree": {
        "sha": "3446e2d1f71c9481582861e440c3e8d6d9aa0873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3446e2d1f71c9481582861e440c3e8d6d9aa0873"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a5da9bd0bc322f134e9817415da281a78995e28",
          "sha": "6a5da9bd0bc322f134e9817415da281a78995e28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6a5da9bd0bc322f134e9817415da281a78995e28"
        }
      ],
      "message": "fixup Add command line options to loosen mempool acceptance rules: simplify comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:11:51Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:36:43Z"
      },
      "sha": "88e013560123b5c2f35ce6bf0c95bea454add000"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTYwZmFlYTc3ODUzZDgyNTk4NDVmZDRhNjQ5ZTc1ZDUyZDExMjE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da60faea77853d8259845fd4a649e75d52d11218",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/da60faea77853d8259845fd4a649e75d52d11218",
      "tree": {
        "sha": "66a8c41e27b6303a49bf657022c8406c45de2109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66a8c41e27b6303a49bf657022c8406c45de2109"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88e013560123b5c2f35ce6bf0c95bea454add000",
          "sha": "88e013560123b5c2f35ce6bf0c95bea454add000",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/88e013560123b5c2f35ce6bf0c95bea454add000"
        }
      ],
      "message": "fixup Witness commitment validation: factor out GetWitnessCommitmentPos",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:42:23Z"
      },
      "sha": "da60faea77853d8259845fd4a649e75d52d11218"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjgyN2JlYWY4MDNlNWFjZWU4MjRjMzZjMDAxNDI5YWZhNWRkN2Ew",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f827beaf803e5acee824c36c001429afa5dd7a0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4f827beaf803e5acee824c36c001429afa5dd7a0",
      "tree": {
        "sha": "45ac71156940c8dc2808d7e4d27e57c72d31d8ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45ac71156940c8dc2808d7e4d27e57c72d31d8ae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da60faea77853d8259845fd4a649e75d52d11218",
          "sha": "da60faea77853d8259845fd4a649e75d52d11218",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/da60faea77853d8259845fd4a649e75d52d11218"
        }
      ],
      "message": "fixup Witness commitment validation: fix typo in comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:38Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:44:18Z"
      },
      "sha": "4f827beaf803e5acee824c36c001429afa5dd7a0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNThmNDk1ODgyNzZjYmFiM2I3MGQ3ZTc3YjM2MzU4ZDlkZGNkZjU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/058f49588276cbab3b70d7e77b36358d9ddcdf58",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/058f49588276cbab3b70d7e77b36358d9ddcdf58",
      "tree": {
        "sha": "1ce6daf3e4192ba2a1a9c7ca9805282f9b1536ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ce6daf3e4192ba2a1a9c7ca9805282f9b1536ee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f827beaf803e5acee824c36c001429afa5dd7a0",
          "sha": "4f827beaf803e5acee824c36c001429afa5dd7a0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4f827beaf803e5acee824c36c001429afa5dd7a0"
        }
      ],
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: improve GBT help",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:38Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:46:22Z"
      },
      "sha": "058f49588276cbab3b70d7e77b36358d9ddcdf58"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWU3YTk1Y2U1OWIwMTlmMjFmYTcyZDY1OGFjMDNlMTQyMDI2NjVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e7a95ce59b019f21fa72d658ac03e14202665a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e7a95ce59b019f21fa72d658ac03e14202665a",
      "tree": {
        "sha": "5f1ce70fbac950367d50e2454e18f048eccd34db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f1ce70fbac950367d50e2454e18f048eccd34db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/058f49588276cbab3b70d7e77b36358d9ddcdf58",
          "sha": "058f49588276cbab3b70d7e77b36358d9ddcdf58",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/058f49588276cbab3b70d7e77b36358d9ddcdf58"
        }
      ],
      "message": "fixup Add witness address RPCs (using P2SH): test hex & wallet available",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:12:38Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T10:49:23Z"
      },
      "sha": "c1e7a95ce59b019f21fa72d658ac03e14202665a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmU2MzkxOTIyMWQwNDNjZDVkZDc5NmEwNTVjM2ZlNGZjNDRmMzg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbe63919221d043cd5dd796a055c3fe4fc44f387",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dbe63919221d043cd5dd796a055c3fe4fc44f387",
      "tree": {
        "sha": "1861ea9ee1b1a3b715f616c3e501c128ff0c817e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1861ea9ee1b1a3b715f616c3e501c128ff0c817e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e7a95ce59b019f21fa72d658ac03e14202665a",
          "sha": "c1e7a95ce59b019f21fa72d658ac03e14202665a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e7a95ce59b019f21fa72d658ac03e14202665a"
        }
      ],
      "message": "fixup Add segregated witness transaction serialization: revert extformat-if-empty-vin",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:24:52Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:10:46Z"
      },
      "sha": "dbe63919221d043cd5dd796a055c3fe4fc44f387"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2Q3NDAyYzJjNTVjMjE2ZjJkNGVmOTA1ZDliMThlOWEwOGFkNDAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
      "tree": {
        "sha": "71c4d34021472a644895323390554cb7f1872dc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71c4d34021472a644895323390554cb7f1872dc9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbe63919221d043cd5dd796a055c3fe4fc44f387",
          "sha": "dbe63919221d043cd5dd796a055c3fe4fc44f387",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dbe63919221d043cd5dd796a055c3fe4fc44f387"
        }
      ],
      "message": "tidy up CInv::GetCommand",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:38:03Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-04-19T18:33:59Z"
      },
      "sha": "97d7402c2c55c216f2d4ef905d9b18e9a08ad402"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGY2MTIzN2Q2MDIyM2E2OTRhMGI4YzYzZjdiOTBkMmQxNzUxZjg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0f61237d60223a694a0b8c63f7b90d2d1751f87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f61237d60223a694a0b8c63f7b90d2d1751f87",
      "tree": {
        "sha": "87eb7cef976560ef804b74c15cb667a33186a1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87eb7cef976560ef804b74c15cb667a33186a1d4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
          "sha": "97d7402c2c55c216f2d4ef905d9b18e9a08ad402",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/97d7402c2c55c216f2d4ef905d9b18e9a08ad402"
        }
      ],
      "message": "fixup Witness commitment validation: function UpdateUncommitedBlockStructures redefine\n\nfunction UpdateUncommitedBlockStructures defined twice.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:52:59Z"
      },
      "author": {
        "name": "LongShao007",
        "email": "007longshao@gmail.com",
        "date": "2016-04-20T11:03:50Z"
      },
      "sha": "f0f61237d60223a694a0b8c63f7b90d2d1751f87"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjEzNTk5NWQ0Y2M4ODBkMmIwZWZhNjBkZmIwZjhkYmRkYjBlNDc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
      "tree": {
        "sha": "4f7c5030a81fe2ab0a163c8e26c789969562d1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f7c5030a81fe2ab0a163c8e26c789969562d1d4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0f61237d60223a694a0b8c63f7b90d2d1751f87",
          "sha": "f0f61237d60223a694a0b8c63f7b90d2d1751f87",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f61237d60223a694a0b8c63f7b90d2d1751f87"
        }
      ],
      "message": "[qa] Use integer division, byte strings properly\n\nAlso refactor some code and add segwit.py to the pulltester",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:53:09Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-20T18:53:12Z"
      },
      "sha": "a6135995d4cc880d2b0efa60dfb0f8dbddb0e477"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDZiNmUyODhkYjU2MzU0MmRjZWM1ZmNlNzlhYmY5ZDBhYzI4YWQw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
      "tree": {
        "sha": "bd2c8f925fe1235cb6947259375b2cf823f0a2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd2c8f925fe1235cb6947259375b2cf823f0a2ed"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
          "sha": "a6135995d4cc880d2b0efa60dfb0f8dbddb0e477",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a6135995d4cc880d2b0efa60dfb0f8dbddb0e477"
        }
      ],
      "message": "fixup Add segregated witness transaction serialization: add missing witness flags",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:53:09Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T11:51:29Z"
      },
      "sha": "5d6b6e288db563542dcec5fce79abf9d0ac28ad0"
    },
    {
      "event": "commented",
      "id": 213730697,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzczMDY5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/213730697",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T12:17:47Z",
      "updated_at": "2016-04-23T12:18:06Z",
      "author_association": "MEMBER",
      "body": "I have included fixup commits for almost all comments, as well as a merge commit at the end to keep the result testable and show what changes are needed to rebase on master.\n\nI intend to only overwrite the merge commit at the end, and otherwise only append fixup commits (and where possible, list which commit they modify). I will also keep the broken-down commit list on https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-211998958 up to date with every push.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-213730697",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 638613745,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM4NjEzNzQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613745",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "subscribed",
      "id": 638613746,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzODYxMzc0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613746",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "mentioned",
      "id": 638613747,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM4NjEzNzQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613747",
      "actor": {
        "login": "LongShao007",
        "id": 7669610,
        "node_id": "MDQ6VXNlcjc2Njk2MTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7669610?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LongShao007",
        "html_url": "https://github.com/LongShao007",
        "followers_url": "https://api.github.com/users/LongShao007/followers",
        "following_url": "https://api.github.com/users/LongShao007/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LongShao007/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LongShao007/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LongShao007/subscriptions",
        "organizations_url": "https://api.github.com/users/LongShao007/orgs",
        "repos_url": "https://api.github.com/users/LongShao007/repos",
        "events_url": "https://api.github.com/users/LongShao007/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LongShao007/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "subscribed",
      "id": 638613748,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzODYxMzc0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613748",
      "actor": {
        "login": "LongShao007",
        "id": 7669610,
        "node_id": "MDQ6VXNlcjc2Njk2MTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7669610?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LongShao007",
        "html_url": "https://github.com/LongShao007",
        "followers_url": "https://api.github.com/users/LongShao007/followers",
        "following_url": "https://api.github.com/users/LongShao007/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LongShao007/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LongShao007/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LongShao007/subscriptions",
        "organizations_url": "https://api.github.com/users/LongShao007/orgs",
        "repos_url": "https://api.github.com/users/LongShao007/repos",
        "events_url": "https://api.github.com/users/LongShao007/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LongShao007/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "mentioned",
      "id": 638613749,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM4NjEzNzQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613749",
      "actor": {
        "login": "SergioDemianLerner",
        "id": 1752347,
        "node_id": "MDQ6VXNlcjE3NTIzNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SergioDemianLerner",
        "html_url": "https://github.com/SergioDemianLerner",
        "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
        "following_url": "https://api.github.com/users/SergioDemianLerner/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SergioDemianLerner/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SergioDemianLerner/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
        "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
        "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
        "events_url": "https://api.github.com/users/SergioDemianLerner/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "subscribed",
      "id": 638613750,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzODYxMzc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613750",
      "actor": {
        "login": "SergioDemianLerner",
        "id": 1752347,
        "node_id": "MDQ6VXNlcjE3NTIzNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SergioDemianLerner",
        "html_url": "https://github.com/SergioDemianLerner",
        "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
        "following_url": "https://api.github.com/users/SergioDemianLerner/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SergioDemianLerner/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SergioDemianLerner/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
        "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
        "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
        "events_url": "https://api.github.com/users/SergioDemianLerner/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "mentioned",
      "id": 638613751,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM4NjEzNzUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613751",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "subscribed",
      "id": 638613752,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzODYxMzc1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613752",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "mentioned",
      "id": 638613753,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM4NjEzNzUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613753",
      "actor": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "subscribed",
      "id": 638613754,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzODYxMzc1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613754",
      "actor": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "mentioned",
      "id": 638613755,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjM4NjEzNzU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613755",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "subscribed",
      "id": 638613756,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDYzODYxMzc1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/638613756",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-23T13:11:40Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNzY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwNzk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 214396188,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDM5NjE4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/214396188",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-25T15:30:28Z",
      "updated_at": "2016-04-25T15:30:28Z",
      "author_association": "MEMBER",
      "body": "I think there are a couple of more places that need the SERIALIZE_TRANSACTION_WITNESS flag: `rest_tx` and `rest_block` in rest.cpp, `CDB:Rewrite` in db.cpp, and I wasn't sure about `CWalletDB::Recover` in walletdb.cpp.\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-214396188",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwODI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwODQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwODU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwODg6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwOTE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwOTM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIwOTc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMDM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMDY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "mentioned",
      "id": 643629038,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjQzNjI5MDM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/643629038",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-27T23:17:35Z"
    },
    {
      "event": "subscribed",
      "id": 643629039,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY0MzYyOTAzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/643629039",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-27T23:17:35Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2M2MTNjM2I3ZWE4NTBiYmNjNTdiYmM3MGY3ZmE5ZTQxZmE1NzI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
      "tree": {
        "sha": "bd2c8f925fe1235cb6947259375b2cf823f0a2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd2c8f925fe1235cb6947259375b2cf823f0a2ed"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
          "sha": "5d6b6e288db563542dcec5fce79abf9d0ac28ad0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5d6b6e288db563542dcec5fce79abf9d0ac28ad0"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 2 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:14Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:06Z"
      },
      "sha": "77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODg5YmVjNDcxMGJhODQ1OWViM2UxOTFkNWRhMzI4MzY4ZGI2Y2Jm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f889bec4710ba8459eb3e191d5da328368db6cbf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f889bec4710ba8459eb3e191d5da328368db6cbf",
      "tree": {
        "sha": "f4d9a556436889e9bf2e991380ae910eb1d89479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d9a556436889e9bf2e991380ae910eb1d89479"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
          "sha": "77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/77c613c3b7ea850bbcc57bbc70f7fa9e41fa5728"
        }
      ],
      "message": "fixup Add segregated witness transaction serialization: add negative flag\n\nThis is the beginning of a transition to using an opt-out NO_WITNESS flag\nrather than an opt-in WITNESS flag. Having them temporary both at the same\ntime means we can do sanity checking in every transaction serialization to\nbe sure exactly one of both flags is set.\n\nMost of the changes in this commit will be undone when the positive flag is\nremoved.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:14Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T15:13:36Z"
      },
      "sha": "f889bec4710ba8459eb3e191d5da328368db6cbf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGRhYmU0MTg1N2Y4YmE0ZDgxNTA3NzcwZjhlNTQxNjg5MWU0YWMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ddabe41857f8ba4d81507770f8e5416891e4ac1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddabe41857f8ba4d81507770f8e5416891e4ac1",
      "tree": {
        "sha": "f9f0eb76d76c680379fad37f60d6d414e986b9a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9f0eb76d76c680379fad37f60d6d414e986b9a0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f889bec4710ba8459eb3e191d5da328368db6cbf",
          "sha": "f889bec4710ba8459eb3e191d5da328368db6cbf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f889bec4710ba8459eb3e191d5da328368db6cbf"
        }
      ],
      "message": "fixup Add segregated witness transaction serialization: test with no inputs no longer possible\n\nThe base commit for segwit serialization uses extended format for transactions without inputs.\nIn \"fixup Add segregated witness transaction serialization: revert extformat-if-empty-vin\" this\nwas changed, but the test for CheckTransaction with no inputs was not removed. Do that now.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:14Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T22:37:47Z"
      },
      "sha": "3ddabe41857f8ba4d81507770f8e5416891e4ac1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzQ0YTFlZjEzYTZmMDZhODk1MmQ3ODBiZDJmNGM0YjI0NjQ0Yjc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
      "tree": {
        "sha": "4041022cd8d019996299546985440e7cf1ddcfdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4041022cd8d019996299546985440e7cf1ddcfdc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ddabe41857f8ba4d81507770f8e5416891e4ac1",
          "sha": "3ddabe41857f8ba4d81507770f8e5416891e4ac1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddabe41857f8ba4d81507770f8e5416891e4ac1"
        }
      ],
      "message": "fixup Add segregated witness transaction serialization: deal with overwrite and inconsistencies",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T16:20:27Z"
      },
      "sha": "c744a1ef13a6f06a8952d780bd2f4c4b24644b76"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzA5NTk1MGZkZjNmMGJlZjM2YzFhMTAxY2RkMmYyMTQyMTk5NTI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47095950fdf3f0bef36c1a101cdd2f2142199527",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/47095950fdf3f0bef36c1a101cdd2f2142199527",
      "tree": {
        "sha": "d267972a17ec9adcb9cde86d64e02165691e59b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d267972a17ec9adcb9cde86d64e02165691e59b4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
          "sha": "c744a1ef13a6f06a8952d780bd2f4c4b24644b76",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c744a1ef13a6f06a8952d780bd2f4c4b24644b76"
        }
      ],
      "message": "fixup Witness commitment validation: revert adding of commitment in IncrementExtraNonce",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T15:19:42Z"
      },
      "sha": "47095950fdf3f0bef36c1a101cdd2f2142199527"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjJjYTgxZmM3NGVjYmVjN2ZiOTQ1YzAyNzA2ZTlkYzQ3ZjQ3YTFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
      "tree": {
        "sha": "81a178f69b2e9bc6649acde31532c881d1b306ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a178f69b2e9bc6649acde31532c881d1b306ae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47095950fdf3f0bef36c1a101cdd2f2142199527",
          "sha": "47095950fdf3f0bef36c1a101cdd2f2142199527",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/47095950fdf3f0bef36c1a101cdd2f2142199527"
        }
      ],
      "message": "fixup Witness commitment validation: correct comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T16:28:30Z"
      },
      "sha": "122ca81fc74ecbec7fb945c02706e9dc47f47a1d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGYzZTUxNTMwNmNmYmM4YzM5MTU3ZGI4ZGM2MTBmMWQ0OWNhNWZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
      "tree": {
        "sha": "afff6763270944053e8737a0e04478403eb7a182",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afff6763270944053e8737a0e04478403eb7a182"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
          "sha": "122ca81fc74ecbec7fb945c02706e9dc47f47a1d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/122ca81fc74ecbec7fb945c02706e9dc47f47a1d"
        }
      ],
      "message": "fixup Witness commitment validation: add comment about witness checking in miner",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T11:00:03Z"
      },
      "sha": "5df3e515306cfbc8c39157db8dc610f1d49ca5fd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmUxNjU2ODIzMTZjOWUzMThkNGZlMGM4M2Y2ZTA3OWIwNjIxOTg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36e165682316c9e318d4fe0c83f6e079b0621987",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/36e165682316c9e318d4fe0c83f6e079b0621987",
      "tree": {
        "sha": "1dbcb53039bfa0d5bf1e4463541e6e2dbc658bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dbcb53039bfa0d5bf1e4463541e6e2dbc658bf4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
          "sha": "5df3e515306cfbc8c39157db8dc610f1d49ca5fd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5df3e515306cfbc8c39157db8dc610f1d49ca5fd"
        }
      ],
      "message": "fixup Witness commitment validation: better validation error message",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:02:27Z"
      },
      "sha": "36e165682316c9e318d4fe0c83f6e079b0621987"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzI2NDAyMGQ3MjA1YzdmNGNmYmQyN2FhNDBlNmNjNjAyNTA2MzIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7264020d7205c7f4cfbd27aa40e6cc602506322",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f7264020d7205c7f4cfbd27aa40e6cc602506322",
      "tree": {
        "sha": "3b9b99bbe451ed18f19ed1140bf6d8a1618417a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b9b99bbe451ed18f19ed1140bf6d8a1618417a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36e165682316c9e318d4fe0c83f6e079b0621987",
          "sha": "36e165682316c9e318d4fe0c83f6e079b0621987",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/36e165682316c9e318d4fe0c83f6e079b0621987"
        }
      ],
      "message": "fixup Implement block size/sigop cost rules, limits, and GBT support: update comment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:00:15Z"
      },
      "sha": "f7264020d7205c7f4cfbd27aa40e6cc602506322"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjJjNTMxMTIzOWRmM2I4OGFlZWE1NGFlOGQxNmVmZGU2OTdiNmNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2c5311239df3b88aeea54ae8d16efde697b6ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2c5311239df3b88aeea54ae8d16efde697b6ca",
      "tree": {
        "sha": "30a0affb683d8fbf881f9e38b13bd255308ca4ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30a0affb683d8fbf881f9e38b13bd255308ca4ec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7264020d7205c7f4cfbd27aa40e6cc602506322",
          "sha": "f7264020d7205c7f4cfbd27aa40e6cc602506322",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f7264020d7205c7f4cfbd27aa40e6cc602506322"
        }
      ],
      "message": "fixup Enable SCRIPT_VERIFY_WITNESS for mempool transactions: do not reject/punish invalid witness orphans",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:08:49Z"
      },
      "sha": "cf2c5311239df3b88aeea54ae8d16efde697b6ca"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmI2ZTRlMjkzMGJkZjQxZDcwMjRlYTI3ZGJlZTdiMzhhZjE1MGY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
      "tree": {
        "sha": "062e314c4cda607263e2d78d49d42eda1245a68d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/062e314c4cda607263e2d78d49d42eda1245a68d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2c5311239df3b88aeea54ae8d16efde697b6ca",
          "sha": "cf2c5311239df3b88aeea54ae8d16efde697b6ca",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2c5311239df3b88aeea54ae8d16efde697b6ca"
        }
      ],
      "message": "fixup Return witness data: don't list nextblockhash twice",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:15:49Z"
      },
      "sha": "0fb6e4e2930bdf41d7024ea27dbee7b38af150f9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2QwZTZjZTIzZDY3ZjkzMjc0MjhiZDE2ZmFkNDRlY2YwOGI0MzM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
      "tree": {
        "sha": "d47a71dbfd698d8de9d35525b6b985e758edd75a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d47a71dbfd698d8de9d35525b6b985e758edd75a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
          "sha": "0fb6e4e2930bdf41d7024ea27dbee7b38af150f9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb6e4e2930bdf41d7024ea27dbee7b38af150f9"
        }
      ],
      "message": "[qa] mininode: Use hexlify wrapper from util",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-23T12:33:51Z"
      },
      "sha": "ccd0e6ce23d67f9327428bd16fad44ecf08b4338"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTYyY2I5NWU5YjczNTAwZWMwZjc1ODhhYzUyYjQwNzU1M2QwYmM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
      "tree": {
        "sha": "4f75ff34fb057191fe8938befe03912a41427bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f75ff34fb057191fe8938befe03912a41427bbd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
          "sha": "ccd0e6ce23d67f9327428bd16fad44ecf08b4338",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd0e6ce23d67f9327428bd16fad44ecf08b4338"
        }
      ],
      "message": "Implement RecursiveDynamicUsage for witness structures",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T22:00:24Z"
      },
      "sha": "3a62cb95e9b73500ec0f7588ac52b407553d0bc4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTQxZjBiODZmMWE3YWY3YzI0ZTEyNWQ3ODRmODNiMmQzZTdlMTRk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
      "tree": {
        "sha": "7161b6e698dbb8cd00f5ee72dff43484de7f1f5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7161b6e698dbb8cd00f5ee72dff43484de7f1f5d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
          "sha": "3a62cb95e9b73500ec0f7588ac52b407553d0bc4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a62cb95e9b73500ec0f7588ac52b407553d0bc4"
        }
      ],
      "message": "Use an enum for signature versions",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:24:15Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-27T23:50:27Z"
      },
      "sha": "a541f0b86f1a7af7c24e125d784f83b2d3e7e14d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 644236153,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjQ0MjM2MTUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/644236153",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-28T12:30:36Z"
    },
    {
      "event": "commented",
      "id": 215409199,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTQwOTE5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/215409199",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-28T12:32:15Z",
      "updated_at": "2016-04-28T12:32:15Z",
      "author_association": "MEMBER",
      "body": "Pushed a new batch of fixups.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-215409199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMDk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMTE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMTQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMTY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMTk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 216350091,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjM1MDA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/216350091",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-02T20:16:34Z",
      "updated_at": "2016-05-03T00:49:01Z",
      "author_association": "MEMBER",
      "body": "As requested in the last two IRC meetings, here's the coverage data for segwit (at 588da1e3a35c75c1d4cbe50b0224cca810db0bf0): https://dev.bitcoincore.org/cfields/post-segwit.coverage/\n\n~~It's missing branching data, and inlining throws off a few things, but I think it gives a good idea of what's being tested.~~ This data includes tests from test_bitcoin, the java pull-tester, and regular+extended rpc tests (minus pruning).\n\nA few interesting untested lines that jumped out at a glance:\nsrc/primitives/transaction.h:253\nsrc/primitives/transaction.h:309\n\nEdit: Updated with much more accurate info that now includes branching and auto-inlined funcs.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-216350091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 216429678,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjQyOTY3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/216429678",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-03T03:54:06Z",
      "updated_at": "2016-05-03T03:54:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "@theuni @sipa This cover both (to squash with my test commit): https://github.com/NicolasDorier/bitcoin/commit/ad366c56536019c180901194baa376d46052fb4a\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-216429678",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 648400875,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjQ4NDAwODc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/648400875",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-03T03:54:06Z"
    },
    {
      "event": "subscribed",
      "id": 648400876,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY0ODQwMDg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/648400876",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-03T03:54:06Z"
    },
    {
      "event": "mentioned",
      "id": 648400877,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjQ4NDAwODc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/648400877",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-03T03:54:06Z"
    },
    {
      "event": "subscribed",
      "id": 648400878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY0ODQwMDg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/648400878",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-03T03:54:06Z"
    },
    {
      "event": "commented",
      "id": 216720008,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjcyMDAwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/216720008",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-04T01:59:47Z",
      "updated_at": "2016-05-04T01:59:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "https://github.com/sipa/bitcoin/pull/81/ increases coverage by causing a `SCRIPT_ERR_WITNESS_MALLEATED_P2SH` error.\n",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-216720008",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 217070795,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzA3MDc5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217070795",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-05T03:38:52Z",
      "updated_at": "2016-05-05T05:55:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm sorry, I still cannot read this. That doesn't mean that I think the PR is not well written or it's incomplete.\nIt's just too much to review for me personally. Completely selfishly, I will promote a division of the PR in 2:\n\n1) do the most tested still-not-activate consensus changes in 0.12.99 as soon that part is ready.\nI don't think we're too far away from that, people have been really testing this since last time I wrote I line on it (which has been re-written a hundred times already).  I'm not trying to claim any credit I don't deserve (that would be the only \"sin\" I couldn't tollerate in any culture, I am really really tolerant for \"mew\" cultures I don't know about): I will review that.\n\nWhat about consensus -about-ready and the rest we merge next?\n\nThere shouldn't be many more fixes, specially in the consensus part, let's just separate review and belief. At this point, I bealieve...|\n\nTL:DR;\n\nIf this is not going to be merged soon, let's get the inoucuous consensus part firt, now, or...whenever, the timing is not important. That' my nit, I think.\n\nI simply cannot review consensus-ready changes and the future at the same time.\nSimple consensus with bip9 it's the review I'll do. Backport consensus rules, and then the actually useful stuff can join later too.\n\nEDIT Please, let's just do the consensus commits first without activation and ley's not encourage anyone to upgrade. Than we can review much more easily\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-217070795",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzg2NzFmM2QwMmVjZmNiMWZmZWZlNmExMDliNTRkNGU2NGFkMWJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
      "tree": {
        "sha": "7161b6e698dbb8cd00f5ee72dff43484de7f1f5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7161b6e698dbb8cd00f5ee72dff43484de7f1f5d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
          "sha": "a541f0b86f1a7af7c24e125d784f83b2d3e7e14d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a541f0b86f1a7af7c24e125d784f83b2d3e7e14d"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 3 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:19Z"
      },
      "sha": "f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTdlMjkyYmE2NGY1MGU0MmE3NWNlYWRiMzU5OTEzYTIyOGIyZGVm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba7e292ba64f50e42a75ceadb359913a228b2def",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7e292ba64f50e42a75ceadb359913a228b2def",
      "tree": {
        "sha": "595be9b2c71845bb80e8e30dbd3bcf0559692043",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/595be9b2c71845bb80e8e30dbd3bcf0559692043"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
          "sha": "f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f38671f3d02ecfcb1ffefe6a109b54d4e64ad1bc"
        }
      ],
      "message": "test: WITNESS flag must be used with P2SH flag\n\nWITNESS flag must be used with P2SH flag. If not, and if the script passes, the test will crash.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:36Z"
      },
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-05-04T04:06:54Z"
      },
      "sha": "ba7e292ba64f50e42a75ceadb359913a228b2def"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzgyMWU5MTBkMDEwNTI0MTg0NjlmNWExZjY1NmU4YzY1YjU3NTE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7821e910d01052418469f5a1f656e8c65b57514",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e7821e910d01052418469f5a1f656e8c65b57514",
      "tree": {
        "sha": "37761022542411f9ba070c7391470eb4c72d1561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37761022542411f9ba070c7391470eb4c72d1561"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba7e292ba64f50e42a75ceadb359913a228b2def",
          "sha": "ba7e292ba64f50e42a75ceadb359913a228b2def",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7e292ba64f50e42a75ceadb359913a228b2def"
        }
      ],
      "message": "BIP9 parameters for testnet",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:37:59Z"
      },
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-05-06T05:29:34Z"
      },
      "sha": "e7821e910d01052418469f5a1f656e8c65b57514"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjE0MmFmZDI4OTcwOGVjOWM2Yzk1MzRkNzA3MGNmNGRjNDc3ZjM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76142afd289708ec9c6c9534d7070cf4dc477f37",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/76142afd289708ec9c6c9534d7070cf4dc477f37",
      "tree": {
        "sha": "f4d34843293e1810004ee9cd28347d323f2d9d06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d34843293e1810004ee9cd28347d323f2d9d06"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7821e910d01052418469f5a1f656e8c65b57514",
          "sha": "e7821e910d01052418469f5a1f656e8c65b57514",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e7821e910d01052418469f5a1f656e8c65b57514"
        }
      ],
      "message": "Segwit script error unit tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T00:38:19Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2016-05-04T00:53:18Z"
      },
      "sha": "76142afd289708ec9c6c9534d7070cf4dc477f37"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 655180068,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjU1MTgwMDY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/655180068",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-10T01:53:20Z"
    },
    {
      "event": "commented",
      "id": 218039952,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxODAzOTk1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218039952",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-10T01:58:29Z",
      "updated_at": "2016-05-10T01:58:29Z",
      "author_association": "MEMBER",
      "body": "@jtimon All the consensus logic is already combined into a single group of commits (see https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-211998958 which I maintain for every push). As mentioned several times in the weekly meetings, I'm also not rebasing anymore, so you don't have to worry about review going stale.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-218039952",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 655182680,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjU1MTgyNjgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/655182680",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-10T01:58:29Z"
    },
    {
      "event": "subscribed",
      "id": 655182681,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY1NTE4MjY4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/655182681",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-10T01:58:29Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMjU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzA4ZGU4YTc0YTZkOTljZDNjNzM4NDhlOGMyNTA0Y2UyZjUzMGUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
      "tree": {
        "sha": "f4d34843293e1810004ee9cd28347d323f2d9d06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d34843293e1810004ee9cd28347d323f2d9d06"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76142afd289708ec9c6c9534d7070cf4dc477f37",
          "sha": "76142afd289708ec9c6c9534d7070cf4dc477f37",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/76142afd289708ec9c6c9534d7070cf4dc477f37"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 4 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:38:58Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:38:58Z"
      },
      "sha": "8708de8a74a6d99cd3c73848e8c2504ce2f530e1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODQ2Mjk4MTYzMmE5ZTNiOTg5YTI4ZTRkMTY5MmQ3MjYxNmUxZDY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8462981632a9e3b989a28e4d1692d72616e1d68",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b8462981632a9e3b989a28e4d1692d72616e1d68",
      "tree": {
        "sha": "fccee550ba31180223dabbbe910e4cfdf49cfd60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fccee550ba31180223dabbbe910e4cfdf49cfd60"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
          "sha": "8708de8a74a6d99cd3c73848e8c2504ce2f530e1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8708de8a74a6d99cd3c73848e8c2504ce2f530e1"
        }
      ],
      "message": "f cb9d4d34: typo fix",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:45:15Z"
      },
      "sha": "b8462981632a9e3b989a28e4d1692d72616e1d68"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGUzZmNkMmRjZGY2ZWE0MjgwN2M4YWFmMDA0ZTVkMjBhYmVhNmZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
      "tree": {
        "sha": "3346da48664071dbc1814daed3a9ca8a5a243e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3346da48664071dbc1814daed3a9ca8a5a243e0b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8462981632a9e3b989a28e4d1692d72616e1d68",
          "sha": "b8462981632a9e3b989a28e4d1692d72616e1d68",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b8462981632a9e3b989a28e4d1692d72616e1d68"
        }
      ],
      "message": "f 3b1ff49f: remove redundant witness clean",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-10T23:46:13Z"
      },
      "sha": "38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDg1Yjc3NDA0NWU5NWU4NTMyOTA3MmVkOTNiZTBjZDAwZDViYzI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd85b774045e95e85329072ed93be0cd00d5bc28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fd85b774045e95e85329072ed93be0cd00d5bc28",
      "tree": {
        "sha": "688d5651603b789464157a5407d356ca18779cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/688d5651603b789464157a5407d356ca18779cd9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
          "sha": "38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/38e3fcd2dcdf6ea42807c8aaf004e5d20abea6ff"
        }
      ],
      "message": "f 1b6c6f16: Cleanup mapBlocksUnlinked in RewindBlockIndex",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T00:08:26Z"
      },
      "sha": "fd85b774045e95e85329072ed93be0cd00d5bc28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzNkYWY0ZWVmNTU0NzVjY2QyYWNjZTEwNDQzNTRjZGZhMDY2M2Iy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/433daf4eef55475ccd2acce1044354cdfa0663b2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/433daf4eef55475ccd2acce1044354cdfa0663b2",
      "tree": {
        "sha": "d23c7ac9828bcd7983152e3603d698001813d160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d23c7ac9828bcd7983152e3603d698001813d160"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd85b774045e95e85329072ed93be0cd00d5bc28",
          "sha": "fd85b774045e95e85329072ed93be0cd00d5bc28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fd85b774045e95e85329072ed93be0cd00d5bc28"
        }
      ],
      "message": "f ac6886d3: Get rid of leftover WITNESS_VERSION",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T00:10:53Z"
      },
      "sha": "433daf4eef55475ccd2acce1044354cdfa0663b2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTkwMjg5ZjRmZDgwMmQxMDkwYWZlMzY1M2JjYzMwYTlkZDA2YTU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9590289f4fd802d1090afe3653bcc30a9dd06a54",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9590289f4fd802d1090afe3653bcc30a9dd06a54",
      "tree": {
        "sha": "8aba8aaac075c11e95fec879ab6523f0854ecd22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aba8aaac075c11e95fec879ab6523f0854ecd22"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/433daf4eef55475ccd2acce1044354cdfa0663b2",
          "sha": "433daf4eef55475ccd2acce1044354cdfa0663b2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/433daf4eef55475ccd2acce1044354cdfa0663b2"
        }
      ],
      "message": "f 2c87be12: fix typo",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T00:37:54Z"
      },
      "sha": "9590289f4fd802d1090afe3653bcc30a9dd06a54"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzI3N2M5ZjgxNTdkYWY1YjUyNDAzYWE2ZjkzY2E4NWVmNjA0NmEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17277c9f8157daf5b52403aa6f93ca85ef6046a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/17277c9f8157daf5b52403aa6f93ca85ef6046a1",
      "tree": {
        "sha": "9cb0dae8ccf5b297a39322cdcbe7de5e36f6ac6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cb0dae8ccf5b297a39322cdcbe7de5e36f6ac6d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9590289f4fd802d1090afe3653bcc30a9dd06a54",
          "sha": "9590289f4fd802d1090afe3653bcc30a9dd06a54",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9590289f4fd802d1090afe3653bcc30a9dd06a54"
        }
      ],
      "message": "f 39552185: GetBlockCost: Clarify comment description",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-03-16T02:41:08Z"
      },
      "sha": "17277c9f8157daf5b52403aa6f93ca85ef6046a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTljYmEyODczZmQyNTI3MGE1ZDM2OGVjZTQ2MzYyNjEzYWRlOWE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e9cba2873fd25270a5d368ece46362613ade9a4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e9cba2873fd25270a5d368ece46362613ade9a4",
      "tree": {
        "sha": "055740f305a9b3f15e2d3a8ce41a90d5acc165ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/055740f305a9b3f15e2d3a8ce41a90d5acc165ae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17277c9f8157daf5b52403aa6f93ca85ef6046a1",
          "sha": "17277c9f8157daf5b52403aa6f93ca85ef6046a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/17277c9f8157daf5b52403aa6f93ca85ef6046a1"
        }
      ],
      "message": "f 39552185: provide both -maxblocksize and -maxblockcost",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-03-30T02:03:36Z"
      },
      "sha": "1e9cba2873fd25270a5d368ece46362613ade9a4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjUwYjk2YzgyZWRlM2YwMGMxZWQ4ZTUyNGJiYWI1NGMyODgzMDVk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f50b96c82ede3f00c1ed8e524bbab54c288305d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8f50b96c82ede3f00c1ed8e524bbab54c288305d",
      "tree": {
        "sha": "4ba5068f231941b526b4c8699f4bd52ea8fd3a8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ba5068f231941b526b4c8699f4bd52ea8fd3a8e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e9cba2873fd25270a5d368ece46362613ade9a4",
          "sha": "1e9cba2873fd25270a5d368ece46362613ade9a4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1e9cba2873fd25270a5d368ece46362613ade9a4"
        }
      ],
      "message": "[qa] segwit: Switch to py3",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:08:06Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-05-06T11:02:45Z"
      },
      "sha": "8f50b96c82ede3f00c1ed8e524bbab54c288305d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTMzNWNhMTA5NTYwMzdiZTIyMmEyZWNiYzQ5NDE2N2U4NDY0YzMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75335ca10956037be222a2ecbc494167e8464c31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/75335ca10956037be222a2ecbc494167e8464c31",
      "tree": {
        "sha": "b76a28967ce304c9f6a51c7969167a9d3ccf3cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b76a28967ce304c9f6a51c7969167a9d3ccf3cdf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f50b96c82ede3f00c1ed8e524bbab54c288305d",
          "sha": "8f50b96c82ede3f00c1ed8e524bbab54c288305d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8f50b96c82ede3f00c1ed8e524bbab54c288305d"
        }
      ],
      "message": "f 1b6c6f16: pass CChainParams rather than Consensus::Params to RewindBlockIndex",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:54:59Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-11T06:54:59Z"
      },
      "sha": "75335ca10956037be222a2ecbc494167e8464c31"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 656775697,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjU2Nzc1Njk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/656775697",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-11T07:36:45Z"
    },
    {
      "event": "commented",
      "id": 218385522,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxODM4NTUyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218385522",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-11T07:42:01Z",
      "updated_at": "2016-05-11T07:42:01Z",
      "author_association": "MEMBER",
      "body": "More comments and nits addressed, testnet activation included, separated -maxblocksize and -maxblockcost (by @luke-jr).\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-218385522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 656780585,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjU2NzgwNTg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/656780585",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-11T07:42:01Z"
    },
    {
      "event": "subscribed",
      "id": 656780586,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY1Njc4MDU4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/656780586",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-11T07:42:01Z"
    },
    {
      "event": "mentioned",
      "id": 656786353,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjU2Nzg2MzUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/656786353",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-11T07:47:58Z"
    },
    {
      "event": "subscribed",
      "id": 656786354,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY1Njc4NjM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/656786354",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-11T07:47:58Z"
    },
    {
      "event": "commented",
      "id": 218754334,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxODc1NDMzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218754334",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-12T13:19:37Z",
      "updated_at": "2016-05-12T13:19:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Since signature/witness data gets a 75% discount in the new cost calculation, I'm wondering if the constant of `148u` in `GetDustThreshold` in transaction.h should be updated too?\nShould that be changed to `108*0.25 + 32 + 4 + 4 = 67` ?\n",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-218754334",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 219259461,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTI1OTQ2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219259461",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-15T00:40:12Z",
      "updated_at": "2016-05-15T00:40:12Z",
      "author_association": "MEMBER",
      "body": "I added a commit section \"commentary\" that contains comments on the changes (and not on the resulting code). Maybe they're useful for people asking \"why is X being changed?\".\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-219259461",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMjk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMzI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxMzY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNDA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNDE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNDQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNDc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNDg6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNTA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNTQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNTY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNTk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNjE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNjQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNjk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNzU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxNzc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxODA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxODI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 221649375,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTY0OTM3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/221649375",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-25T17:35:39Z",
      "updated_at": "2016-05-25T17:35:39Z",
      "author_association": "MEMBER",
      "body": "nits aside, p2p-segwit.py code review ACK https://github.com/bitcoin/bitcoin/pull/7910/commits/5b0cd48d9f29f4a839640819230d4e88e077ce40\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-221649375",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxODg6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDY4NThmNzBmNDAzNzdiYmQyNDk2MGJhNTYzZjFlMmFkZGEwNGNh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/306858f70f40377bbd24960ba563f1e2adda04ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/306858f70f40377bbd24960ba563f1e2adda04ca",
      "tree": {
        "sha": "b76a28967ce304c9f6a51c7969167a9d3ccf3cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b76a28967ce304c9f6a51c7969167a9d3ccf3cdf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75335ca10956037be222a2ecbc494167e8464c31",
          "sha": "75335ca10956037be222a2ecbc494167e8464c31",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/75335ca10956037be222a2ecbc494167e8464c31"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 5 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:58:23Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:58:23Z"
      },
      "sha": "306858f70f40377bbd24960ba563f1e2adda04ca"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzZmYTQ3YjdkYTA5NmUyZmE1NWRhYmY3YjY3MzQ5MWJjOTZiN2I2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/036fa47b7da096e2fa55dabf7b673491bc96b7b6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/036fa47b7da096e2fa55dabf7b673491bc96b7b6",
      "tree": {
        "sha": "c91caea44754da79b31b7ee341bd1d71d1a916a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c91caea44754da79b31b7ee341bd1d71d1a916a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/306858f70f40377bbd24960ba563f1e2adda04ca",
          "sha": "306858f70f40377bbd24960ba563f1e2adda04ca",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/306858f70f40377bbd24960ba563f1e2adda04ca"
        }
      ],
      "message": "Improve FindForkInGlobalIndex when locator contains chain tip",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:58:49Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-05-13T00:56:27Z"
      },
      "sha": "036fa47b7da096e2fa55dabf7b673491bc96b7b6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWIwZDc1YTc1Y2QxN2EzMGY2MGJkNDUxNDBmNzcxMGNlNGQxMTgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
      "tree": {
        "sha": "f3d6d1b433d976d8a4efbba2849db83c99968b6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3d6d1b433d976d8a4efbba2849db83c99968b6a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/036fa47b7da096e2fa55dabf7b673491bc96b7b6",
          "sha": "036fa47b7da096e2fa55dabf7b673491bc96b7b6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/036fa47b7da096e2fa55dabf7b673491bc96b7b6"
        }
      ],
      "message": "VerifyDB: don't check blocks that have been pruned",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T20:59:00Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-05-20T08:59:57Z"
      },
      "sha": "7eb0d75a75cd17a30f60bd45140f7710ce4d1181"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWRiMDNhMjRkMWNlOWRiNDNjMmQxMzU0NGFlOWIwZjczODRkZTZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
      "tree": {
        "sha": "012ae736ab1e344eabc7c3b92cd38834279b92f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/012ae736ab1e344eabc7c3b92cd38834279b92f0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
          "sha": "7eb0d75a75cd17a30f60bd45140f7710ce4d1181",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb0d75a75cd17a30f60bd45140f7710ce4d1181"
        }
      ],
      "message": "Improve RewindBlockIndex when pruning\n\nPruning nodes that upgrade after segwit activation may not HAVE_DATA for all\nblocks back to the activation point.  Since pruning nodes won't be serving such\nblocks to peers anyway, don't try to rewind past the HAVE_DATA point, as that\nwould fail and force pruning nodes to redownload the blockchain.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:00:21Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-05-26T14:05:32Z"
      },
      "sha": "8adb03a24d1ce9db43c2d13544ae9b0f7384de6d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQxZDBjZTQwZDMxMzQ2MTUyNmYxYzAzMzYyZGFmODViNThjNmE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d1d0ce40d313461526f1c03362daf85b58c6a9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d1d0ce40d313461526f1c03362daf85b58c6a9",
      "tree": {
        "sha": "0f85be38d455493d440e36b64a992bc980b8944d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f85be38d455493d440e36b64a992bc980b8944d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
          "sha": "8adb03a24d1ce9db43c2d13544ae9b0f7384de6d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8adb03a24d1ce9db43c2d13544ae9b0f7384de6d"
        }
      ],
      "message": "Make sure upgraded nodes don't ask for non-wit blocks",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:04:29Z"
      },
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-05-25T20:01:59Z"
      },
      "sha": "a1d1d0ce40d313461526f1c03362daf85b58c6a9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTk4NjBlODM1MDhmNmMxMGQ4NDk2ZDhjODQxMmY1ZjFhN2EyMTQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019860e83508f6c10d8496d8c8412f5f1a7a2145",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/019860e83508f6c10d8496d8c8412f5f1a7a2145",
      "tree": {
        "sha": "f262e1cc2b65902c62d32813bdc7b117203901dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f262e1cc2b65902c62d32813bdc7b117203901dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d1d0ce40d313461526f1c03362daf85b58c6a9",
          "sha": "a1d1d0ce40d313461526f1c03362daf85b58c6a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d1d0ce40d313461526f1c03362daf85b58c6a9"
        }
      ],
      "message": "script_tests: witness tests can specify tx amount\n\nAdd tests that witness signatures cover value",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:05:47Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-05-22T11:35:43Z"
      },
      "sha": "019860e83508f6c10d8496d8c8412f5f1a7a2145"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODE1YzE2MDRlOWQ2YzJlZjUyODFhN2E4ZTY1MzljNGM5OGJhNDAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
      "tree": {
        "sha": "91a3194bb8548c84d5150fa416e4398a9fb3e2af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91a3194bb8548c84d5150fa416e4398a9fb3e2af"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019860e83508f6c10d8496d8c8412f5f1a7a2145",
          "sha": "019860e83508f6c10d8496d8c8412f5f1a7a2145",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/019860e83508f6c10d8496d8c8412f5f1a7a2145"
        }
      ],
      "message": "[Qt] Add support for NODE_WITNESS in formatServicesStr",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:06:30Z"
      },
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-05-22T11:02:44Z"
      },
      "sha": "c815c1604e9d6c2ef5281a7a8e6539c4c98ba401"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTYwNjdmYTgwNDA1Y2FmODRlNGQwMDY5Yjk1MWUwM2UwOWQyNjU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f16067fa80405caf84e4d0069b951e03e09d2659",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f16067fa80405caf84e4d0069b951e03e09d2659",
      "tree": {
        "sha": "654afe0fb40d9680b3a77c5b8def549d5fba89cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/654afe0fb40d9680b3a77c5b8def549d5fba89cc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
          "sha": "c815c1604e9d6c2ef5281a7a8e6539c4c98ba401",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c815c1604e9d6c2ef5281a7a8e6539c4c98ba401"
        }
      ],
      "message": "bitcoinconsensus.h: Accept amount as int64_t",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:07:26Z"
      },
      "author": {
        "name": "Thomas Kerin",
        "email": "me@thomaskerin.io",
        "date": "2016-05-21T01:59:35Z"
      },
      "sha": "f16067fa80405caf84e4d0069b951e03e09d2659"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTlkNGQxNzU3NzhlZDViNWU1ZThkNWI5NmUwM2FlMDc1MWE2NWM5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
      "tree": {
        "sha": "0b6d5355c259fca37c292dcc44b07e75b61f5bff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b6d5355c259fca37c292dcc44b07e75b61f5bff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f16067fa80405caf84e4d0069b951e03e09d2659",
          "sha": "f16067fa80405caf84e4d0069b951e03e09d2659",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f16067fa80405caf84e4d0069b951e03e09d2659"
        }
      ],
      "message": "Add GetTransactionSigOpCost unit tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:08:26Z"
      },
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2016-05-28T17:22:13Z"
      },
      "sha": "059d4d175778ed5b5e5e8d5b96e03ae0751a65c9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWMzOGEyMDg4YjY4M2M4YWI3YjY1NDJlYjgwM2JjY2IwNDg4ZDdl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
      "tree": {
        "sha": "f1a86e2093d6bc5313e7d16341196738f62a2afb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1a86e2093d6bc5313e7d16341196738f62a2afb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
          "sha": "059d4d175778ed5b5e5e8d5b96e03ae0751a65c9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/059d4d175778ed5b5e5e8d5b96e03ae0751a65c9"
        }
      ],
      "message": "segwit: fix gui wallet send transaction size calculation assertion failed",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:09:37Z"
      },
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-05-18T21:40:07Z"
      },
      "sha": "c1c38a2088b683c8ab7b6542eb803bccb0488d7e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWNkMWRjNDQ5NjcxOTYzYmFkNmU1Mjc0ZTMwNDVkMTQ3NmUyMmUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0acd1dc449671963bad6e5274e3045d1476e22e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0acd1dc449671963bad6e5274e3045d1476e22e0",
      "tree": {
        "sha": "3cd8427a32ffea7edc3092ab303d80bd72cac676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cd8427a32ffea7edc3092ab303d80bd72cac676"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
          "sha": "c1c38a2088b683c8ab7b6542eb803bccb0488d7e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c38a2088b683c8ab7b6542eb803bccb0488d7e"
        }
      ],
      "message": "segwit: txout dust threshold calculation update",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-30T21:10:57Z"
      },
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-05-16T00:30:50Z"
      },
      "sha": "0acd1dc449671963bad6e5274e3045d1476e22e0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 676978686,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Njc2OTc4Njg2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/676978686",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-31T13:12:32Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxODk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjlmMjZlMDI2MWFlZGZkZWMwZDdkZjJkZjU5ZGZhYWYwYWVlOTNm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
      "tree": {
        "sha": "3cd8427a32ffea7edc3092ab303d80bd72cac676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cd8427a32ffea7edc3092ab303d80bd72cac676"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0acd1dc449671963bad6e5274e3045d1476e22e0",
          "sha": "0acd1dc449671963bad6e5274e3045d1476e22e0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0acd1dc449671963bad6e5274e3045d1476e22e0"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 6 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T14:14:38Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T14:14:38Z"
      },
      "sha": "869f26e0261aedfdec0d7df2df59dfaaf0aee93f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGQ0ZDFkMjNhM2NiYWE4YTMwNTFkMGRhMTBmZjdhNTM2NTE3ZWQw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
      "tree": {
        "sha": "09baa4927c5109236943ef6bd5332564195712aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09baa4927c5109236943ef6bd5332564195712aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
          "sha": "869f26e0261aedfdec0d7df2df59dfaaf0aee93f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/869f26e0261aedfdec0d7df2df59dfaaf0aee93f"
        }
      ],
      "message": "Extend the max witness program length to 40 bytes\n\nAmended by Pieter Wuille (max limit 40 instead of 33).",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T14:26:28Z"
      },
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-05-29T15:39:44Z"
      },
      "sha": "14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 681675988,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjgxNjc1OTg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/681675988",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-03T21:23:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 681684017,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjgxNjg0MDE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/681684017",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-03T21:31:45Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODQwZjZkYzgzMGUxNjNlMzM5MjQ4ZDNlMmVhZjJlMjliZTg0N2E4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4840f6dc830e163e339248d3e2eaf2e29be847a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4840f6dc830e163e339248d3e2eaf2e29be847a8",
      "tree": {
        "sha": "7c2198bc4f0d0db1e2ee183f5cf4622b9aea09fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c2198bc4f0d0db1e2ee183f5cf4622b9aea09fc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
          "sha": "14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/14d4d1d23a3cbaa8a3051d0da10ff7a536517ed0"
        }
      ],
      "message": "Prevent witness addresses from being constructed before fork",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-04T10:00:01Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T15:08:55Z"
      },
      "sha": "4840f6dc830e163e339248d3e2eaf2e29be847a8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGJmODUyMjg2MDIzZjg3NmM5ZjNhN2M1NTdhMjA5MTA5Y2RlZTEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dbf852286023f876c9f3a7c557a209109cdee11",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbf852286023f876c9f3a7c557a209109cdee11",
      "tree": {
        "sha": "c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4840f6dc830e163e339248d3e2eaf2e29be847a8",
          "sha": "4840f6dc830e163e339248d3e2eaf2e29be847a8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4840f6dc830e163e339248d3e2eaf2e29be847a8"
        }
      ],
      "message": "Remove positive SERIALIZE_TRANSACTION_WITNESS flag",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-04T10:00:05Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-03T16:24:26Z"
      },
      "sha": "3dbf852286023f876c9f3a7c557a209109cdee11"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 681895853,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjgxODk1ODUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/681895853",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-04T10:03:40Z"
    },
    {
      "event": "mentioned",
      "id": 681897114,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjgxODk3MTE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/681897114",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-04T10:12:55Z"
    },
    {
      "event": "subscribed",
      "id": 681897115,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY4MTg5NzExNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/681897115",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-04T10:12:55Z"
    },
    {
      "event": "commented",
      "id": 223777674,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzc3NzY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223777674",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-04T20:51:54Z",
      "updated_at": "2016-06-06T13:41:29Z",
      "author_association": "MEMBER",
      "body": "I've created a rebased/squash branch against master, whose tip tree is identical to the tree in this PR: https://github.com/sipa/bitcoin/compare/segwit-master2-base...segwit-master2\n\nEDIT: moved to a separate PR #8149.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-223777674",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 682019756,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjgyMDE5NzU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/682019756",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-04T21:04:53Z"
    },
    {
      "event": "subscribed",
      "id": 682019757,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY4MjAxOTc1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/682019757",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-04T21:04:53Z"
    },
    {
      "event": "mentioned",
      "id": 683133162,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjgzMTMzMTYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/683133162",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-06T16:49:54Z"
    },
    {
      "event": "subscribed",
      "id": 683133163,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY4MzEzMzE2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/683133163",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-06T16:49:54Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxOTI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 224389025,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDM4OTAyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224389025",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-07T19:32:32Z",
      "updated_at": "2016-06-07T19:32:32Z",
      "author_association": "MEMBER",
      "body": "As brought up in https://github.com/sipa/bitcoin/issues/95 (and subsequent IRC discussion), we currently will respond to a MSG_FILTERED_BLOCK with transactions that will be serialized with witness, even though the peer may not support it.  \n\nWe should change this to returning transactions without witness, and in the future we could add support for filtered block requests to indicate whether responses should include witnesses or not (eg by setting MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG in the getdata request).\n\nMental note: look into adding a p2p test to cover filtered blocks.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-224389025",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOThkZTVmZTVkZjc3ODgyMzUyM2EyYzJkMGU5ZDM2MTBmYjEzNzAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f98de5fe5df778823523a2c2d0e9d3610fb13703",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f98de5fe5df778823523a2c2d0e9d3610fb13703",
      "tree": {
        "sha": "c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0ad9d1eb61584247cd288bc9bd3fd48b6fe5ece"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dbf852286023f876c9f3a7c557a209109cdee11",
          "sha": "3dbf852286023f876c9f3a7c557a209109cdee11",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbf852286023f876c9f3a7c557a209109cdee11"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 7 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:22Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:22Z"
      },
      "sha": "f98de5fe5df778823523a2c2d0e9d3610fb13703"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDZjNDBiMTUyNDg1MGZjOTExNmI5N2MwMTRhOGFiMjM2Yjg1Y2E5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c06c40b1524850fc9116b97c014a8ab236b85ca9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c06c40b1524850fc9116b97c014a8ab236b85ca9",
      "tree": {
        "sha": "4c060da4d18591aa95448190977ffc9b2b4e1771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c060da4d18591aa95448190977ffc9b2b4e1771"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f98de5fe5df778823523a2c2d0e9d3610fb13703",
          "sha": "f98de5fe5df778823523a2c2d0e9d3610fb13703",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f98de5fe5df778823523a2c2d0e9d3610fb13703"
        }
      ],
      "message": "Actually count the witness data in memusage of CTransaction",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:34Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-11T16:14:07Z"
      },
      "sha": "c06c40b1524850fc9116b97c014a8ab236b85ca9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGI1ZGI5NDQ5Y2E1ZmQxOTVhNzU1NzRlYzI4Mjg5MWQwYjE4OWFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8b5db9449ca5fd195a75574ec282891d0b189aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b5db9449ca5fd195a75574ec282891d0b189aa",
      "tree": {
        "sha": "dc7db9fbeaf0bff787071c341848a4449113fdf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc7db9fbeaf0bff787071c341848a4449113fdf3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c06c40b1524850fc9116b97c014a8ab236b85ca9",
          "sha": "c06c40b1524850fc9116b97c014a8ab236b85ca9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c06c40b1524850fc9116b97c014a8ab236b85ca9"
        }
      ],
      "message": "Correctly count maximum size in mining",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:40Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-11T16:26:28Z"
      },
      "sha": "d8b5db9449ca5fd195a75574ec282891d0b189aa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2Q0YmQyMzJmYTQzNTc4YmMxNjdlNDQxZjc3OTI2MmFkYTY0NWY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57d4bd232fa43578bc167e441f779262ada645f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/57d4bd232fa43578bc167e441f779262ada645f8",
      "tree": {
        "sha": "5a9b18f83dc16b46de95e7fe963be5c763b1e6eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a9b18f83dc16b46de95e7fe963be5c763b1e6eb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8b5db9449ca5fd195a75574ec282891d0b189aa",
          "sha": "d8b5db9449ca5fd195a75574ec282891d0b189aa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b5db9449ca5fd195a75574ec282891d0b189aa"
        }
      ],
      "message": "Rework -maxblocksize and -maxblockcost",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:26:48Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T16:49:30Z"
      },
      "sha": "57d4bd232fa43578bc167e441f779262ada645f8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmZiZjYwYjQ3MTY0NzY0MjYzNzQ4OTUyYzQ3YmU4YTdjZGNiOTQw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bfbf60b47164764263748952c47be8a7cdcb940",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfbf60b47164764263748952c47be8a7cdcb940",
      "tree": {
        "sha": "ea5e59ed6839bc25813d3afac4899c71caeb5485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea5e59ed6839bc25813d3afac4899c71caeb5485"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57d4bd232fa43578bc167e441f779262ada645f8",
          "sha": "57d4bd232fa43578bc167e441f779262ada645f8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/57d4bd232fa43578bc167e441f779262ada645f8"
        }
      ],
      "message": "Cache transaction cost in mempool",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:44:12Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T16:54:15Z"
      },
      "sha": "0bfbf60b47164764263748952c47be8a7cdcb940"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTZkOGMwZDUxZGQwNWE0MGFkMzAxNDA2OGNkZmVjMWY1YmUxNzEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/496d8c0d51dd05a40ad3014068cdfec1f5be1710",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/496d8c0d51dd05a40ad3014068cdfec1f5be1710",
      "tree": {
        "sha": "4f76d29d79d0c736c80efe6f55b869729cf45700",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f76d29d79d0c736c80efe6f55b869729cf45700"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bfbf60b47164764263748952c47be8a7cdcb940",
          "sha": "0bfbf60b47164764263748952c47be8a7cdcb940",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfbf60b47164764263748952c47be8a7cdcb940"
        }
      ],
      "message": "Delete segnet",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T20:16:54Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:09:21Z"
      },
      "sha": "496d8c0d51dd05a40ad3014068cdfec1f5be1710"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzk5YTdjMmQ0MTU2ODA4ZGUwMDkzNDJiZGM3Y2M3OWJiN2EzYzgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7799a7c2d4156808de009342bdc7cc79bb7a3c83",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7799a7c2d4156808de009342bdc7cc79bb7a3c83",
      "tree": {
        "sha": "9a9b03459c57a0149cf64619c41b8bd50a29ae64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a9b03459c57a0149cf64619c41b8bd50a29ae64"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/496d8c0d51dd05a40ad3014068cdfec1f5be1710",
          "sha": "496d8c0d51dd05a40ad3014068cdfec1f5be1710",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/496d8c0d51dd05a40ad3014068cdfec1f5be1710"
        }
      ],
      "message": "Do not send witnesses in response to bip37 blocks",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T20:16:58Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T17:12:33Z"
      },
      "sha": "7799a7c2d4156808de009342bdc7cc79bb7a3c83"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzE5YzE4ZWNiMTM5ZTFjYjU2YjNkYzA5ZjY5ZGZiNWIyMTQzNGJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
      "tree": {
        "sha": "345af2a2873d4f120ed6c0714639d21f28dc5446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/345af2a2873d4f120ed6c0714639d21f28dc5446"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7799a7c2d4156808de009342bdc7cc79bb7a3c83",
          "sha": "7799a7c2d4156808de009342bdc7cc79bb7a3c83",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7799a7c2d4156808de009342bdc7cc79bb7a3c83"
        }
      ],
      "message": "33 to 40 bytes push should now be considered a witness scriptPubKey",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-12T20:16:59Z"
      },
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-06-06T05:08:32Z"
      },
      "sha": "4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 689802508,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Njg5ODAyNTA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/689802508",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-12T20:24:02Z"
    },
    {
      "event": "commented",
      "id": 225458615,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTQ1ODYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225458615",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-12T20:31:56Z",
      "updated_at": "2016-06-12T20:31:56Z",
      "author_association": "MEMBER",
      "body": "Updates:\n- Removed segnet\n- Changes meaning of -maxblocksize and -maxblockcost: if only of one them is given, that becomes the only constraint\n- Avoid recomputing transaction sizes/costs in mining code\n- Bugfix: count serialized bytes rather than vsize for -maxblockcost\n- Bugfix: don't send witnesses in response to getdata MSG_FILTERED_BLOCK\n- New merge with master (on top of the mempool/relay refactors, and bip9/bip145 changes)\n\n#8149 has been updated with a rebase/squash of the above.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225458615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjEzYmJiZDNjNzVhYjllY2E3YTFhOTRiNjhlMjU5MjQwZjkyZWRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
      "tree": {
        "sha": "345af2a2873d4f120ed6c0714639d21f28dc5446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/345af2a2873d4f120ed6c0714639d21f28dc5446"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
          "sha": "4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c19c18ecb139e1cb56b3dc09f69dfb5b21434bc"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 8 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:09:59Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:09:59Z"
      },
      "sha": "7613bbbd3c75ab9eca7a1a94b68e259240f92edc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWJmZjA5ZDFkOGMzMmEzODU3MzA5ZGI0MmI4NjE2YTYyYjFiNmVk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
      "tree": {
        "sha": "1b55469fec71cef029227e880ae85a5aac3e4f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b55469fec71cef029227e880ae85a5aac3e4f50"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
          "sha": "7613bbbd3c75ab9eca7a1a94b68e259240f92edc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7613bbbd3c75ab9eca7a1a94b68e259240f92edc"
        }
      ],
      "message": "Tests: add getblocktemplate/segwit test\n\nEnsure that we set the versionbit for segwit before lockin\niff the client has indicated segwit-readiness.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:31:43Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-06T19:58:36Z"
      },
      "sha": "a9bff09d1d8c32a3857309db42b8616a62b1b6ed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmFiNjRjNTEwODYzNjljNjJiN2U2MjljMzFlN2JmNjY1Y2Y2YmUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92ab64c51086369c62b7e629c31e7bf665cf6be0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/92ab64c51086369c62b7e629c31e7bf665cf6be0",
      "tree": {
        "sha": "e0a4dce10ed5e7988a932ec693980a4b057b4fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0a4dce10ed5e7988a932ec693980a4b057b4fce"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
          "sha": "a9bff09d1d8c32a3857309db42b8616a62b1b6ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a9bff09d1d8c32a3857309db42b8616a62b1b6ed"
        }
      ],
      "message": "Add test for getrawtransaction",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:33:28Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T18:15:53Z"
      },
      "sha": "92ab64c51086369c62b7e629c31e7bf665cf6be0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGY3ODI5NzVlZDQwYTBjNTgwNGNiZDdhMmJmNmI0MDM2NWFjNzhj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
      "tree": {
        "sha": "7259d9a92e109b72cd34eabf85b09c1e3b1e8ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7259d9a92e109b72cd34eabf85b09c1e3b1e8ce0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92ab64c51086369c62b7e629c31e7bf665cf6be0",
          "sha": "92ab64c51086369c62b7e629c31e7bf665cf6be0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/92ab64c51086369c62b7e629c31e7bf665cf6be0"
        }
      ],
      "message": "p2p-segwit.py: more RPC coverage",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:33:39Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T19:14:31Z"
      },
      "sha": "40f782975ed40a0c5804cbd7a2bf6b40365ac78c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQ0MzM5M2ZkZTg3NmZhMDYwNjdkMWE2MWZhMTQ3ZTBhMWQ4NTcy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6443393fde876fa06067d1a61fa147e0a1d8572",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b6443393fde876fa06067d1a61fa147e0a1d8572",
      "tree": {
        "sha": "19e2be361c8ab4566e4cf76915596c5595d0d211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19e2be361c8ab4566e4cf76915596c5595d0d211"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
          "sha": "40f782975ed40a0c5804cbd7a2bf6b40365ac78c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/40f782975ed40a0c5804cbd7a2bf6b40365ac78c"
        }
      ],
      "message": "Rename deployment (witness -> segwit)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:33:49Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T19:23:11Z"
      },
      "sha": "b6443393fde876fa06067d1a61fa147e0a1d8572"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGJmNWUxZDY4YmMyNDI2NzhiMWI2M2NlZDk3ZTgyNjBkYzMxNWJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00bf5e1d68bc242678b1b63ced97e8260dc315be",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/00bf5e1d68bc242678b1b63ced97e8260dc315be",
      "tree": {
        "sha": "fa7671435e5056872f94f0ff911f782c0baf02c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa7671435e5056872f94f0ff911f782c0baf02c6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6443393fde876fa06067d1a61fa147e0a1d8572",
          "sha": "b6443393fde876fa06067d1a61fa147e0a1d8572",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b6443393fde876fa06067d1a61fa147e0a1d8572"
        }
      ],
      "message": "Update p2p-segwit.py for new deployment name",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:34:01Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-13T19:24:05Z"
      },
      "sha": "00bf5e1d68bc242678b1b63ced97e8260dc315be"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGYyZmIyYzBiZGUxMzFlZDFjMDI4MDk1YTkyZTI2ZjA1MzIxZjNk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
      "tree": {
        "sha": "075d330f3f888cdf33f88e3532e66347a5850955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/075d330f3f888cdf33f88e3532e66347a5850955"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00bf5e1d68bc242678b1b63ced97e8260dc315be",
          "sha": "00bf5e1d68bc242678b1b63ced97e8260dc315be",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/00bf5e1d68bc242678b1b63ced97e8260dc315be"
        }
      ],
      "message": "BIP143 P2WSH examples",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:34:29Z"
      },
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-06-13T18:56:41Z"
      },
      "sha": "c8f2fb2c0bde131ed1c028095a92e26f05321f3d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2E3ZWQ0OTc4NGJmNzBmMTMwMWJiMTM2M2RkYTQ3NTFiNjQ4MTcz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3a7ed49784bf70f1301bb1363dda4751b648173",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a7ed49784bf70f1301bb1363dda4751b648173",
      "tree": {
        "sha": "edf30064c610bac31915f76fb7b857b0f9becbee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf30064c610bac31915f76fb7b857b0f9becbee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
          "sha": "c8f2fb2c0bde131ed1c028095a92e26f05321f3d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f2fb2c0bde131ed1c028095a92e26f05321f3d"
        }
      ],
      "message": "Fix unused variable in sigopcount test",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:43:21Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-13T19:43:21Z"
      },
      "sha": "f3a7ed49784bf70f1301bb1363dda4751b648173"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 690949425,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjkwOTQ5NDI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/690949425",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-13T20:06:41Z"
    },
    {
      "event": "commented",
      "id": 225698251,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTY5ODI1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225698251",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-13T20:28:13Z",
      "updated_at": "2016-06-13T20:28:13Z",
      "author_association": "MEMBER",
      "body": "Updates:\n- Removed commentary\n- Fix inconsistent naming 'witness' vs 'segwit'\n- Added more tests by @jl2012 and @sdaftuar \n- New merge with master (on top of #7598 and #7749).\n\nThere have been significant changes in master since this PR was branched off, and as a result, many things are now hidden under the merge commit here (including adapting for the tx relay/mempool changes from #8082 #8080 #8059 #7840 , the shared_ptr changed from #8126, the new CNB code from #7598, and the GBT changes from #7935). Especially for the new CNB code, it is probably easier to review the relevant commit from #8149 (which is rebased and squashed and completely identical to this PR).\n\nI would like to see some final reviews.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225698251",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 690975994,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjkwOTc1OTk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/690975994",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-13T20:28:13Z"
    },
    {
      "event": "subscribed",
      "id": 690975995,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY5MDk3NTk5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/690975995",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-13T20:28:13Z"
    },
    {
      "event": "mentioned",
      "id": 690975998,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NjkwOTc1OTk4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/690975998",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-13T20:28:13Z"
    },
    {
      "event": "subscribed",
      "id": 690975999,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY5MDk3NTk5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/690975999",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-13T20:28:13Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxOTM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 225799237,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTc5OTIzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225799237",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-14T07:19:32Z",
      "updated_at": "2016-06-14T07:19:32Z",
      "author_association": "MEMBER",
      "body": "PROTOCOL_VERSION is indeed unused, so it doesn't matter. I'll change it for consistency.\n\nLonger term, I think the nSerType/nVersion should be replaced by a context object that encapsulates serialization parameters (for example, there could be a TransactionSerializationContext with a boolean fWitness, and a BlockSerializationContext that inherits from TransactionSerializationContext etc).\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225799237",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 225899147,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTg5OTE0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225899147",
      "actor": {
        "login": "kanzure",
        "id": 101238,
        "node_id": "MDQ6VXNlcjEwMTIzOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/101238?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kanzure",
        "html_url": "https://github.com/kanzure",
        "followers_url": "https://api.github.com/users/kanzure/followers",
        "following_url": "https://api.github.com/users/kanzure/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kanzure/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kanzure/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kanzure/subscriptions",
        "organizations_url": "https://api.github.com/users/kanzure/orgs",
        "repos_url": "https://api.github.com/users/kanzure/repos",
        "events_url": "https://api.github.com/users/kanzure/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kanzure/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-14T14:29:25Z",
      "updated_at": "2016-06-14T14:29:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 3cb46c1. ACK 17389dc. ACK #8149 having same git tree hash for 3cb46c1 and 17389dc. Also, other reviewers might benefit from some segwit code review notes from https://bitcoincore.org/logs/2016-05-zurich-meeting-notes.html although I believe code review is possible in absence of looking at those notes.\n",
      "user": {
        "login": "kanzure",
        "id": 101238,
        "node_id": "MDQ6VXNlcjEwMTIzOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/101238?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kanzure",
        "html_url": "https://github.com/kanzure",
        "followers_url": "https://api.github.com/users/kanzure/followers",
        "following_url": "https://api.github.com/users/kanzure/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kanzure/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kanzure/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kanzure/subscriptions",
        "organizations_url": "https://api.github.com/users/kanzure/orgs",
        "repos_url": "https://api.github.com/users/kanzure/repos",
        "events_url": "https://api.github.com/users/kanzure/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kanzure/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225899147",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIxOTc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 225926853,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTkyNjg1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225926853",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-14T15:52:41Z",
      "updated_at": "2016-06-14T15:52:41Z",
      "author_association": "MEMBER",
      "body": "tACK wallet section plus fixups https://github.com/sipa/bitcoin/compare/3f989b9...be976b7\ntACK p2p-segwit.py tests  plus fixups https://github.com/bitcoin/bitcoin/commit/da0c46e1bbee0413bb5fb107c21a31fd4bbe1f42\ncode review ACK for the rest minus unit tests through beginning of merge section: https://github.com/bitcoin/bitcoin/pull/7910/commits/2311cf6ab879b352da39d89b959c735d06cbbf59\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225926853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 225979380,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTk3OTM4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225979380",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-14T18:49:30Z",
      "updated_at": "2016-06-14T18:49:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK 2311cf6 : consensus behavior matches descriptions in BIP141 and BIP143\n",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-225979380",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjk4OTNmYjU1YjNiOGMxNTNjNzY3YWM1NTQyYjgyNGIyNzBkZGM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b9893fb55b3b8c153c767ac5542b824b270ddc4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1b9893fb55b3b8c153c767ac5542b824b270ddc4",
      "tree": {
        "sha": "edf30064c610bac31915f76fb7b857b0f9becbee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf30064c610bac31915f76fb7b857b0f9becbee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3a7ed49784bf70f1301bb1363dda4751b648173",
          "sha": "f3a7ed49784bf70f1301bb1363dda4751b648173",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a7ed49784bf70f1301bb1363dda4751b648173"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 9 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:40:42Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:40:28Z"
      },
      "sha": "1b9893fb55b3b8c153c767ac5542b824b270ddc4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDgzZTVjZmRjZWMyMDA1OGZiNDcwYWU1NjQ1MDRjYzE3MDIxNTI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3483e5cfdcec20058fb470ae564504cc17021528",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3483e5cfdcec20058fb470ae564504cc17021528",
      "tree": {
        "sha": "29fe7438408bea466274c5e039fd7526ad0c6ae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29fe7438408bea466274c5e039fd7526ad0c6ae6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b9893fb55b3b8c153c767ac5542b824b270ddc4",
          "sha": "1b9893fb55b3b8c153c767ac5542b824b270ddc4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1b9893fb55b3b8c153c767ac5542b824b270ddc4"
        }
      ],
      "message": "DEPLOYMENT_WITNESS -> DEPLOYMENT_SEGWIT",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:42:19Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-14T17:11:08Z"
      },
      "sha": "3483e5cfdcec20058fb470ae564504cc17021528"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTY1MTZmY2Y3ODQ4NTJlNDY4ODIwYzI1OGEzYjRjNzEyMTVkYzFj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a6516fcf784852e468820c258a3b4c71215dc1c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2a6516fcf784852e468820c258a3b4c71215dc1c",
      "tree": {
        "sha": "d261289edccc57b1e620708e133e6d09af039fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d261289edccc57b1e620708e133e6d09af039fc1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3483e5cfdcec20058fb470ae564504cc17021528",
          "sha": "3483e5cfdcec20058fb470ae564504cc17021528",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3483e5cfdcec20058fb470ae564504cc17021528"
        }
      ],
      "message": "Behave as a non-witness node when start time is far away",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:44:06Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T16:21:50Z"
      },
      "sha": "2a6516fcf784852e468820c258a3b4c71215dc1c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2I1ZGU1NWIxOTcwOTg2YTA5NzUwYWI2NmE1YTVjNWViN2M4ZDIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
      "tree": {
        "sha": "3df8effb705b99e471faaa14c1fb58ae028028ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3df8effb705b99e471faaa14c1fb58ae028028ca"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a6516fcf784852e468820c258a3b4c71215dc1c",
          "sha": "2a6516fcf784852e468820c258a3b4c71215dc1c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2a6516fcf784852e468820c258a3b4c71215dc1c"
        }
      ],
      "message": "test: BIP143 examples fix and clarify",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:33Z"
      },
      "author": {
        "name": "jl2012",
        "email": "jl2012@xbt.hk",
        "date": "2016-06-14T15:01:40Z"
      },
      "sha": "c7b5de55b1970986a09750ab66a5a5c5eb7c8d23"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzE5YWRjODZiNjVkNjllODcwMTY2MGI4OWZkYmE3OTM0OGZkNzJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc19adc86b65d69e8701660b89fdba79348fd72d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc19adc86b65d69e8701660b89fdba79348fd72d",
      "tree": {
        "sha": "dcee77abffa83870fefb8164b01a7e0686670772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcee77abffa83870fefb8164b01a7e0686670772"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
          "sha": "c7b5de55b1970986a09750ab66a5a5c5eb7c8d23",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b5de55b1970986a09750ab66a5a5c5eb7c8d23"
        }
      ],
      "message": "Remove segnet from mininode",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:40Z"
      },
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-06-14T15:57:44Z"
      },
      "sha": "cc19adc86b65d69e8701660b89fdba79348fd72d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmMyNTFkMWYzNDQzNjJjMDYwYzhjNTQ3NjAyNTFjNDgwYjEyYjM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efc251d1f344362c060c8c54760251c480b12b34",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/efc251d1f344362c060c8c54760251c480b12b34",
      "tree": {
        "sha": "a81254e5bd6ceb7b8fd2a2c85a8327c2c47fb024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a81254e5bd6ceb7b8fd2a2c85a8327c2c47fb024"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc19adc86b65d69e8701660b89fdba79348fd72d",
          "sha": "cc19adc86b65d69e8701660b89fdba79348fd72d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cc19adc86b65d69e8701660b89fdba79348fd72d"
        }
      ],
      "message": "Tests: ensure that signrawtransaction failures are caught in segwit.py",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:45Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-14T15:56:37Z"
      },
      "sha": "efc251d1f344362c060c8c54760251c480b12b34"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTZmNGI4ODI4NDEyZGFmNjI3M2NhOWRjMjM5OWFiMjY5NTA3MTU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/396f4b8828412daf6273ca9dc2399ab269507155",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/396f4b8828412daf6273ca9dc2399ab269507155",
      "tree": {
        "sha": "9bfba0101c339c6aa0ae6227e638580a3b5d0b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bfba0101c339c6aa0ae6227e638580a3b5d0b00"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efc251d1f344362c060c8c54760251c480b12b34",
          "sha": "efc251d1f344362c060c8c54760251c480b12b34",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/efc251d1f344362c060c8c54760251c480b12b34"
        }
      ],
      "message": "spelling fix: uncommited -> uncommitted",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-15T23:50:50Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-14T16:59:55Z"
      },
      "sha": "396f4b8828412daf6273ca9dc2399ab269507155"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 694029802,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Njk0MDI5ODAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694029802",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:50:35Z"
    },
    {
      "event": "commented",
      "id": 226361837,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjM2MTgzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226361837",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:58:05Z",
      "updated_at": "2016-06-16T00:58:52Z",
      "author_association": "MEMBER",
      "body": "A few more changes:\n- Spelling and naming consistency nits (by @sdaftuar and @instagibbs)\n- Test improvements (by @jl2012 and @sdaftuar)\n- Make a node fully behave as a non-witness node as long as there is no softfork defined\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-226361837",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "mentioned",
      "id": 694033712,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Njk0MDMzNzEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694033712",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:58:05Z"
    },
    {
      "event": "subscribed",
      "id": 694033713,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY5NDAzMzcxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694033713",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:58:05Z"
    },
    {
      "event": "mentioned",
      "id": 694033714,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Njk0MDMzNzE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694033714",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:58:05Z"
    },
    {
      "event": "subscribed",
      "id": 694033715,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY5NDAzMzcxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694033715",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:58:05Z"
    },
    {
      "event": "mentioned",
      "id": 694034215,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Njk0MDM0MjE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694034215",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:58:52Z"
    },
    {
      "event": "subscribed",
      "id": 694034216,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDY5NDAzNDIxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694034216",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T00:58:52Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTA4ZjViZGUwZDAxOWJiODhkNjcxZjc0MTVmODdlNDQyYzU3ZGFl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b508f5bde0d019bb88d671f7415f87e442c57dae",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b508f5bde0d019bb88d671f7415f87e442c57dae",
      "tree": {
        "sha": "9bfba0101c339c6aa0ae6227e638580a3b5d0b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bfba0101c339c6aa0ae6227e638580a3b5d0b00"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/396f4b8828412daf6273ca9dc2399ab269507155",
          "sha": "396f4b8828412daf6273ca9dc2399ab269507155",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/396f4b8828412daf6273ca9dc2399ab269507155"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 10 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:33Z"
      },
      "sha": "b508f5bde0d019bb88d671f7415f87e442c57dae"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDQzM2NmZGU3YzJlZjcwODI1MDMwMDM3NTFmZTBkNTI5OGMxMWYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10433cfde7c2ef7082503003751fe0d5298c11f2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/10433cfde7c2ef7082503003751fe0d5298c11f2",
      "tree": {
        "sha": "19fe04e49f9f4f0eb69e850080d289bb52b61da6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19fe04e49f9f4f0eb69e850080d289bb52b61da6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b508f5bde0d019bb88d671f7415f87e442c57dae",
          "sha": "b508f5bde0d019bb88d671f7415f87e442c57dae",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b508f5bde0d019bb88d671f7415f87e442c57dae"
        }
      ],
      "message": "Fix direct fetching of blocks after 2a6516fc",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:47Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T11:52:37Z"
      },
      "sha": "10433cfde7c2ef7082503003751fe0d5298c11f2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTQ4YzAyMmQ0ZjY4MGM1OWJkMDMzODQyOTcwNGRmMzNiNDc3MDcw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2948c022d4f680c59bd0338429704df33b477070",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2948c022d4f680c59bd0338429704df33b477070",
      "tree": {
        "sha": "cf11203aea20a8928a05ff61933f922bd484ccd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf11203aea20a8928a05ff61933f922bd484ccd5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10433cfde7c2ef7082503003751fe0d5298c11f2",
          "sha": "10433cfde7c2ef7082503003751fe0d5298c11f2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/10433cfde7c2ef7082503003751fe0d5298c11f2"
        }
      ],
      "message": "Consistency in serialization flags",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T12:21:56Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T11:57:09Z"
      },
      "sha": "2948c022d4f680c59bd0338429704df33b477070"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 694555541,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Njk0NTU1NTQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694555541",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T12:28:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2ZlODczNjc3YzY4ZGUwY2ZlZDRhMzg5MDBmZWE3ZWNlODFjYjU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7fe873677c68de0cfed4a38900fea7ece81cb55",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d7fe873677c68de0cfed4a38900fea7ece81cb55",
      "tree": {
        "sha": "cf11203aea20a8928a05ff61933f922bd484ccd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf11203aea20a8928a05ff61933f922bd484ccd5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2948c022d4f680c59bd0338429704df33b477070",
          "sha": "2948c022d4f680c59bd0338429704df33b477070",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2948c022d4f680c59bd0338429704df33b477070"
        }
      ],
      "message": "--- [SEGWIT] begin: fixups 11 ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:37:01Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:37:01Z"
      },
      "sha": "d7fe873677c68de0cfed4a38900fea7ece81cb55"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTE3N2EyNTc3MTgyZTkxZWJhN2NlYzA4M2IxYzIxY2M1NWRlMTNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e177a2577182e91eba7cec083b1c21cc55de13c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0e177a2577182e91eba7cec083b1c21cc55de13c",
      "tree": {
        "sha": "92580d9ac3b527d696c1f6c0163bbea00596b049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92580d9ac3b527d696c1f6c0163bbea00596b049"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7fe873677c68de0cfed4a38900fea7ece81cb55",
          "sha": "d7fe873677c68de0cfed4a38900fea7ece81cb55",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d7fe873677c68de0cfed4a38900fea7ece81cb55"
        }
      ],
      "message": "Don't treat NODE_WITNESS as relevant before a fork is defined",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:39:27Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:36:28Z"
      },
      "sha": "0e177a2577182e91eba7cec083b1c21cc55de13c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzc5NWVlNmRiY2Y4NGMzZjIyMWQzNWIxY2EyYjQxODI2ZmU0MjI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
      "tree": {
        "sha": "5a68ac4ac5a6ed3f7e60570560dc10fc017e0367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a68ac4ac5a6ed3f7e60570560dc10fc017e0367"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e177a2577182e91eba7cec083b1c21cc55de13c",
          "sha": "0e177a2577182e91eba7cec083b1c21cc55de13c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0e177a2577182e91eba7cec083b1c21cc55de13c"
        }
      ],
      "message": "Revert \"Don't check the genesis block PoW\" as segnet has been dropped.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:39:47Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-16T14:36:32Z"
      },
      "sha": "c7795ee6dbcf84c3f221d35b1ca2b41826fe4226"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 694752470,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Njk0NzUyNDcw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/694752470",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T14:59:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 695032377,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Njk1MDMyMzc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/695032377",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T18:30:57Z"
    },
    {
      "event": "commented",
      "id": 226574050,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjU3NDA1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226574050",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-16T18:35:22Z",
      "updated_at": "2016-06-16T18:35:22Z",
      "author_association": "MEMBER",
      "body": "New merge on top of #7600.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-226574050",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIyMDE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIyMDU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 226681359,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjY4MTM1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226681359",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-17T05:04:30Z",
      "updated_at": "2016-06-17T05:04:30Z",
      "author_association": "MEMBER",
      "body": "ACK e84733733d0ec3deee3b0d1cdcf643082b78ee1e\n\n(Will ACK in #8149 as well)\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-226681359",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAwODIyMDk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzA4YzNhNGNmNjc3YWJmMjJlZTg4Yzk0MDJmMGIxODI4MmZjOTJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c708c3a4cf677abf22ee88c9402f0b18282fc92f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c708c3a4cf677abf22ee88c9402f0b18282fc92f",
      "tree": {
        "sha": "5a68ac4ac5a6ed3f7e60570560dc10fc017e0367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a68ac4ac5a6ed3f7e60570560dc10fc017e0367"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
          "sha": "c7795ee6dbcf84c3f221d35b1ca2b41826fe4226",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7795ee6dbcf84c3f221d35b1ca2b41826fe4226"
        }
      ],
      "message": "--- [SEGWIT] begin: merge ---",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:42:32Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:42:32Z"
      },
      "sha": "c708c3a4cf677abf22ee88c9402f0b18282fc92f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGUzYzc1NWQ3ZTQxYWFhYmU3NGM4NGFmN2U0YmYwMGE2MmM5NmZi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "tree": {
        "sha": "435e8d4b828e1bf3aced2b8f1799a315afdd05a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/435e8d4b828e1bf3aced2b8f1799a315afdd05a5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c708c3a4cf677abf22ee88c9402f0b18282fc92f",
          "sha": "c708c3a4cf677abf22ee88c9402f0b18282fc92f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c708c3a4cf677abf22ee88c9402f0b18282fc92f"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f1807af2422e3ac2d3702242b4a47c8df0be262",
          "sha": "9f1807af2422e3ac2d3702242b4a47c8df0be262",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9f1807af2422e3ac2d3702242b4a47c8df0be262"
        }
      ],
      "message": "Merge remote-tracking branch 'upstream/master' into segwit-master",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:46:19Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-22T13:46:19Z"
      },
      "sha": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 700526242,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NzAwNTI2MjQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/700526242",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-22T14:02:50Z"
    },
    {
      "event": "commented",
      "id": 227756695,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzc1NjY5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/227756695",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-22T14:13:16Z",
      "updated_at": "2016-06-22T14:13:16Z",
      "author_association": "MEMBER",
      "body": "New merge after #8068 and #8179. See the details in https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-227755007.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-227756695",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 228171425,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyODE3MTQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/228171425",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-23T20:20:44Z",
      "updated_at": "2016-06-23T20:20:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "I udpated the sig cache PR (https://github.com/sipa/bitcoin/pull/101)\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-228171425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "commented",
      "id": 228391252,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIyODM5MTI1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/228391252",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-24T16:20:48Z",
      "updated_at": "2016-06-24T16:20:48Z",
      "author_association": "MEMBER",
      "body": "Merged as #8149.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#issuecomment-228391252",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7910"
    },
    {
      "event": "closed",
      "id": 703397150,
      "node_id": "MDExOkNsb3NlZEV2ZW50NzAzMzk3MTUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/703397150",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-06-24T16:20:55Z"
    },
    {
      "event": "mentioned",
      "id": 767219905,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NzY3MjE5OTA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/767219905",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-25T10:21:11Z"
    },
    {
      "event": "subscribed",
      "id": 767219906,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDc2NzIxOTkwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/767219906",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-25T10:21:11Z"
    },
    {
      "event": "mentioned",
      "id": 767226974,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NzY3MjI2OTc0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/767226974",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-25T10:28:15Z"
    },
    {
      "event": "subscribed",
      "id": 767226975,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDc2NzIyNjk3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/767226975",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-25T10:28:15Z"
    },
    {
      "event": "referenced",
      "id": 5153613878,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNTM2MTM4Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5153613878",
      "actor": {
        "login": "zkbot",
        "id": 17032253,
        "node_id": "MDQ6VXNlcjE3MDMyMjUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/17032253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zkbot",
        "html_url": "https://github.com/zkbot",
        "followers_url": "https://api.github.com/users/zkbot/followers",
        "following_url": "https://api.github.com/users/zkbot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zkbot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zkbot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zkbot/subscriptions",
        "organizations_url": "https://api.github.com/users/zkbot/orgs",
        "repos_url": "https://api.github.com/users/zkbot/repos",
        "events_url": "https://api.github.com/users/zkbot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zkbot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1d7ed0617499d3c6377e763eeeeeeea7fb0279b5",
      "commit_url": "https://api.github.com/repos/zcash/zcash/commits/1d7ed0617499d3c6377e763eeeeeeea7fb0279b5",
      "created_at": "2021-08-13T03:56:16Z"
    },
    {
      "event": "referenced",
      "id": 5170305918,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNzAzMDU5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5170305918",
      "actor": {
        "login": "zkbot",
        "id": 17032253,
        "node_id": "MDQ6VXNlcjE3MDMyMjUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/17032253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zkbot",
        "html_url": "https://github.com/zkbot",
        "followers_url": "https://api.github.com/users/zkbot/followers",
        "following_url": "https://api.github.com/users/zkbot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zkbot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zkbot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zkbot/subscriptions",
        "organizations_url": "https://api.github.com/users/zkbot/orgs",
        "repos_url": "https://api.github.com/users/zkbot/repos",
        "events_url": "https://api.github.com/users/zkbot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zkbot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "56b5f958973be5da9b8fd82dd314e8790b30ff91",
      "commit_url": "https://api.github.com/repos/zcash/zcash/commits/56b5f958973be5da9b8fd82dd314e8790b30ff91",
      "created_at": "2021-08-17T17:19:27Z"
    },
    {
      "event": "locked",
      "id": 5271554078,
      "node_id": "LOE_lADOABII584I6RmezwAAAAE6NYge",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271554078",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:03:33Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60280033",
      "pull_request_review_id": null,
      "id": 60280033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjgwMDMz",
      "diff_hunk": "@@ -312,6 +312,39 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue createwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"createwitnessaddress \\\"script\\\"\\n\"\n+            \"\\nCreates a witness address for a particular script.\\n\"\n+            \"It returns a json object with the address and witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"script\\\"       (string, required) A hex encoded script\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"  \\\"witnessScript\\\":\\\"script\\\"      (string) The string value of the hex-encoded witness script.\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    std::vector<unsigned char> code = ParseHex(params[0].get_str());",
      "path": "src/rpc/misc.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably should throw an error if it's not hex. Currently accepts anything entered.\n",
      "created_at": "2016-04-19T18:02:26Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60280033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60280033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 339,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60292915",
      "pull_request_review_id": null,
      "id": 60292915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjkyOTE1",
      "diff_hunk": "@@ -1095,6 +1095,75 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(innerID).ToString();\n }\n \n+class Witnessifier : public boost::static_visitor<bool>\n+{\n+public:\n+    CScriptID result;\n+\n+    bool operator()(const CNoDestination &dest) const { return false; }\n+\n+    bool operator()(const CKeyID &keyID) {\n+        CPubKey pubkey;\n+        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n+            CScript basescript;\n+            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+            CScript witscript = GetScriptForWitness(basescript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) {\n+        CScript subscript;\n+        if (pwalletMain && pwalletMain->GetCScript(scriptID, subscript)) {\n+            int witnessversion;\n+            std::vector<unsigned char> witprog;\n+            if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n+                result = scriptID;\n+                return true;\n+            }\n+            CScript witscript = GetScriptForWitness(subscript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+{",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: ensure wallet is available for more useful error than \"not known to wallet\"\n",
      "created_at": "2016-04-19T19:14:17Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60292915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60292915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1053,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60356762",
      "pull_request_review_id": null,
      "id": 60356762,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzU2NzYy",
      "diff_hunk": "@@ -3301,6 +3347,68 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    int commitpos = -1;",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 348,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "gubatron",
        "id": 163977,
        "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gubatron",
        "html_url": "https://github.com/gubatron",
        "followers_url": "https://api.github.com/users/gubatron/followers",
        "following_url": "https://api.github.com/users/gubatron/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gubatron/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gubatron/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
        "organizations_url": "https://api.github.com/users/gubatron/orgs",
        "repos_url": "https://api.github.com/users/gubatron/repos",
        "events_url": "https://api.github.com/users/gubatron/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gubatron/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this little commitpos check could use a refactor, it appears 3 times. #DRY.\n",
      "created_at": "2016-04-20T06:44:28Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60356762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60356762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3509,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60373788",
      "pull_request_review_id": null,
      "id": 60373788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzczNzg4",
      "diff_hunk": "@@ -3301,6 +3347,68 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    int commitpos = -1;",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 348,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree!\n",
      "created_at": "2016-04-20T09:07:33Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60373788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60373788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3509,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60453999",
      "pull_request_review_id": null,
      "id": 60453999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDUzOTk5",
      "diff_hunk": "@@ -1144,8 +1168,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "SergioDemianLerner",
        "id": 1752347,
        "node_id": "MDQ6VXNlcjE3NTIzNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SergioDemianLerner",
        "html_url": "https://github.com/SergioDemianLerner",
        "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
        "following_url": "https://api.github.com/users/SergioDemianLerner/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SergioDemianLerner/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SergioDemianLerner/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
        "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
        "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
        "events_url": "https://api.github.com/users/SergioDemianLerner/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GetTransactionSigOpCost() could return a value close to 2^29 (4M \\* 20 (multisig) \\* 4) so to be safe nSigOps should be an int64_t. That can prevent overflows on future witness size extensions.\n",
      "created_at": "2016-04-20T17:40:34Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60453999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60453999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60454436",
      "pull_request_review_id": null,
      "id": 60454436,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDU0NDM2",
      "diff_hunk": "@@ -2326,7 +2369,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n     int nInputs = 0;\n-    unsigned int nSigOps = 0;\n+    unsigned int nSigOpsCost = 0;",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 195,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "SergioDemianLerner",
        "id": 1752347,
        "node_id": "MDQ6VXNlcjE3NTIzNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SergioDemianLerner",
        "html_url": "https://github.com/SergioDemianLerner",
        "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
        "following_url": "https://api.github.com/users/SergioDemianLerner/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SergioDemianLerner/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SergioDemianLerner/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
        "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
        "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
        "events_url": "https://api.github.com/users/SergioDemianLerner/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same here. nSigOps -> int64_t\n",
      "created_at": "2016-04-20T17:43:08Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60454436",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60454436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60458667",
      "pull_request_review_id": null,
      "id": 60458667,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDU4NjY3",
      "diff_hunk": "@@ -31,3 +31,11 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // The intended approximate formula is: cost = base_size * 4 + witness_size.\n+    // We can only serialize base or base+witness, so the formula\n+    // becomes: cost = base_size * 3 + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);",
      "path": "src/primitives/block.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "SergioDemianLerner",
        "id": 1752347,
        "node_id": "MDQ6VXNlcjE3NTIzNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SergioDemianLerner",
        "html_url": "https://github.com/SergioDemianLerner",
        "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
        "following_url": "https://api.github.com/users/SergioDemianLerner/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SergioDemianLerner/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SergioDemianLerner/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
        "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
        "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
        "events_url": "https://api.github.com/users/SergioDemianLerner/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GetBlockCost() is part of consensus-critical code. Why is the phrase \"approximate formula\" used in a comment here?\nEither the formula is exact (and matches the BIP) or it is incorrect.\n",
      "created_at": "2016-04-20T18:06:53Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60458667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60458667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60463090",
      "pull_request_review_id": null,
      "id": 60463090,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDYzMDkw",
      "diff_hunk": "@@ -1144,8 +1168,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not (4M \\* 20 (multisig))? You may have 4MB only if it is a segwit tx, and cost of segwit sigops does not need to \\* 4\n",
      "created_at": "2016-04-20T18:32:29Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60463090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60463090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60482327",
      "pull_request_review_id": null,
      "id": 60482327,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDgyMzI3",
      "diff_hunk": "@@ -1144,8 +1168,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with jl2012, and I think an int64_t is not necessary at this point. It won't hurt though, so I'll switch the type.\n",
      "created_at": "2016-04-20T20:34:32Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60482327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60482327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60483311",
      "pull_request_review_id": null,
      "id": 60483311,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDgzMzEx",
      "diff_hunk": "@@ -31,3 +31,11 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // The intended approximate formula is: cost = base_size * 4 + witness_size.\n+    // We can only serialize base or base+witness, so the formula\n+    // becomes: cost = base_size * 3 + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);",
      "path": "src/primitives/block.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The formula is exact.\n\nIt's trying to explain the rationale for this rule (basesize \\* 3 + totalsize) by showing that it corresponds to (basesize \\* 4 + witsize). But perhaps this rationale belongs in the BIP and not in the code.\n",
      "created_at": "2016-04-20T20:40:44Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60483311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60483311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60519803",
      "pull_request_review_id": null,
      "id": 60519803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTE5ODAz",
      "diff_hunk": "@@ -6,10 +6,14 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */",
      "path": "src/consensus/consensus.h",
      "position": null,
      "original_position": 8,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What was the reasoning behind separating this from being derived from the network rule?\n",
      "created_at": "2016-04-21T02:48:43Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60519803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60519803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60521354",
      "pull_request_review_id": null,
      "id": 60521354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTIxMzU0",
      "diff_hunk": "@@ -1033,6 +1052,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"premature-version2-tx\");\n     }\n \n+    // Don't accept witness transactions before the final threshold passes",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> **Reject** witness transactions if segregated witness is disabled [and a witness exists]; override with `-prematurewitness` to bypass\n\nIMHO, reads easier, less negations to do in my head\n",
      "created_at": "2016-04-21T03:16:58Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60521354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60521354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60521686",
      "pull_request_review_id": null,
      "id": 60521686,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTIxNjg2",
      "diff_hunk": "@@ -1179,9 +1202,9 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        if ((nSigOps > MAX_STANDARD_TX_SIGOPS) || (nBytesPerSigOp && nSigOps > nSize / nBytesPerSigOp))\n+        if ((nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST) || (nBytesPerSigOp && nSigOpsCost > nSize * WITNESS_SCALE_FACTOR / nBytesPerSigOp))",
      "path": "src/main.cpp",
      "position": 121,
      "original_position": 89,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could this be bracketed such that precedence rules don't need to be remembered?\n",
      "created_at": "2016-04-21T03:24:05Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60521686",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60521686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1296,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60522057",
      "pull_request_review_id": null,
      "id": 60522057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTIyMDU3",
      "diff_hunk": "@@ -1144,8 +1168,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ACK switch to `uint64_t`,  its what is returned by `GetTransactionSigOpCost` any way... explicit casts should be the rule, not the exception (IMHO).\n",
      "created_at": "2016-04-21T03:32:24Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60522057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60522057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60522121",
      "pull_request_review_id": null,
      "id": 60522121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTIyMTIx",
      "diff_hunk": "@@ -6,10 +6,14 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_COST = 4000000;",
      "path": "src/consensus/consensus.h",
      "position": null,
      "original_position": 9,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Less implicit casts if this is also `uint64_t`\n",
      "created_at": "2016-04-21T03:33:53Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60522121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60522121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60643948",
      "pull_request_review_id": null,
      "id": 60643948,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjQzOTQ4",
      "diff_hunk": "@@ -3354,6 +3462,58 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256(witness root, witness nonce). In case there are\n+    //   multiple, the last one is used.\n+    bool fHaveWitness = false;\n+    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+        int commitpos = -1;\n+        for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+            if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+                commitpos = o;\n+            }\n+        }\n+        if (commitpos != -1) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n+                return state.DoS(100, error(\"%s : invalid witness commitment size\", __func__), REJECT_INVALID, \"bad-witness-merkle-size\", true);\n+            }\n+            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n+            if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+            }\n+            fHaveWitness = true;\n+        }\n+    }\n+\n+    // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room from spam",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 442,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dooglus",
        "id": 573356,
        "node_id": "MDQ6VXNlcjU3MzM1Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dooglus",
        "html_url": "https://github.com/dooglus",
        "followers_url": "https://api.github.com/users/dooglus/followers",
        "following_url": "https://api.github.com/users/dooglus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dooglus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dooglus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
        "organizations_url": "https://api.github.com/users/dooglus/orgs",
        "repos_url": "https://api.github.com/users/dooglus/repos",
        "events_url": "https://api.github.com/users/dooglus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dooglus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You mean \"room _for_ spam\"?\n",
      "created_at": "2016-04-21T19:48:44Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60643948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60643948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60644990",
      "pull_request_review_id": null,
      "id": 60644990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjQ0OTkw",
      "diff_hunk": "@@ -31,3 +31,11 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // The intended approximate formula is: cost = base_size * 4 + witness_size.\n+    // We can only serialize base or base+witness, so the formula\n+    // becomes: cost = base_size * 3 + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);",
      "path": "src/primitives/block.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dooglus",
        "id": 573356,
        "node_id": "MDQ6VXNlcjU3MzM1Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dooglus",
        "html_url": "https://github.com/dooglus",
        "followers_url": "https://api.github.com/users/dooglus/followers",
        "following_url": "https://api.github.com/users/dooglus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dooglus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dooglus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
        "organizations_url": "https://api.github.com/users/dooglus/orgs",
        "repos_url": "https://api.github.com/users/dooglus/repos",
        "events_url": "https://api.github.com/users/dooglus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dooglus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So just remove the word 'approximate'? I think it is helpful to keep the rest of the explanation here.\n",
      "created_at": "2016-04-21T19:56:17Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60644990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60644990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60646516",
      "pull_request_review_id": null,
      "id": 60646516,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjQ2NTE2",
      "diff_hunk": "@@ -3301,6 +3347,68 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    int commitpos = -1;\n+    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 350,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "kanzure",
        "id": 101238,
        "node_id": "MDQ6VXNlcjEwMTIzOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/101238?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kanzure",
        "html_url": "https://github.com/kanzure",
        "followers_url": "https://api.github.com/users/kanzure/followers",
        "following_url": "https://api.github.com/users/kanzure/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kanzure/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kanzure/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kanzure/subscriptions",
        "organizations_url": "https://api.github.com/users/kanzure/orgs",
        "repos_url": "https://api.github.com/users/kanzure/repos",
        "events_url": "https://api.github.com/users/kanzure/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kanzure/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would be nice to shorten this line, plus it's essentially repeated soon after a few lines later....\n\n```\nif (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n```\n",
      "created_at": "2016-04-21T20:06:31Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60646516",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60646516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3511,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60715820",
      "pull_request_review_id": null,
      "id": 60715820,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzE1ODIw",
      "diff_hunk": "@@ -2629,7 +2669,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n }\n \n /** Disconnect chainActive's tip. You probably want to call mempool.removeForReorg and manually re-limit mempool size after this, with cs_main held. */\n-bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams)\n+bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams, bool fBare = false)",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 254,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Needs merge conflict solved.\n",
      "created_at": "2016-04-22T09:50:35Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60715820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60715820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60715862",
      "pull_request_review_id": null,
      "id": 60715862,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzE1ODYy",
      "diff_hunk": "@@ -23,7 +23,7 @@\n import time\n import sys\n import random\n-from binascii import hexlify, unhexlify\n+from util import *",
      "path": "qa/rpc-tests/test_framework/mininode.py",
      "position": null,
      "original_position": 5,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Let's not do wildcard imports in mininode.\n",
      "created_at": "2016-04-22T09:50:55Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60715862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60715862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60718659",
      "pull_request_review_id": null,
      "id": 60718659,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzE4NjU5",
      "diff_hunk": "@@ -22,6 +22,29 @@ def create_block(hashprev, coinbase, nTime=None):\n     block.calc_sha256()\n     return block\n \n+# From BIP141\n+WITNESS_COMMITMENT_HEADER = \"\\xaa\\x21\\xa9\\xed\"\n+\n+# According to BIP141, nVersion=5 blocks must commit to the",
      "path": "qa/rpc-tests/test_framework/blocktools.py",
      "position": null,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment doesn't look right, since we're using version bits deployment.\n",
      "created_at": "2016-04-22T10:17:33Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60718659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60718659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60720954",
      "pull_request_review_id": null,
      "id": 60720954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzIwOTU0",
      "diff_hunk": "@@ -16,6 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n+    DEPLOYMENT_WITNESS,",
      "path": "src/consensus/params.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add comment `Deployment of BIP141 and BIP143`\n",
      "created_at": "2016-04-22T10:41:28Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60720954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60720954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60721107",
      "pull_request_review_id": null,
      "id": 60721107,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzIxMTA3",
      "diff_hunk": "@@ -92,6 +93,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n+        // Deployment of SegWit.",
      "path": "src/chainparams.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "add the BIP numbers being deployed.\n\n`Deployment of SegWit, BIP141 and BIP143`\n",
      "created_at": "2016-04-22T10:42:57Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60721107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60721107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60809182",
      "pull_request_review_id": null,
      "id": 60809182,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODA5MTgy",
      "diff_hunk": "@@ -330,13 +332,15 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n             \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash/id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"txid\\\" : \\\"xxxx\\\",          (string) transaction id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rename to \"witnesshash\", or mention hash is based on witnesshash in description.\n",
      "created_at": "2016-04-22T22:03:09Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60809182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60809182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60824710",
      "pull_request_review_id": null,
      "id": 60824710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI0NzEw",
      "diff_hunk": "@@ -330,13 +332,15 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n             \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash/id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"txid\\\" : \\\"xxxx\\\",          (string) transaction id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is from BIP145, though I agree it's helpful to document.\n",
      "created_at": "2016-04-23T07:33:50Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60824710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60824710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60824714",
      "pull_request_review_id": null,
      "id": 60824714,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI0NzE0",
      "diff_hunk": "@@ -312,6 +312,39 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue createwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"createwitnessaddress \\\"script\\\"\\n\"\n+            \"\\nCreates a witness address for a particular script.\\n\"\n+            \"It returns a json object with the address and witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"script\\\"       (string, required) A hex encoded script\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"  \\\"witnessScript\\\":\\\"script\\\"      (string) The string value of the hex-encoded witness script.\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    std::vector<unsigned char> code = ParseHex(params[0].get_str());",
      "path": "src/rpc/misc.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree.\n",
      "created_at": "2016-04-23T07:34:12Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60824714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60824714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 339,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826625",
      "pull_request_review_id": null,
      "id": 60826625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2NjI1",
      "diff_hunk": "@@ -6,10 +6,14 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */",
      "path": "src/consensus/consensus.h",
      "position": null,
      "original_position": 8,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is not derived from the network rule because it is the (only) network rule. What would you derive it from?\n",
      "created_at": "2016-04-23T10:31:50Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826671",
      "pull_request_review_id": null,
      "id": 60826671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2Njcx",
      "diff_hunk": "@@ -1179,9 +1202,9 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        if ((nSigOps > MAX_STANDARD_TX_SIGOPS) || (nBytesPerSigOp && nSigOps > nSize / nBytesPerSigOp))\n+        if ((nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST) || (nBytesPerSigOp && nSigOpsCost > nSize * WITNESS_SCALE_FACTOR / nBytesPerSigOp))",
      "path": "src/main.cpp",
      "position": 121,
      "original_position": 89,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that's necessary here.\n",
      "created_at": "2016-04-23T10:37:44Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1296,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826717",
      "pull_request_review_id": null,
      "id": 60826717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2NzE3",
      "diff_hunk": "@@ -3301,6 +3347,68 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    int commitpos = -1;\n+    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 350,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, will factor it out to a separate function.\n",
      "created_at": "2016-04-23T10:42:59Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3511,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826733",
      "pull_request_review_id": null,
      "id": 60826733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2NzMz",
      "diff_hunk": "@@ -31,3 +31,11 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // The intended approximate formula is: cost = base_size * 4 + witness_size.\n+    // We can only serialize base or base+witness, so the formula\n+    // becomes: cost = base_size * 3 + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, 0) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_WITNESS);",
      "path": "src/primitives/block.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will do.\n",
      "created_at": "2016-04-23T10:44:51Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826808",
      "pull_request_review_id": null,
      "id": 60826808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODA4",
      "diff_hunk": "@@ -22,6 +22,29 @@ def create_block(hashprev, coinbase, nTime=None):\n     block.calc_sha256()\n     return block\n \n+# From BIP141\n+WITNESS_COMMITMENT_HEADER = \"\\xaa\\x21\\xa9\\xed\"\n+\n+# According to BIP141, nVersion=5 blocks must commit to the",
      "path": "qa/rpc-tests/test_framework/blocktools.py",
      "position": null,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will fix.\n",
      "created_at": "2016-04-23T10:51:12Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826823",
      "pull_request_review_id": null,
      "id": 60826823,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODIz",
      "diff_hunk": "@@ -92,6 +93,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n+        // Deployment of SegWit.",
      "path": "src/chainparams.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will fix.\n",
      "created_at": "2016-04-23T10:51:43Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826858",
      "pull_request_review_id": null,
      "id": 60826858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODU4",
      "diff_hunk": "@@ -6,10 +6,14 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_COST = 4000000;",
      "path": "src/consensus/consensus.h",
      "position": null,
      "original_position": 9,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will turn all sigops cost variables into int64_t\n",
      "created_at": "2016-04-23T10:54:49Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826863",
      "pull_request_review_id": null,
      "id": 60826863,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODYz",
      "diff_hunk": "@@ -16,6 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n+    DEPLOYMENT_WITNESS,",
      "path": "src/consensus/params.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will do.\n",
      "created_at": "2016-04-23T10:55:23Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826863",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826869",
      "pull_request_review_id": null,
      "id": 60826869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODY5",
      "diff_hunk": "@@ -1033,6 +1052,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"premature-version2-tx\");\n     }\n \n+    // Don't accept witness transactions before the final threshold passes",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will fix.\n",
      "created_at": "2016-04-23T10:55:37Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826871",
      "pull_request_review_id": null,
      "id": 60826871,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODcx",
      "diff_hunk": "@@ -2326,7 +2369,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n     int nInputs = 0;\n-    unsigned int nSigOps = 0;\n+    unsigned int nSigOpsCost = 0;",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 195,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, will do.\n",
      "created_at": "2016-04-23T10:55:59Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826874",
      "pull_request_review_id": null,
      "id": 60826874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODc0",
      "diff_hunk": "@@ -3354,6 +3462,58 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256(witness root, witness nonce). In case there are\n+    //   multiple, the last one is used.\n+    bool fHaveWitness = false;\n+    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+        int commitpos = -1;\n+        for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+            if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+                commitpos = o;\n+            }\n+        }\n+        if (commitpos != -1) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n+                return state.DoS(100, error(\"%s : invalid witness commitment size\", __func__), REJECT_INVALID, \"bad-witness-merkle-size\", true);\n+            }\n+            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n+            if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n+                return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+            }\n+            fHaveWitness = true;\n+        }\n+    }\n+\n+    // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room from spam",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 442,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do!\n",
      "created_at": "2016-04-23T10:56:21Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826883",
      "pull_request_review_id": null,
      "id": 60826883,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODgz",
      "diff_hunk": "@@ -1095,6 +1095,75 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(innerID).ToString();\n }\n \n+class Witnessifier : public boost::static_visitor<bool>\n+{\n+public:\n+    CScriptID result;\n+\n+    bool operator()(const CNoDestination &dest) const { return false; }\n+\n+    bool operator()(const CKeyID &keyID) {\n+        CPubKey pubkey;\n+        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n+            CScript basescript;\n+            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+            CScript witscript = GetScriptForWitness(basescript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) {\n+        CScript subscript;\n+        if (pwalletMain && pwalletMain->GetCScript(scriptID, subscript)) {\n+            int witnessversion;\n+            std::vector<unsigned char> witprog;\n+            if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n+                result = scriptID;\n+                return true;\n+            }\n+            CScript witscript = GetScriptForWitness(subscript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+{",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will do.\n",
      "created_at": "2016-04-23T10:57:32Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60826883",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60826883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1053,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60932289",
      "pull_request_review_id": null,
      "id": 60932289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTMyMjg5",
      "diff_hunk": "@@ -3353,6 +3464,53 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256(witness root, witness nonce). In case there are",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 418,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Double SHA256?\n",
      "created_at": "2016-04-25T15:22:16Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60932289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60932289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60933279",
      "pull_request_review_id": null,
      "id": 60933279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTMzMjc5",
      "diff_hunk": "@@ -1373,10 +1396,24 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n+        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n+        if (!Params().RequireStandard()) {\n+            scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n+        }\n+\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-            return false; // state filled in by CheckInputs\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true)) {\n+            // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n+            // need to turn both off, and compare against just turning off CLEANSTACK\n+            // to see if the failure is specifically due to witness validation.\n+            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n+                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n+                // Only the witness is wrong, so the transaction itself may be fine.",
      "path": "src/main.cpp",
      "position": 147,
      "original_position": 115,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what does \"may be fine\" mean here?\n\nedit: nevermind, I see the explanation here: https://github.com/bitcoin/bitcoin/commit/1e478052ca3222d13ce3646dd152ebcf27f07e76#diff-7ec3c68a81efff79b6ca22ac1f1eabbaR5221\n",
      "created_at": "2016-04-25T15:27:33Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60933279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60933279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1503,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60948634",
      "pull_request_review_id": null,
      "id": 60948634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTQ4NjM0",
      "diff_hunk": "@@ -194,8 +198,133 @@ class CTxOut\n     std::string ToString() const;\n };\n \n+class CTxinWitness\n+{\n+public:\n+    CScriptWitness scriptWitness;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(scriptWitness.stack);\n+    }\n+\n+    bool IsNull() const { return scriptWitness.IsNull(); }\n+\n+    CTxinWitness() { }\n+};\n+\n+class CTxWitness\n+{\n+public:\n+    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n+    std::vector<CTxinWitness> vtxinwit;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    bool IsEmpty() const { return vtxinwit.empty(); }\n+\n+    bool IsNull() const\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            if (!vtxinwit[n].IsNull()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    void SetNull()\n+    {\n+        vtxinwit.clear();\n+    }\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            READWRITE(vtxinwit[n]);\n+        }\n+        if (IsNull()) {\n+            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n+            throw std::ios_base::failure(\"Superfluous witness record\");\n+        }\n+    }\n+};\n+\n struct CMutableTransaction;\n \n+/**\n+ * Basic transaction serialization format:\n+ * - int32_t nVersion\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - uint32_t nLockTime\n+ *\n+ * Extended transaction serialization format:\n+ * - int32_t nVersion\n+ * - unsigned char dummy = 0x00\n+ * - unsigned char flags (!= 0)\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - if (flags & 1):\n+ *   - CTxWitness wit;\n+ * - uint32_t nLockTime\n+ */\n+template<typename Stream, typename Operation, typename TxType>\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    unsigned char flags = 0;\n+    if (ser_action.ForRead()) {\n+        /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        if (tx.vin.size() == 0 && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+            /* We read a dummy or an empty vin. */\n+            READWRITE(flags);\n+            if (flags != 0) {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 100,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need to handle the case that `flags == 0`? For instance, the serialization of a transaction with no inputs and no outputs, maybe we should explicitly make sure tx.vout is set empty?\n\n(i put this same comment somewhere wrong initially)\n",
      "created_at": "2016-04-25T16:59:50Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60948634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60948634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60953084",
      "pull_request_review_id": null,
      "id": 60953084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTUzMDg0",
      "diff_hunk": "@@ -32,7 +32,7 @@\n [\"Tests for CheckTransaction()\"],\n [\"No inputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n-\"0100000000010000000000000000015100000000\", \"P2SH\"],\n+\"01000000000000010000000000000000015100000000\", \"P2SH\"],",
      "path": "src/test/data/tx_invalid.json",
      "position": null,
      "original_position": 5,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think after your fixup commit this doesn't deserialize properly, which probably isn't what we're supposed to be testing here.\n",
      "created_at": "2016-04-25T17:29:30Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60953084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60953084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60953841",
      "pull_request_review_id": null,
      "id": 60953841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTUzODQx",
      "diff_hunk": "@@ -194,8 +198,133 @@ class CTxOut\n     std::string ToString() const;\n };\n \n+class CTxinWitness\n+{\n+public:\n+    CScriptWitness scriptWitness;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(scriptWitness.stack);\n+    }\n+\n+    bool IsNull() const { return scriptWitness.IsNull(); }\n+\n+    CTxinWitness() { }\n+};\n+\n+class CTxWitness\n+{\n+public:\n+    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n+    std::vector<CTxinWitness> vtxinwit;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    bool IsEmpty() const { return vtxinwit.empty(); }\n+\n+    bool IsNull() const\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            if (!vtxinwit[n].IsNull()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    void SetNull()\n+    {\n+        vtxinwit.clear();\n+    }\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            READWRITE(vtxinwit[n]);\n+        }\n+        if (IsNull()) {\n+            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n+            throw std::ios_base::failure(\"Superfluous witness record\");\n+        }\n+    }\n+};\n+\n struct CMutableTransaction;\n \n+/**\n+ * Basic transaction serialization format:\n+ * - int32_t nVersion\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - uint32_t nLockTime\n+ *\n+ * Extended transaction serialization format:\n+ * - int32_t nVersion\n+ * - unsigned char dummy = 0x00\n+ * - unsigned char flags (!= 0)\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - if (flags & 1):\n+ *   - CTxWitness wit;\n+ * - uint32_t nLockTime\n+ */\n+template<typename Stream, typename Operation, typename TxType>\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    unsigned char flags = 0;\n+    if (ser_action.ForRead()) {\n+        /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        if (tx.vin.size() == 0 && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+            /* We read a dummy or an empty vin. */\n+            READWRITE(flags);\n+            if (flags != 0) {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 100,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That is intentional. If a transaction starting with \"[version] 0x00 0x00 ...\" is seen, it is treated as one with no inputs and no outputs.\n",
      "created_at": "2016-04-25T17:33:26Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60953841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60953841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60993521",
      "pull_request_review_id": null,
      "id": 60993521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTkzNTIx",
      "diff_hunk": "@@ -183,6 +186,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             const CTransaction& tx = iter->GetTx();\n \n+            if (!fIncludeWitness && !tx.wit.IsNull())",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't necessary right?  Perhaps we need a better way to identify which rules for block assembly are enforced by the mempool, but I'd rather that we keep redundant checks out to make future work on block assembly easier.  At the very least this should be commented that unless there is a reorg to a lower height more work chain immediately at the segwit activation border, then this check is superfluous.\n",
      "created_at": "2016-04-25T21:34:18Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60993521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60993521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60996698",
      "pull_request_review_id": null,
      "id": 60996698,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk2Njk4",
      "diff_hunk": "@@ -183,6 +186,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             const CTransaction& tx = iter->GetTx();\n \n+            if (!fIncludeWitness && !tx.wit.IsNull())",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, this is a hack.\n",
      "created_at": "2016-04-25T21:56:00Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r60996698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60996698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61024859",
      "pull_request_review_id": null,
      "id": 61024859,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDI0ODU5",
      "diff_hunk": "@@ -6,10 +6,14 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */",
      "path": "src/consensus/consensus.h",
      "position": null,
      "original_position": 8,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "7b539f9bfe4e96a9b30ffdc874aa80e4308c9dec",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "All good,  I forgot I made that comment before finishing reviewing the majority of the PR,  it makes sense now :+1: \n",
      "created_at": "2016-04-26T03:40:44Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61024859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61024859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61092167",
      "pull_request_review_id": null,
      "id": 61092167,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDkyMTY3",
      "diff_hunk": "@@ -89,22 +89,22 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     // Add dummy coinbase tx as first transaction\n     pblock->vtx.push_back(CTransaction());\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n-    pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    unsigned int nBlockMaxCost = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE) * WITNESS_SCALE_FACTOR;\n     // Limit to between 1K and MAX_BLOCK_SIZE-1K for sanity:",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: update comment to cost/4k\n",
      "created_at": "2016-04-26T14:12:17Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61092167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61092167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61101582",
      "pull_request_review_id": null,
      "id": 61101582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTAxNTgy",
      "diff_hunk": "@@ -3353,6 +3464,53 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256(witness root, witness nonce). In case there are\n+    //   multiple, the last one is used.\n+    bool fHaveWitness = false;\n+    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+        int commitpos = GetWitnessCommitmentIndex(block);\n+        if (commitpos != -1) {\n+            bool malleated = false;\n+            uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+            // The malleation check is ignored; as the transaction tree itself\n+            // already does not permit it, it is impossible to trigger in the\n+            // witness tree.\n+            if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n+                return state.DoS(100, error(\"%s : invalid witness commitment size\", __func__), REJECT_INVALID, \"bad-witness-merkle-size\", true);",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 430,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This error message might be clearer if it indicated that it was the \"nonce\" that was the wrong size.\n",
      "created_at": "2016-04-26T14:58:59Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61101582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61101582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61148809",
      "pull_request_review_id": null,
      "id": 61148809,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTQ4ODA5",
      "diff_hunk": "@@ -5176,8 +5185,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else {\n-            assert(recentRejects);\n-            recentRejects->insert(tx.GetHash());\n+            if (!state.CorruptionPossible()) {\n+                assert(recentRejects);\n+                recentRejects->insert(tx.GetHash());",
      "path": "src/main.cpp",
      "position": 743,
      "original_position": 28,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "1e478052ca3222d13ce3646dd152ebcf27f07e76",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is minor, but shouldn't we put a similar guard up above, where failed-orphan transactions get added to `recentRejects`?  Presumably failed orphans should also only be added to `recentRejects` if the corruption field is not set?\n",
      "created_at": "2016-04-26T19:27:54Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61148809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61148809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5605,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61296431",
      "pull_request_review_id": null,
      "id": 61296431,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjk2NDMx",
      "diff_hunk": "@@ -1106,8 +1110,64 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion)\n {\n+    if (sigversion == 1) {",
      "path": "src/script/interpreter.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "d374139b87d96a3ab4582351ddf52f57b85aee3d",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would it be easier to read if any time we had a sigversion we used an enum?\n",
      "created_at": "2016-04-27T17:02:25Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61296431",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61296431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61302292",
      "pull_request_review_id": null,
      "id": 61302292,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzAyMjky",
      "diff_hunk": "@@ -331,6 +333,7 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n             \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe rebase error?  nextblockhash is repeated.  to keep the order the same as output, chainwork should go before previousblockhash and nextblockhash.\n",
      "created_at": "2016-04-27T17:36:36Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61302292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61302292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61305131",
      "pull_request_review_id": null,
      "id": 61305131,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzA1MTMx",
      "diff_hunk": "@@ -331,6 +333,7 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n             \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "81b3d67eac896bcc64c18cc1c31ee27c8ab919bf",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the ordering has always been wrong: https://github.com/bitcoin/bitcoin/pull/7194\n",
      "created_at": "2016-04-27T17:52:59Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61305131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61305131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61351055",
      "pull_request_review_id": null,
      "id": 61351055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzUxMDU1",
      "diff_hunk": "@@ -183,6 +186,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             const CTransaction& tx = iter->GetTx();\n \n+            if (!fIncludeWitness && !tx.wit.IsNull())",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Going to replace it with an extra delay before witness transactions are accepted to the mempool.\n",
      "created_at": "2016-04-27T22:58:29Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61351055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61351055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61352908",
      "pull_request_review_id": null,
      "id": 61352908,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzUyOTA4",
      "diff_hunk": "@@ -183,6 +186,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             const CTransaction& tx = iter->GetTx();\n \n+            if (!fIncludeWitness && !tx.wit.IsNull())",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa I'm not sure it's necessary to replace it with anything.  Given the way versionbits soft forks activate, its not really possible to have it unactivate without an enormous reorg\n",
      "created_at": "2016-04-27T23:17:35Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61352908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61352908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61354416",
      "pull_request_review_id": null,
      "id": 61354416,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzU0NDE2",
      "diff_hunk": "@@ -5176,8 +5185,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else {\n-            assert(recentRejects);\n-            recentRejects->insert(tx.GetHash());\n+            if (!state.CorruptionPossible()) {\n+                assert(recentRejects);\n+                recentRejects->insert(tx.GetHash());",
      "path": "src/main.cpp",
      "position": 743,
      "original_position": 28,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "1e478052ca3222d13ce3646dd152ebcf27f07e76",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed, and likewise for the misbehaviour assignment.\n",
      "created_at": "2016-04-27T23:34:08Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61354416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61354416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5605,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61356165",
      "pull_request_review_id": null,
      "id": 61356165,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzU2MTY1",
      "diff_hunk": "@@ -1106,8 +1110,64 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion)\n {\n+    if (sigversion == 1) {",
      "path": "src/script/interpreter.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "d374139b87d96a3ab4582351ddf52f57b85aee3d",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh yes!\n",
      "created_at": "2016-04-27T23:54:29Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61356165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61356165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61426731",
      "pull_request_review_id": null,
      "id": 61426731,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDI2NzMx",
      "diff_hunk": "@@ -194,8 +199,140 @@ class CTxOut\n     std::string ToString() const;\n };\n \n+class CTxinWitness\n+{\n+public:\n+    CScriptWitness scriptWitness;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(scriptWitness.stack);\n+    }\n+\n+    bool IsNull() const { return scriptWitness.IsNull(); }\n+\n+    CTxinWitness() { }\n+};\n+\n+class CTxWitness\n+{\n+public:\n+    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n+    std::vector<CTxinWitness> vtxinwit;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    bool IsEmpty() const { return vtxinwit.empty(); }\n+\n+    bool IsNull() const\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            if (!vtxinwit[n].IsNull()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    void SetNull()\n+    {\n+        vtxinwit.clear();\n+    }\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            READWRITE(vtxinwit[n]);\n+        }\n+        if (IsNull()) {\n+            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n+            throw std::ios_base::failure(\"Superfluous witness record\");\n+        }\n+    }\n+};\n+\n struct CMutableTransaction;\n \n+/**\n+ * Basic transaction serialization format:\n+ * - int32_t nVersion\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - uint32_t nLockTime\n+ *\n+ * Extended transaction serialization format:\n+ * - int32_t nVersion\n+ * - unsigned char dummy = 0x00\n+ * - unsigned char flags (!= 0)\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - if (flags & 1):\n+ *   - CTxWitness wit;\n+ * - uint32_t nLockTime\n+ */\n+template<typename Stream, typename Operation, typename TxType>\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    unsigned char flags = 0;\n+    /* Verify that exactly one of SERIALIZE_TRANSACTION_WITNESS and SERIALIZE_TRANSACTION_NO_WITESS is set */\n+    assert(!(nVersion & SERIALIZE_TRANSACTION_WITNESS) ^ !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS));\n+    if (ser_action.ForRead()) {\n+        const_cast<std::vector<CTxIn>*>(&tx.vin)->clear();\n+        const_cast<std::vector<CTxOut>*>(&tx.vout)->clear();\n+        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n+        /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        if (tx.vin.size() == 0 && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n+            /* We read a dummy or an empty vin. */\n+            READWRITE(flags);\n+            if (flags != 0) {\n+                READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+                READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+            }\n+        } else {\n+            /* We read a non-empty vin. Assume a normal vout follows. */\n+            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        }\n+        const_cast<CTxWitness*>(&tx.wit)->SetNull();",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 114,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "588da1e3a35c75c1d4cbe50b0224cca810db0bf0",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is redundant to line 286 now\n",
      "created_at": "2016-04-28T13:31:50Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61426731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61426731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61438709",
      "pull_request_review_id": null,
      "id": 61438709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM4NzA5",
      "diff_hunk": "@@ -3901,6 +4059,68 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool RewindBlockIndex(const CChainParams& params)\n+{\n+    LOCK(cs_main);\n+\n+    int nHeight = 1;\n+    while (nHeight <= chainActive.Height()) {\n+        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+            break;\n+        }\n+        nHeight++;\n+    }\n+\n+    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+    CValidationState state;\n+    CBlockIndex* pindex = chainActive.Tip();\n+    while (chainActive.Height() >= nHeight) {\n+        if (!DisconnectTip(state, params, true)) {\n+            return error(\"RewindBlockIndex: unable to disconnect block at height %i\", pindex->nHeight);\n+        }\n+        // Occasionally flush state to disk.\n+        if (!FlushStateToDisk(state, FLUSH_STATE_PERIODIC))\n+            return false;\n+    }\n+\n+    // Reduce validity flag and have-data flags.\n+    // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+    // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+        CBlockIndex* pindexIter = it->second;\n+        if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS)) {\n+            // Reduce validity\n+            pindexIter->nStatus = std::min<unsigned int>(pindexIter->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (pindexIter->nStatus & ~BLOCK_VALID_MASK);\n+            // Remove have-data flags.\n+            pindexIter->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+            // Remove storage location.\n+            pindexIter->nFile = 0;\n+            pindexIter->nDataPos = 0;\n+            pindexIter->nUndoPos = 0;\n+            // Remove various other things\n+            pindexIter->nTx = 0;\n+            pindexIter->nChainTx = 0;\n+            pindexIter->nSequenceId = 0;\n+            // Make sure it gets written.\n+            setDirtyBlockIndex.insert(pindexIter);\n+            // Update setBlockIndexCandidates\n+            setBlockIndexCandidates.erase(pindexIter);",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 529,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "588da1e3a35c75c1d4cbe50b0224cca810db0bf0",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "do we also need to remove it from mapBlocksUnlinked?\n",
      "created_at": "2016-04-28T14:41:59Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61438709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61438709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4295,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61521620",
      "pull_request_review_id": null,
      "id": 61521620,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIxNjIw",
      "diff_hunk": "@@ -39,4 +39,7 @@ static const int SENDHEADERS_VERSION = 70012;\n //! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n static const int FEEFILTER_VERSION = 70013;\n \n+//! Version after which witness support potentially exists\n+static const int WITNESS_VERSION = 70013;",
      "path": "src/version.h",
      "position": null,
      "original_position": 5,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "588da1e3a35c75c1d4cbe50b0224cca810db0bf0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This variable doesn't appear to be used by anything; I assume this was introduced before switching to the service bit, not sure if you intended to leave it here as a useful marker, or remove?\n",
      "created_at": "2016-04-29T00:06:10Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61521620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61521620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61522239",
      "pull_request_review_id": null,
      "id": 61522239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIyMjM5",
      "diff_hunk": "@@ -3901,6 +4059,68 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool RewindBlockIndex(const CChainParams& params)\n+{\n+    LOCK(cs_main);\n+\n+    int nHeight = 1;\n+    while (nHeight <= chainActive.Height()) {\n+        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+            break;\n+        }\n+        nHeight++;\n+    }\n+\n+    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+    CValidationState state;\n+    CBlockIndex* pindex = chainActive.Tip();\n+    while (chainActive.Height() >= nHeight) {\n+        if (!DisconnectTip(state, params, true)) {",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 500,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "588da1e3a35c75c1d4cbe50b0224cca810db0bf0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This logic will cause pruning nodes to fail (un-gracefully) if they try to upgrade after activation and the activation block has been pruned (which could be as short as two days).  I propose that for pruning nodes, we don't bother trying to rewind past their HAVE_DATA point.  \n",
      "created_at": "2016-04-29T00:14:23Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61522239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61522239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4260,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61636847",
      "pull_request_review_id": null,
      "id": 61636847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM2ODQ3",
      "diff_hunk": "@@ -86,16 +86,30 @@ enum\n     //\n     // See BIP112 for details\n     SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),\n+\n+    // Support segregated witness\n+    //\n+    SCRIPT_VERIFY_WITNESS = (1U << 11),\n+\n+    // Making v2-v16 witness program non-standard",
      "path": "src/script/interpreter.h",
      "position": null,
      "original_position": 18,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "588da1e3a35c75c1d4cbe50b0224cca810db0bf0",
      "in_reply_to_id": null,
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "// Making v1-v16 witness program non-standard\n",
      "created_at": "2016-04-29T20:03:26Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r61636847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/61636847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62604879",
      "pull_request_review_id": null,
      "id": 62604879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjA0ODc5",
      "diff_hunk": "@@ -3350,6 +3461,53 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 426,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "ad4f9c71d030b2de822c4b9245d818479a66b605",
      "in_reply_to_id": null,
      "user": {
        "login": "wallclockbuilder",
        "id": 2033945,
        "node_id": "MDQ6VXNlcjIwMzM5NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2033945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wallclockbuilder",
        "html_url": "https://github.com/wallclockbuilder",
        "followers_url": "https://api.github.com/users/wallclockbuilder/followers",
        "following_url": "https://api.github.com/users/wallclockbuilder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/wallclockbuilder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/wallclockbuilder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/wallclockbuilder/subscriptions",
        "organizations_url": "https://api.github.com/users/wallclockbuilder/orgs",
        "repos_url": "https://api.github.com/users/wallclockbuilder/repos",
        "events_url": "https://api.github.com/users/wallclockbuilder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/wallclockbuilder/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "-    // \\* ~~The~~There must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n",
      "created_at": "2016-05-10T02:39:51Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r62604879",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62604879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62776324",
      "pull_request_review_id": null,
      "id": 62776324,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2MzI0",
      "diff_hunk": "@@ -3901,6 +4059,68 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool RewindBlockIndex(const CChainParams& params)\n+{\n+    LOCK(cs_main);\n+\n+    int nHeight = 1;\n+    while (nHeight <= chainActive.Height()) {\n+        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+            break;\n+        }\n+        nHeight++;\n+    }\n+\n+    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+    CValidationState state;\n+    CBlockIndex* pindex = chainActive.Tip();\n+    while (chainActive.Height() >= nHeight) {\n+        if (!DisconnectTip(state, params, true)) {",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 500,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "588da1e3a35c75c1d4cbe50b0224cca810db0bf0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good, can you provide a patch?\n",
      "created_at": "2016-05-11T00:26:11Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r62776324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62776324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4260,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64025439",
      "pull_request_review_id": null,
      "id": 64025439,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI1NDM5",
      "diff_hunk": "@@ -69,29 +69,49 @@ struct ECCryptoClosure\n ECCryptoClosure instance_of_eccryptoclosure;\n }\n \n-int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n-         // Regardless of the verification result, the tx did not error.\n-         set_error(err, bitcoinconsensus_ERR_OK);\n+        // Regardless of the verification result, the tx did not error.\n+        set_error(err, bitcoinconsensus_ERR_OK);\n \n-        CAmount am(0);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }\n }\n \n+int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n+                                    const unsigned char *txTo        , unsigned int txToLen,\n+                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    CAmount am(amount);",
      "path": "src/script/bitcoinconsensus.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e5735719c437a3cd15665e533e7db4b31e280397",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This casts uint64_t -> int64_t.\nShould probably test the uint64_t directly against MAX_MONEY and fail immediately here as necessary.\n\nMaybe bitcoinconsensus_ERR_TX_AMOUNT_VALUE?\n",
      "created_at": "2016-05-20T11:13:08Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64025439",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64025439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64027026",
      "pull_request_review_id": null,
      "id": 64027026,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI3MDI2",
      "diff_hunk": "@@ -152,16 +152,16 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, co\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n     ScriptError err;\n-    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n+    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, txCredit);\n     CMutableTransaction tx2 = tx;\n-    static const CAmount amountZero = 0;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, amountZero), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n     if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n-        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), amountZero, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);\n+        BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect, message);",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "abbe085caeecd33f5c4c9a27d4981f84896846b8",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like none of the tests actually use a non-zero value -- seems like we should add a way to exercise the code in the non-zero value case (as the zero case is special).\n",
      "created_at": "2016-05-20T11:30:13Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64027026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64027026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64033059",
      "pull_request_review_id": null,
      "id": 64033059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDMzMDU5",
      "diff_hunk": "@@ -69,29 +69,49 @@ struct ECCryptoClosure\n ECCryptoClosure instance_of_eccryptoclosure;\n }\n \n-int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n-         // Regardless of the verification result, the tx did not error.\n-         set_error(err, bitcoinconsensus_ERR_OK);\n+        // Regardless of the verification result, the tx did not error.\n+        set_error(err, bitcoinconsensus_ERR_OK);\n \n-        CAmount am(0);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }\n }\n \n+int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n+                                    const unsigned char *txTo        , unsigned int txToLen,\n+                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    CAmount am(amount);",
      "path": "src/script/bitcoinconsensus.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e5735719c437a3cd15665e533e7db4b31e280397",
      "in_reply_to_id": null,
      "user": {
        "login": "afk11",
        "id": 5617245,
        "node_id": "MDQ6VXNlcjU2MTcyNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/afk11",
        "html_url": "https://github.com/afk11",
        "followers_url": "https://api.github.com/users/afk11/followers",
        "following_url": "https://api.github.com/users/afk11/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/afk11/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/afk11/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
        "organizations_url": "https://api.github.com/users/afk11/orgs",
        "repos_url": "https://api.github.com/users/afk11/repos",
        "events_url": "https://api.github.com/users/afk11/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/afk11/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or just accept int64_t, as amounts are never interpreted as unsigned..\n",
      "created_at": "2016-05-20T12:28:16Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64033059",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64033059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64034244",
      "pull_request_review_id": null,
      "id": 64034244,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM0MjQ0",
      "diff_hunk": "@@ -69,29 +69,49 @@ struct ECCryptoClosure\n ECCryptoClosure instance_of_eccryptoclosure;\n }\n \n-int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n-         // Regardless of the verification result, the tx did not error.\n-         set_error(err, bitcoinconsensus_ERR_OK);\n+        // Regardless of the verification result, the tx did not error.\n+        set_error(err, bitcoinconsensus_ERR_OK);\n \n-        CAmount am(0);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }\n }\n \n+int bitcoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n+                                    const unsigned char *txTo        , unsigned int txToLen,\n+                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    CAmount am(amount);",
      "path": "src/script/bitcoinconsensus.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e5735719c437a3cd15665e533e7db4b31e280397",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I assumed that (self-documentation) was the reason for the uint64_t.\n",
      "created_at": "2016-05-20T12:39:10Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64034244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64034244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64095501",
      "pull_request_review_id": null,
      "id": 64095501,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDk1NTAx",
      "diff_hunk": "@@ -173,13 +173,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available // old_block_size\n \n-        # 144MB will be reserved for relaying new blocks, so expect this to\n-        # succeed for ~70 tries.\n+        # 576MB will be reserved for relaying new blocks, so expect this to\n+        # succeed for ~235 tries.\n         for i in range(success_count):",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 24,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "nicola",
        "id": 1424850,
        "node_id": "MDQ6VXNlcjE0MjQ4NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1424850?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nicola",
        "html_url": "https://github.com/nicola",
        "followers_url": "https://api.github.com/users/nicola/followers",
        "following_url": "https://api.github.com/users/nicola/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nicola/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nicola/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nicola/subscriptions",
        "organizations_url": "https://api.github.com/users/nicola/orgs",
        "repos_url": "https://api.github.com/users/nicola/repos",
        "events_url": "https://api.github.com/users/nicola/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nicola/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "do you mind explaining this calculation?\n",
      "created_at": "2016-05-20T19:32:53Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64095501",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64095501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131407",
      "pull_request_review_id": null,
      "id": 64131407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxNDA3",
      "diff_hunk": "@@ -358,6 +358,18 @@ vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n     return ParseHexUV(o[strKey], strKey);\n }\n \n+static CAmount AmountFromValue(const UniValue& value)",
      "path": "src/bitcoin-tx.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think we should place this in a utility class and use the same implementation also for bitcoin-txs (`static CAmount AmountFromValue(const UniValue& value)`). Can be done post this PR.\n",
      "created_at": "2016-05-21T08:46:19Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131407",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 366,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131412",
      "pull_request_review_id": null,
      "id": 64131412,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxNDEy",
      "diff_hunk": "@@ -3297,6 +3356,71 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_WITNESS, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n+// Compute at which vout of the block's coinbase transaction the witness\n+// commitment occurs, or -1 if not found.\n+static int GetWitnessCommitmentIndex(const CBlock& block)\n+{\n+    int commitpos = -1;\n+    for (size_t o = 0; o < block.vtx[0].vout.size(); o++) {\n+        if (block.vtx[0].vout[o].scriptPubKey.size() >= 38 && block.vtx[0].vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0].vout[o].scriptPubKey[1] == 0x24 && block.vtx[0].vout[o].scriptPubKey[2] == 0xaa && block.vtx[0].vout[o].scriptPubKey[3] == 0x21 && block.vtx[0].vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0].vout[o].scriptPubKey[5] == 0xed) {\n+            commitpos = o;\n+        }\n+    }\n+    return commitpos;\n+}\n+\n+void UpdateUncommitedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 381,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"Uncommited\" -> \"Uncommitted\"\n",
      "created_at": "2016-05-21T08:47:44Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131454",
      "pull_request_review_id": null,
      "id": 64131454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxNDU0",
      "diff_hunk": "@@ -21,6 +22,7 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n+        strUsage += HelpMessageOpt(\"-segnet\", \"Enter segregated witness test mode. \");",
      "path": "src/chainparamsbase.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/mode. \")/mode.\")/\n",
      "created_at": "2016-05-21T08:51:53Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131474",
      "pull_request_review_id": null,
      "id": 64131474,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxNDc0",
      "diff_hunk": "@@ -6,10 +6,16 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+#include <stdint.h>\n+\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_COST = 4000000;",
      "path": "src/consensus/consensus.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This may be too much bikeshedding, but I think this would be clearer as `MAX_BLOCK_SIZE_COST` (and eg `GetBlockSizeCost()` elsewhere) to distinguish from the `MAX_BLOCK_SIGOPS_COST`.\n",
      "created_at": "2016-05-21T08:53:49Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131609",
      "pull_request_review_id": null,
      "id": 64131609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxNjA5",
      "diff_hunk": "@@ -282,3 +300,26 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;\n }\n+\n+CScript GetScriptForWitness(const CScript& redeemscript)",
      "path": "src/script/standard.cpp",
      "position": 37,
      "original_position": 37,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~I think \"GetWitnessProgramForScript\" is more direct and clear.~~\n\nI had a misunderstanding of \"witness program\" definition somehow. \n\n\"GetScriptForWitnessScript\" isn't much clearer either. Hm.\n",
      "created_at": "2016-05-21T09:08:45Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131750",
      "pull_request_review_id": null,
      "id": 64131750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxNzUw",
      "diff_hunk": "@@ -1239,28 +1299,106 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)",
      "path": "src/script/interpreter.cpp",
      "position": 136,
      "original_position": 136,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "WitnessProgram has a specific meaning, which is defined in https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program \n\nTherefore, this function would be better named as \"VerifyWitness\".\n",
      "created_at": "2016-05-21T09:23:22Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1302,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131853",
      "pull_request_review_id": null,
      "id": 64131853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxODUz",
      "diff_hunk": "@@ -1239,28 +1299,106 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n+    vector<vector<unsigned char> > stack;\n+    CScript scriptPubKey;\n+\n+    if (witversion == 0) {\n+        if (program.size() == 32) {\n+            // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n+            if (witness.stack.size() == 0) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+            }\n+            scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n+            uint256 hashScriptPubKey;\n+            CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n+            if (memcmp(hashScriptPubKey.begin(), &program[0], 32)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+        } else if (program.size() == 20) {\n+            // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n+            if (witness.stack.size() != 2) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n+            }\n+            scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n+            stack = witness.stack;\n+        } else {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n+        }\n+    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+    } else {\n+        // Higher version witness scripts return true for future softfork compatibility\n+        return set_success(serror);\n+    }\n+\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n+            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+    }\n+\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, SIGVERSION_WITNESS_V0, serror)) {\n+        return false;\n+    }\n+\n+    // Scripts inside witness implicitly require cleanstack behaviour",
      "path": "src/script/interpreter.cpp",
      "position": 181,
      "original_position": 181,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Phrasing bothering me. The cleanstackness is implicit(not using the flag) but it requiring some new behavior is surely explicit here. Perhaps rewrite as:\n\n// Scripts inside witness require implicit cleanstack behavior as a consensus rule.\n",
      "created_at": "2016-05-21T09:36:34Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1347,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131992",
      "pull_request_review_id": null,
      "id": 64131992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMxOTky",
      "diff_hunk": "@@ -1239,28 +1299,106 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n+    vector<vector<unsigned char> > stack;\n+    CScript scriptPubKey;\n+\n+    if (witversion == 0) {\n+        if (program.size() == 32) {\n+            // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n+            if (witness.stack.size() == 0) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+            }\n+            scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n+            uint256 hashScriptPubKey;\n+            CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n+            if (memcmp(hashScriptPubKey.begin(), &program[0], 32)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+        } else if (program.size() == 20) {\n+            // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n+            if (witness.stack.size() != 2) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n+            }\n+            scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n+            stack = witness.stack;\n+        } else {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n+        }\n+    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+    } else {\n+        // Higher version witness scripts return true for future softfork compatibility\n+        return set_success(serror);\n+    }\n+\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n+            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+    }\n+\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, SIGVERSION_WITNESS_V0, serror)) {\n+        return false;\n+    }\n+\n+    // Scripts inside witness implicitly require cleanstack behaviour\n+    if (stack.size() != 1)\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    if (!CastToBool(stack.back()))\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    return true;\n+}\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+{\n+    static const CScriptWitness emptyWitness;\n+    if (witness == NULL) {\n+        witness = &emptyWitness;\n+    }\n+    bool hadWitness = false;\n+\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n \n     if ((flags & SCRIPT_VERIFY_SIGPUSHONLY) != 0 && !scriptSig.IsPushOnly()) {\n         return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);\n     }\n \n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, flags, checker, serror))\n+    if (!EvalScript(stack, scriptSig, flags, checker, SIGVERSION_BASE, serror))\n         // serror is set\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, serror))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, SIGVERSION_BASE, serror))\n         // serror is set\n         return false;\n     if (stack.empty())\n         return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n     if (CastToBool(stack.back()) == false)\n         return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n \n+    // Bare witness programs\n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            hadWitness = true;\n+            if (scriptSig.size() != 0) {\n+                // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n+                return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED);\n+            }\n+            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                return false;\n+            }\n+            // Bypass the cleanstack check at the end. The actual stack is obviously not clean",
      "path": "src/script/interpreter.cpp",
      "position": 232,
      "original_position": 232,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/actual/base/ ?\n",
      "created_at": "2016-05-21T09:49:31Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64131992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64131992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1396,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64132010",
      "pull_request_review_id": null,
      "id": 64132010,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTMyMDEw",
      "diff_hunk": "@@ -1280,26 +1418,102 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stack);\n \n-        if (!EvalScript(stack, pubKey2, flags, checker, serror))\n+        if (!EvalScript(stack, pubKey2, flags, checker, SIGVERSION_BASE, serror))\n             // serror is set\n             return false;\n         if (stack.empty())\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n         if (!CastToBool(stack.back()))\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+\n+        // P2SH witness program\n+        if (flags & SCRIPT_VERIFY_WITNESS) {\n+            if (pubKey2.IsWitnessProgram(witnessversion, witnessprogram)) {\n+                hadWitness = true;\n+                if (scriptSig != CScript() << std::vector<unsigned char>(pubKey2.begin(), pubKey2.end())) {\n+                    // The scriptSig must be _exactly_ a single push of the redeemScript. Otherwise we\n+                    // reintroduce malleability.\n+                    return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);\n+                }\n+                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                    return false;\n+                }\n+                // Bypass the cleanstack check at the end. The actual stack is obviously not clean",
      "path": "src/script/interpreter.cpp",
      "position": 266,
      "original_position": 266,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/actual/base/\n",
      "created_at": "2016-05-21T09:51:15Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64132010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64132010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1441,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64135342",
      "pull_request_review_id": null,
      "id": 64135342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTM1MzQy",
      "diff_hunk": "@@ -31,3 +31,12 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // This implements the cost = (stripped_size * 4) + witness_size formula,",
      "path": "src/primitives/block.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: This comment would also be useful in GetTransactionCost, since the reasoning appears identical.\n",
      "created_at": "2016-05-21T14:36:13Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64135342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64135342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147047",
      "pull_request_review_id": null,
      "id": 64147047,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ3MDQ3",
      "diff_hunk": "@@ -511,7 +512,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (const CTransaction& tx, pblock->vtx) {\n+    BOOST_FOREACH (CTransaction& tx, pblock->vtx) {",
      "path": "src/rpc/mining.cpp",
      "position": 50,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why can't this still be `const`?\n",
      "created_at": "2016-05-22T09:31:59Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147135",
      "pull_request_review_id": null,
      "id": 64147135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ3MTM1",
      "diff_hunk": "@@ -511,7 +512,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (const CTransaction& tx, pblock->vtx) {\n+    BOOST_FOREACH (CTransaction& tx, pblock->vtx) {",
      "path": "src/rpc/mining.cpp",
      "position": 50,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No clue!\n",
      "created_at": "2016-05-22T09:42:52Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147230",
      "pull_request_review_id": null,
      "id": 64147230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ3MjMw",
      "diff_hunk": "@@ -0,0 +1,1575 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print(\"\\tTesting non-witness transaction\")\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))",
      "path": "qa/rpc-tests/p2p-segwit.py",
      "position": 276,
      "original_position": 262,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "self.test_node_test_witness_block with withWitness=False will do this fine\n",
      "created_at": "2016-05-22T09:49:04Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147996",
      "pull_request_review_id": null,
      "id": 64147996,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ3OTk2",
      "diff_hunk": "@@ -511,7 +512,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (const CTransaction& tx, pblock->vtx) {\n+    BOOST_FOREACH (CTransaction& tx, pblock->vtx) {",
      "path": "src/rpc/mining.cpp",
      "position": 50,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> No clue!\n\nAs in,  compiler error or is this a mistaken edit?\n",
      "created_at": "2016-05-22T10:53:29Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64147996",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64147996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64405990",
      "pull_request_review_id": null,
      "id": 64405990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDA1OTkw",
      "diff_hunk": "@@ -19,6 +19,8 @@ static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n+/** Default for -blockmaxcost, which control the range of block costs the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_COST = 3000000;",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "1e9cba2873fd25270a5d368ece46362613ade9a4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suggest we change this to 4000000 so that pre-activation, miners who are setting only `-blockmaxsize` don't see a potential behavior change.\n\nFYI this is what is currently breaking `qa/rpc-tests/pruning.py`.\n",
      "created_at": "2016-05-24T14:51:24Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64405990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64405990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64577749",
      "pull_request_review_id": null,
      "id": 64577749,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTc3NzQ5",
      "diff_hunk": "@@ -0,0 +1,1575 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print(\"\\tTesting non-witness transaction\")\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print(\"\\tTesting witness commitments\")\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print(\"\\tTesting witness block malleability\")\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print(\"\\tTesting witness block size limit\")\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, b\"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in range(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print(\"\\tTesting extra witness data in tx\")\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness",
      "path": "qa/rpc-tests/p2p-segwit.py",
      "position": 605,
      "original_position": 586,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: mention that this violates consensus cleanstack\n",
      "created_at": "2016-05-25T14:03:18Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64577749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64577749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 605,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64584415",
      "pull_request_review_id": null,
      "id": 64584415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg0NDE1",
      "diff_hunk": "@@ -0,0 +1,1575 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print(\"\\tTesting non-witness transaction\")\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print(\"\\tTesting witness commitments\")\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print(\"\\tTesting witness block malleability\")\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print(\"\\tTesting witness block size limit\")\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, b\"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in range(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print(\"\\tTesting extra witness data in tx\")\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), b\"\")) # non-witness\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+\n+        # This has extra witness data, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra witness, but add extra scriptSig data\n+        tx2.vin[0].scriptSig = CScript([OP_TRUE])\n+        tx2.vin[1].scriptSig = CScript([OP_TRUE])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack.pop(0)\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = []\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # This has extra signature data for a witness input, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra scriptsig on the witness input, and verify\n+        # success (even with extra scriptsig data in the non-witness input)\n+        tx2.vin[0].scriptSig = b\"\"\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update utxo for later tests\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_max_witness_push_length(self):\n+        ''' Should only allow up to 520 byte pushes in witness stack '''\n+        print(\"\\tTesting maximum witness push size\")\n+        MAX_SCRIPT_ELEMENT_SIZE = 520\n+        assert(len(self.utxo))\n+\n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        # First try a 521-byte stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ b'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now reduce the length of the stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+\n+        add_witness_commitment(block)\n+        block.solve()\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update the utxo for later tests\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    def test_max_witness_program_length(self):\n+        # Can create witness outputs that are long, but can't be greater than\n+        # 10k bytes to successfully spend\n+        print(\"\\tTesting maximum witness program length\")\n+        assert(len(self.utxo))\n+        MAX_PROGRAM_LENGTH = 10000\n+\n+        # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n+        long_witness_program = CScript([b'a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n+        long_witness_hash = sha256(long_witness_program)\n+        long_scriptPubKey = CScript([OP_0, long_witness_hash])\n+\n+        block = self.build_next_block()\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*44 + [long_witness_program]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try again with one less byte in the witness program\n+        witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n+        tx.rehash()\n+        tx2.vin[0].prevout.hash = tx.sha256\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*43 + [witness_program]\n+        tx2.rehash()\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_input_length(self):\n+        ''' Ensure that vin length must match vtxinwit length '''\n+        print(\"\\tTesting witness input length\")\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        \n+        # Create a transaction that splits our utxo into many outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        nValue = self.utxo[0].nValue\n+        for i in range(10):\n+            tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n+        tx.vout[0].nValue -= 1000\n+        assert(tx.vout[0].nValue >= 0)\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try various ways to spend tx that should all break.\n+        # This \"broken\" transaction serializer will not normalize\n+        # the length of vtxinwit.\n+        class BrokenCTransaction(CTransaction):\n+            def serialize_with_witness(self):\n+                flags = 0\n+                if not self.wit.is_null():\n+                    flags |= 1\n+                r = b\"\"\n+                r += struct.pack(\"<i\", self.nVersion)\n+                if flags:\n+                    dummy = []\n+                    r += ser_vector(dummy)\n+                    r += struct.pack(\"<B\", flags)\n+                r += ser_vector(self.vin)\n+                r += ser_vector(self.vout)\n+                if flags & 1:\n+                    r += self.wit.serialize()\n+                r += struct.pack(\"<I\", self.nLockTime)\n+                return r\n+\n+        tx2 = BrokenCTransaction()\n+        for i in range(10):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n+        tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n+\n+        # First try using a too long vtxinwit\n+        for i in range(11):\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now try using a too short vtxinwit\n+        tx2.wit.vtxinwit.pop()\n+        tx2.wit.vtxinwit.pop()\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now make one of the intermediate witnesses be incorrect\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [b'a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Fix the broken witness and the block should be accepted.\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_tx_relay_before_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected for premature-witness, but should\n+        # not be added to recently rejected list.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n+        # the getdata is just for the non-witness portion.\n+        self.old_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.old_node.last_getdata.inv[0].type == 1)\n+\n+        # Since we haven't delivered the tx yet, inv'ing the same tx from\n+        # a witness transaction ought not result in a getdata.\n+        try:\n+            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n+            print(\"Error: duplicate tx getdata!\")\n+            assert(False)\n+        except AssertionError as e:\n+            pass\n+\n+        # Delivering this transaction with witness should fail (no matter who\n+        # its from)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # But eliminating the witness should fix it\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Just tweak the transaction, announce it, and verify we get a getdata\n+        # for a witness_tx\n+        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n+        tx.rehash()\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+\n+        # Cleanup: mine the first transaction and update utxo\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx_hash, 0, tx_value))\n+\n+\n+    # After segwit activates, verify that mempool:\n+    # - rejects transactions with unnecessary/extra witnesses\n+    # - accepts transactions with valid witnesses\n+    # and that witness transactions are relayed to non-upgraded peers.",
      "path": "qa/rpc-tests/p2p-segwit.py",
      "position": 878,
      "original_position": 859,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "only the announcements are relayed in this code?\n",
      "created_at": "2016-05-25T14:38:04Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64584415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64584415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 878,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64585393",
      "pull_request_review_id": null,
      "id": 64585393,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg1Mzkz",
      "diff_hunk": "@@ -0,0 +1,1575 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print(\"\\tTesting non-witness transaction\")\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print(\"\\tTesting witness commitments\")\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print(\"\\tTesting witness block malleability\")\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print(\"\\tTesting witness block size limit\")\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, b\"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in range(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print(\"\\tTesting extra witness data in tx\")\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), b\"\")) # non-witness\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+\n+        # This has extra witness data, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra witness, but add extra scriptSig data\n+        tx2.vin[0].scriptSig = CScript([OP_TRUE])\n+        tx2.vin[1].scriptSig = CScript([OP_TRUE])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack.pop(0)\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = []\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # This has extra signature data for a witness input, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra scriptsig on the witness input, and verify\n+        # success (even with extra scriptsig data in the non-witness input)\n+        tx2.vin[0].scriptSig = b\"\"\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update utxo for later tests\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_max_witness_push_length(self):\n+        ''' Should only allow up to 520 byte pushes in witness stack '''\n+        print(\"\\tTesting maximum witness push size\")\n+        MAX_SCRIPT_ELEMENT_SIZE = 520\n+        assert(len(self.utxo))\n+\n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        # First try a 521-byte stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ b'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now reduce the length of the stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+\n+        add_witness_commitment(block)\n+        block.solve()\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update the utxo for later tests\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    def test_max_witness_program_length(self):\n+        # Can create witness outputs that are long, but can't be greater than\n+        # 10k bytes to successfully spend\n+        print(\"\\tTesting maximum witness program length\")\n+        assert(len(self.utxo))\n+        MAX_PROGRAM_LENGTH = 10000\n+\n+        # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n+        long_witness_program = CScript([b'a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n+        long_witness_hash = sha256(long_witness_program)\n+        long_scriptPubKey = CScript([OP_0, long_witness_hash])\n+\n+        block = self.build_next_block()\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*44 + [long_witness_program]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try again with one less byte in the witness program\n+        witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n+        tx.rehash()\n+        tx2.vin[0].prevout.hash = tx.sha256\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*43 + [witness_program]\n+        tx2.rehash()\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_input_length(self):\n+        ''' Ensure that vin length must match vtxinwit length '''\n+        print(\"\\tTesting witness input length\")\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        \n+        # Create a transaction that splits our utxo into many outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        nValue = self.utxo[0].nValue\n+        for i in range(10):\n+            tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n+        tx.vout[0].nValue -= 1000\n+        assert(tx.vout[0].nValue >= 0)\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try various ways to spend tx that should all break.\n+        # This \"broken\" transaction serializer will not normalize\n+        # the length of vtxinwit.\n+        class BrokenCTransaction(CTransaction):\n+            def serialize_with_witness(self):\n+                flags = 0\n+                if not self.wit.is_null():\n+                    flags |= 1\n+                r = b\"\"\n+                r += struct.pack(\"<i\", self.nVersion)\n+                if flags:\n+                    dummy = []\n+                    r += ser_vector(dummy)\n+                    r += struct.pack(\"<B\", flags)\n+                r += ser_vector(self.vin)\n+                r += ser_vector(self.vout)\n+                if flags & 1:\n+                    r += self.wit.serialize()\n+                r += struct.pack(\"<I\", self.nLockTime)\n+                return r\n+\n+        tx2 = BrokenCTransaction()\n+        for i in range(10):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n+        tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n+\n+        # First try using a too long vtxinwit\n+        for i in range(11):\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now try using a too short vtxinwit\n+        tx2.wit.vtxinwit.pop()\n+        tx2.wit.vtxinwit.pop()\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now make one of the intermediate witnesses be incorrect\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [b'a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Fix the broken witness and the block should be accepted.\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_tx_relay_before_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected for premature-witness, but should\n+        # not be added to recently rejected list.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n+        # the getdata is just for the non-witness portion.\n+        self.old_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.old_node.last_getdata.inv[0].type == 1)\n+\n+        # Since we haven't delivered the tx yet, inv'ing the same tx from\n+        # a witness transaction ought not result in a getdata.\n+        try:\n+            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n+            print(\"Error: duplicate tx getdata!\")\n+            assert(False)\n+        except AssertionError as e:\n+            pass\n+\n+        # Delivering this transaction with witness should fail (no matter who\n+        # its from)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # But eliminating the witness should fix it\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Just tweak the transaction, announce it, and verify we get a getdata\n+        # for a witness_tx\n+        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n+        tx.rehash()\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+\n+        # Cleanup: mine the first transaction and update utxo\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx_hash, 0, tx_value))\n+\n+\n+    # After segwit activates, verify that mempool:\n+    # - rejects transactions with unnecessary/extra witnesses\n+    # - accepts transactions with valid witnesses\n+    # and that witness transactions are relayed to non-upgraded peers.",
      "path": "qa/rpc-tests/p2p-segwit.py",
      "position": 878,
      "original_position": 859,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good observation; we should verify that sending the two different kinds of `getdata` give the expected results.\n",
      "created_at": "2016-05-25T14:42:58Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64585393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64585393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 878,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64614163",
      "pull_request_review_id": null,
      "id": 64614163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjE0MTYz",
      "diff_hunk": "@@ -0,0 +1,1575 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print(\"\\tTesting non-witness transaction\")\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print(\"\\tTesting witness commitments\")\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print(\"\\tTesting witness block malleability\")\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print(\"\\tTesting witness block size limit\")\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, b\"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in range(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print(\"\\tTesting extra witness data in tx\")\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), b\"\")) # non-witness\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+\n+        # This has extra witness data, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra witness, but add extra scriptSig data\n+        tx2.vin[0].scriptSig = CScript([OP_TRUE])\n+        tx2.vin[1].scriptSig = CScript([OP_TRUE])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack.pop(0)\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = []\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # This has extra signature data for a witness input, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra scriptsig on the witness input, and verify\n+        # success (even with extra scriptsig data in the non-witness input)\n+        tx2.vin[0].scriptSig = b\"\"\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update utxo for later tests\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_max_witness_push_length(self):\n+        ''' Should only allow up to 520 byte pushes in witness stack '''\n+        print(\"\\tTesting maximum witness push size\")\n+        MAX_SCRIPT_ELEMENT_SIZE = 520\n+        assert(len(self.utxo))\n+\n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        # First try a 521-byte stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ b'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now reduce the length of the stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+\n+        add_witness_commitment(block)\n+        block.solve()\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update the utxo for later tests\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    def test_max_witness_program_length(self):\n+        # Can create witness outputs that are long, but can't be greater than\n+        # 10k bytes to successfully spend\n+        print(\"\\tTesting maximum witness program length\")\n+        assert(len(self.utxo))\n+        MAX_PROGRAM_LENGTH = 10000\n+\n+        # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n+        long_witness_program = CScript([b'a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n+        long_witness_hash = sha256(long_witness_program)\n+        long_scriptPubKey = CScript([OP_0, long_witness_hash])\n+\n+        block = self.build_next_block()\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*44 + [long_witness_program]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try again with one less byte in the witness program\n+        witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n+        tx.rehash()\n+        tx2.vin[0].prevout.hash = tx.sha256\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*43 + [witness_program]\n+        tx2.rehash()\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_input_length(self):\n+        ''' Ensure that vin length must match vtxinwit length '''\n+        print(\"\\tTesting witness input length\")\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        \n+        # Create a transaction that splits our utxo into many outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        nValue = self.utxo[0].nValue\n+        for i in range(10):\n+            tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n+        tx.vout[0].nValue -= 1000\n+        assert(tx.vout[0].nValue >= 0)\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try various ways to spend tx that should all break.\n+        # This \"broken\" transaction serializer will not normalize\n+        # the length of vtxinwit.\n+        class BrokenCTransaction(CTransaction):\n+            def serialize_with_witness(self):\n+                flags = 0\n+                if not self.wit.is_null():\n+                    flags |= 1\n+                r = b\"\"\n+                r += struct.pack(\"<i\", self.nVersion)\n+                if flags:\n+                    dummy = []\n+                    r += ser_vector(dummy)\n+                    r += struct.pack(\"<B\", flags)\n+                r += ser_vector(self.vin)\n+                r += ser_vector(self.vout)\n+                if flags & 1:\n+                    r += self.wit.serialize()\n+                r += struct.pack(\"<I\", self.nLockTime)\n+                return r\n+\n+        tx2 = BrokenCTransaction()\n+        for i in range(10):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n+        tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n+\n+        # First try using a too long vtxinwit\n+        for i in range(11):\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now try using a too short vtxinwit\n+        tx2.wit.vtxinwit.pop()\n+        tx2.wit.vtxinwit.pop()\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now make one of the intermediate witnesses be incorrect\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [b'a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Fix the broken witness and the block should be accepted.\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_tx_relay_before_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected for premature-witness, but should\n+        # not be added to recently rejected list.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n+        # the getdata is just for the non-witness portion.\n+        self.old_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.old_node.last_getdata.inv[0].type == 1)\n+\n+        # Since we haven't delivered the tx yet, inv'ing the same tx from\n+        # a witness transaction ought not result in a getdata.\n+        try:\n+            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n+            print(\"Error: duplicate tx getdata!\")\n+            assert(False)\n+        except AssertionError as e:\n+            pass\n+\n+        # Delivering this transaction with witness should fail (no matter who\n+        # its from)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # But eliminating the witness should fix it\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Just tweak the transaction, announce it, and verify we get a getdata\n+        # for a witness_tx\n+        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n+        tx.rehash()\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+\n+        # Cleanup: mine the first transaction and update utxo\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx_hash, 0, tx_value))\n+\n+\n+    # After segwit activates, verify that mempool:\n+    # - rejects transactions with unnecessary/extra witnesses\n+    # - accepts transactions with valid witnesses\n+    # and that witness transactions are relayed to non-upgraded peers.\n+    def test_tx_relay_after_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected because we can't use a witness\n+        # when spending a non-witness output.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that unnecessary witnesses are rejected.\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # Verify that removing the witness succeeds.\n+        # Re-announcing won't result in a getdata for ~2.5 minutes, so just\n+        # deliver the modified transaction.\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Now try to add extra witness data to a valid witness tx.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n+        tx2.rehash()\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx3.wit.vtxinwit.append(CTxinWitness())\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n+        tx3.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+\n+        # Get rid of the extra witness, and verify acceptance.\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        # Also check that old_node gets a tx announcement, even though this is\n+        # a witness transaction.\n+        self.old_node.wait_for_inv(CInv(1, tx2.sha256)) # wait until tx2 was inv'ed\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        self.old_node.wait_for_inv(CInv(1, tx3.sha256))\n+\n+        # Cleanup: mine the transactions and update utxo for next test\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    # Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG\n+    # This is true regardless of segwit activation.\n+    def test_block_relay(self, segwit_activated):\n+        print(\"\\tTesting block relay\")\n+\n+        # test_node has set NODE_WITNESS, so all getdata requests should be for\n+        # witness blocks.\n+        # Test announcing a block via inv results in a getdata, and that\n+        # announcing a version 4 or random VB block with a header results in a getdata\n+\n+        block1 = self.build_next_block()\n+        block1.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block1, True)\n+\n+        block2 = self.build_next_block(nVersion=4)\n+        block2.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block2, True)\n+\n+        block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n+        block3.solve()\n+        self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block3, True)\n+\n+        # Check that we can getdata for witness blocks or regular blocks,\n+        # and the right thing happens.\n+        if segwit_activated == False:\n+            # Before activation, we should be able to request old blocks with\n+            # or without witness, and they should be the same.\n+            chain_height = self.nodes[0].getblockcount()\n+            # Pick 10 random blocks on main chain, and verify that getdata's\n+            # for MSG_BLOCK, MSG_WITNESS_BLOCK, and rpc getblock() are equal.\n+            all_heights = list(range(chain_height+1))\n+            random.shuffle(all_heights)\n+            all_heights = all_heights[0:10]\n+            for height in all_heights:\n+                block_hash = self.nodes[0].getblockhash(height)\n+                rpc_block = self.nodes[0].getblock(block_hash, False)\n+                block_hash = int(block_hash, 16)\n+                block = self.test_node.request_block(block_hash, 2)\n+                wit_block = self.test_node.request_block(block_hash, 2|MSG_WITNESS_FLAG)\n+                assert_equal(block.serialize(True), wit_block.serialize(True))\n+                assert_equal(block.serialize(), hex_str_to_bytes(rpc_block))\n+        else:\n+            # After activation, witness blocks and non-witness blocks should\n+            # be different.  Verify rpc getblock() returns witness blocks, while\n+            # getdata respects the requested type.\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [])\n+            # This gives us a witness commitment.\n+            assert(len(block.vtx[0].wit.vtxinwit) == 1)\n+            assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n+            self.test_node.test_witness_block(block, accepted=True)\n+            # Now try to retrieve it...\n+            rpc_block = self.nodes[0].getblock(block.hash, False)\n+            non_wit_block = self.test_node.request_block(block.sha256, 2)\n+            wit_block = self.test_node.request_block(block.sha256, 2|MSG_WITNESS_FLAG)\n+            assert_equal(wit_block.serialize(True), hex_str_to_bytes(rpc_block))\n+            assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n+            assert_equal(wit_block.serialize(True), block.serialize(True))\n+\n+\n+    # Verify that future segwit upgraded transactions are non-standard,\n+    # but valid in blocks. Can run this before and after segwit activation.\n+    def test_segwit_versions(self):\n+        print(\"\\tTesting standardness/consensus for segwit versions (0-16)\")\n+        assert(len(self.utxo))\n+        NUM_TESTS = 17 # will test OP_0, OP1, ..., OP_16\n+        if (len(self.utxo) < NUM_TESTS):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+            split_value = (self.utxo[0].nValue - 4000) // NUM_TESTS\n+            for i in range(NUM_TESTS):\n+                tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n+            tx.rehash()\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [tx])\n+            self.test_node.test_witness_block(block, accepted=True)\n+            self.utxo.pop(0)\n+            for i in range(NUM_TESTS):\n+                self.utxo.append(UTXO(tx.sha256, i, split_value))\n+\n+        sync_blocks(self.nodes)\n+        temp_utxo = []\n+        tx = CTransaction()\n+        count = 0\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        for version in list(range(OP_1, OP_16+1)) + [OP_0]:\n+            count += 1\n+            # First try to spend to a future version segwit scriptPubKey.\n+            scriptPubKey = CScript([CScriptOp(version), witness_hash])\n+            tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n+            tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n+            tx.rehash()\n+            self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+            self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+            self.utxo.pop(0)\n+            temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+        self.nodes[0].generate(1) # Mine all the transactions\n+        sync_blocks(self.nodes)\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+\n+        # Finally, verify that version 0 -> version 1 transactions\n+        # are non-standard\n+        scriptPubKey = CScript([CScriptOp(OP_1), witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n+        tx2.vout = [CTxOut(tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        tx2.rehash()\n+        # Gets accepted to test_node, because standardness of outputs isn't\n+        # checked with fRequireStandard\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=False)\n+        temp_utxo.pop() # last entry in temp_utxo was the output we just spent\n+        temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+        # Spend everything in temp_utxo back to an OP_TRUE output.\n+        tx3 = CTransaction()\n+        total_value = 0\n+        for i in temp_utxo:\n+            tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n+            tx3.wit.vtxinwit.append(CTxinWitness())\n+            total_value += i.nValue\n+        tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n+        tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n+        tx3.rehash()\n+        # Spending a higher version witness output is not allowed by policy,\n+        # even with fRequireStandard=false.\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        self.test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n+\n+        # Building a block with the transaction must be valid, however.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2, tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+        # Add utxo to our list\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_premature_coinbase_witness_spend(self):\n+        print(\"\\tTesting premature coinbase witness spend\")\n+        block = self.build_next_block()\n+        # Change the output of the block to be a witness output.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        block.vtx[0].vout[0].scriptPubKey = scriptPubKey\n+        # This next line will rehash the coinbase and update the merkle\n+        # root, and solve.\n+        self.update_witness_block_with_transactions(block, [])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        spend_tx = CTransaction()\n+        spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n+        spend_tx.vout = [CTxOut(block.vtx[0].vout[0].nValue, witness_program)]\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        spend_tx.rehash()\n+\n+        # Now test a premature spend.\n+        self.nodes[0].generate(98)\n+        sync_blocks(self.nodes)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=False)\n+\n+        # Advancing one more block should allow the spend.\n+        self.nodes[0].generate(1)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+\n+    def test_signature_version_1(self):",
      "path": "qa/rpc-tests/p2p-segwit.py",
      "position": 1162,
      "original_position": 1110,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Version 0 (and all references below)\n",
      "created_at": "2016-05-25T17:17:58Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64614163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64614163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1162,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64619665",
      "pull_request_review_id": null,
      "id": 64619665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjE5NjY1",
      "diff_hunk": "@@ -0,0 +1,1575 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print(\"\\tTesting non-witness transaction\")\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print(\"\\tTesting witness commitments\")\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print(\"\\tTesting witness block malleability\")\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print(\"\\tTesting witness block size limit\")\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, b\"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in range(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print(\"\\tTesting extra witness data in tx\")\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), b\"\")) # non-witness\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+\n+        # This has extra witness data, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra witness, but add extra scriptSig data\n+        tx2.vin[0].scriptSig = CScript([OP_TRUE])\n+        tx2.vin[1].scriptSig = CScript([OP_TRUE])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack.pop(0)\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = []\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # This has extra signature data for a witness input, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra scriptsig on the witness input, and verify\n+        # success (even with extra scriptsig data in the non-witness input)\n+        tx2.vin[0].scriptSig = b\"\"\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update utxo for later tests\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_max_witness_push_length(self):\n+        ''' Should only allow up to 520 byte pushes in witness stack '''\n+        print(\"\\tTesting maximum witness push size\")\n+        MAX_SCRIPT_ELEMENT_SIZE = 520\n+        assert(len(self.utxo))\n+\n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        # First try a 521-byte stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ b'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now reduce the length of the stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+\n+        add_witness_commitment(block)\n+        block.solve()\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update the utxo for later tests\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    def test_max_witness_program_length(self):\n+        # Can create witness outputs that are long, but can't be greater than\n+        # 10k bytes to successfully spend\n+        print(\"\\tTesting maximum witness program length\")\n+        assert(len(self.utxo))\n+        MAX_PROGRAM_LENGTH = 10000\n+\n+        # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n+        long_witness_program = CScript([b'a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n+        long_witness_hash = sha256(long_witness_program)\n+        long_scriptPubKey = CScript([OP_0, long_witness_hash])\n+\n+        block = self.build_next_block()\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*44 + [long_witness_program]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try again with one less byte in the witness program\n+        witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n+        tx.rehash()\n+        tx2.vin[0].prevout.hash = tx.sha256\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*43 + [witness_program]\n+        tx2.rehash()\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_input_length(self):\n+        ''' Ensure that vin length must match vtxinwit length '''\n+        print(\"\\tTesting witness input length\")\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        \n+        # Create a transaction that splits our utxo into many outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        nValue = self.utxo[0].nValue\n+        for i in range(10):\n+            tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n+        tx.vout[0].nValue -= 1000\n+        assert(tx.vout[0].nValue >= 0)\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try various ways to spend tx that should all break.\n+        # This \"broken\" transaction serializer will not normalize\n+        # the length of vtxinwit.\n+        class BrokenCTransaction(CTransaction):\n+            def serialize_with_witness(self):\n+                flags = 0\n+                if not self.wit.is_null():\n+                    flags |= 1\n+                r = b\"\"\n+                r += struct.pack(\"<i\", self.nVersion)\n+                if flags:\n+                    dummy = []\n+                    r += ser_vector(dummy)\n+                    r += struct.pack(\"<B\", flags)\n+                r += ser_vector(self.vin)\n+                r += ser_vector(self.vout)\n+                if flags & 1:\n+                    r += self.wit.serialize()\n+                r += struct.pack(\"<I\", self.nLockTime)\n+                return r\n+\n+        tx2 = BrokenCTransaction()\n+        for i in range(10):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n+        tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n+\n+        # First try using a too long vtxinwit\n+        for i in range(11):\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now try using a too short vtxinwit\n+        tx2.wit.vtxinwit.pop()\n+        tx2.wit.vtxinwit.pop()\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now make one of the intermediate witnesses be incorrect\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [b'a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Fix the broken witness and the block should be accepted.\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_tx_relay_before_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected for premature-witness, but should\n+        # not be added to recently rejected list.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n+        # the getdata is just for the non-witness portion.\n+        self.old_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.old_node.last_getdata.inv[0].type == 1)\n+\n+        # Since we haven't delivered the tx yet, inv'ing the same tx from\n+        # a witness transaction ought not result in a getdata.\n+        try:\n+            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n+            print(\"Error: duplicate tx getdata!\")\n+            assert(False)\n+        except AssertionError as e:\n+            pass\n+\n+        # Delivering this transaction with witness should fail (no matter who\n+        # its from)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # But eliminating the witness should fix it\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Just tweak the transaction, announce it, and verify we get a getdata\n+        # for a witness_tx\n+        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n+        tx.rehash()\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+\n+        # Cleanup: mine the first transaction and update utxo\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx_hash, 0, tx_value))\n+\n+\n+    # After segwit activates, verify that mempool:\n+    # - rejects transactions with unnecessary/extra witnesses\n+    # - accepts transactions with valid witnesses\n+    # and that witness transactions are relayed to non-upgraded peers.\n+    def test_tx_relay_after_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected because we can't use a witness\n+        # when spending a non-witness output.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that unnecessary witnesses are rejected.\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # Verify that removing the witness succeeds.\n+        # Re-announcing won't result in a getdata for ~2.5 minutes, so just\n+        # deliver the modified transaction.\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Now try to add extra witness data to a valid witness tx.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n+        tx2.rehash()\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx3.wit.vtxinwit.append(CTxinWitness())\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n+        tx3.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+\n+        # Get rid of the extra witness, and verify acceptance.\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        # Also check that old_node gets a tx announcement, even though this is\n+        # a witness transaction.\n+        self.old_node.wait_for_inv(CInv(1, tx2.sha256)) # wait until tx2 was inv'ed\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        self.old_node.wait_for_inv(CInv(1, tx3.sha256))\n+\n+        # Cleanup: mine the transactions and update utxo for next test\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    # Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG\n+    # This is true regardless of segwit activation.\n+    def test_block_relay(self, segwit_activated):\n+        print(\"\\tTesting block relay\")\n+\n+        # test_node has set NODE_WITNESS, so all getdata requests should be for\n+        # witness blocks.\n+        # Test announcing a block via inv results in a getdata, and that\n+        # announcing a version 4 or random VB block with a header results in a getdata\n+\n+        block1 = self.build_next_block()\n+        block1.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block1, True)\n+\n+        block2 = self.build_next_block(nVersion=4)\n+        block2.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block2, True)\n+\n+        block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n+        block3.solve()\n+        self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block3, True)\n+\n+        # Check that we can getdata for witness blocks or regular blocks,\n+        # and the right thing happens.\n+        if segwit_activated == False:\n+            # Before activation, we should be able to request old blocks with\n+            # or without witness, and they should be the same.\n+            chain_height = self.nodes[0].getblockcount()\n+            # Pick 10 random blocks on main chain, and verify that getdata's\n+            # for MSG_BLOCK, MSG_WITNESS_BLOCK, and rpc getblock() are equal.\n+            all_heights = list(range(chain_height+1))\n+            random.shuffle(all_heights)\n+            all_heights = all_heights[0:10]\n+            for height in all_heights:\n+                block_hash = self.nodes[0].getblockhash(height)\n+                rpc_block = self.nodes[0].getblock(block_hash, False)\n+                block_hash = int(block_hash, 16)\n+                block = self.test_node.request_block(block_hash, 2)\n+                wit_block = self.test_node.request_block(block_hash, 2|MSG_WITNESS_FLAG)\n+                assert_equal(block.serialize(True), wit_block.serialize(True))\n+                assert_equal(block.serialize(), hex_str_to_bytes(rpc_block))\n+        else:\n+            # After activation, witness blocks and non-witness blocks should\n+            # be different.  Verify rpc getblock() returns witness blocks, while\n+            # getdata respects the requested type.\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [])\n+            # This gives us a witness commitment.\n+            assert(len(block.vtx[0].wit.vtxinwit) == 1)\n+            assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n+            self.test_node.test_witness_block(block, accepted=True)\n+            # Now try to retrieve it...\n+            rpc_block = self.nodes[0].getblock(block.hash, False)\n+            non_wit_block = self.test_node.request_block(block.sha256, 2)\n+            wit_block = self.test_node.request_block(block.sha256, 2|MSG_WITNESS_FLAG)\n+            assert_equal(wit_block.serialize(True), hex_str_to_bytes(rpc_block))\n+            assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n+            assert_equal(wit_block.serialize(True), block.serialize(True))\n+\n+\n+    # Verify that future segwit upgraded transactions are non-standard,\n+    # but valid in blocks. Can run this before and after segwit activation.\n+    def test_segwit_versions(self):\n+        print(\"\\tTesting standardness/consensus for segwit versions (0-16)\")\n+        assert(len(self.utxo))\n+        NUM_TESTS = 17 # will test OP_0, OP1, ..., OP_16\n+        if (len(self.utxo) < NUM_TESTS):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+            split_value = (self.utxo[0].nValue - 4000) // NUM_TESTS\n+            for i in range(NUM_TESTS):\n+                tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n+            tx.rehash()\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [tx])\n+            self.test_node.test_witness_block(block, accepted=True)\n+            self.utxo.pop(0)\n+            for i in range(NUM_TESTS):\n+                self.utxo.append(UTXO(tx.sha256, i, split_value))\n+\n+        sync_blocks(self.nodes)\n+        temp_utxo = []\n+        tx = CTransaction()\n+        count = 0\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        for version in list(range(OP_1, OP_16+1)) + [OP_0]:\n+            count += 1\n+            # First try to spend to a future version segwit scriptPubKey.\n+            scriptPubKey = CScript([CScriptOp(version), witness_hash])\n+            tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n+            tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n+            tx.rehash()\n+            self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+            self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+            self.utxo.pop(0)\n+            temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+        self.nodes[0].generate(1) # Mine all the transactions\n+        sync_blocks(self.nodes)\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+\n+        # Finally, verify that version 0 -> version 1 transactions\n+        # are non-standard\n+        scriptPubKey = CScript([CScriptOp(OP_1), witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n+        tx2.vout = [CTxOut(tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        tx2.rehash()\n+        # Gets accepted to test_node, because standardness of outputs isn't\n+        # checked with fRequireStandard\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=False)\n+        temp_utxo.pop() # last entry in temp_utxo was the output we just spent\n+        temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+        # Spend everything in temp_utxo back to an OP_TRUE output.\n+        tx3 = CTransaction()\n+        total_value = 0\n+        for i in temp_utxo:\n+            tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n+            tx3.wit.vtxinwit.append(CTxinWitness())\n+            total_value += i.nValue\n+        tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n+        tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n+        tx3.rehash()\n+        # Spending a higher version witness output is not allowed by policy,\n+        # even with fRequireStandard=false.\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        self.test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n+\n+        # Building a block with the transaction must be valid, however.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2, tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+        # Add utxo to our list\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_premature_coinbase_witness_spend(self):\n+        print(\"\\tTesting premature coinbase witness spend\")\n+        block = self.build_next_block()\n+        # Change the output of the block to be a witness output.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        block.vtx[0].vout[0].scriptPubKey = scriptPubKey\n+        # This next line will rehash the coinbase and update the merkle\n+        # root, and solve.\n+        self.update_witness_block_with_transactions(block, [])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        spend_tx = CTransaction()\n+        spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n+        spend_tx.vout = [CTxOut(block.vtx[0].vout[0].nValue, witness_program)]\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        spend_tx.rehash()\n+\n+        # Now test a premature spend.\n+        self.nodes[0].generate(98)\n+        sync_blocks(self.nodes)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=False)\n+\n+        # Advancing one more block should allow the spend.\n+        self.nodes[0].generate(1)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+\n+    def test_signature_version_1(self):",
      "path": "qa/rpc-tests/p2p-segwit.py",
      "position": 1162,
      "original_position": 1110,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For clarity, we should probably change this to SIGVERSION_WITNESS_V0 to match the enum that was added to the code, but that enum has value 1 (which is where \"signature version 1\" comes from).\n",
      "created_at": "2016-05-25T17:48:38Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64619665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64619665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1162,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64633343",
      "pull_request_review_id": null,
      "id": 64633343,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjMzMzQz",
      "diff_hunk": "@@ -0,0 +1,1575 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.key import CECKey, CPubKey\n+import time\n+import random\n+\n+# The versionbit bit used to signal activation of SegWit\n+VB_WITNESS_BIT = 1\n+VB_PERIOD = 144\n+VB_ACTIVATION_THRESHOLD = 108\n+VB_TOP_BITS = 0x20000000\n+\n+MAX_SIGOP_COST = 80000\n+\n+'''\n+SegWit p2p test.\n+'''\n+\n+# Calculate the virtual size of a witness block:\n+# (base + witness/4)\n+def get_virtual_size(witness_block):\n+    base_size = len(witness_block.serialize())\n+    total_size = len(witness_block.serialize(with_witness=True))\n+    # the \"+3\" is so we round up\n+    vsize = int((3*base_size + total_size + 3)/4)\n+    return vsize\n+\n+# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong(0)\n+        self.sleep_time = 0.05\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message.block\n+        self.last_block.calc_sha256()\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_reject(self, conn, message):\n+        self.last_reject = message\n+        #print message\n+\n+    # Syncing helpers\n+    def sync(self, test_function, timeout=60):\n+        while timeout > 0:\n+            with mininode_lock:\n+                if test_function():\n+                    return\n+            time.sleep(self.sleep_time)\n+            timeout -= self.sleep_time\n+        raise AssertionError(\"Sync failed to complete\")\n+        \n+    def sync_with_ping(self, timeout=60):\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        test_function = lambda: self.last_pong.nonce == self.ping_counter\n+        self.sync(test_function, timeout)\n+        self.ping_counter += 1\n+        return\n+\n+    def wait_for_block(self, blockhash, timeout=60):\n+        test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n+        self.sync(test_function, timeout)\n+        return\n+\n+    def wait_for_getdata(self, timeout=60):\n+        test_function = lambda: self.last_getdata != None\n+        self.sync(test_function, timeout)\n+\n+    def wait_for_inv(self, expected_inv, timeout=60):\n+        test_function = lambda: self.last_inv != expected_inv\n+        self.sync(test_function, timeout)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.wait_for_getdata(timeout)\n+        return\n+\n+    def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n+        with mininode_lock:\n+            self.last_getdata = None\n+        if use_header:\n+            msg = msg_headers()\n+            msg.headers = [ CBlockHeader(block) ]\n+            self.send_message(msg)\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+        self.wait_for_getdata()\n+        return\n+\n+    def request_block(self, blockhash, inv_type, timeout=60):\n+        with mininode_lock:\n+            self.last_block = None\n+        self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n+        self.wait_for_block(blockhash, timeout)\n+        return self.last_block\n+\n+    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+        tx_message = msg_tx(tx)\n+        if with_witness:\n+            tx_message = msg_witness_tx(tx)\n+        self.send_message(tx_message)\n+        self.sync_with_ping()\n+        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+\n+    # Test whether a witness block had the correct effect on the tip\n+    def test_witness_block(self, block, accepted, with_witness=True):\n+        if with_witness:\n+            self.send_message(msg_witness_block(block))\n+        else:\n+            self.send_message(msg_block(block))\n+        self.sync_with_ping()\n+        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+\n+\n+# Used to keep track of anyone-can-spend outputs that we can use in the tests\n+class UTXO(object):\n+    def __init__(self, sha256, n, nValue):\n+        self.sha256 = sha256\n+        self.n = n\n+        self.nValue = nValue\n+\n+\n+class SegWitTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"pre-segwit bitcoind binary for upgrade testing\")\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\"]))\n+        # Start a node for testing IsStandard rules.\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # If an old bitcoind is given, do the upgrade-after-activation test.\n+        self.test_upgrade = False\n+        if (self.options.oldbinary != None):\n+            self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"], binary=self.options.oldbinary))\n+            connect_nodes(self.nodes[0], 2)\n+            self.test_upgrade = True\n+\n+    ''' Helpers '''\n+    # Build a block on top of node0's tip.\n+    def build_next_block(self, nVersion=4):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount() + 1\n+        block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n+        block = create_block(int(tip, 16), create_coinbase(height), block_time)\n+        block.nVersion = nVersion\n+        block.rehash()\n+        return block\n+\n+    # Adds list of transactions to block, adds witness commitment, then solves.\n+    def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n+        block.vtx.extend(tx_list)\n+        add_witness_commitment(block, nonce)\n+        block.solve()\n+        return\n+\n+    ''' Individual tests '''\n+    def test_witness_services(self):\n+        print(\"\\tVerifying NODE_WITNESS service bit\")\n+        assert((self.test_node.connection.nServices & NODE_WITNESS) != 0)\n+\n+\n+    # See if sending a regular transaction works, and create a utxo\n+    # to use in later tests.\n+    def test_non_witness_transaction(self):\n+        # Mine a block with an anyone-can-spend coinbase,\n+        # let it mature, then try to spend it.\n+        print(\"\\tTesting non-witness transaction\")\n+        block = self.build_next_block(nVersion=1)\n+        block.solve()\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping() # make sure the block was processed\n+        txid = block.vtx[0].sha256\n+\n+        self.nodes[0].generate(99) # let the block mature\n+\n+        # Create a transaction that spends the coinbase\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        # Check that serializing it with or without witness is the same\n+        # This is a sanity check of our testing framework.\n+        assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n+\n+        self.test_node.send_message(msg_witness_tx(tx))\n+        self.test_node.sync_with_ping() # make sure the tx was processed\n+        assert(tx.hash in self.nodes[0].getrawmempool())\n+        # Save this transaction for later\n+        self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n+        self.nodes[0].generate(1)\n+\n+\n+    # Verify that blocks with witnesses are rejected before activation.\n+    def test_unnecessary_witness_before_segwit_activation(self):\n+        print(\"\\tTesting behavior of unnecessary witnesses\")\n+        # For now, rely on earlier tests to have created at least one utxo for\n+        # us to use\n+        assert(len(self.utxo) > 0)\n+        assert(get_bip9_status(self.nodes[0], 'witness')['status'] != 'active')\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n+\n+        # Verify the hash with witness differs from the txid\n+        # (otherwise our testing framework must be broken!)\n+        tx.rehash()\n+        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+\n+        # Construct a segwit-signaling block that includes the transaction.\n+        block = self.build_next_block(nVersion=(VB_TOP_BITS|(1 << VB_WITNESS_BIT)))\n+        self.update_witness_block_with_transactions(block, [tx])\n+        # Sending witness data before activation is not allowed (anti-spam\n+        # rule).\n+        self.test_node.test_witness_block(block, accepted=False)\n+        # TODO: fix synchronization so we can test reject reason\n+        # Right now, bitcoind delays sending reject messages for blocks\n+        # until the future, making synchronization here difficult.\n+        #assert_equal(self.test_node.last_reject.reason, \"unexpected-witness\")\n+\n+        # But it should not be permanently marked bad...\n+        # Resend without witness information.\n+        self.test_node.send_message(msg_block(block))\n+        self.test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+\n+    # Mine enough blocks to lock in segwit, but don't activate.\n+    # TODO: we could verify that lockin only happens at the right threshold of\n+    # signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_lockin(self):\n+        height = self.nodes[0].getblockcount()\n+        # Will need to rewrite the tests here if we are past the first period\n+        assert(height < VB_PERIOD - 1)\n+        # Genesis block is 'defined'.\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'defined')\n+        # Advance to end of period, status should now be 'started'\n+        self.nodes[0].generate(VB_PERIOD-height-1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        # Advance to end of period, and verify lock-in happens at the end\n+        self.nodes[0].generate(VB_PERIOD-1)\n+        height = self.nodes[0].getblockcount()\n+        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'started')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+\n+\n+    # Mine enough blocks to activate segwit.\n+    # TODO: we could verify that activation only happens at the right threshold\n+    # of signalling blocks, rather than just at the right period boundary.\n+    def advance_to_segwit_active(self):\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        height = self.nodes[0].getblockcount()\n+        self.nodes[0].generate(VB_PERIOD - (height%VB_PERIOD) - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'locked_in')\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'witness')['status'], 'active')\n+\n+\n+    # This test can only be run after segwit has activated\n+    def test_witness_commitments(self):\n+        print(\"\\tTesting witness commitments\")\n+\n+        # First try a correct witness commitment.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Test the test -- witness serialization should be different\n+        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+\n+        # This empty block should be valid.\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try to tweak the nonce\n+        block_2 = self.build_next_block()\n+        add_witness_commitment(block_2, nonce=28)\n+        block_2.solve()\n+\n+        # The commitment should have changed!\n+        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+\n+        # This should also be valid.\n+        self.test_node.test_witness_block(block_2, accepted=True)\n+\n+        # Now test commitments with actual transactions\n+        assert (len(self.utxo) > 0)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # Let's construct a witness program\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # tx2 will spend tx1, and send back to a regular anyone-can-spend address\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        block_3 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_3, [tx, tx2], nonce=1)\n+        # Add an extra OP_RETURN output that matches the witness commitment template,\n+        # even though it has extra data after the incorrect commitment.\n+        # This block should fail.\n+        block_3.vtx[0].vout.append(CTxOut(0, CScript([OP_RETURN, WITNESS_COMMITMENT_HEADER + ser_uint256(2), 10])))\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        block_3.solve()\n+\n+        self.test_node.test_witness_block(block_3, accepted=False)\n+\n+        # Add a different commitment with different nonce, but in the\n+        # right location, and with some funds burned(!).\n+        # This should succeed (nValue shouldn't affect finding the\n+        # witness commitment).\n+        add_witness_commitment(block_3, nonce=0)\n+        block_3.vtx[0].vout[0].nValue -= 1\n+        block_3.vtx[0].vout[-1].nValue += 1\n+        block_3.vtx[0].rehash()\n+        block_3.hashMerkleRoot = block_3.calc_merkle_root()\n+        block_3.rehash()\n+        assert(len(block_3.vtx[0].vout) == 4) # 3 OP_returns\n+        block_3.solve()\n+        self.test_node.test_witness_block(block_3, accepted=True)\n+\n+        # Finally test that a block with no witness transactions can\n+        # omit the commitment.\n+        block_4 = self.build_next_block()\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n+        tx3.rehash()\n+        block_4.vtx.append(tx3)\n+        block_4.hashMerkleRoot = block_4.calc_merkle_root()\n+        block_4.solve()\n+        self.test_node.test_witness_block(block_4, with_witness=False, accepted=True)\n+\n+        # Update available utxo's for use in later test.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_block_malleability(self):\n+        print(\"\\tTesting witness block malleability\")\n+\n+        # Make sure that a block that has too big a virtual size\n+        # because of a too-large coinbase witness is not permanently\n+        # marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a'*5000000)\n+        assert(get_virtual_size(block) > MAX_BLOCK_SIZE)\n+\n+        # We can't send over the p2p network, because this is too big to relay\n+        # TODO: repeat this test with a block that can be relayed\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n+        assert(get_virtual_size(block) < MAX_BLOCK_SIZE)\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+\n+        assert(self.nodes[0].getbestblockhash() == block.hash)\n+\n+        # Now make sure that malleating the witness nonce doesn't\n+        # result in a block permanently marked bad.\n+        block = self.build_next_block()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # Change the nonce -- should not cause the block to be permanently\n+        # failed\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Changing the witness nonce doesn't change the block hash\n+        block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+\n+    def test_witness_block_size(self):\n+        print(\"\\tTesting witness block size limit\")\n+        # TODO: Test that non-witness carrying blocks can't exceed 1MB\n+        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+\n+        # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n+        block = self.build_next_block()\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        # Create a P2WSH transaction.\n+        # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n+        # This should give us plenty of room to tweak the spending tx's\n+        # virtual size.\n+        NUM_DROPS = 200 # 201 max ops per script!\n+        NUM_OUTPUTS = 50\n+\n+        witness_program = CScript([OP_2DROP]*NUM_DROPS + [OP_TRUE])\n+        witness_hash = uint256_from_str(sha256(witness_program))\n+        scriptPubKey = CScript([OP_0, ser_uint256(witness_hash)])\n+\n+        prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n+        value = self.utxo[0].nValue\n+\n+        parent_tx = CTransaction()\n+        parent_tx.vin.append(CTxIn(prevout, b\"\"))\n+        child_value = int(value/NUM_OUTPUTS)\n+        for i in range(NUM_OUTPUTS):\n+            parent_tx.vout.append(CTxOut(child_value, scriptPubKey))\n+        parent_tx.vout[0].nValue -= 50000\n+        assert(parent_tx.vout[0].nValue > 0)\n+        parent_tx.rehash()\n+\n+        child_tx = CTransaction()\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n+        child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n+        for i in range(NUM_OUTPUTS):\n+            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n+        child_tx.rehash()\n+        self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n+\n+        vsize = get_virtual_size(block)\n+        additional_bytes = (MAX_BLOCK_SIZE - vsize)*4\n+        i = 0\n+        while additional_bytes > 0:\n+            # Add some more bytes to each input until we hit MAX_BLOCK_SIZE+1\n+            extra_bytes = min(additional_bytes+1, 55)\n+            block.vtx[-1].wit.vtxinwit[int(i/(2*NUM_DROPS))].scriptWitness.stack[i%(2*NUM_DROPS)] = b'a'*(195+extra_bytes)\n+            additional_bytes -= extra_bytes\n+            i += 1\n+\n+        block.vtx[0].vout.pop()  # Remove old commitment\n+        add_witness_commitment(block)\n+        block.solve()\n+        vsize = get_virtual_size(block)\n+        assert_equal(vsize, MAX_BLOCK_SIZE + 1)\n+        # Make sure that our test case would exceed the old max-network-message\n+        # limit\n+        assert(len(block.serialize(True)) > 2*1024*1024)\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now resize the second transaction to make the block fit.\n+        cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n+        block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(cur_length-1)\n+        block.vtx[0].vout.pop()\n+        add_witness_commitment(block)\n+        block.solve()\n+        assert(get_virtual_size(block) == MAX_BLOCK_SIZE)\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update available utxo's\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n+\n+\n+    # submitblock will try to add the nonce automatically, so that mining\n+    # software doesn't need to worry about doing so itself.\n+    def test_submit_block(self):\n+        block = self.build_next_block()\n+\n+        # Try using a custom nonce and then don't supply it.\n+        # This shouldn't possibly work.\n+        add_witness_commitment(block, nonce=1)\n+        block.vtx[0].wit = CTxWitness() # drop the nonce\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert(self.nodes[0].getbestblockhash() != block.hash)\n+\n+        # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n+        add_witness_commitment(block, nonce=0)\n+        block.vtx[0].wit = CTxWitness()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        # This time, add a tx with non-empty witness, but don't supply\n+        # the commitment.\n+        block_2 = self.build_next_block()\n+\n+        add_witness_commitment(block_2)\n+\n+        block_2.solve()\n+\n+        # Drop commitment and nonce -- submitblock should not fill in.\n+        block_2.vtx[0].vout.pop()\n+        block_2.vtx[0].wit = CTxWitness()\n+\n+        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        # Tip should not advance!\n+        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+\n+\n+    # Consensus tests of extra witness data in a transaction.\n+    def test_extra_witness_data(self):\n+        print(\"\\tTesting extra witness data in tx\")\n+\n+        assert(len(self.utxo) > 0)\n+        \n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First try extra witness data on a tx that doesn't require a witness\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n+        tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n+        tx.rehash()\n+        self.update_witness_block_with_transactions(block, [tx])\n+\n+        # Extra witness data should not be allowed.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try extra signature data.  Ok if we're not spending a witness output.\n+        block.vtx[1].wit.vtxinwit = []\n+        block.vtx[1].vin[0].scriptSig = CScript([OP_0])\n+        block.vtx[1].rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try extra witness/signature data on an input that DOES require a\n+        # witness\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\")) # witness output\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), b\"\")) # non-witness\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+\n+        # This has extra witness data, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra witness, but add extra scriptSig data\n+        tx2.vin[0].scriptSig = CScript([OP_TRUE])\n+        tx2.vin[1].scriptSig = CScript([OP_TRUE])\n+        tx2.wit.vtxinwit[0].scriptWitness.stack.pop(0)\n+        tx2.wit.vtxinwit[1].scriptWitness.stack = []\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        # This has extra signature data for a witness input, so it should fail.\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now get rid of the extra scriptsig on the witness input, and verify\n+        # success (even with extra scriptsig data in the non-witness input)\n+        tx2.vin[0].scriptSig = b\"\"\n+        tx2.rehash()\n+        add_witness_commitment(block)\n+        block.solve()\n+\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update utxo for later tests\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_max_witness_push_length(self):\n+        ''' Should only allow up to 520 byte pushes in witness stack '''\n+        print(\"\\tTesting maximum witness push size\")\n+        MAX_SCRIPT_ELEMENT_SIZE = 520\n+        assert(len(self.utxo))\n+\n+        block = self.build_next_block()\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        # First try a 521-byte stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ b'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now reduce the length of the stack element\n+        tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a'*(MAX_SCRIPT_ELEMENT_SIZE)\n+\n+        add_witness_commitment(block)\n+        block.solve()\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Update the utxo for later tests\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    def test_max_witness_program_length(self):\n+        # Can create witness outputs that are long, but can't be greater than\n+        # 10k bytes to successfully spend\n+        print(\"\\tTesting maximum witness program length\")\n+        assert(len(self.utxo))\n+        MAX_PROGRAM_LENGTH = 10000\n+\n+        # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n+        long_witness_program = CScript([b'a'*520]*19 + [OP_DROP]*63 + [OP_TRUE])\n+        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH+1)\n+        long_witness_hash = sha256(long_witness_program)\n+        long_scriptPubKey = CScript([OP_0, long_witness_hash])\n+\n+        block = self.build_next_block()\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, long_scriptPubKey))\n+        tx.rehash()\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*44 + [long_witness_program]\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Try again with one less byte in the witness program\n+        witness_program = CScript([b'a'*520]*19 + [OP_DROP]*62 + [OP_TRUE])\n+        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        tx.vout[0] = CTxOut(tx.vout[0].nValue, scriptPubKey)\n+        tx.rehash()\n+        tx2.vin[0].prevout.hash = tx.sha256\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*43 + [witness_program]\n+        tx2.rehash()\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_input_length(self):\n+        ''' Ensure that vin length must match vtxinwit length '''\n+        print(\"\\tTesting witness input length\")\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        \n+        # Create a transaction that splits our utxo into many outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        nValue = self.utxo[0].nValue\n+        for i in range(10):\n+            tx.vout.append(CTxOut(int(nValue/10), scriptPubKey))\n+        tx.vout[0].nValue -= 1000\n+        assert(tx.vout[0].nValue >= 0)\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Try various ways to spend tx that should all break.\n+        # This \"broken\" transaction serializer will not normalize\n+        # the length of vtxinwit.\n+        class BrokenCTransaction(CTransaction):\n+            def serialize_with_witness(self):\n+                flags = 0\n+                if not self.wit.is_null():\n+                    flags |= 1\n+                r = b\"\"\n+                r += struct.pack(\"<i\", self.nVersion)\n+                if flags:\n+                    dummy = []\n+                    r += ser_vector(dummy)\n+                    r += struct.pack(\"<B\", flags)\n+                r += ser_vector(self.vin)\n+                r += ser_vector(self.vout)\n+                if flags & 1:\n+                    r += self.wit.serialize()\n+                r += struct.pack(\"<I\", self.nLockTime)\n+                return r\n+\n+        tx2 = BrokenCTransaction()\n+        for i in range(10):\n+            tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n+        tx2.vout.append(CTxOut(nValue-3000, CScript([OP_TRUE])))\n+\n+        # First try using a too long vtxinwit\n+        for i in range(11):\n+            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now try using a too short vtxinwit\n+        tx2.wit.vtxinwit.pop()\n+        tx2.wit.vtxinwit.pop()\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Now make one of the intermediate witnesses be incorrect\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[-1].scriptWitness.stack = [b'a', witness_program]\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n+\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Fix the broken witness and the block should be accepted.\n+        tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n+        block.vtx = [block.vtx[0]]\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        self.utxo.pop()\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+\n+    def test_witness_tx_relay_before_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected for premature-witness, but should\n+        # not be added to recently rejected list.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n+        # the getdata is just for the non-witness portion.\n+        self.old_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.old_node.last_getdata.inv[0].type == 1)\n+\n+        # Since we haven't delivered the tx yet, inv'ing the same tx from\n+        # a witness transaction ought not result in a getdata.\n+        try:\n+            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n+            print(\"Error: duplicate tx getdata!\")\n+            assert(False)\n+        except AssertionError as e:\n+            pass\n+\n+        # Delivering this transaction with witness should fail (no matter who\n+        # its from)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        self.old_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # But eliminating the witness should fix it\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Verify that inv's to test_node come with getdata's for witness tx's\n+        # Just tweak the transaction, announce it, and verify we get a getdata\n+        # for a witness_tx\n+        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n+        tx.rehash()\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert(self.test_node.last_getdata.inv[0].type == 1|MSG_WITNESS_FLAG)\n+\n+        # Cleanup: mine the first transaction and update utxo\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx_hash, 0, tx_value))\n+\n+\n+    # After segwit activates, verify that mempool:\n+    # - rejects transactions with unnecessary/extra witnesses\n+    # - accepts transactions with valid witnesses\n+    # and that witness transactions are relayed to non-upgraded peers.\n+    def test_tx_relay_after_segwit_activation(self):\n+        print(\"\\tTesting relay of witness transactions\")\n+        # Generate a transaction that doesn't require a witness, but send it\n+        # with a witness.  Should be rejected because we can't use a witness\n+        # when spending a non-witness output.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n+        tx.rehash()\n+\n+        tx_hash = tx.sha256\n+        tx_value = tx.vout[0].nValue\n+\n+        # Verify that unnecessary witnesses are rejected.\n+        self.test_node.announce_tx_and_wait_for_getdata(tx)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+\n+        # Verify that removing the witness succeeds.\n+        # Re-announcing won't result in a getdata for ~2.5 minutes, so just\n+        # deliver the modified transaction.\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        # Now try to add extra witness data to a valid witness tx.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n+        tx2.rehash()\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx3.wit.vtxinwit.append(CTxinWitness())\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n+        tx3.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+\n+        # Get rid of the extra witness, and verify acceptance.\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        # Also check that old_node gets a tx announcement, even though this is\n+        # a witness transaction.\n+        self.old_node.wait_for_inv(CInv(1, tx2.sha256)) # wait until tx2 was inv'ed\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        self.old_node.wait_for_inv(CInv(1, tx3.sha256))\n+\n+        # Cleanup: mine the transactions and update utxo for next test\n+        self.nodes[0].generate(1)\n+        assert_equal(len(self.nodes[0].getrawmempool()),  0)\n+\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    # Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG\n+    # This is true regardless of segwit activation.\n+    def test_block_relay(self, segwit_activated):\n+        print(\"\\tTesting block relay\")\n+\n+        # test_node has set NODE_WITNESS, so all getdata requests should be for\n+        # witness blocks.\n+        # Test announcing a block via inv results in a getdata, and that\n+        # announcing a version 4 or random VB block with a header results in a getdata\n+\n+        block1 = self.build_next_block()\n+        block1.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block1, True)\n+\n+        block2 = self.build_next_block(nVersion=4)\n+        block2.solve()\n+\n+        self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block2, True)\n+\n+        block3 = self.build_next_block(nVersion=(VB_TOP_BITS | (1<<15)))\n+        block3.solve()\n+        self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n+        assert(self.test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        self.test_node.test_witness_block(block3, True)\n+\n+        # Check that we can getdata for witness blocks or regular blocks,\n+        # and the right thing happens.\n+        if segwit_activated == False:\n+            # Before activation, we should be able to request old blocks with\n+            # or without witness, and they should be the same.\n+            chain_height = self.nodes[0].getblockcount()\n+            # Pick 10 random blocks on main chain, and verify that getdata's\n+            # for MSG_BLOCK, MSG_WITNESS_BLOCK, and rpc getblock() are equal.\n+            all_heights = list(range(chain_height+1))\n+            random.shuffle(all_heights)\n+            all_heights = all_heights[0:10]\n+            for height in all_heights:\n+                block_hash = self.nodes[0].getblockhash(height)\n+                rpc_block = self.nodes[0].getblock(block_hash, False)\n+                block_hash = int(block_hash, 16)\n+                block = self.test_node.request_block(block_hash, 2)\n+                wit_block = self.test_node.request_block(block_hash, 2|MSG_WITNESS_FLAG)\n+                assert_equal(block.serialize(True), wit_block.serialize(True))\n+                assert_equal(block.serialize(), hex_str_to_bytes(rpc_block))\n+        else:\n+            # After activation, witness blocks and non-witness blocks should\n+            # be different.  Verify rpc getblock() returns witness blocks, while\n+            # getdata respects the requested type.\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [])\n+            # This gives us a witness commitment.\n+            assert(len(block.vtx[0].wit.vtxinwit) == 1)\n+            assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n+            self.test_node.test_witness_block(block, accepted=True)\n+            # Now try to retrieve it...\n+            rpc_block = self.nodes[0].getblock(block.hash, False)\n+            non_wit_block = self.test_node.request_block(block.sha256, 2)\n+            wit_block = self.test_node.request_block(block.sha256, 2|MSG_WITNESS_FLAG)\n+            assert_equal(wit_block.serialize(True), hex_str_to_bytes(rpc_block))\n+            assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n+            assert_equal(wit_block.serialize(True), block.serialize(True))\n+\n+\n+    # Verify that future segwit upgraded transactions are non-standard,\n+    # but valid in blocks. Can run this before and after segwit activation.\n+    def test_segwit_versions(self):\n+        print(\"\\tTesting standardness/consensus for segwit versions (0-16)\")\n+        assert(len(self.utxo))\n+        NUM_TESTS = 17 # will test OP_0, OP1, ..., OP_16\n+        if (len(self.utxo) < NUM_TESTS):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+            split_value = (self.utxo[0].nValue - 4000) // NUM_TESTS\n+            for i in range(NUM_TESTS):\n+                tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n+            tx.rehash()\n+            block = self.build_next_block()\n+            self.update_witness_block_with_transactions(block, [tx])\n+            self.test_node.test_witness_block(block, accepted=True)\n+            self.utxo.pop(0)\n+            for i in range(NUM_TESTS):\n+                self.utxo.append(UTXO(tx.sha256, i, split_value))\n+\n+        sync_blocks(self.nodes)\n+        temp_utxo = []\n+        tx = CTransaction()\n+        count = 0\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+        for version in list(range(OP_1, OP_16+1)) + [OP_0]:\n+            count += 1\n+            # First try to spend to a future version segwit scriptPubKey.\n+            scriptPubKey = CScript([CScriptOp(version), witness_hash])\n+            tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n+            tx.vout = [CTxOut(self.utxo[0].nValue-1000, scriptPubKey)]\n+            tx.rehash()\n+            self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=False)\n+            self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+            self.utxo.pop(0)\n+            temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+\n+        self.nodes[0].generate(1) # Mine all the transactions\n+        sync_blocks(self.nodes)\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+\n+        # Finally, verify that version 0 -> version 1 transactions\n+        # are non-standard\n+        scriptPubKey = CScript([CScriptOp(OP_1), witness_hash])\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n+        tx2.vout = [CTxOut(tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        tx2.rehash()\n+        # Gets accepted to test_node, because standardness of outputs isn't\n+        # checked with fRequireStandard\n+        self.test_node.test_transaction_acceptance(tx2, with_witness=True, accepted=True)\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=False)\n+        temp_utxo.pop() # last entry in temp_utxo was the output we just spent\n+        temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+        # Spend everything in temp_utxo back to an OP_TRUE output.\n+        tx3 = CTransaction()\n+        total_value = 0\n+        for i in temp_utxo:\n+            tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n+            tx3.wit.vtxinwit.append(CTxinWitness())\n+            total_value += i.nValue\n+        tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n+        tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n+        tx3.rehash()\n+        # Spending a higher version witness output is not allowed by policy,\n+        # even with fRequireStandard=false.\n+        self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n+        self.test_node.sync_with_ping()\n+        with mininode_lock:\n+            assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n+\n+        # Building a block with the transaction must be valid, however.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2, tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+        # Add utxo to our list\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n+\n+    def test_premature_coinbase_witness_spend(self):\n+        print(\"\\tTesting premature coinbase witness spend\")\n+        block = self.build_next_block()\n+        # Change the output of the block to be a witness output.\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+        block.vtx[0].vout[0].scriptPubKey = scriptPubKey\n+        # This next line will rehash the coinbase and update the merkle\n+        # root, and solve.\n+        self.update_witness_block_with_transactions(block, [])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        spend_tx = CTransaction()\n+        spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n+        spend_tx.vout = [CTxOut(block.vtx[0].vout[0].nValue, witness_program)]\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n+        spend_tx.rehash()\n+\n+        # Now test a premature spend.\n+        self.nodes[0].generate(98)\n+        sync_blocks(self.nodes)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=False)\n+\n+        # Advancing one more block should allow the spend.\n+        self.nodes[0].generate(1)\n+        block2 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block2, [spend_tx])\n+        self.test_node.test_witness_block(block2, accepted=True)\n+        sync_blocks(self.nodes)\n+\n+\n+    def test_signature_version_1(self):\n+        print(\"\\tTesting segwit signature hash version 1\")\n+        key = CECKey()\n+        key.set_secretbytes(b\"9\")\n+        pubkey = CPubKey(key.get_pubkey())\n+\n+        witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        # First create a witness output for use in the tests.\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        self.test_node.test_transaction_acceptance(tx, with_witness=True, accepted=True)\n+        # Mine this transaction in preparation for following tests.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        sync_blocks(self.nodes)\n+        self.utxo.pop(0)\n+\n+        # Add signature for a P2PK witness program.\n+        def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n+            tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n+            signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n+            txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n+            txTo.rehash()\n+\n+        # Test each hashtype\n+        prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n+        for sigflag in [ 0, SIGHASH_ANYONECANPAY ]:\n+            for hashtype in [SIGHASH_ALL, SIGHASH_NONE, SIGHASH_SINGLE]:\n+                hashtype |= sigflag\n+                block = self.build_next_block()\n+                tx = CTransaction()\n+                tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), b\"\"))\n+                tx.vout.append(CTxOut(prev_utxo.nValue - 1000, scriptPubKey))\n+                tx.wit.vtxinwit.append(CTxinWitness())\n+                # Too-large input value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue+1, key)\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=False)\n+\n+                # Too-small input value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue-1, key)\n+                block.vtx.pop() # remove last tx\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=False)\n+\n+                # Now try correct value\n+                sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n+                block.vtx.pop()\n+                self.update_witness_block_with_transactions(block, [tx])\n+                self.test_node.test_witness_block(block, accepted=True)\n+\n+                prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n+\n+        # Test combinations of signature hashes.\n+        # Split the utxo into a lot of outputs.\n+        # Randomly choose up to 10 to spend, sign with different hashtypes, and\n+        # output to a random number of outputs.  Repeat NUM_TESTS times.\n+        # Ensure that we've tested a situation where we use SIGHASH_SINGLE with\n+        # an input index > number of outputs.\n+        NUM_TESTS = 500\n+        temp_utxos = []\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), b\"\"))\n+        split_value = prev_utxo.nValue // NUM_TESTS\n+        for i in range(NUM_TESTS):\n+            tx.vout.append(CTxOut(split_value, scriptPubKey))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, prev_utxo.nValue, key)\n+        for i in range(NUM_TESTS):\n+            temp_utxos.append(UTXO(tx.sha256, i, split_value))\n+\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        block = self.build_next_block()\n+        used_sighash_single_out_of_bounds = False\n+        for i in range(NUM_TESTS):\n+            # Choose random number of inputs to use.\n+            num_inputs = random.randint(1, 10)\n+            # Create a slight bias for producing more utxos\n+            num_outputs = random.randint(1, 11)\n+            random.shuffle(temp_utxos)\n+            assert(len(temp_utxos) > num_inputs)\n+            tx = CTransaction()\n+            total_value = 0\n+            for i in range(num_inputs):\n+                tx.vin.append(CTxIn(COutPoint(temp_utxos[i].sha256, temp_utxos[i].n), b\"\"))\n+                tx.wit.vtxinwit.append(CTxinWitness())\n+                total_value += temp_utxos[i].nValue\n+            split_value = total_value // num_outputs\n+            for i in range(num_outputs):\n+                tx.vout.append(CTxOut(split_value, scriptPubKey))\n+            for i in range(num_inputs):\n+                # Now try to sign each input, using a random hashtype.\n+                anyonecanpay = 0\n+                if random.randint(0, 1):\n+                    anyonecanpay = SIGHASH_ANYONECANPAY\n+                hashtype = random.randint(1, 3) | anyonecanpay\n+                sign_P2PK_witness_input(witness_program, tx, i, hashtype, temp_utxos[i].nValue, key)\n+                if (hashtype == SIGHASH_SINGLE and i >= num_outputs):\n+                    used_sighash_single_out_of_bounds = True\n+            tx.rehash()\n+            for i in range(num_outputs):\n+                temp_utxos.append(UTXO(tx.sha256, i, split_value))\n+            temp_utxos = temp_utxos[num_inputs:]\n+\n+            block.vtx.append(tx)\n+\n+            # Test the block periodically, if we're close to maxblocksize\n+            if (get_virtual_size(block) > MAX_BLOCK_SIZE - 1000):\n+                self.update_witness_block_with_transactions(block, [])\n+                self.test_node.test_witness_block(block, accepted=True)\n+                block = self.build_next_block()\n+\n+        if (not used_sighash_single_out_of_bounds):\n+            print(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n+        # Test the transactions we've added to the block\n+        if (len(block.vtx) > 1):\n+            self.update_witness_block_with_transactions(block, [])\n+            self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now test witness version 0 P2PKH transactions\n+        pubkeyhash = hash160(pubkey)\n+        scriptPKH = CScript([OP_0, pubkeyhash])\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), b\"\"))\n+        tx.vout.append(CTxOut(temp_utxos[0].nValue, scriptPKH))\n+        tx.wit.vtxinwit.append(CTxinWitness())\n+        sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, temp_utxos[0].nValue, key)\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n+\n+        script = CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n+\n+        # Check that we can't have a scriptSig\n+        tx2.vin[0].scriptSig = CScript([signature, pubkey])\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx, tx2])\n+        self.test_node.test_witness_block(block, accepted=False)\n+\n+        # Move the signature to the witness.\n+        block.vtx.pop()\n+        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [signature, pubkey]\n+        tx2.vin[0].scriptSig = b\"\"\n+        tx2.rehash()\n+\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        temp_utxos.pop(0)\n+\n+        # Update self.utxos for later tests. Just spend everything in\n+        # temp_utxos to a corresponding entry in self.utxos\n+        tx = CTransaction()\n+        index = 0\n+        for i in temp_utxos:\n+            # Just spend to our usual anyone-can-spend output\n+            # Use SIGHASH_SINGLE|SIGHASH_ANYONECANPAY so we can build up\n+            # the signatures as we go.\n+            tx.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n+            tx.vout.append(CTxOut(i.nValue, CScript([OP_TRUE])))\n+            tx.wit.vtxinwit.append(CTxinWitness())\n+            sign_P2PK_witness_input(witness_program, tx, index, SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, i.nValue, key)\n+            index += 1\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        for i in range(len(tx.vout)):\n+            self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n+\n+\n+    # Test P2SH wrapped witness programs.\n+    def test_p2sh_witness(self, segwit_activated):\n+        print(\"\\tTesting P2SH witness transactions\")\n+\n+        assert(len(self.utxo))\n+\n+        # Prepare the p2sh-wrapped witness output\n+        witness_program = CScript([OP_DROP, OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        p2wsh_pubkey = CScript([OP_0, witness_hash])\n+        p2sh_witness_hash = hash160(p2wsh_pubkey)\n+        scriptPubKey = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        scriptSig = CScript([p2wsh_pubkey]) # a push of the redeem script\n+\n+        # Fund the P2SH output\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, scriptPubKey))\n+        tx.rehash()\n+\n+        # Verify mempool acceptance and block validity\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True, with_witness=segwit_activated)\n+        sync_blocks(self.nodes)\n+\n+        # Now test attempts to spend the output.\n+        spend_tx = CTransaction()\n+        spend_tx.vin.append(CTxIn(COutPoint(tx.sha256, 0), scriptSig))\n+        spend_tx.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        spend_tx.rehash()\n+\n+        # This transaction should not be accepted into the mempool pre- or\n+        # post-segwit.  Mempool acceptance will use SCRIPT_VERIFY_WITNESS which\n+        # will require a witness to spend a witness program regardless of\n+        # segwit activation.  Note that older bitcoind's that are not\n+        # segwit-aware would also reject this for failing CLEANSTACK.\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+\n+        # Try to put the witness script in the scriptSig, should also fail.\n+        spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n+        spend_tx.rehash()\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=False, accepted=False)\n+\n+        # Now put the witness script in the witness, should succeed after\n+        # segwit activates.\n+        spend_tx.vin[0].scriptSig = scriptSig\n+        spend_tx.rehash()\n+        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a', witness_program ]\n+\n+        # Verify mempool acceptance\n+        self.test_node.test_transaction_acceptance(spend_tx, with_witness=True, accepted=segwit_activated)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [spend_tx])\n+\n+        # If we're before activation, then sending this without witnesses\n+        # should be valid.  If we're after activation, then sending this with\n+        # witnesses should be valid.\n+        if segwit_activated:\n+            self.test_node.test_witness_block(block, accepted=True)\n+        else:\n+            self.test_node.test_witness_block(block, accepted=True, with_witness=False)\n+\n+        # Update self.utxo\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(spend_tx.sha256, 0, spend_tx.vout[0].nValue))\n+\n+    # Test the behavior of starting up a segwit-aware node after the softfork\n+    # has activated.  As segwit requires different block data than pre-segwit\n+    # nodes would have stored, this requires special handling.\n+    # To enable this test, pass --oldbinary=<path-to-pre-segwit-bitcoind> to\n+    # the test.\n+    def test_upgrade_after_activation(self, node, node_id):\n+        print(\"\\tTesting software upgrade after softfork activation\")\n+\n+        assert(node_id != 0) # node0 is assumed to be a segwit-active bitcoind\n+\n+        # Make sure the nodes are all up\n+        sync_blocks(self.nodes)\n+\n+        # Restart with the new binary\n+        stop_node(node, node_id)\n+        self.nodes[node_id] = start_node(node_id, self.options.tmpdir, [\"-debug\"])\n+        connect_nodes(self.nodes[0], node_id)\n+\n+        sync_blocks(self.nodes)\n+\n+        # Make sure that this peer thinks segwit has activated.\n+        assert(get_bip9_status(node, 'witness')['status'] == \"active\")\n+\n+        # Make sure this peers blocks match those of node0.\n+        height = node.getblockcount()\n+        while height >= 0:\n+            block_hash = node.getblockhash(height)\n+            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n+            assert_equal(self.nodes[0].getblock(block_hash), node.getblock(block_hash))\n+            height -= 1\n+\n+\n+    def test_witness_sigops(self):\n+        '''Ensure sigop counting is correct inside witnesses.'''\n+        print(\"\\tTesting sigops limit\")\n+\n+        assert(len(self.utxo))\n+\n+        # Keep this under MAX_OPS_PER_SCRIPT (201)\n+        witness_program = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKMULTISIG]*5 + [OP_CHECKSIG]*193 + [OP_ENDIF])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        sigops_per_script = 20*5 + 193*1\n+        # We'll produce 2 extra outputs, one with a program that would take us\n+        # over max sig ops, and one with a program that would exactly reach max\n+        # sig ops\n+        outputs = (MAX_SIGOP_COST // sigops_per_script) + 2\n+        extra_sigops_available = MAX_SIGOP_COST % sigops_per_script\n+\n+        # We chose the number of checkmultisigs/checksigs to make this work:\n+        assert(extra_sigops_available < 100) # steer clear of MAX_OPS_PER_SCRIPT\n+\n+        # This script, when spent with the first\n+        # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,\n+        # would push us just over the block sigop limit.\n+        witness_program_toomany = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG]*(extra_sigops_available + 1) + [OP_ENDIF])\n+        witness_hash_toomany = sha256(witness_program_toomany)\n+        scriptPubKey_toomany = CScript([OP_0, witness_hash_toomany])\n+\n+        # If we spend this script instead, we would exactly reach our sigop\n+        # limit (for witness sigops).\n+        witness_program_justright = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG]*(extra_sigops_available) + [OP_ENDIF])\n+        witness_hash_justright = sha256(witness_program_justright)\n+        scriptPubKey_justright = CScript([OP_0, witness_hash_justright])\n+\n+        # First split our available utxo into a bunch of outputs\n+        split_value = self.utxo[0].nValue // outputs\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        for i in range(outputs):\n+            tx.vout.append(CTxOut(split_value, scriptPubKey))\n+        tx.vout[-2].scriptPubKey = scriptPubKey_toomany\n+        tx.vout[-1].scriptPubKey = scriptPubKey_justright\n+        tx.rehash()\n+\n+        block_1 = self.build_next_block()\n+        self.update_witness_block_with_transactions(block_1, [tx])\n+        self.test_node.test_witness_block(block_1, accepted=True)\n+\n+        tx2 = CTransaction()\n+        # If we try to spend the first n-1 outputs from tx, that should be\n+        # too many sigops.\n+        total_value = 0\n+       ",
      "path": "qa/rpc-tests/p2p-segwit.py",
      "position": null,
      "original_position": 1506,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Appears unused\n",
      "created_at": "2016-05-25T19:04:16Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r64633343",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64633343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1500,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65207630",
      "pull_request_review_id": null,
      "id": 65207630,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjA3NjMw",
      "diff_hunk": "@@ -511,7 +512,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (const CTransaction& tx, pblock->vtx) {\n+    BOOST_FOREACH (CTransaction& tx, pblock->vtx) {",
      "path": "src/rpc/mining.cpp",
      "position": 50,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "cb9d4d34cab7834f9050293ab90a87a19bd8ff61",
      "in_reply_to_id": null,
      "user": {
        "login": "earonesty",
        "id": 50769,
        "node_id": "MDQ6VXNlcjUwNzY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/50769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/earonesty",
        "html_url": "https://github.com/earonesty",
        "followers_url": "https://api.github.com/users/earonesty/followers",
        "following_url": "https://api.github.com/users/earonesty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/earonesty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/earonesty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/earonesty/subscriptions",
        "organizations_url": "https://api.github.com/users/earonesty/orgs",
        "repos_url": "https://api.github.com/users/earonesty/repos",
        "events_url": "https://api.github.com/users/earonesty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/earonesty/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "must be a mistaken edit: all references in that loop are const\n",
      "created_at": "2016-05-31T15:39:47Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65207630",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65207630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65664565",
      "pull_request_review_id": null,
      "id": 65664565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjY0NTY1",
      "diff_hunk": "@@ -175,13 +175,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 16,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e82f2fc38827815a635390dfde5afb26229ff053",
      "in_reply_to_id": null,
      "user": {
        "login": "JDutil",
        "id": 25104,
        "node_id": "MDQ6VXNlcjI1MTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/25104?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JDutil",
        "html_url": "https://github.com/JDutil",
        "followers_url": "https://api.github.com/users/JDutil/followers",
        "following_url": "https://api.github.com/users/JDutil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JDutil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JDutil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JDutil/subscriptions",
        "organizations_url": "https://api.github.com/users/JDutil/orgs",
        "repos_url": "https://api.github.com/users/JDutil/repos",
        "events_url": "https://api.github.com/users/JDutil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JDutil/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is the max arbitrarily set here?\n",
      "created_at": "2016-06-03T07:09:42Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65664565",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65664565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65665109",
      "pull_request_review_id": null,
      "id": 65665109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjY1MTA5",
      "diff_hunk": "@@ -175,13 +175,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 16,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e82f2fc38827815a635390dfde5afb26229ff053",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is in test code. It has to test a specific scenario.\n",
      "created_at": "2016-06-03T07:16:01Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65665109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65665109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65665505",
      "pull_request_review_id": null,
      "id": 65665505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjY1NTA1",
      "diff_hunk": "@@ -175,13 +175,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 16,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e82f2fc38827815a635390dfde5afb26229ff053",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Though, it could help to name constants that have more than 4 trailing\nzeros and put them in test_framework/ e.g. /mininode.py.\n",
      "created_at": "2016-06-03T07:20:51Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65665505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65665505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65666064",
      "pull_request_review_id": null,
      "id": 65666064,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjY2MDY0",
      "diff_hunk": "@@ -175,13 +175,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 16,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e82f2fc38827815a635390dfde5afb26229ff053",
      "in_reply_to_id": null,
      "user": {
        "login": "JDutil",
        "id": 25104,
        "node_id": "MDQ6VXNlcjI1MTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/25104?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JDutil",
        "html_url": "https://github.com/JDutil",
        "followers_url": "https://api.github.com/users/JDutil/followers",
        "following_url": "https://api.github.com/users/JDutil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JDutil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JDutil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JDutil/subscriptions",
        "organizations_url": "https://api.github.com/users/JDutil/orgs",
        "repos_url": "https://api.github.com/users/JDutil/repos",
        "events_url": "https://api.github.com/users/JDutil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JDutil/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay so this is test code, but the test code used to be against the MAX_BLOCK_SIZE why is the max block size no longer important? Sorry if I sound stupid here being ruby dev not python, but I'd like to understand this seemingly arbitrary change that IMHO is way worse than being arbitrary it is changing the TEST ITSELF.\n",
      "created_at": "2016-06-03T07:25:42Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65666064",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65666064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65800645",
      "pull_request_review_id": null,
      "id": 65800645,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODAwNjQ1",
      "diff_hunk": "@@ -175,13 +175,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 16,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e82f2fc38827815a635390dfde5afb26229ff053",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I misunderstood your comment. Sure, I should add a constant for the new max block size on the python side.\n",
      "created_at": "2016-06-04T10:05:29Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65800645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65800645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65800717",
      "pull_request_review_id": null,
      "id": 65800717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODAwNzE3",
      "diff_hunk": "@@ -175,13 +175,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 16,
      "original_position": 16,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e82f2fc38827815a635390dfde5afb26229ff053",
      "in_reply_to_id": null,
      "user": {
        "login": "JDutil",
        "id": 25104,
        "node_id": "MDQ6VXNlcjI1MTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/25104?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JDutil",
        "html_url": "https://github.com/JDutil",
        "followers_url": "https://api.github.com/users/JDutil/followers",
        "following_url": "https://api.github.com/users/JDutil/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JDutil/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JDutil/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JDutil/subscriptions",
        "organizations_url": "https://api.github.com/users/JDutil/orgs",
        "repos_url": "https://api.github.com/users/JDutil/repos",
        "events_url": "https://api.github.com/users/JDutil/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JDutil/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa 👍 on a new constant to make things readable, but sorry I'm just starting to learn the source code here so I still have simple questions.  Is the reason your setting this different than the MAX_BLOCK_SIZE because segwit is supposed to help double the amount of data per block?  I would think this would be 4MB not 4_000_000 which is close... Makes me think the test would be MAX_BLOCK_SIZE \\* 2.  My main misunderstanding is why this value is changing from max constant when the test appears to be testing mining full blocks... Hopefully that helps clear up my confusion.\n",
      "created_at": "2016-06-04T10:12:55Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65800717",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65800717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65925707",
      "pull_request_review_id": null,
      "id": 65925707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI1NzA3",
      "diff_hunk": "@@ -19,6 +19,8 @@ static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n+/** Default for -blockmaxcost, which control the range of block costs the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_COST = 3000000;",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "1e9cba2873fd25270a5d368ece46362613ade9a4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~@sipa I think this still needs to be addressed?~~\n",
      "created_at": "2016-06-06T16:49:54Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r65925707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65925707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66026986",
      "pull_request_review_id": null,
      "id": 66026986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDI2OTg2",
      "diff_hunk": "@@ -64,4 +65,179 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig2), 3U);\n }\n \n+/**\n+ * Verifies script execution of the zeroth scriptPubKey of tx output and\n+ * zeroth scriptSig and witness of tx input.\n+ */\n+ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags)\n+{\n+    ScriptError error;\n+    CTransaction inputi(input);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "3cb46c1a4ac94f4a7f25368bc2ba3c784c901b89",
      "in_reply_to_id": null,
      "user": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`ret` is unused here.\n",
      "created_at": "2016-06-07T08:14:58Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66026986",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66026986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66896121",
      "pull_request_review_id": null,
      "id": 66896121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODk2MTIx",
      "diff_hunk": "@@ -31,3 +31,12 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+int64_t GetBlockCost(const CBlock& block)\n+{\n+    // This implements the cost = (stripped_size * 4) + witness_size formula,\n+    // using only serialization with and without witness data. As witness_size\n+    // is equal to total_size - stripped_size, this formula is identical to:\n+    // cost = (stripped_size * 3) + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);",
      "path": "src/primitives/block.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "a29e8991add14406ec09401c3c37c919784161dd",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't this first call be `::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)`?  I guess PROTOCOL_VERSION isn't actually used, but I assume we should be consistent...\n\nEDIT: maybe I'm wrong?  I see both in the code actually...\n",
      "created_at": "2016-06-14T01:19:30Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66896121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66896121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66999145",
      "pull_request_review_id": null,
      "id": 66999145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTk5MTQ1",
      "diff_hunk": "@@ -1183,15 +1343,17 @@ class NodeConn(asyncore.dispatcher):\n         b\"getheaders\": msg_getheaders,\n         b\"reject\": msg_reject,\n         b\"mempool\": msg_mempool,\n-        b\"feefilter\": msg_feefilter\n+        b\"feefilter\": msg_feefilter,\n+        b\"sendheaders\": msg_sendheaders\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n         \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+        \"segnet\": b\"\\x2e\\x96\\xea\\xca\"     # segnet",
      "path": "qa/rpc-tests/test_framework/mininode.py",
      "position": null,
      "original_position": 387,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "a29e8991add14406ec09401c3c37c919784161dd",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Vestigial segnet reference \n",
      "created_at": "2016-06-14T15:52:12Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66999145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66999145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66999985",
      "pull_request_review_id": null,
      "id": 66999985,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTk5OTg1",
      "diff_hunk": "@@ -1183,15 +1343,17 @@ class NodeConn(asyncore.dispatcher):\n         b\"getheaders\": msg_getheaders,\n         b\"reject\": msg_reject,\n         b\"mempool\": msg_mempool,\n-        b\"feefilter\": msg_feefilter\n+        b\"feefilter\": msg_feefilter,\n+        b\"sendheaders\": msg_sendheaders\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n         \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+        \"segnet\": b\"\\x2e\\x96\\xea\\xca\"     # segnet",
      "path": "qa/rpc-tests/test_framework/mininode.py",
      "position": null,
      "original_position": 387,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "a29e8991add14406ec09401c3c37c919784161dd",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please send a small PR so this is not forgotten.\n",
      "created_at": "2016-06-14T15:55:59Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r66999985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66999985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67000742",
      "pull_request_review_id": null,
      "id": 67000742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDAwNzQy",
      "diff_hunk": "@@ -1183,15 +1343,17 @@ class NodeConn(asyncore.dispatcher):\n         b\"getheaders\": msg_getheaders,\n         b\"reject\": msg_reject,\n         b\"mempool\": msg_mempool,\n-        b\"feefilter\": msg_feefilter\n+        b\"feefilter\": msg_feefilter,\n+        b\"sendheaders\": msg_sendheaders\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n         \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+        \"segnet\": b\"\\x2e\\x96\\xea\\xca\"     # segnet",
      "path": "qa/rpc-tests/test_framework/mininode.py",
      "position": null,
      "original_position": 387,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "a29e8991add14406ec09401c3c37c919784161dd",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done\n",
      "created_at": "2016-06-14T15:59:54Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67000742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67000742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67418508",
      "pull_request_review_id": null,
      "id": 67418508,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDE4NTA4",
      "diff_hunk": "@@ -1011,6 +1011,85 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(innerID).ToString();\n }\n \n+class Witnessifier : public boost::static_visitor<bool>\n+{\n+public:\n+    CScriptID result;\n+\n+    bool operator()(const CNoDestination &dest) const { return false; }\n+\n+    bool operator()(const CKeyID &keyID) {\n+        CPubKey pubkey;\n+        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n+            CScript basescript;\n+            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+            CScript witscript = GetScriptForWitness(basescript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) {\n+        CScript subscript;\n+        if (pwalletMain && pwalletMain->GetCScript(scriptID, subscript)) {\n+            int witnessversion;\n+            std::vector<unsigned char> witprog;\n+            if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n+                result = scriptID;\n+                return true;\n+            }\n+            CScript witscript = GetScriptForWitness(subscript);\n+            pwalletMain->AddCScript(witscript);\n+            result = CScriptID(witscript);\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+            \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n+            \"It returns the witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        if (!IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus()) && !GetBoolArg(\"-walletprematurewitness\", false)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 65,
      "original_position": 65,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e84733733d0ec3deee3b0d1cdcf643082b78ee1e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we want to do a similar thing for createwitnessaddress? \n",
      "created_at": "2016-06-16T20:31:23Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67418508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67418508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1075,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67446230",
      "pull_request_review_id": null,
      "id": 67446230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDQ2MjMw",
      "diff_hunk": "@@ -79,62 +81,142 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, creator, scriptPubKey, scriptSigRet);\n+        return Sign1(keyID, creator, scriptPubKey, ret, sigversion);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, creator, scriptPubKey, scriptSigRet))\n+        if (!Sign1(keyID, creator, scriptPubKey, ret, sigversion))\n             return false;\n         else\n         {\n             CPubKey vch;\n             creator.KeyStore().GetPubKey(keyID, vch);\n-            scriptSigRet << ToByteVector(vch);\n+            ret.push_back(ToByteVector(vch));\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n \n     case TX_MULTISIG:\n-        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, creator, scriptPubKey, scriptSigRet));\n+        ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n+\n+    case TX_WITNESS_V0_KEYHASH:\n+        ret.push_back(vSolutions[0]);\n+        return true;\n+\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n+        if (creator.KeyStore().GetCScript(h160, scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n+\n+    default:\n+        return false;\n     }\n-    return false;\n }\n \n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n+static CScript PushAll(const vector<valtype>& values)\n {\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n+{\n+    CScript script = fromPubKey;\n+    bool solved = true;\n+    std::vector<valtype> result;\n     txnouttype whichType;\n-    if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n-        return false;\n+    solved = SignStep(creator, script, result, whichType, SIGVERSION_BASE);\n+    bool P2SH = false;\n+    CScript subscript;\n+    sigdata.scriptWitness.stack.clear();\n \n-    if (whichType == TX_SCRIPTHASH)\n+    if (solved && whichType == TX_SCRIPTHASH)\n     {\n-        // Solver returns the subscript that need to be evaluated;\n+        // Solver returns the subscript that needs to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        CScript subscript = scriptSig;\n+        script = subscript = CScript(result[0].begin(), result[0].end());\n+        solved = solved && SignStep(creator, script, result, whichType, SIGVERSION_BASE) && whichType != TX_SCRIPTHASH;\n+        P2SH = true;\n+    }\n \n+    if (solved && whichType == TX_WITNESS_V0_KEYHASH)\n+    {\n+        CScript witnessscript;\n+        witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        bool fSolved =\n-            SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n-        scriptSig << valtype(subscript.begin(), subscript.end());\n-        if (!fSolved) return false;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0);\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n+    }\n+    else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n+    {\n+        CScript witnessscript(result[0].begin(), result[0].end());\n+        txnouttype subType;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;",
      "path": "src/script/sign.cpp",
      "position": 173,
      "original_position": 173,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e84733733d0ec3deee3b0d1cdcf643082b78ee1e",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rather than reassign `solved`,  maybe just `return false`? \nWhy are we waiting until the end of the scope?\n",
      "created_at": "2016-06-17T00:23:31Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67446230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67446230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67542461",
      "pull_request_review_id": null,
      "id": 67542461,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTQyNDYx",
      "diff_hunk": "@@ -79,62 +81,142 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, creator, scriptPubKey, scriptSigRet);\n+        return Sign1(keyID, creator, scriptPubKey, ret, sigversion);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, creator, scriptPubKey, scriptSigRet))\n+        if (!Sign1(keyID, creator, scriptPubKey, ret, sigversion))\n             return false;\n         else\n         {\n             CPubKey vch;\n             creator.KeyStore().GetPubKey(keyID, vch);\n-            scriptSigRet << ToByteVector(vch);\n+            ret.push_back(ToByteVector(vch));\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n \n     case TX_MULTISIG:\n-        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, creator, scriptPubKey, scriptSigRet));\n+        ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n+\n+    case TX_WITNESS_V0_KEYHASH:\n+        ret.push_back(vSolutions[0]);\n+        return true;\n+\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n+        if (creator.KeyStore().GetCScript(h160, scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n+\n+    default:\n+        return false;\n     }\n-    return false;\n }\n \n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n+static CScript PushAll(const vector<valtype>& values)\n {\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n+{\n+    CScript script = fromPubKey;\n+    bool solved = true;\n+    std::vector<valtype> result;\n     txnouttype whichType;\n-    if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n-        return false;\n+    solved = SignStep(creator, script, result, whichType, SIGVERSION_BASE);\n+    bool P2SH = false;\n+    CScript subscript;\n+    sigdata.scriptWitness.stack.clear();\n \n-    if (whichType == TX_SCRIPTHASH)\n+    if (solved && whichType == TX_SCRIPTHASH)\n     {\n-        // Solver returns the subscript that need to be evaluated;\n+        // Solver returns the subscript that needs to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        CScript subscript = scriptSig;\n+        script = subscript = CScript(result[0].begin(), result[0].end());\n+        solved = solved && SignStep(creator, script, result, whichType, SIGVERSION_BASE) && whichType != TX_SCRIPTHASH;\n+        P2SH = true;\n+    }\n \n+    if (solved && whichType == TX_WITNESS_V0_KEYHASH)\n+    {\n+        CScript witnessscript;\n+        witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        bool fSolved =\n-            SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n-        scriptSig << valtype(subscript.begin(), subscript.end());\n-        if (!fSolved) return false;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0);\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n+    }\n+    else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n+    {\n+        CScript witnessscript(result[0].begin(), result[0].end());\n+        txnouttype subType;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;",
      "path": "src/script/sign.cpp",
      "position": 173,
      "original_position": 173,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e84733733d0ec3deee3b0d1cdcf643082b78ee1e",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We want to push the potentially partial result to sigdata.scriptSig, which is done in line 179-182.\n",
      "created_at": "2016-06-17T17:00:37Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67542461",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67542461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67592553",
      "pull_request_review_id": null,
      "id": 67592553,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTkyNTUz",
      "diff_hunk": "@@ -2371,18 +2413,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n+        }\n \n-            if (fStrictPayToScriptHash)\n-            {\n-                // Add in sigops done by pay-to-script-hash inputs;\n-                // this is to prevent a \"rogue miner\" from creating\n-                // an incredibly-expensive-to-validate block.\n-                nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                                     REJECT_INVALID, \"bad-blk-sigops\");\n-            }\n+        // GetTransactionSigOpCost counts 3 types of sigops:\n+        // * legacy (always)\n+        // * p2sh (when P2SH enabled in flags and excludes coinbase)\n+        // * witness (when witness enabled in flags and excludes coinbase)\n+        nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n+        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),",
      "path": "src/main.cpp",
      "position": 219,
      "original_position": 197,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e84733733d0ec3deee3b0d1cdcf643082b78ee1e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Upgraded nodes don't ask for blocks from non-upgraded?\n",
      "created_at": "2016-06-18T01:15:31Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67592553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67592553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2517,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67592852",
      "pull_request_review_id": null,
      "id": 67592852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTkyODUy",
      "diff_hunk": "@@ -2371,18 +2413,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n+        }\n \n-            if (fStrictPayToScriptHash)\n-            {\n-                // Add in sigops done by pay-to-script-hash inputs;\n-                // this is to prevent a \"rogue miner\" from creating\n-                // an incredibly-expensive-to-validate block.\n-                nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                                     REJECT_INVALID, \"bad-blk-sigops\");\n-            }\n+        // GetTransactionSigOpCost counts 3 types of sigops:\n+        // * legacy (always)\n+        // * p2sh (when P2SH enabled in flags and excludes coinbase)\n+        // * witness (when witness enabled in flags and excludes coinbase)\n+        nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n+        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),",
      "path": "src/main.cpp",
      "position": 219,
      "original_position": 197,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "e84733733d0ec3deee3b0d1cdcf643082b78ee1e",
      "in_reply_to_id": null,
      "user": {
        "login": "kazcw",
        "id": 1047859,
        "node_id": "MDQ6VXNlcjEwNDc4NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kazcw",
        "html_url": "https://github.com/kazcw",
        "followers_url": "https://api.github.com/users/kazcw/followers",
        "following_url": "https://api.github.com/users/kazcw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kazcw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kazcw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
        "organizations_url": "https://api.github.com/users/kazcw/orgs",
        "repos_url": "https://api.github.com/users/kazcw/repos",
        "events_url": "https://api.github.com/users/kazcw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kazcw/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, right. Nevermind..\n",
      "created_at": "2016-06-18T01:29:08Z",
      "updated_at": "2016-06-22T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r67592852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67592852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2517,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/76217691",
      "pull_request_review_id": null,
      "id": 76217691,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjE3Njkx",
      "diff_hunk": "@@ -173,13 +173,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available // old_block_size\n \n-        # 144MB will be reserved for relaying new blocks, so expect this to\n-        # succeed for ~70 tries.\n+        # 576MB will be reserved for relaying new blocks, so expect this to\n+        # succeed for ~235 tries.\n         for i in range(success_count):",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 24,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": 64095501,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "at least 4 people so far waiting for an answer to this one, @sipa  curious minds want to know!\n",
      "created_at": "2016-08-25T10:21:11Z",
      "updated_at": "2016-08-25T10:21:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r76217691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/76217691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/76217859",
      "pull_request_review_id": null,
      "id": 76217859,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjE3ODU5",
      "diff_hunk": "@@ -6,10 +6,16 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+#include <stdint.h>\n+\n+/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_COST = 4000000;",
      "path": "src/consensus/consensus.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": 64131474,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oooh! We've lost the 1MB block limit rule?! ;)\n",
      "created_at": "2016-08-25T10:22:17Z",
      "updated_at": "2016-08-25T10:22:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r76217859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/76217859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/76218549",
      "pull_request_review_id": null,
      "id": 76218549,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjE4NTQ5",
      "diff_hunk": "@@ -173,13 +173,13 @@ def run_test(self):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n-        max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * MAX_BLOCK_SIZE\n+        max_bytes_per_day = 800*1024*1024\n+        daily_buffer = 144 * 4000000\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available // old_block_size\n \n-        # 144MB will be reserved for relaying new blocks, so expect this to\n-        # succeed for ~70 tries.\n+        # 576MB will be reserved for relaying new blocks, so expect this to\n+        # succeed for ~235 tries.\n         for i in range(success_count):",
      "path": "qa/rpc-tests/maxuploadtarget.py",
      "position": 24,
      "original_position": 24,
      "commit_id": "c4e3c755d7e41aaabe74c84af7e4bf00a62c96fb",
      "original_commit_id": "5b0cd48d9f29f4a839640819230d4e88e077ce40",
      "in_reply_to_id": 64095501,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@rebroad and other 3: Explanation should be in OP of  #8559\n",
      "created_at": "2016-08-25T10:28:15Z",
      "updated_at": "2016-08-25T10:28:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7910#discussion_r76218549",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/76218549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7910"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}