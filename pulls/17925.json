{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
    "id": 362841873,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYyODQxODcz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17925",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/17925.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/17925.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/bd5a02692853f7240a4fdc593d7d0123d7916e45",
    "number": 17925,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Improve UpdateTransactionsFromBlock with Epochs",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "UpdateTransactionsFromBlock is called during a re-org. When a re-org occurs, all of the transactions in the mempool may be descendants from a transaction which is in the pre-reorg block. This can cause us to propagate updates, worst case, to every transaction in the mempool.\r\n\r\nBecause we construct a `setEntries setChildren`, which is backed by a `std::set`, it is possible that this algorithm is `O(N log N)`.\r\n\r\nBy using an Epoch visitor pattern, we can limit this to `O(N)` worst case behavior.\r\n\r\nEpochs are also less resource intensive than almost any set option (e.g., hash set) because they are allocation free.\r\n\r\nThis PR is related to https://github.com/bitcoin/bitcoin/pull/17268, it is a small subset of the changes which have been refactored slightly to ease review. If this PR gets review & merge, I will follow up with more PRs (similar to #17268) to improve the mempool ",
    "labels": [
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-01-14T21:14:45Z",
    "updated_at": "2022-02-15T10:57:47Z",
    "closed_at": "2020-02-03T10:55:30Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-02-03T10:55:30Z",
    "merge_commit_sha": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "JeremyRubin:epoch-mempool-clean-split",
      "ref": "epoch-mempool-clean-split",
      "sha": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 53111803,
        "node_id": "MDEwOlJlcG9zaXRvcnk1MzExMTgwMw==",
        "name": "bitcoin",
        "full_name": "JeremyRubin/bitcoin",
        "owner": {
          "login": "JeremyRubin",
          "id": 886523,
          "node_id": "MDQ6VXNlcjg4NjUyMw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/JeremyRubin",
          "html_url": "https://github.com/JeremyRubin",
          "followers_url": "https://api.github.com/users/JeremyRubin/followers",
          "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
          "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
          "repos_url": "https://api.github.com/users/JeremyRubin/repos",
          "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/JeremyRubin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/JeremyRubin/bitcoin",
        "archive_url": "https://api.github.com/repos/JeremyRubin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/JeremyRubin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/JeremyRubin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/JeremyRubin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/JeremyRubin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/JeremyRubin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/JeremyRubin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/JeremyRubin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/JeremyRubin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/JeremyRubin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/JeremyRubin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/JeremyRubin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/JeremyRubin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/JeremyRubin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/JeremyRubin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/JeremyRubin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/JeremyRubin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/JeremyRubin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/JeremyRubin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/JeremyRubin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/JeremyRubin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/JeremyRubin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:JeremyRubin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/JeremyRubin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/JeremyRubin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/JeremyRubin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/JeremyRubin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/JeremyRubin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/JeremyRubin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/JeremyRubin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/JeremyRubin/bitcoin/hooks",
        "svn_url": "https://github.com/JeremyRubin/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 7,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 203232,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-01-04T19:39:36Z",
        "created_at": "2016-03-04T06:06:13Z",
        "updated_at": "2023-01-05T18:14:42Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "ceb789cf3a9075729efa07f5114ce0369d8606c3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 87,
    "deletions": 14,
    "changed_files": 2,
    "commits": 2,
    "review_comments": 37,
    "comments": 7
  },
  "events": [
    {
      "event": "labeled",
      "id": 2948720331,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI5NDg3MjAzMzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2948720331",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-14T21:39:23Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "reviewed",
      "id": 342856863,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODU2ODYz",
      "url": null,
      "actor": null,
      "commit_id": "d63d1f3714d805574e23ca49402ed9a75691f0b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks like a great application of this traversal algorithm -- just a couple comments that I think we should address, otherwise code review ACK.  Will test a bit.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#pullrequestreview-342856863",
      "submitted_at": "2020-01-14T21:58:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
    },
    {
      "event": "commented",
      "id": 574403928,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDQwMzkyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574403928",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-14T22:27:29Z",
      "updated_at": "2020-01-31T23:03:35Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17786](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17786.html) (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n* [#16910](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16910.html) (wallet: reduce loading time by using unordered maps by achow101)\n* [#10443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10443.html) (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-574403928",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2NiN2NjYTRhYzY3MTk4YWM4OWJkNThmNWI0YWU0MWE1MTYzY2Vi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "tree": {
        "sha": "13cdb90b884765f807c580eba27a342499c7374f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13cdb90b884765f807c580eba27a342499c7374f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceb789cf3a9075729efa07f5114ce0369d8606c3",
          "sha": "ceb789cf3a9075729efa07f5114ce0369d8606c3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb789cf3a9075729efa07f5114ce0369d8606c3"
        }
      ],
      "message": "Add Epoch Guards to CTXMemPoolEntry and CTxMemPool",
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-15T03:30:13Z"
      },
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-14T19:31:36Z"
      },
      "sha": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDVhMDI2OTI4NTNmNzI0MGE0ZmRjNTkzZDdkMDEyM2Q3OTE2ZTQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "tree": {
        "sha": "135d0e6ddab409ad6a3f6ac739bd89b3342ae668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/135d0e6ddab409ad6a3f6ac739bd89b3342ae668"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
          "sha": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb"
        }
      ],
      "message": "Make UpdateTransactionsFromBlock use Epochs",
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-15T03:30:13Z"
      },
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-14T19:45:46Z"
      },
      "sha": "bd5a02692853f7240a4fdc593d7d0123d7916e45"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2949380898,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk0OTM4MDg5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2949380898",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-15T03:30:50Z"
    },
    {
      "event": "commented",
      "id": 575206318,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTIwNjMxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/575206318",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-16T15:32:36Z",
      "updated_at": "2020-01-16T15:32:36Z",
      "author_association": "MEMBER",
      "body": "I don't know what's up with the appveyor build but I think this code is correct, it passes all tests for me locally.  \r\n\r\nAs a sanity check, I verified that this code does give a speedup in a simple scenario where it would be expected to improve things: create a transaction with 2000 outputs that is confirmed in a block; then spend each of those outputs in a separate transaction in the mempool; then disconnect the block and measure the time spent in UpdateTransactionsFromBlock (which must visit each of those 2000 children).  I observed a roughly 12% improvement in runtime in this simple test.\r\n\r\nACK bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-575206318",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925"
    },
    {
      "event": "added_to_project",
      "id": 2961031429,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyOTYxMDMxNDI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2961031429",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T17:29:42Z",
      "project_card": {
        "id": 31846620,
        "url": "https://api.github.com/projects/columns/cards/31846620",
        "project_id": 3826895,
        "project_url": "https://api.github.com/projects/3826895",
        "column_name": "Epoch MemPool"
      }
    },
    {
      "event": "reviewed",
      "id": 347037291,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDM3Mjkx",
      "url": null,
      "actor": null,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#pullrequestreview-347037291",
      "submitted_at": "2020-01-23T04:12:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
    },
    {
      "event": "reviewed",
      "id": 349015911,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDE1OTEx",
      "url": null,
      "actor": null,
      "commit_id": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK bd5a026\r\n\r\nFailure case we want to prevent is false positive of `visited`, returning we already updated this entry when in fact we haven't done so. This could happen if epoch counter isn't increased before every update, assert in `visited` create this strict ordering, though epoch API may be revisited in further commits if we don't safe enough (specially in case of recursive epoch uses)",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#pullrequestreview-349015911",
      "submitted_at": "2020-01-27T22:59:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
    },
    {
      "event": "mentioned",
      "id": 2986782046,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4Njc4MjA0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2986782046",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T18:37:47Z"
    },
    {
      "event": "subscribed",
      "id": 2986782051,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODY3ODIwNTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2986782051",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T18:37:47Z"
    },
    {
      "event": "mentioned",
      "id": 2986821213,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4NjgyMTIxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2986821213",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T18:50:22Z"
    },
    {
      "event": "subscribed",
      "id": 2986821218,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODY4MjEyMTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2986821218",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T18:50:22Z"
    },
    {
      "event": "commented",
      "id": 579414760,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTQxNDc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579414760",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T19:29:13Z",
      "updated_at": "2020-01-28T19:29:13Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-579414760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925"
    },
    {
      "event": "mentioned",
      "id": 2987197149,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4NzE5NzE0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2987197149",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T20:50:07Z"
    },
    {
      "event": "subscribed",
      "id": 2987197154,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODcxOTcxNTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2987197154",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T20:50:07Z"
    },
    {
      "event": "reviewed",
      "id": 349680981,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjgwOTgx",
      "url": null,
      "actor": null,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK bd5a02692853f7240a4fdc593d7d0123d7916e45, modulo some nits and a typo.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#pullrequestreview-349680981",
      "submitted_at": "2020-01-28T20:59:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
    },
    {
      "event": "mentioned",
      "id": 2987300437,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4NzMwMDQzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2987300437",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T21:24:21Z"
    },
    {
      "event": "subscribed",
      "id": 2987300442,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODczMDA0NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2987300442",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T21:24:21Z"
    },
    {
      "event": "mentioned",
      "id": 2987318218,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4NzMxODIxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2987318218",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T21:30:37Z"
    },
    {
      "event": "subscribed",
      "id": 2987318222,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODczMTgyMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2987318222",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T21:30:38Z"
    },
    {
      "event": "commented",
      "id": 579643248,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTY0MzI0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579643248",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T08:14:02Z",
      "updated_at": "2020-01-29T08:14:02Z",
      "author_association": "MEMBER",
      "body": "@JeremyRubin \r\n> @sdaftuar and I spent like at least an hour trying to come up with a better semantic name than the predecessor to visited, and decided that visited was sufficiently semantic.\r\n\r\nGood to know it. Let @ajtowns and me join your discussion ;)\r\n\r\n> I don't care about the names that much though, other than it causes negligible more rebase work for me -- @ajtowns will refactor some of this in a follow up with a new interface, I think if we want to bikeshed names more we can update it then.\r\n\r\nGood names cause less cognitive work for other contributors, no?\r\n\r\n@ajtowns \r\n> `needs_processing(it2)` or similar could work, but `visited` seems pretty fine to me. (I would prefer it if it more clearly indicated that it's not idempotent/const; ie `bool a = visited(it); bool b = visited(it);` could result in `!a && b`, so maybe `first_visit()` or similar would be better? But still, it's already fine)\r\n\r\nMay I suggest `first_seen()` (or `FirstSeen()` to be in line with [our naming convention)](url) with `first_seen() == !visited()` ?\r\n",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-579643248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925"
    },
    {
      "event": "mentioned",
      "id": 2988550252,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4ODU1MDI1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2988550252",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T08:14:02Z"
    },
    {
      "event": "subscribed",
      "id": 2988550259,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODg1NTAyNTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2988550259",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T08:14:02Z"
    },
    {
      "event": "mentioned",
      "id": 2988550263,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4ODU1MDI2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2988550263",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T08:14:02Z"
    },
    {
      "event": "subscribed",
      "id": 2988550266,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODg1NTAyNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2988550266",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T08:14:02Z"
    },
    {
      "event": "mentioned",
      "id": 2988550270,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk4ODU1MDI3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2988550270",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T08:14:03Z"
    },
    {
      "event": "subscribed",
      "id": 2988550273,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5ODg1NTAyNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2988550273",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T08:14:03Z"
    },
    {
      "event": "commented",
      "id": 579660932,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTY2MDkzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579660932",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T09:06:20Z",
      "updated_at": "2020-01-29T09:06:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Apologies, that was an offline discussion!\r\n\r\nfirst_seen or FirstSeen is no good for this use case. If you negate visited then you impose that callers of visited has to check the negation of the call or to nest the code a level deeper inside an if, which adds more cognitive overhead IMO. Most of the code that I've written uses an `if (visited(it)) continue;` guard to check the next element, this code becomes less readable with `if (!first_seen(x)) continue;` or if (first_seen(it)) { x }`\r\n\r\n\r\nI recommend reading this issue on style nits and whatnot: https://github.com/bitcoin/bitcoin/issues/15465; I don't think it's unreasonable to try to figure out better tweaks to names or whatnot, but I think as long as the code is clear & we can convince ourselves it's correct in review, that's more or less sufficient for moving on.\r\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-579660932",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925"
    },
    {
      "event": "commented",
      "id": 579946380,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk0NjM4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579946380",
      "actor": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:18Z",
      "updated_at": "2020-01-29T20:33:18Z",
      "author_association": "MEMBER",
      "body": "Just to summarize for those looking to review - as of bd5a026 there are 3 ACKs (@sdaftuar, @ariard, and @hebasto) and one \"looks good\" from @ajtowns with no NACKs or any show-stopping concerns raised.\r\n\r\n- In review, there have been some style nits and naming convention disagreements along with a suggested follow on [PR](https://github.com/bitcoin/bitcoin/pull/18017) from @ajtowns which uses clang's thread safety annotations and encapsulates the data more strongly to reduce chances of bugs from API misuse. \r\n\r\n- @sdaftuar has [verified a speed-up](https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-575206318) for the case this PR was designed for.",
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-579946380",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925"
    },
    {
      "event": "mentioned",
      "id": 2990987964,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk5MDk4Nzk2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987964",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "subscribed",
      "id": 2990987968,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5OTA5ODc5Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987968",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "mentioned",
      "id": 2990987976,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk5MDk4Nzk3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987976",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "subscribed",
      "id": 2990987978,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5OTA5ODc5Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987978",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "mentioned",
      "id": 2990987981,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk5MDk4Nzk4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987981",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "subscribed",
      "id": 2990987986,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5OTA5ODc5ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987986",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "mentioned",
      "id": 2990987990,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk5MDk4Nzk5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987990",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "subscribed",
      "id": 2990987995,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5OTA5ODc5OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990987995",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-29T20:33:19Z"
    },
    {
      "event": "commented",
      "id": 580052200,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDA1MjIwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580052200",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T02:12:15Z",
      "updated_at": "2020-01-30T02:12:15Z",
      "author_association": "MEMBER",
      "body": "ACK bd5a02692853f7240a4fdc593d7d0123d7916e45 (code review)",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-580052200",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17925"
    },
    {
      "event": "added_to_project",
      "id": 2994557921,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyOTk0NTU3OTIx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2994557921",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T19:08:30Z",
      "project_card": {
        "id": 32395879,
        "url": "https://api.github.com/projects/columns/cards/32395879",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 3001710676,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwMDE3MTA2NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3001710676",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b2df21b32ca95f5a24ae8ebaa840aefce6301da6",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2df21b32ca95f5a24ae8ebaa840aefce6301da6",
      "created_at": "2020-02-03T10:55:13Z"
    },
    {
      "event": "merged",
      "id": 3001711641,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzAwMTcxMTY0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3001711641",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at": "2020-02-03T10:55:30Z"
    },
    {
      "event": "closed",
      "id": 3001711659,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzAwMTcxMTY1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3001711659",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-03T10:55:30Z"
    },
    {
      "event": "removed_from_project",
      "id": 3001719442,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MzAwMTcxOTQ0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3001719442",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-03T10:57:32Z",
      "project_card": {
        "id": 32395879,
        "url": "https://api.github.com/projects/columns/cards/32395879",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 352188424,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTg4NDI0",
      "url": null,
      "actor": null,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#pullrequestreview-352188424",
      "submitted_at": "2020-02-03T11:32:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
    },
    {
      "event": "referenced",
      "id": 3003943590,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwMDM5NDM1OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3003943590",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2e207dabf6abc9b0db5949a745ab4f208dba141b",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/2e207dabf6abc9b0db5949a745ab4f208dba141b",
      "created_at": "2020-02-03T21:55:15Z"
    },
    {
      "event": "referenced",
      "id": 3285344727,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODUzNDQ3Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3285344727",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "978c5a212240fd03af13d6f72ba3c27da6298f61",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978c5a212240fd03af13d6f72ba3c27da6298f61",
      "created_at": "2020-04-29T16:08:13Z"
    },
    {
      "event": "referenced",
      "id": 3285686478,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODU2ODY0Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3285686478",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b9915032087b059515775efce7b7bc5acb5022b8",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/b9915032087b059515775efce7b7bc5acb5022b8",
      "created_at": "2020-04-29T17:33:18Z"
    },
    {
      "event": "referenced",
      "id": 3980858622,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTg2MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858622",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e2835e9b8cdb3c414af8855a2e656188e58ad138",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/e2835e9b8cdb3c414af8855a2e656188e58ad138",
      "created_at": "2020-11-10T20:39:48Z"
    },
    {
      "event": "referenced",
      "id": 4138980655,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxMzg5ODA2NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4138980655",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "da023dfd1118871cd81ebbd02bfac1128585fe30",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/da023dfd1118871cd81ebbd02bfac1128585fe30",
      "created_at": "2020-12-22T07:43:15Z"
    },
    {
      "event": "referenced",
      "id": 4369686325,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQzNjk2ODYzMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4369686325",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b59f2787e53318caad6d3292de2cc6e17995d277",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b59f2787e53318caad6d3292de2cc6e17995d277",
      "created_at": "2021-02-24T08:57:49Z"
    },
    {
      "event": "referenced",
      "id": 4898740544,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4OTg3NDA1NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4898740544",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "20858dcb8a149a8ee3d7edcc9e1e3ec9a43419de",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/20858dcb8a149a8ee3d7edcc9e1e3ec9a43419de",
      "created_at": "2021-06-16T15:28:04Z"
    },
    {
      "event": "referenced",
      "id": 4898925096,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4OTg5MjUwOTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4898925096",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8d8bc9bf203190e03af356c9e1dd155eb63ffb7c",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/8d8bc9bf203190e03af356c9e1dd155eb63ffb7c",
      "created_at": "2021-06-16T15:58:37Z"
    },
    {
      "event": "referenced",
      "id": 4899021581,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4OTkwMjE1ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4899021581",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f3e5ca703cc62bb0e1e4299dd67e7045e0e7aebd",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/f3e5ca703cc62bb0e1e4299dd67e7045e0e7aebd",
      "created_at": "2021-06-16T16:15:21Z"
    },
    {
      "event": "referenced",
      "id": 4914714970,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ5MTQ3MTQ5NzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4914714970",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "14c631691f0ceefd5294f49f8cfb68004484be05",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/14c631691f0ceefd5294f49f8cfb68004484be05",
      "created_at": "2021-06-21T06:10:12Z"
    },
    {
      "event": "locked",
      "id": 6073970986,
      "node_id": "LOE_lADOABII584gxZ7VzwAAAAFqCXEq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073970986",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:57:47Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366586660",
      "pull_request_review_id": 342856863,
      "id": 366586660,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NjY2MA==",
      "diff_hunk": "@@ -453,6 +454,8 @@ class CTxMemPool\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n+    mutable uint64_t m_epoch;\n+    mutable bool has_epoch_guard;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 13,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "d63d1f3714d805574e23ca49402ed9a75691f0b3",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see initializations for these variables anywhere?",
      "created_at": "2020-01-14T21:40:24Z",
      "updated_at": "2020-01-15T03:30:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366586660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366586660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366591661",
      "pull_request_review_id": 342856863,
      "id": 366591661,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MTY2MQ==",
      "diff_hunk": "@@ -736,6 +739,34 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    // This function mutates mutable state!",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "d63d1f3714d805574e23ca49402ed9a75691f0b3",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A bit confusing to have this comment (about a function) right before a class definition, I'm guessing it is leftover from something else (or should be moved a few lines down). \r\n\r\nActually I think it'd make sense to explain here a little bit about what these epochs are and why/how to use them?  (Also, as this would be the first introduction of epochs in the code, it'd be helpful for reviewers of the future PRs that will use it in more places to be able to remember/understand what this construction is.)  Perhaps something like:\r\n\r\n```\r\nEpochGuard: RAII-style guard for using epoch-based graph traversal algorithms\r\nWhen walking ancestors or descendants, we generally want to avoid visiting the \r\nsame transactions twice. In some places we use std::set (or setEntries) to deduplicate\r\n what we visit, but we can do (algorithmically) better by using a counter (\"epoch\") that \r\nwe set on each transaction and comparing against a global epoch to track whether \r\nwe've visited something already during a calculation.\r\n```\r\nOr something like that...",
      "created_at": "2020-01-14T21:52:02Z",
      "updated_at": "2020-01-15T03:30:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366591661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366591661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 743,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366682083",
      "pull_request_review_id": 342972129,
      "id": 366682083,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4MjA4Mw==",
      "diff_hunk": "@@ -736,6 +739,34 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    // This function mutates mutable state!",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "d63d1f3714d805574e23ca49402ed9a75691f0b3",
      "in_reply_to_id": 366591661,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "great comment; rewrote it slightly to a format I think is more clear & also to emphasize that replacement with epochs is ongoing work :)",
      "created_at": "2020-01-15T03:31:01Z",
      "updated_at": "2020-01-15T03:31:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366682083",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366682083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 743,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914044",
      "pull_request_review_id": 347037291,
      "id": 369914044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDA0NA==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "path": "src/txmempool.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this would be cleaner with the 'epoch' concept split out. I'm thinking:\r\n\r\n```c++\r\nclass Epoch {\r\npublic:\r\n    uint64_t m_epoch;\r\n    bool m_guarded;\r\n\r\n    Epoch() : m_epoch{0}, m_guarded{false} {}\r\n    Epoch(const Epoch&) = delete; // no copy constructor\r\n    Epoch& operator=(const Epoch&) = delete; // not assignable\r\n\r\n    class SCOPED_LOCKABLE Guard {\r\n        Epoch& m_epoch;\r\n    public:\r\n        Guard(Epoch& epoch) EXCLUSIVE_LOCK_FUNCTION(epoch) LOCKS_EXCLUDED(epoch);\r\n        ~Guard() UNLOCK_FUNCTION();\r\n    };\r\n};\r\n#define WITH_EPOCH(epoch) const Epoch::Guard PASTE2(epoch_guard_, __COUNTER__)(epoch)\r\n```\r\nand\r\n\r\n```c++\r\nclass CTxMemPool {\r\n    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\r\n.\r\n    mutable Epoch m_epoch GUARDED_BY(cs);\r\n    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch) { .. }\r\n};\r\n```\r\n\r\nand\r\n\r\n```c++\r\n    WITH_EPOCH(m_epoch); // instead of const auto epoch = GetFreshEpoch()\r\n```\r\n\r\nThis lets clang check `visited()`  is only invoked within an epoch at compile time, which seems nice.\r\n\r\nUsing `LOCKS_EXCLUDED` gets part of the way to ensuring you're not doing `WITH_EPOCH` recursively at compile time (eg, holding it from UpdateTxsFromBlock while calling UpdateForDescendants once UpdForDesc has been epoch-ised), but only works as long as you don't have indirect invocations -- ie if A() calls B() and B() is marked with LOCKS_EXCLUDED, that doesn't cause A() to also be marked with LOCKS_EXCLUDED.\r\n\r\nThis also makes the mutability/constness stuff clearer -- in my opinion, anyway.",
      "created_at": "2020-01-23T03:06:51Z",
      "updated_at": "2020-01-23T04:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369914044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 763,
      "original_line": 763,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914759",
      "pull_request_review_id": 347037291,
      "id": 369914759,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDc1OQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "path": "src/txmempool.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function doesn't seem to be needed yet; suggest deferring it until it is.",
      "created_at": "2020-01-23T03:11:07Z",
      "updated_at": "2020-01-23T04:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369914759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 787,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369915441",
      "pull_request_review_id": 347037291,
      "id": 369915441,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNTQ0MQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);",
      "path": "src/txmempool.h",
      "position": 62,
      "original_position": 62,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think:\r\n\r\n```c++\r\nbool visited(txiter it) const {\r\n    assert(m_has_epoch_guard);\r\n    bool visited = it->m_epoch == m_epoch; // only visits this epoch count\r\n    if (!visited) it->m_epoch = m_epoch;\r\n    return visited;\r\n}\r\n```\r\n\r\nwould be clearer. (Also, this could be `const txiter it` since you're only changing what the iter points at)",
      "created_at": "2020-01-23T03:15:24Z",
      "updated_at": "2020-01-23T04:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369915441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369915441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 783,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370418775",
      "pull_request_review_id": 347688071,
      "id": 370418775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxODc3NQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "path": "src/txmempool.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914044,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm... I think that you're right that this code is somehow better, but TBH I don't really understand how the clang lock analyzing stuff works & don't know if I could personally maintain this code... Is there anything better to look at than http://releases.llvm.org/3.5.0/tools/clang/docs/ThreadSafetyAnalysis.html on how to understand this clang extension?\r\n\r\nAny objection to this being a follow on PR?\r\n\r\nI also have concern that this isn't compatible with future changes that may recursively use the epoch guard (there are algorithms that are recursive reuse safe, if you want to express a case where A has an epoch which calls B, and B creates a new Epoch which may re-traverse all of the mempool entries but A will not re-traverse anything traversed in B). You could imagine a use for this if I wanted to walk the whole mempool and traverse every connected component once, but at the same time.\r\n\r\nThis requires some modified behavior (e.g., making epoch guards aware of the epoch they are guarding), but can still work.\r\n\r\n```c++\r\nconst auto epoch = GetFreshEpoch();\r\nfor (auto& elt : mapTx) {\r\n    if (epoch.visited(elt)) continue;\r\n    const auto epoch = epoch.SubEpoch();\r\n    vector<txiter> component;\r\n    GetAllAncestorsEpochAlreadyHeld(elt, component);\r\n    GetAllDescendentsEpochAlreadyHeld(elt, component);\r\n    DoSomethingWithComponent(component);\r\n}\r\n```",
      "created_at": "2020-01-24T00:05:37Z",
      "updated_at": "2020-01-24T00:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370418775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370418775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 763,
      "original_line": 763,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370419851",
      "pull_request_review_id": 347689397,
      "id": 370419851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxOTg1MQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);",
      "path": "src/txmempool.h",
      "position": 62,
      "original_position": 62,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369915441,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See above for note on future recursive locking -- given that this is a future concern, I agree it could be postponed, but I like that the current version of the code wouldn't have to change if modified.\r\n\r\nIn your version it's also not clear that if `it->m_epoch != m_epoch`, that `!(it->m_epoch > m_epoch)`, which violates the contract that `it->m_epoch` should be monotonic.\r\n\r\nIt's easier IMO to validate this by using std::max, then `it->m_epoch` is guaranteed to weakly increase.",
      "created_at": "2020-01-24T00:09:38Z",
      "updated_at": "2020-01-24T00:09:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370419851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370419851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 783,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370422247",
      "pull_request_review_id": 347692275,
      "id": 370422247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyMjI0Nw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "path": "src/txmempool.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914759,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Correct; it's not needed yet. I'm indifferent on if it stays or goes. I figured it's better for it to live in the same commit as the introduction of it's non-optioned version, but unused functions aren't great to introduce.\r\n\r\nGiven that:\r\n1) It will be introduced in later work, relatively soon\r\n2) There's already an ack for this specific revision -- meaning both that this function has already been reviewed and doesn't require re-review in the future, but also that we won't make suhas have to re-ack this change.\r\n3) There's nothing detectable *wrong* with it\r\n\r\nI'd rather just keep it for now and focus on getting out the PR that depends on it sooner.",
      "created_at": "2020-01-24T00:19:04Z",
      "updated_at": "2020-01-24T00:19:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370422247",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370422247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 787,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371514906",
      "pull_request_review_id": 349015911,
      "id": 371514906,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxNDkwNg==",
      "diff_hunk": "@@ -129,6 +129,7 @@ class CTxMemPoolEntry\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n \n     mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n+    mutable uint64_t m_epoch; //!< epoch when last touched, useful for graph algorithms",
      "path": "src/txmempool.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2ccb7cc\r\n\r\nI think you considered it but why not m_entry_epoch, to avoid names collision for reviewers?",
      "created_at": "2020-01-27T22:19:18Z",
      "updated_at": "2020-01-27T22:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r371514906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371514906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371523359",
      "pull_request_review_id": 349015911,
      "id": 371523359,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyMzM1OQ==",
      "diff_hunk": "@@ -1105,4 +1105,23 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n     m_is_loaded = loaded;\n }\n \n+\n+CTxMemPool::EpochGuard CTxMemPool::GetFreshEpoch() const\n+{\n+    return EpochGuard(*this);\n+}\n+CTxMemPool::EpochGuard::EpochGuard(const CTxMemPool& in) : pool(in)\n+{\n+    assert(!pool.m_has_epoch_guard);\n+    ++pool.m_epoch;\n+    pool.m_has_epoch_guard = true;\n+}\n+\n+CTxMemPool::EpochGuard::~EpochGuard()\n+{\n+    // prevents stale results being used\n+    ++pool.m_epoch;",
      "path": "src/txmempool.cpp",
      "position": 78,
      "original_position": 37,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2ccb7cc\r\n\r\nWhat kind of stale scenario do you envision here ? \r\n\r\nIf taking twice the epoch is attempted, the assert will be hit and should be able to spot this kind of programming error. \r\n\r\nOtherwise, if you prevent `visited` returning true for past value, I think that's bettter than enforcing lock taking on epoch (because worst-case you reprocess an entry, which is better than taking a lock on the average-case, this maybe contrary to AJ opinion).",
      "created_at": "2020-01-27T22:40:23Z",
      "updated_at": "2020-01-27T22:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r371523359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371523359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1125,
      "original_line": 1123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371589102",
      "pull_request_review_id": 349105816,
      "id": 371589102,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4OTEwMg==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "path": "src/txmempool.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914044,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you're doing an \"already held\" thing, as far as clang goes that's just marking up the function with \"EXCLUSIVE_LOCKS_REQUIRED(epoch)\". I think something like:\r\n\r\n```c++\r\nclass SubEpoch { uint64_t subepoch; }\r\nclass TxMemPool {\r\n  ...\r\n  GetAllAncestorsEpochAlreadyHeld(elt, vector<txiter>& component, const SubEpoch& subepoch) EXCLUSIVE_LOCKS_REQUIRED(epoch);\r\n};\r\n```\r\n\r\nwould make things pretty typesafe.\r\n\r\nIn the example you give, if you had a tx graph: \r\n\r\n * A outputs A.0, A.1\r\n * B spends A.0, output B.0\r\n * C spends A.1, output C.0\r\n * D spends B.0, C.0\r\n\r\nthen if you traverse mapTx ordered as B,A,C,D you'll do {B,A,D} first, then {C,A,D} second; while if you'd traversed A or D first, you'd do {A,B,C,D} or {D,A,B,C} all in one go. I can't see why you'd end up with an algorithm like that.\r\n\r\nYeah, doing the refactor as a separate PR sounds fine",
      "created_at": "2020-01-28T02:55:51Z",
      "updated_at": "2020-01-28T02:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r371589102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371589102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 763,
      "original_line": 763,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371984087",
      "pull_request_review_id": 349609213,
      "id": 371984087,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4NDA4Nw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "path": "src/txmempool.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914044,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ajtowns so I think you're missing the algorithm that I suggested slightly, you'd actually in this case traverse all of {A, B, C, D} in the first sub-epoch, because you would be traversing all parents and children recursively.\r\n\r\nSo if you had another transaction E, with only confirmed inputs, and F which spends E.0, then you would output:\r\n\r\n{{A, B, C, D}, {E, F}}\r\n\r\nHence being able to traverse the mempool and pick out connected components.\r\n\r\nHowever, on further thought it occurs to me that this sort of algorithm would not require sub-epochs at all.",
      "created_at": "2020-01-28T18:37:47Z",
      "updated_at": "2020-01-28T18:37:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r371984087",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371984087"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 763,
      "original_line": 763,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371986990",
      "pull_request_review_id": 349612915,
      "id": 371986990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4Njk5MA==",
      "diff_hunk": "@@ -1105,4 +1105,23 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n     m_is_loaded = loaded;\n }\n \n+\n+CTxMemPool::EpochGuard CTxMemPool::GetFreshEpoch() const\n+{\n+    return EpochGuard(*this);\n+}\n+CTxMemPool::EpochGuard::EpochGuard(const CTxMemPool& in) : pool(in)\n+{\n+    assert(!pool.m_has_epoch_guard);\n+    ++pool.m_epoch;\n+    pool.m_has_epoch_guard = true;\n+}\n+\n+CTxMemPool::EpochGuard::~EpochGuard()\n+{\n+    // prevents stale results being used\n+    ++pool.m_epoch;",
      "path": "src/txmempool.cpp",
      "position": 78,
      "original_position": 37,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "in_reply_to_id": 371523359,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not required for correctness, but I like that it enforces the invariant that if an epoch guard is not held that all mempool entries are \"younger\" than the mempool's m_epoch.\r\n\r\nBy \"prevents stale results being used\", I meant that if some nefarious caller wanted to manually check epochs outside of the context of an epoch guard, they wouldn't \"gain\" information about the previous traversal. Of course, this is false because they could just check if it->m_epoch == m_epoch-1, but I personally felt it was a nice way to communicate the intent. \r\n\r\nAlso uint64_t is big, so using an extra epochs count per interval isn't going to cause any sort of issue.",
      "created_at": "2020-01-28T18:43:40Z",
      "updated_at": "2020-01-28T18:43:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r371986990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371986990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1125,
      "original_line": 1123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371990443",
      "pull_request_review_id": 349617239,
      "id": 371990443,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5MDQ0Mw==",
      "diff_hunk": "@@ -129,6 +129,7 @@ class CTxMemPoolEntry\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n \n     mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n+    mutable uint64_t m_epoch; //!< epoch when last touched, useful for graph algorithms",
      "path": "src/txmempool.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "in_reply_to_id": 371514906,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fair point -- I felt that prefixing it with the class name was a bit gauche compared to just naming it the same thing. It's also an internal detail that isn't going to be referenced or inspected by any callers, so it isn't going to yield much name colliding code.\r\n\r\nI suggest that when @ajtowns refactors a lock analyzer friendly interface he can pick whatever variable names he thinks appropriate (except maybe m_aj_is_number_one).",
      "created_at": "2020-01-28T18:50:22Z",
      "updated_at": "2020-01-28T18:50:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r371990443",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371990443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372039818",
      "pull_request_review_id": 349680981,
      "id": 372039818,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzOTgxOA==",
      "diff_hunk": "@@ -23,7 +23,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFe\n                                  int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n     : tx(_tx), nFee(_nFee), nTxWeight(GetTransactionWeight(*tx)), nUsageSize(RecursiveDynamicUsage(tx)), nTime(_nTime), entryHeight(_entryHeight),\n-    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n+    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp), m_epoch(0)",
      "path": "src/txmempool.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: might default member initializer be used instead?",
      "created_at": "2020-01-28T20:31:24Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372039818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372039818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372040196",
      "pull_request_review_id": 349680981,
      "id": 372040196,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0MDE5Ng==",
      "diff_hunk": "@@ -325,7 +327,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n }\n \n CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n-    : nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n+    : nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)",
      "path": "src/txmempool.cpp",
      "position": 55,
      "original_position": 55,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: might default member initializers be used instead?",
      "created_at": "2020-01-28T20:32:21Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372040196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372040196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372040887",
      "pull_request_review_id": 349680981,
      "id": 372040887,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0MDg4Nw==",
      "diff_hunk": "@@ -132,17 +130,21 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n         // First calculate the children, and update setMemPoolChildren to\n         // include them, and update their setMemPoolParents to include this tx.\n-        for (; iter != mapNextTx.end() && iter->first->hash == hash; ++iter) {\n-            const uint256 &childHash = iter->second->GetHash();\n-            txiter childIter = mapTx.find(childHash);\n-            assert(childIter != mapTx.end());\n-            // We can skip updating entries we've encountered before or that\n-            // are in the block (which are already accounted for).\n-            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n-                UpdateChild(it, childIter, true);\n-                UpdateParent(childIter, it, true);\n+        // we cache the in-mempool children to avoid duplicate updates",
      "path": "src/txmempool.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this comment still relevant?",
      "created_at": "2020-01-28T20:34:01Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372040887",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372040887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 133,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372045194",
      "pull_request_review_id": 349680981,
      "id": 372045194,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0NTE5NA==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.",
      "path": "src/txmempool.h",
      "position": 35,
      "original_position": 35,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo: incomaptible --> incompatible",
      "created_at": "2020-01-28T20:43:56Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372045194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372045194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 756,
      "original_line": 756,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372046051",
      "pull_request_review_id": 349680981,
      "id": 372046051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0NjA1MQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);",
      "path": "src/txmempool.h",
      "position": 49,
      "original_position": 49,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: since epoch is monotonously increasing, might `GetNextEpoch()` be a more appropriate name?",
      "created_at": "2020-01-28T20:45:54Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372046051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372046051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 770,
      "original_line": 770,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372047993",
      "pull_request_review_id": 349680981,
      "id": 372047993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0Nzk5Mw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);",
      "path": "src/txmempool.h",
      "position": 62,
      "original_position": 62,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369915441,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree with @ajtowns that replacing `std::max()` with conditional statement makes things clearer.\r\n",
      "created_at": "2020-01-28T20:50:07Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372047993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372047993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 783,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372049211",
      "pull_request_review_id": 349680981,
      "id": 372049211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0OTIxMQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;",
      "path": "src/txmempool.h",
      "position": 61,
      "original_position": 61,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: mind adding a comment about \"recursive locking\" you mention in https://github.com/bitcoin/bitcoin/pull/17925/files#r370419851?",
      "created_at": "2020-01-28T20:52:34Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372049211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372049211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 782,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372051752",
      "pull_request_review_id": 349680981,
      "id": 372051752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA1MTc1Mg==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "path": "src/txmempool.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914759,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If `Optional<txiter> it` has no value, returned value `visited() == true` seems semantically a bit weird. Could function naming be improved?",
      "created_at": "2020-01-28T20:58:15Z",
      "updated_at": "2020-01-28T20:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372051752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372051752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 787,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372055970",
      "pull_request_review_id": 349702280,
      "id": 372055970,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA1NTk3MA==",
      "diff_hunk": "@@ -23,7 +23,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFe\n                                  int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n     : tx(_tx), nFee(_nFee), nTxWeight(GetTransactionWeight(*tx)), nUsageSize(RecursiveDynamicUsage(tx)), nTime(_nTime), entryHeight(_entryHeight),\n-    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n+    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp), m_epoch(0)",
      "path": "src/txmempool.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 372039818,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's best to be style consistent with the other fields which are also set by the initializer list.",
      "created_at": "2020-01-28T21:07:13Z",
      "updated_at": "2020-01-28T21:07:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372055970",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372055970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372056084",
      "pull_request_review_id": 349702422,
      "id": 372056084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA1NjA4NA==",
      "diff_hunk": "@@ -325,7 +327,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n }\n \n CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n-    : nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n+    : nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)",
      "path": "src/txmempool.cpp",
      "position": 55,
      "original_position": 55,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 372040196,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's best to be style consistent with the other fields which are also set by the initializer list.",
      "created_at": "2020-01-28T21:07:27Z",
      "updated_at": "2020-01-28T21:07:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372056084",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372056084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372062930",
      "pull_request_review_id": 349710097,
      "id": 372062930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjkzMA==",
      "diff_hunk": "@@ -132,17 +130,21 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n         // First calculate the children, and update setMemPoolChildren to\n         // include them, and update their setMemPoolParents to include this tx.\n-        for (; iter != mapNextTx.end() && iter->first->hash == hash; ++iter) {\n-            const uint256 &childHash = iter->second->GetHash();\n-            txiter childIter = mapTx.find(childHash);\n-            assert(childIter != mapTx.end());\n-            // We can skip updating entries we've encountered before or that\n-            // are in the block (which are already accounted for).\n-            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n-                UpdateChild(it, childIter, true);\n-                UpdateParent(childIter, it, true);\n+        // we cache the in-mempool children to avoid duplicate updates",
      "path": "src/txmempool.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 372040887,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm. The comment is still relevant insofar as it explains what the EpochGuard is doing, but specifically the word \"cache\" is perhaps a bit vague.",
      "created_at": "2020-01-28T21:18:20Z",
      "updated_at": "2020-01-28T21:18:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372062930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372062930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 133,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372063109",
      "pull_request_review_id": 349710321,
      "id": 372063109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MzEwOQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.",
      "path": "src/txmempool.h",
      "position": 35,
      "original_position": 35,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 372045194,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good catch",
      "created_at": "2020-01-28T21:18:44Z",
      "updated_at": "2020-01-28T21:18:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372063109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372063109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 756,
      "original_line": 756,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372065702",
      "pull_request_review_id": 349713729,
      "id": 372065702,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NTcwMg==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);",
      "path": "src/txmempool.h",
      "position": 49,
      "original_position": 49,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 372046051,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think Fresh better encapsulates that it's an epoch that is unused by any element. Fresh, New, Unused are better to me than Next. All else equal, Fresh is already written.\r\n\r\nI don't care about the names that much though, other than it causes negligible more rebase work for me -- @ajtowns will refactor some of this in a follow up with a new interface, I think if we want to bikeshed names more we can update it then.",
      "created_at": "2020-01-28T21:24:20Z",
      "updated_at": "2020-01-28T21:24:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372065702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372065702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 770,
      "original_line": 770,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372068689",
      "pull_request_review_id": 349717559,
      "id": 372068689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2ODY4OQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "path": "src/txmempool.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914759,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not that weird of a decision once you look at the code that depends on it.\r\n\r\nEssentially, if I code something like:\r\n```c++\r\nfor (auto& it : mapTx) {\r\n    auto it2 = FindIterByPrevout(it->GetTransaction()->vin[0].prevout);\r\n    if (visited(it2)) continue;\r\n}\r\n```\r\n\r\nthis is kind of semantic, because if the FindByPrevout returns nullopt then we want to skip it because we've (in theory) already traversed everything we could want to traverse.\r\n\r\n\r\n@sdaftuar and I spent like at least an hour trying to come up with a better semantic name than the predecessor to visited, and decided that visited was sufficiently semantic. But if you have a better suggestion, would be happy to consider it, we just couldn't come up with something that wasn't either awkward sounding or less semantic in other cases.",
      "created_at": "2020-01-28T21:30:37Z",
      "updated_at": "2020-01-28T21:30:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372068689",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372068689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 787,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372070708",
      "pull_request_review_id": 349720096,
      "id": 372070708,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MDcwOA==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);",
      "path": "src/txmempool.h",
      "position": 62,
      "original_position": 62,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369915441,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if i were to update it, I would prefer:\r\n\r\n```c++\r\nif (!ret) it->m_epoch = m_epoch\r\n```\r\nto preserve the aforementioned invariant of monotonicity. This is equivalent to std::max, so I don't have any preference on the style, with a slight preference to what's already there and reviewed. ",
      "created_at": "2020-01-28T21:34:55Z",
      "updated_at": "2020-01-28T21:34:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372070708",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372070708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 783,
      "original_line": 783,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372071837",
      "pull_request_review_id": 349721508,
      "id": 372071837,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MTgzNw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;",
      "path": "src/txmempool.h",
      "position": 61,
      "original_position": 61,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 372049211,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't mind, but don't want to confuse anyone with a currently unsupported use case.\r\n\r\n",
      "created_at": "2020-01-28T21:37:17Z",
      "updated_at": "2020-01-28T21:37:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372071837",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372071837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 782,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372170803",
      "pull_request_review_id": 349840697,
      "id": 372170803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MDgwMw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "path": "src/txmempool.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914759,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`needs_processing(it2)` or similar could work, but `visited` seems pretty fine to me. (I would prefer it if it more clearly indicated that it's not idempotent/const; ie `bool a = visited(it); bool b = visited(it);` could result in `!a && b`, so maybe `first_visit()` or similar would be better? But still, it's already fine)",
      "created_at": "2020-01-29T03:14:25Z",
      "updated_at": "2020-01-29T03:14:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372170803",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372170803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 787,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372178583",
      "pull_request_review_id": 349849398,
      "id": 372178583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3ODU4Mw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "path": "src/txmempool.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914759,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Things like needs_processing aren't great because there can be some sort of implication that it2 needs processing after it's been marked, and doesn't convey the action. What it is a bit better for is conveying the optionality aspect (something that's an nullopt doesn't need processing).\r\n\r\nThe reason we liked visited as a name is that there is a hint that it's not idempotent, that visited suggests both a query (was it2 visited already?) and a statement (it2 has been visited now).\r\n\r\nUltimately a names just a name, and I don't think visited is horribly unclear. If visited isn't sufficient of a name, I'd opt for removing the optional version of this function (as previously noted it's unused) and just inlining the optional handling where it's used (although it wouldn't quite be the same because of the guard assertion checks).\r\n\r\n(One of the other reasons for introducing this PR now rather than later by the way is that there are two or more separate places in the code presently that use Optional txiters, introducing this in a common PR means that those changes can proceed independently of one another.)",
      "created_at": "2020-01-29T03:59:09Z",
      "updated_at": "2020-01-29T03:59:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372178583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372178583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 787,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372186131",
      "pull_request_review_id": 349858200,
      "id": 372186131,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4NjEzMQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "path": "src/txmempool.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914044,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Depends how you traversed mapTx -- if you picked `elt=B` first, then \"C\" would not be a parent or child of \"B\" so you'd only do {A,B,D} in the first subepoch. You'd need to be ordered by feerate or something weird for this to happen, though. But yeah, I can't think of something where sub-epochs is actually useful either. But whatever, `>=` vs `==` doesn't make much difference.",
      "created_at": "2020-01-29T04:41:56Z",
      "updated_at": "2020-01-29T04:41:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372186131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372186131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 763,
      "original_line": 763,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372186915",
      "pull_request_review_id": 349859192,
      "id": 372186915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4NjkxNQ==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "path": "src/txmempool.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914044,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "follow-on PR is #18017 ",
      "created_at": "2020-01-29T04:46:47Z",
      "updated_at": "2020-01-29T04:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372186915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372186915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 763,
      "original_line": 763,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372188833",
      "pull_request_review_id": 349861488,
      "id": 372188833,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4ODgzMw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "path": "src/txmempool.h",
      "position": 42,
      "original_position": 42,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": 369914044,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah I think here's the miscommunication of what the algorithm \"GetComponents\" does. It's something like:\r\n\r\n```c++\r\nvector<vector<txiter>> components;\r\nfor (auto elt: mapTx) {\r\n   vector<txiter> to_process;\r\n   vector<txiter> processed;\r\n   if (visited(elt)) continue;\r\n   to_process.push_back(elt);\r\n   while (to_process.size()) {\r\n    auto todo = to_process.back();\r\n    to_process.pop_back();\r\n    processed.push_back(todo);\r\n   for(auto y : GetMemPoolChildren(todo)) {\r\n        if (visited(y)) continue;\r\n        to_process.push_back(y);\r\n   }\r\n   for(auto x : GetMemPoolParents(todo)) {\r\n       if (visited(x)) continue;\r\n        to_process.push_back(x);\r\n    }\r\n\r\n}\r\n    component.push_back(processed);\r\n}\r\n```\r\n\r\nThis lets you find all connected components I think, and passes the test of B-first. A is a parent of B, so then A goes into the to_process stack, then C is a child of A, so C goes onto the to_process stack.\r\n\r\nWithout epochs this would be much messier, but with epochs we can see that things only go onto the stack one time ever because of the visited guards.",
      "created_at": "2020-01-29T04:57:44Z",
      "updated_at": "2020-01-29T04:57:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r372188833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372188833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 763,
      "original_line": 763,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/374052497",
      "pull_request_review_id": 352188424,
      "id": 374052497,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MjQ5Nw==",
      "diff_hunk": "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)",
      "path": "src/txmempool.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_commit_id": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo for follow-ups: s/traverals/traversals/",
      "created_at": "2020-02-03T11:30:29Z",
      "updated_at": "2020-02-03T11:32:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r374052497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/374052497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 748,
      "original_line": 748,
      "side": "RIGHT"
    }
  ]
}