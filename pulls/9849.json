{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849",
    "id": 107763826,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTA3NzYzODI2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9849",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/9849.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/9849.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ba6074b561fce84191bce5f3749f66436473599b",
    "number": 9849,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Qt: Network Watch tool",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Simple realtime log of p2p network activity (blocks and transactions only)\r\n\r\n- Doesn't begin logging until opened; limited to 0x400 entries (outputs)\r\n- Automatically scrolls if left at the bottom of the log; maintains position if left elsewhere\r\n- Memory-efficient circular buffer; CTransaction references become weak after they're 0x200 entries back in the log\r\n- Search function that selects all matching log entries, including ongoing",
    "labels": [
      {
        "id": 135946,
        "node_id": "MDU6TGFiZWwxMzU5NDY=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
        "name": "GUI",
        "color": "02d7e1",
        "default": false
      }
    ],
    "created_at": "2017-02-24T04:01:18Z",
    "updated_at": "2022-10-30T19:10:45Z",
    "closed_at": "2019-09-30T11:54:10Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "11413eb726a89acd4ec2549be3e3837d9146c9ce",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "luke-jr:gui_netwatch",
      "ref": "gui_netwatch",
      "sha": "ba6074b561fce84191bce5f3749f66436473599b",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 2514537,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNTE0NTM3",
        "name": "bitcoin",
        "full_name": "luke-jr/bitcoin",
        "owner": {
          "login": "luke-jr",
          "id": 1095675,
          "node_id": "MDQ6VXNlcjEwOTU2NzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/luke-jr",
          "html_url": "https://github.com/luke-jr",
          "followers_url": "https://api.github.com/users/luke-jr/followers",
          "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
          "organizations_url": "https://api.github.com/users/luke-jr/orgs",
          "repos_url": "https://api.github.com/users/luke-jr/repos",
          "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/luke-jr/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/luke-jr/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/luke-jr/bitcoin",
        "archive_url": "https://api.github.com/repos/luke-jr/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/luke-jr/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/luke-jr/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/luke-jr/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/luke-jr/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/luke-jr/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/luke-jr/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/luke-jr/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/luke-jr/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/luke-jr/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/luke-jr/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/luke-jr/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/luke-jr/bitcoin/events",
        "forks_url": "https://api.github.com/repos/luke-jr/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/luke-jr/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/luke-jr/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/luke-jr/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/luke-jr/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/luke-jr/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/luke-jr/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/luke-jr/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/luke-jr/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/luke-jr/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/luke-jr/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/luke-jr/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/luke-jr/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/luke-jr/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/luke-jr/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/luke-jr/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:luke-jr/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/luke-jr/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/luke-jr/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/luke-jr/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/luke-jr/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/luke-jr/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/luke-jr/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/luke-jr/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/luke-jr/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/luke-jr/bitcoin/hooks",
        "svn_url": "https://github.com/luke-jr/bitcoin",
        "homepage": "",
        "language": "C++",
        "forks_count": 8,
        "stargazers_count": 20,
        "watchers_count": 20,
        "size": 240643,
        "default_branch": "readme",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-03-16T05:38:05Z",
        "created_at": "2011-10-04T20:22:23Z",
        "updated_at": "2023-03-18T20:43:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d8794a78a887a920276c7124f1c46d69592c6c4e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1109,
    "deletions": 0,
    "changed_files": 9,
    "commits": 2,
    "review_comments": 44,
    "comments": 10
  },
  "events": [
    {
      "event": "labeled",
      "id": 975505674,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDk3NTUwNTY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/975505674",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-24T04:10:48Z",
      "label": {
        "name": "GUI",
        "color": "02d7e1"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 975553067,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTc1NTUzMDY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/975553067",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-24T05:34:44Z"
    },
    {
      "event": "reviewed",
      "id": 23659997,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjM2NTk5OTc=",
      "url": null,
      "actor": null,
      "commit_id": "563ec9e94744e0050ced5aff9d3db54c2fffb3ee",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-23659997",
      "submitted_at": "2017-02-24T07:19:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "commented",
      "id": 282222921,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjIyMjkyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282222921",
      "actor": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-24T07:24:01Z",
      "updated_at": "2017-02-24T07:24:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "This is how it looks like here on testnet:\r\n\r\n<img width=\"1167\" alt=\"screen shot 2017-02-24 at 08 22 39\" src=\"https://cloud.githubusercontent.com/assets/6848764/23294190/86f5186e-fa6a-11e6-83bd-dfa5811b8b68.png\">\r\n",
      "user": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-282222921",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "commented",
      "id": 282223846,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjIyMzg0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282223846",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-24T07:30:31Z",
      "updated_at": "2017-02-24T07:30:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks. Will review.\r\nI just played a bit with it and had massive locking issues on mainnet during catch-up of 2-3 weeks.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-282223846",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 976623962,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTc2NjIzOTYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/976623962",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-24T20:16:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 976640093,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTc2NjQwMDkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/976640093",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-24T20:29:31Z"
    },
    {
      "event": "commented",
      "id": 287385325,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzM4NTMyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287385325",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-03-17T15:26:08Z",
      "updated_at": "2017-03-17T15:26:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Running this PR (built over gitian: https://bitcoin.jonasschnelli.ch/build/54) makes Bitcoin-Qt and also the rest of my apps almost unusable. Had to force kill the process.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-287385325",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "reviewed",
      "id": 27613799,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc2MTM3OTk=",
      "url": null,
      "actor": null,
      "commit_id": "9019229f08a84bcf8623cb457ed8bee36314c6c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-27613799",
      "submitted_at": "2017-03-17T15:29:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 27614161,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc2MTQxNjE=",
      "url": null,
      "actor": null,
      "commit_id": "9019229f08a84bcf8623cb457ed8bee36314c6c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-27614161",
      "submitted_at": "2017-03-17T15:30:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1220983371,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIyMDk4MzM3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1220983371",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-25T07:00:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1221015564,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTIyMTAxNTU2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1221015564",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-08-25T07:30:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1507295236,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUwNzI5NTIzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1507295236",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-06T19:20:11Z"
    },
    {
      "event": "commented",
      "id": 370958712,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDk1ODcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370958712",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-06T22:54:29Z",
      "updated_at": "2018-03-06T22:54:29Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, I like having this, though we have to be sure that there is *no* performance impact when the monitor is not running, and as little as possible when it is.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-370958712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "commented",
      "id": 371004084,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTAwNDA4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371004084",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-07T02:46:47Z",
      "updated_at": "2018-03-07T02:46:47Z",
      "author_association": "MEMBER",
      "body": "The code is (already) disabled until the first time it is opened.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-371004084",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "labeled",
      "id": 1665121966,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE2NjUxMjE5NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1665121966",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-06T02:47:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1935742993,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTkzNTc0Mjk5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1935742993",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-30T17:17:51Z"
    },
    {
      "event": "unlabeled",
      "id": 1935839724,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTkzNTgzOTcyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1935839724",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-30T17:52:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 1935870821,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE5MzU4NzA4MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1935870821",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-30T18:04:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1936180497,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTkzNjE4MDQ5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1936180497",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-30T20:12:48Z"
    },
    {
      "event": "commented",
      "id": 434452220,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDQ1MjIyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434452220",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-30T20:13:01Z",
      "updated_at": "2018-10-30T20:13:01Z",
      "author_association": "MEMBER",
      "body": "Oops, had rebased onto 0.17 instead of master. Rebased for real this time.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-434452220",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "reviewed",
      "id": 169987255,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY5OTg3MjU1",
      "url": null,
      "actor": null,
      "commit_id": "ae96c0d67879d1ede4e44fbacdd787800376fd87",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-169987255",
      "submitted_at": "2018-10-30T20:35:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "unlabeled",
      "id": 1936315272,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTkzNjMxNTI3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1936315272",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-30T21:12:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1936457044,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTkzNjQ1NzA0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1936457044",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-30T22:24:57Z"
    },
    {
      "event": "reviewed",
      "id": 170042728,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMDQyNzI4",
      "url": null,
      "actor": null,
      "commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nCode style is a bit outdated.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170042728",
      "submitted_at": "2018-10-30T23:59:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170049486,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMDQ5NDg2",
      "url": null,
      "actor": null,
      "commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170049486",
      "submitted_at": "2018-10-31T00:00:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1936640778,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTkzNjY0MDc3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1936640778",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-31T00:33:17Z"
    },
    {
      "event": "commented",
      "id": 434550974,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDU1MDk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434550974",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-10-31T03:44:02Z",
      "updated_at": "2019-08-15T22:19:21Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16612](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16612.html) (qt: Remove menu icons by laanwj)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-434550974",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "reviewed",
      "id": 170207391,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjA3Mzkx",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170207391",
      "submitted_at": "2018-10-31T11:39:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170269519,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjY5NTE5",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170269519",
      "submitted_at": "2018-10-31T14:07:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170269875,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjY5ODc1",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170269875",
      "submitted_at": "2018-10-31T14:08:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170271290,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjcxMjkw",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170271290",
      "submitted_at": "2018-10-31T14:10:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170272787,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjcyNzg3",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170272787",
      "submitted_at": "2018-10-31T14:13:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170274029,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjc0MDI5",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170274029",
      "submitted_at": "2018-10-31T14:16:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170275230,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjc1MjMw",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170275230",
      "submitted_at": "2018-10-31T14:18:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170276064,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjc2MDY0",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170276064",
      "submitted_at": "2018-10-31T14:19:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 170277164,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjc3MTY0",
      "url": null,
      "actor": null,
      "commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-170277164",
      "submitted_at": "2018-10-31T14:21:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 171327281,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcxMzI3Mjgx",
      "url": null,
      "actor": null,
      "commit_id": "654f66d9e0f7a31e3c9b9ac6af30da5f5bdb4fb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-171327281",
      "submitted_at": "2018-11-03T13:17:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "reviewed",
      "id": 180487486,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTgwNDg3NDg2",
      "url": null,
      "actor": null,
      "commit_id": "654f66d9e0f7a31e3c9b9ac6af30da5f5bdb4fb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-180487486",
      "submitted_at": "2018-11-30T23:23:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "labeled",
      "id": 2028746197,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMjg3NDYxOTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2028746197",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-16T07:13:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODAwZDlkNzYxMzUyYjJjYjgzOTFlZmEwMjBjZmQ2ZTc2ZGU2OGY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9800d9d761352b2cb8391efa020cfd6e76de68f5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9800d9d761352b2cb8391efa020cfd6e76de68f5",
      "tree": {
        "sha": "7641c211d357b796eaac0beda466ecfb90822607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7641c211d357b796eaac0beda466ecfb90822607"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65435701efdafc6b91db542327c57c69386f02eb",
          "sha": "65435701efdafc6b91db542327c57c69386f02eb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/65435701efdafc6b91db542327c57c69386f02eb"
        }
      ],
      "message": "CValidationInterface: ValidationInterfaceUnregistering, called when being unregistered",
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-12T16:09:06Z"
      },
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-08-24T21:50:31Z"
      },
      "sha": "9800d9d761352b2cb8391efa020cfd6e76de68f5"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2134279231,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEzNDI3OTIzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2134279231",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-12T16:41:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTYwNzRiNTYxZmNlODQxOTFiY2U1ZjM3NDlmNjY0MzY0NzM1OTli",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba6074b561fce84191bce5f3749f66436473599b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ba6074b561fce84191bce5f3749f66436473599b",
      "tree": {
        "sha": "3f6080e24462e2d551bb60d794ee860503034192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f6080e24462e2d551bb60d794ee860503034192"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9800d9d761352b2cb8391efa020cfd6e76de68f5",
          "sha": "9800d9d761352b2cb8391efa020cfd6e76de68f5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9800d9d761352b2cb8391efa020cfd6e76de68f5"
        }
      ],
      "message": "Qt: Network Watch tool\n\nSimple realtime log of p2p network activity (blocks and transactions only)\n\n- Doesn't begin logging until opened; limited to 0x400 entries (outputs)\n- Automatically scrolls if left at the bottom of the log; maintains position if left elsewhere\n- Memory-efficient circular buffer; CTransaction references become weak after they're 0x200 entries back in the log\n- Search function that selects all matching log entries, including ongoing",
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-12T16:46:31Z"
      },
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-24T03:54:50Z"
      },
      "sha": "ba6074b561fce84191bce5f3749f66436473599b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2134302329,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEzNDMwMjMyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2134302329",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-12T16:49:23Z"
    },
    {
      "event": "unlabeled",
      "id": 2134384181,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjEzNDM4NDE4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2134384181",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-12T17:18:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 203146959,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzMTQ2OTU5",
      "url": null,
      "actor": null,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#pullrequestreview-203146959",
      "submitted_at": "2019-02-13T11:00:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
    },
    {
      "event": "commented",
      "id": 521918656,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTkxODY1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/521918656",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-16T07:41:50Z",
      "updated_at": "2019-08-16T07:41:50Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-521918656",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "labeled",
      "id": 2561563226,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1NjE1NjMyMjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2561563226",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-16T07:41:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 536527746,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjUyNzc0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536527746",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T11:53:55Z",
      "updated_at": "2019-09-30T11:53:55Z",
      "author_association": "MEMBER",
      "body": "As this PR has been inactive for a long time, I'm closing this (but marking \"up for grabs\").",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-536527746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "labeled",
      "id": 2672955644,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2NzI5NTU2NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2672955644",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T11:54:03Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "unlabeled",
      "id": 2672955764,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjY3Mjk1NTc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2672955764",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T11:54:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "closed",
      "id": 2672955933,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjY3Mjk1NTkzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2672955933",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T11:54:10Z"
    },
    {
      "event": "unlabeled",
      "id": 5411216693,
      "node_id": "UNLE_lADOABII584Mg6aLzwAAAAFCiJ01",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5411216693",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T14:29:53Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "commented",
      "id": 934466216,
      "node_id": "IC_kwDOABII5843stKo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934466216",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-05T14:30:05Z",
      "updated_at": "2021-10-05T14:30:05Z",
      "author_association": "MEMBER",
      "body": "Moved to https://github.com/bitcoin-core/gui/pull/444",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#issuecomment-934466216",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9849"
    },
    {
      "event": "locked",
      "id": 7699633328,
      "node_id": "LOE_lADOABII584Mg6aLzwAAAAHK7xSw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7699633328",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-30T19:10:45Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102890169",
      "pull_request_review_id": 23659997,
      "id": 102890169,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjg5MDE2OQ==",
      "diff_hunk": "@@ -0,0 +1,788 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"netwatch.h\"\n+\n+#include \"bitcoinunits.h\"\n+#include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n+#include \"networkstyle.h\"\n+\n+#include \"base58.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"sync.h\"\n+#include \"utiltime.h\"\n+#include \"validation.h\"\n+#include \"validationinterface.h\"\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    clientModel(NULL),\n+    logpos(0),\n+    logskip(0),\n+    currentSearch(NULL)\n+{\n+    GetMainSignals().UpdatedBlockTip.connect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.connect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    GetMainSignals().UpdatedBlockTip.disconnect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.disconnect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(CBitcoinAddress(txdest).ToString());\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {\n+        delete currentSearch;\n+    }\n+    currentSearch = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (!isLogRowContinuation(row)) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete currentSearch;\n+    currentSearch = NULL;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!logpos);\n+        log.push_back(le);\n+    }\n+    ++rows_used;\n+    if (rows_used > max_nonweak_txouts) {\n+        LogEntry& le = getLogEntryRow(rows_used - max_nonweak_txouts - 1);",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 552,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "563ec9e94744e0050ced5aff9d3db54c2fffb3ee",
      "in_reply_to_id": null,
      "user": {
        "login": "paveljanik",
        "id": 6848764,
        "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paveljanik",
        "html_url": "https://github.com/paveljanik",
        "followers_url": "https://api.github.com/users/paveljanik/followers",
        "following_url": "https://api.github.com/users/paveljanik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paveljanik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paveljanik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
        "organizations_url": "https://api.github.com/users/paveljanik/orgs",
        "repos_url": "https://api.github.com/users/paveljanik/repos",
        "events_url": "https://api.github.com/users/paveljanik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paveljanik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`le` is the same name as the first argument here, it will bring shadow warning.",
      "created_at": "2017-02-24T07:19:20Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r102890169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102890169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106676794",
      "pull_request_review_id": 27613799,
      "id": 106676794,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjY3Njc5NA==",
      "diff_hunk": "@@ -0,0 +1,798 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"netwatch.h\"\n+\n+#include \"bitcoinunits.h\"\n+#include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n+#include \"networkstyle.h\"\n+\n+#include \"base58.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"sync.h\"\n+#include \"utiltime.h\"\n+#include \"validation.h\"\n+#include \"validationinterface.h\"\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    clientModel(NULL),\n+    logpos(0),\n+    logskip(0),\n+    currentSearch(NULL)\n+{\n+    GetMainSignals().UpdatedBlockTip.connect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.connect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    GetMainSignals().UpdatedBlockTip.disconnect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.disconnect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(CBitcoinAddress(txdest).ToString());\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {\n+        delete currentSearch;\n+    }\n+    currentSearch = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->fCheckAddr || newsearch->fCheckValue) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete currentSearch;\n+    currentSearch = NULL;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!logpos);\n+        log.push_back(le);\n+    }\n+    ++rows_used;\n+    if (rows_used > max_nonweak_txouts) {\n+        LogEntry& old_le = getLogEntryRow(rows_used - max_nonweak_txouts - 1);\n+        if (old_le) {\n+            old_le.makeWeak();\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogAddEntry(const LogEntry& le, size_t vout_count)\n+{\n+    if (vout_count < 1) {\n+        vout_count = 1;\n+    }\n+    const QModelIndex dummy;\n+    LOCK(cs);\n+    size_t rows_to_remove = 0;\n+    if (vout_count >= max_vout_per_tx) {\n+        vout_count = max_vout_per_tx;\n+    }\n+    size_t rows_used = rowCount();\n+    if (rows_used > logsizelimit - vout_count) {\n+        rows_to_remove = (rows_used + vout_count) - logsizelimit;\n+    }\n+    if (rows_to_remove) {\n+        // Don't orphan continuation entries\n+        while (isLogRowContinuation(rows_to_remove)) {\n+            ++rows_to_remove;\n+        }\n+\n+        beginRemoveRows(dummy, 0, rows_to_remove - 1);\n+        logpos = (logpos + rows_to_remove) % log.size();\n+        logskip += rows_to_remove;\n+        endRemoveRows();\n+\n+        rows_used = rowCount();\n+    }\n+\n+    const LogEntry cont_le;\n+    const int first_new_row = rows_used, last_new_row = rows_used + vout_count - 1;\n+    beginInsertRows(dummy, first_new_row, last_new_row);\n+    log_append(le, rows_used);\n+    for (size_t i = 1; i < vout_count; ++i) {\n+        log_append(cont_le, rows_used);\n+    }\n+    endInsertRows();\n+\n+    if (currentSearch) {\n+        QList<int> new_matches;\n+        if (currentSearch->fCheckAddr || currentSearch->fCheckValue) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                if (currentSearch->match(*this, row)) {\n+                    new_matches.append(row);\n+                }\n+            }\n+        } else if (currentSearch->match(*this, first_new_row)) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                new_matches.append(row);\n+            }\n+        }\n+        if (!new_matches.isEmpty()) {\n+            Q_EMIT moreSearchResults(new_matches);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogBlock(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {",
      "path": "src/qt/netwatch.cpp",
      "position": 649,
      "original_position": 619,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "9019229f08a84bcf8623cb457ed8bee36314c6c8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IMO reading each block will cause a massive slow down during IBD / catchup.",
      "created_at": "2017-03-17T15:29:26Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r106676794",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106676794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 649,
      "original_line": 649,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106677143",
      "pull_request_review_id": 27614161,
      "id": 106677143,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjY3NzE0Mw==",
      "diff_hunk": "@@ -0,0 +1,798 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"netwatch.h\"\n+\n+#include \"bitcoinunits.h\"\n+#include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n+#include \"networkstyle.h\"\n+\n+#include \"base58.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"sync.h\"\n+#include \"utiltime.h\"\n+#include \"validation.h\"\n+#include \"validationinterface.h\"\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    clientModel(NULL),\n+    logpos(0),\n+    logskip(0),\n+    currentSearch(NULL)\n+{\n+    GetMainSignals().UpdatedBlockTip.connect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.connect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    GetMainSignals().UpdatedBlockTip.disconnect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.disconnect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(CBitcoinAddress(txdest).ToString());\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {\n+        delete currentSearch;\n+    }\n+    currentSearch = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->fCheckAddr || newsearch->fCheckValue) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete currentSearch;\n+    currentSearch = NULL;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!logpos);\n+        log.push_back(le);\n+    }\n+    ++rows_used;\n+    if (rows_used > max_nonweak_txouts) {\n+        LogEntry& old_le = getLogEntryRow(rows_used - max_nonweak_txouts - 1);\n+        if (old_le) {\n+            old_le.makeWeak();\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogAddEntry(const LogEntry& le, size_t vout_count)\n+{\n+    if (vout_count < 1) {\n+        vout_count = 1;\n+    }\n+    const QModelIndex dummy;\n+    LOCK(cs);\n+    size_t rows_to_remove = 0;\n+    if (vout_count >= max_vout_per_tx) {\n+        vout_count = max_vout_per_tx;\n+    }\n+    size_t rows_used = rowCount();\n+    if (rows_used > logsizelimit - vout_count) {\n+        rows_to_remove = (rows_used + vout_count) - logsizelimit;\n+    }\n+    if (rows_to_remove) {\n+        // Don't orphan continuation entries\n+        while (isLogRowContinuation(rows_to_remove)) {\n+            ++rows_to_remove;\n+        }\n+\n+        beginRemoveRows(dummy, 0, rows_to_remove - 1);\n+        logpos = (logpos + rows_to_remove) % log.size();\n+        logskip += rows_to_remove;\n+        endRemoveRows();\n+\n+        rows_used = rowCount();\n+    }\n+\n+    const LogEntry cont_le;\n+    const int first_new_row = rows_used, last_new_row = rows_used + vout_count - 1;\n+    beginInsertRows(dummy, first_new_row, last_new_row);\n+    log_append(le, rows_used);\n+    for (size_t i = 1; i < vout_count; ++i) {\n+        log_append(cont_le, rows_used);\n+    }\n+    endInsertRows();\n+\n+    if (currentSearch) {\n+        QList<int> new_matches;\n+        if (currentSearch->fCheckAddr || currentSearch->fCheckValue) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                if (currentSearch->match(*this, row)) {\n+                    new_matches.append(row);\n+                }\n+            }\n+        } else if (currentSearch->match(*this, first_new_row)) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                new_matches.append(row);\n+            }\n+        }\n+        if (!new_matches.isEmpty()) {\n+            Q_EMIT moreSearchResults(new_matches);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogBlock(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {\n+        // Indicate error somehow?\n+        return;\n+    }\n+    assert(block.vtx.size());",
      "path": "src/qt/netwatch.cpp",
      "position": 653,
      "original_position": 623,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "9019229f08a84bcf8623cb457ed8bee36314c6c8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What we probably should do is adding each blocks size and vtx.size() to CBlockIndex* (would require to alter the block index, migration, etc. yes).",
      "created_at": "2017-03-17T15:30:54Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r106677143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106677143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 653,
      "original_line": 653,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106759495",
      "pull_request_review_id": 27703245,
      "id": 106759495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjc1OTQ5NQ==",
      "diff_hunk": "@@ -0,0 +1,798 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"netwatch.h\"\n+\n+#include \"bitcoinunits.h\"\n+#include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n+#include \"networkstyle.h\"\n+\n+#include \"base58.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"sync.h\"\n+#include \"utiltime.h\"\n+#include \"validation.h\"\n+#include \"validationinterface.h\"\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    clientModel(NULL),\n+    logpos(0),\n+    logskip(0),\n+    currentSearch(NULL)\n+{\n+    GetMainSignals().UpdatedBlockTip.connect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.connect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    GetMainSignals().UpdatedBlockTip.disconnect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.disconnect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(CBitcoinAddress(txdest).ToString());\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {\n+        delete currentSearch;\n+    }\n+    currentSearch = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->fCheckAddr || newsearch->fCheckValue) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete currentSearch;\n+    currentSearch = NULL;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!logpos);\n+        log.push_back(le);\n+    }\n+    ++rows_used;\n+    if (rows_used > max_nonweak_txouts) {\n+        LogEntry& old_le = getLogEntryRow(rows_used - max_nonweak_txouts - 1);\n+        if (old_le) {\n+            old_le.makeWeak();\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogAddEntry(const LogEntry& le, size_t vout_count)\n+{\n+    if (vout_count < 1) {\n+        vout_count = 1;\n+    }\n+    const QModelIndex dummy;\n+    LOCK(cs);\n+    size_t rows_to_remove = 0;\n+    if (vout_count >= max_vout_per_tx) {\n+        vout_count = max_vout_per_tx;\n+    }\n+    size_t rows_used = rowCount();\n+    if (rows_used > logsizelimit - vout_count) {\n+        rows_to_remove = (rows_used + vout_count) - logsizelimit;\n+    }\n+    if (rows_to_remove) {\n+        // Don't orphan continuation entries\n+        while (isLogRowContinuation(rows_to_remove)) {\n+            ++rows_to_remove;\n+        }\n+\n+        beginRemoveRows(dummy, 0, rows_to_remove - 1);\n+        logpos = (logpos + rows_to_remove) % log.size();\n+        logskip += rows_to_remove;\n+        endRemoveRows();\n+\n+        rows_used = rowCount();\n+    }\n+\n+    const LogEntry cont_le;\n+    const int first_new_row = rows_used, last_new_row = rows_used + vout_count - 1;\n+    beginInsertRows(dummy, first_new_row, last_new_row);\n+    log_append(le, rows_used);\n+    for (size_t i = 1; i < vout_count; ++i) {\n+        log_append(cont_le, rows_used);\n+    }\n+    endInsertRows();\n+\n+    if (currentSearch) {\n+        QList<int> new_matches;\n+        if (currentSearch->fCheckAddr || currentSearch->fCheckValue) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                if (currentSearch->match(*this, row)) {\n+                    new_matches.append(row);\n+                }\n+            }\n+        } else if (currentSearch->match(*this, first_new_row)) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                new_matches.append(row);\n+            }\n+        }\n+        if (!new_matches.isEmpty()) {\n+            Q_EMIT moreSearchResults(new_matches);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogBlock(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {",
      "path": "src/qt/netwatch.cpp",
      "position": 649,
      "original_position": 619,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "9019229f08a84bcf8623cb457ed8bee36314c6c8",
      "in_reply_to_id": 106676794,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The OS should have the data cached already?",
      "created_at": "2017-03-17T22:49:33Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r106759495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106759495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 649,
      "original_line": 649,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106759594",
      "pull_request_review_id": 27703327,
      "id": 106759594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjc1OTU5NA==",
      "diff_hunk": "@@ -0,0 +1,798 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"netwatch.h\"\n+\n+#include \"bitcoinunits.h\"\n+#include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n+#include \"networkstyle.h\"\n+\n+#include \"base58.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"sync.h\"\n+#include \"utiltime.h\"\n+#include \"validation.h\"\n+#include \"validationinterface.h\"\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    clientModel(NULL),\n+    logpos(0),\n+    logskip(0),\n+    currentSearch(NULL)\n+{\n+    GetMainSignals().UpdatedBlockTip.connect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.connect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    GetMainSignals().UpdatedBlockTip.disconnect(boost::bind(&NetWatchLogModel::LogBlock, this, _1));\n+    GetMainSignals().AcceptedTransaction.disconnect(boost::bind(&NetWatchLogModel::LogTransaction, this, _1));\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(CBitcoinAddress(txdest).ToString());\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {\n+        delete currentSearch;\n+    }\n+    currentSearch = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->fCheckAddr || newsearch->fCheckValue) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete currentSearch;\n+    currentSearch = NULL;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!logpos);\n+        log.push_back(le);\n+    }\n+    ++rows_used;\n+    if (rows_used > max_nonweak_txouts) {\n+        LogEntry& old_le = getLogEntryRow(rows_used - max_nonweak_txouts - 1);\n+        if (old_le) {\n+            old_le.makeWeak();\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogAddEntry(const LogEntry& le, size_t vout_count)\n+{\n+    if (vout_count < 1) {\n+        vout_count = 1;\n+    }\n+    const QModelIndex dummy;\n+    LOCK(cs);\n+    size_t rows_to_remove = 0;\n+    if (vout_count >= max_vout_per_tx) {\n+        vout_count = max_vout_per_tx;\n+    }\n+    size_t rows_used = rowCount();\n+    if (rows_used > logsizelimit - vout_count) {\n+        rows_to_remove = (rows_used + vout_count) - logsizelimit;\n+    }\n+    if (rows_to_remove) {\n+        // Don't orphan continuation entries\n+        while (isLogRowContinuation(rows_to_remove)) {\n+            ++rows_to_remove;\n+        }\n+\n+        beginRemoveRows(dummy, 0, rows_to_remove - 1);\n+        logpos = (logpos + rows_to_remove) % log.size();\n+        logskip += rows_to_remove;\n+        endRemoveRows();\n+\n+        rows_used = rowCount();\n+    }\n+\n+    const LogEntry cont_le;\n+    const int first_new_row = rows_used, last_new_row = rows_used + vout_count - 1;\n+    beginInsertRows(dummy, first_new_row, last_new_row);\n+    log_append(le, rows_used);\n+    for (size_t i = 1; i < vout_count; ++i) {\n+        log_append(cont_le, rows_used);\n+    }\n+    endInsertRows();\n+\n+    if (currentSearch) {\n+        QList<int> new_matches;\n+        if (currentSearch->fCheckAddr || currentSearch->fCheckValue) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                if (currentSearch->match(*this, row)) {\n+                    new_matches.append(row);\n+                }\n+            }\n+        } else if (currentSearch->match(*this, first_new_row)) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                new_matches.append(row);\n+            }\n+        }\n+        if (!new_matches.isEmpty()) {\n+            Q_EMIT moreSearchResults(new_matches);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogBlock(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {\n+        // Indicate error somehow?\n+        return;\n+    }\n+    assert(block.vtx.size());",
      "path": "src/qt/netwatch.cpp",
      "position": 653,
      "original_position": 623,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "9019229f08a84bcf8623cb457ed8bee36314c6c8",
      "in_reply_to_id": 106677143,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That wouldn't change anything here...?",
      "created_at": "2017-03-17T22:50:26Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r106759594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106759594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 653,
      "original_line": 653,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229475953",
      "pull_request_review_id": 169987255,
      "id": 229475953,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ3NTk1Mw==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    clientModel(NULL),\n+    validation_interface(new NetWatchValidationInterface(*this)),\n+    logpos(0),\n+    logskip(0),\n+    currentSearch(NULL)\n+{\n+    RegisterValidationInterface(validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (validation_interface) {\n+        UnregisterValidationInterface(validation_interface);\n+        delete validation_interface;\n+        validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete validation_interface;\n+    validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(EncodeDestination(txdest));\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {\n+        delete currentSearch;\n+    }\n+    currentSearch = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->fCheckAddr || newsearch->fCheckValue) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete currentSearch;\n+    currentSearch = NULL;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!logpos);\n+        log.push_back(le);\n+    }\n+    ++rows_used;\n+    if (rows_used > max_nonweak_txouts) {\n+        LogEntry& old_le = getLogEntryRow(rows_used - max_nonweak_txouts - 1);\n+        if (old_le) {\n+            old_le.makeWeak();\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogAddEntry(const LogEntry& le, size_t vout_count)\n+{\n+    if (vout_count < 1) {\n+        vout_count = 1;\n+    }\n+    const QModelIndex dummy;\n+    LOCK(cs);\n+    size_t rows_to_remove = 0;\n+    if (vout_count >= max_vout_per_tx) {\n+        vout_count = max_vout_per_tx;\n+    }\n+    size_t rows_used = rowCount();\n+    if (rows_used > logsizelimit - vout_count) {\n+        rows_to_remove = (rows_used + vout_count) - logsizelimit;\n+    }\n+    if (rows_to_remove) {\n+        // Don't orphan continuation entries\n+        while (isLogRowContinuation(rows_to_remove)) {\n+            ++rows_to_remove;\n+        }\n+\n+        beginRemoveRows(dummy, 0, rows_to_remove - 1);\n+        logpos = (logpos + rows_to_remove) % log.size();\n+        logskip += rows_to_remove;\n+        endRemoveRows();\n+\n+        rows_used = rowCount();\n+    }\n+\n+    const LogEntry cont_le;\n+    const int first_new_row = rows_used, last_new_row = rows_used + vout_count - 1;\n+    beginInsertRows(dummy, first_new_row, last_new_row);\n+    log_append(le, rows_used);\n+    for (size_t i = 1; i < vout_count; ++i) {\n+        log_append(cont_le, rows_used);\n+    }\n+    endInsertRows();\n+\n+    if (currentSearch) {\n+        QList<int> new_matches;\n+        if (currentSearch->fCheckAddr || currentSearch->fCheckValue) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                if (currentSearch->match(*this, row)) {\n+                    new_matches.append(row);\n+                }\n+            }\n+        } else if (currentSearch->match(*this, first_new_row)) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                new_matches.append(row);\n+            }\n+        }\n+        if (!new_matches.isEmpty()) {\n+            Q_EMIT moreSearchResults(new_matches);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogBlock(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {\n+        // Indicate error somehow?\n+        return;\n+    }\n+    assert(block.vtx.size());\n+    const size_t vout_count = CountNonDatacarrierOutputs(block.vtx[0]);\n+    LogAddEntry(LogEntry(GetTime(), *pblockindex), vout_count);\n+}\n+\n+void NetWatchLogModel::LogTransaction(const CTransactionRef& tx)\n+{\n+    const size_t vout_count = CountNonDatacarrierOutputs(tx);\n+    LogAddEntry(LogEntry(GetTime(), tx), vout_count);\n+}\n+\n+void NetWatchLogModel::setClientModel(ClientModel *model)\n+{\n+    if (clientModel) {\n+        disconnect(clientModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+    }\n+    clientModel = model;\n+    if (model) {\n+        connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 681,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "ae96c0d67879d1ede4e44fbacdd787800376fd87",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might want to use the new connect syntax in this file?",
      "created_at": "2018-10-30T20:35:55Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229475953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229475953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 681,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229509157",
      "pull_request_review_id": 170028006,
      "id": 229509157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUwOTE1Nw==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    clientModel(NULL),\n+    validation_interface(new NetWatchValidationInterface(*this)),\n+    logpos(0),\n+    logskip(0),\n+    currentSearch(NULL)\n+{\n+    RegisterValidationInterface(validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (validation_interface) {\n+        UnregisterValidationInterface(validation_interface);\n+        delete validation_interface;\n+        validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete validation_interface;\n+    validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(EncodeDestination(txdest));\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {\n+        delete currentSearch;\n+    }\n+    currentSearch = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->fCheckAddr || newsearch->fCheckValue) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete currentSearch;\n+    currentSearch = NULL;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!logpos);\n+        log.push_back(le);\n+    }\n+    ++rows_used;\n+    if (rows_used > max_nonweak_txouts) {\n+        LogEntry& old_le = getLogEntryRow(rows_used - max_nonweak_txouts - 1);\n+        if (old_le) {\n+            old_le.makeWeak();\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogAddEntry(const LogEntry& le, size_t vout_count)\n+{\n+    if (vout_count < 1) {\n+        vout_count = 1;\n+    }\n+    const QModelIndex dummy;\n+    LOCK(cs);\n+    size_t rows_to_remove = 0;\n+    if (vout_count >= max_vout_per_tx) {\n+        vout_count = max_vout_per_tx;\n+    }\n+    size_t rows_used = rowCount();\n+    if (rows_used > logsizelimit - vout_count) {\n+        rows_to_remove = (rows_used + vout_count) - logsizelimit;\n+    }\n+    if (rows_to_remove) {\n+        // Don't orphan continuation entries\n+        while (isLogRowContinuation(rows_to_remove)) {\n+            ++rows_to_remove;\n+        }\n+\n+        beginRemoveRows(dummy, 0, rows_to_remove - 1);\n+        logpos = (logpos + rows_to_remove) % log.size();\n+        logskip += rows_to_remove;\n+        endRemoveRows();\n+\n+        rows_used = rowCount();\n+    }\n+\n+    const LogEntry cont_le;\n+    const int first_new_row = rows_used, last_new_row = rows_used + vout_count - 1;\n+    beginInsertRows(dummy, first_new_row, last_new_row);\n+    log_append(le, rows_used);\n+    for (size_t i = 1; i < vout_count; ++i) {\n+        log_append(cont_le, rows_used);\n+    }\n+    endInsertRows();\n+\n+    if (currentSearch) {\n+        QList<int> new_matches;\n+        if (currentSearch->fCheckAddr || currentSearch->fCheckValue) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                if (currentSearch->match(*this, row)) {\n+                    new_matches.append(row);\n+                }\n+            }\n+        } else if (currentSearch->match(*this, first_new_row)) {\n+            for (int row = first_new_row; row <= last_new_row; ++row) {\n+                new_matches.append(row);\n+            }\n+        }\n+        if (!new_matches.isEmpty()) {\n+            Q_EMIT moreSearchResults(new_matches);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::LogBlock(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {\n+        // Indicate error somehow?\n+        return;\n+    }\n+    assert(block.vtx.size());\n+    const size_t vout_count = CountNonDatacarrierOutputs(block.vtx[0]);\n+    LogAddEntry(LogEntry(GetTime(), *pblockindex), vout_count);\n+}\n+\n+void NetWatchLogModel::LogTransaction(const CTransactionRef& tx)\n+{\n+    const size_t vout_count = CountNonDatacarrierOutputs(tx);\n+    LogAddEntry(LogEntry(GetTime(), tx), vout_count);\n+}\n+\n+void NetWatchLogModel::setClientModel(ClientModel *model)\n+{\n+    if (clientModel) {\n+        disconnect(clientModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+    }\n+    clientModel = model;\n+    if (model) {\n+        connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 681,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "ae96c0d67879d1ede4e44fbacdd787800376fd87",
      "in_reply_to_id": 229475953,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let me know if I got it right...",
      "created_at": "2018-10-30T22:28:11Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229509157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229509157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 681,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229521971",
      "pull_request_review_id": 170042728,
      "id": 229521971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyMTk3MQ==",
      "diff_hunk": "@@ -661,6 +676,18 @@ void BitcoinGUI::aboutClicked()\n     dlg.exec();\n }\n \n+void BitcoinGUI::showNetWatch()\n+{\n+    if (!NetWatch) {\n+        NetWatch = new GuiNetWatch(platformStyle, netStyle);\n+        NetWatch->setClientModel(clientModel);\n+    }\n+    NetWatch->showNormal();\n+    NetWatch->show();\n+    NetWatch->raise();\n+    NetWatch->activateWindow();",
      "path": "src/qt/bitcoingui.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could rebase with #14123 to replace these calls with `GUIUtil::bringToFront`.",
      "created_at": "2018-10-30T23:27:49Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229521971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229521971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 767,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522523",
      "pull_request_review_id": 170042728,
      "id": 229522523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyMjUyMw==",
      "diff_hunk": "@@ -73,7 +74,8 @@ const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     m_node(node),\n-    platformStyle(_platformStyle)\n+    platformStyle(_platformStyle),\n+    netStyle(networkStyle)",
      "path": "src/qt/bitcoingui.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove.",
      "created_at": "2018-10-30T23:30:50Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229522523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522740",
      "pull_request_review_id": 170042728,
      "id": 229522740,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyMjc0MA==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers",
      "path": "src/qt/netwatch.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit 2018.",
      "created_at": "2018-10-30T23:31:55Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229522740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522794",
      "pull_request_review_id": 170042728,
      "id": 229522794,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyMjc5NA==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Copyright (c) 2011-2013 David Krauss (std::align substitute from c-plus)\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_NETWATCH_H\n+#define BITCOIN_QT_NETWATCH_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <validationinterface.h>\n+\n+#include <QAbstractTableModel>\n+#include <QWidget>\n+\n+QT_BEGIN_NAMESPACE\n+class QLineEdit;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+class CBlock;\n+class CBlockIndex;\n+class ClientModel;\n+class LogEntry;\n+class PlatformStyle;\n+class NetworkStyle;",
      "path": "src/qt/netwatch.h",
      "position": 25,
      "original_position": 26,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, sort.",
      "created_at": "2018-10-30T23:32:18Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229522794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522918",
      "pull_request_review_id": 170042728,
      "id": 229522918,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyMjkxOA==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Copyright (c) 2011-2013 David Krauss (std::align substitute from c-plus)\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_NETWATCH_H\n+#define BITCOIN_QT_NETWATCH_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <validationinterface.h>\n+\n+#include <QAbstractTableModel>\n+#include <QWidget>\n+\n+QT_BEGIN_NAMESPACE\n+class QLineEdit;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+class CBlock;\n+class CBlockIndex;\n+class ClientModel;\n+class LogEntry;\n+class PlatformStyle;\n+class NetworkStyle;\n+\n+static const int nLongestAddress = 35;",
      "path": "src/qt/netwatch.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "move to .cpp? nit, follow code convention.",
      "created_at": "2018-10-30T23:33:01Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229522918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229522918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229523638",
      "pull_request_review_id": 170042728,
      "id": 229523638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyMzYzOA==",
      "diff_hunk": "@@ -397,6 +404,7 @@ void BitcoinGUI::createMenuBar()\n     settings->addAction(optionsAction);\n \n     QMenu *help = appMenuBar->addMenu(tr(\"&Help\"));\n+    help->addAction(NetWatchAction);",
      "path": "src/qt/bitcoingui.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FYI in #14573 I'm proposing a Window menu.",
      "created_at": "2018-10-30T23:37:07Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229523638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229523638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525155",
      "pull_request_review_id": 170042728,
      "id": 229525155,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTE1NQ==",
      "diff_hunk": "@@ -127,6 +128,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* backupWalletAction = nullptr;\n     QAction* changePassphraseAction = nullptr;\n     QAction* aboutQtAction = nullptr;\n+    QAction* NetWatchAction = nullptr;",
      "path": "src/qt/bitcoingui.h",
      "position": null,
      "original_position": 12,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, `m_show_netwatch_action`.",
      "created_at": "2018-10-30T23:45:51Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525358",
      "pull_request_review_id": 170042728,
      "id": 229525358,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTM1OA==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, `} // namespace`",
      "created_at": "2018-10-30T23:46:58Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525551",
      "pull_request_review_id": 170042728,
      "id": 229525551,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTU1MQ==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, s/LET/log_entry_type.",
      "created_at": "2018-10-30T23:48:00Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525623",
      "pull_request_review_id": 170042728,
      "id": 229525623,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTYyMw==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "const?",
      "created_at": "2018-10-30T23:48:25Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525695",
      "pull_request_review_id": 170042728,
      "id": 229525695,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTY5NQ==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, one line `if (...) continue`;",
      "created_at": "2018-10-30T23:48:56Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525695",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525742",
      "pull_request_review_id": 170042728,
      "id": 229525742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTc0Mg==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same as above.",
      "created_at": "2018-10-30T23:49:20Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525862",
      "pull_request_review_id": 170042728,
      "id": 229525862,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTg2Mg==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {",
      "path": "src/qt/netwatch.cpp",
      "position": 64,
      "original_position": 68,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same as above.",
      "created_at": "2018-10-30T23:49:58Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525879",
      "pull_request_review_id": 170042728,
      "id": 229525879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTg3OQ==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`nullptr`.",
      "created_at": "2018-10-30T23:50:05Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525879",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525965",
      "pull_request_review_id": 170042728,
      "id": 229525965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNTk2NQ==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers",
      "path": "src/qt/netwatch.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, 2018",
      "created_at": "2018-10-30T23:50:38Z",
      "updated_at": "2019-02-12T16:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229525965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229525965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229527763",
      "pull_request_review_id": 170049486,
      "id": 229527763,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyNzc2Mw==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return NULL;\n+}\n+\n+}\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType LET)\n+{\n+    switch (LET) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = NULL;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {",
      "path": "src/qt/netwatch.cpp",
      "position": 261,
      "original_position": 265,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should use/extend `interfaces::Node` instead?",
      "created_at": "2018-10-31T00:00:40Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229527763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229527763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229529387",
      "pull_request_review_id": 170051449,
      "id": 229529387,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyOTM4Nw==",
      "diff_hunk": "@@ -73,7 +74,8 @@ const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     m_node(node),\n-    platformStyle(_platformStyle)\n+    platformStyle(_platformStyle),\n+    netStyle(networkStyle)",
      "path": "src/qt/bitcoingui.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": 229522523,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's needed...",
      "created_at": "2018-10-31T00:11:14Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229529387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229529387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229529437",
      "pull_request_review_id": 170051515,
      "id": 229529437,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTUyOTQzNw==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers",
      "path": "src/qt/netwatch.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": 229522740,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2018 is wrong. This code hasn't been substantially changed since 2017.",
      "created_at": "2018-10-31T00:11:31Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229529437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229529437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229555020",
      "pull_request_review_id": 170082703,
      "id": 229555020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTU1NTAyMA==",
      "diff_hunk": "@@ -0,0 +1,838 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) {\n+            continue;\n+        }\n+        if (count == txout_index) {",
      "path": "src/qt/netwatch.cpp",
      "position": 64,
      "original_position": 68,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": 229525862,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IMO this one is clearer split out.",
      "created_at": "2018-10-31T03:38:51Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229555020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229555020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229659095",
      "pull_request_review_id": 170207391,
      "id": 229659095,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTY1OTA5NQ==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Copyright (c) 2011-2013 David Krauss (std::align substitute from c-plus)\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_NETWATCH_H\n+#define BITCOIN_QT_NETWATCH_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <validationinterface.h>\n+\n+#include <QAbstractTableModel>\n+#include <QWidget>\n+\n+QT_BEGIN_NAMESPACE\n+class QLineEdit;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+class CBlock;\n+class CBlockIndex;\n+class ClientModel;\n+class LogEntry;\n+class NetworkStyle;\n+class PlatformStyle;\n+\n+static const int nLongestAddress = 35;\n+\n+class LogEntry {\n+private:\n+    /* data is a uint32_t (meta_t) with the top two bits used for:\n+     *   1: CBlockIndex*\n+     *   2: CTransactionRef\n+     *   3: weak_ptr<const CTransaction>\n+     * The subsequent 30 bits are the timestamp, assumed to be most recent to the current time.\n+     * Following this, and any padding necessary for alignment, the object itself is stored\n+     */\n+    uint8_t *data;\n+\n+    typedef uint32_t meta_t;\n+    typedef std::weak_ptr<const CTransaction> CTransactionWeakref;\n+    static const uint32_t rel_ts_mask = 0x3fffffff;\n+    static const uint64_t rel_ts_mask64 = rel_ts_mask;\n+\n+    template<typename T> static size_t data_sizeof(size_t& offset) {\n+        void *p = (void *)intptr_t(sizeof(meta_t));\n+        size_t dummy_bufsize = sizeof(T) * 2;\n+        p = align(std::alignment_of<T>::value, sizeof(T), p, dummy_bufsize);\n+        assert(p);\n+        offset = size_t(p);\n+        return offset + sizeof(T);\n+    }\n+\n+    // std::align (missing in at least GCC 4.9) substitute from c-plus\n+    static inline void *align( std::size_t alignment, std::size_t size, void *&ptr, std::size_t &space ) {\n+        auto pn = reinterpret_cast<std::uintptr_t>(ptr);\n+        auto aligned = (pn + alignment - 1) & -alignment;\n+        auto new_space = space - (aligned - pn);\n+        if (new_space < size) {\n+            return nullptr;\n+        }\n+        space = new_space;\n+        return ptr = reinterpret_cast<void *>(aligned);\n+    }\n+\n+    void init(const LogEntry&);\n+    void init(int32_t relTimestamp, const CBlockIndex&);\n+    void init(int32_t relTimestamp, const CTransactionWeakref&, bool weak);\n+    void clear();\n+\n+public:\n+    enum LogEntryType {\n+        LET_BLOCK,\n+        LET_TX,\n+    };\n+    static const QString LogEntryTypeAbbreviation(LogEntryType);\n+\n+    LogEntry(const LogEntry&);\n+    LogEntry() : data(NULL) { }",
      "path": "src/qt/netwatch.h",
      "position": null,
      "original_position": 80,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use `nullptr` instead of `NULL`. Applies throughout this PR :-)",
      "created_at": "2018-10-31T11:39:27Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229659095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229659095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229693133",
      "pull_request_review_id": 170251037,
      "id": 229693133,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTY5MzEzMw==",
      "diff_hunk": "@@ -73,7 +74,8 @@ const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     m_node(node),\n-    platformStyle(_platformStyle)\n+    platformStyle(_platformStyle),\n+    netStyle(networkStyle)",
      "path": "src/qt/bitcoingui.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "e8ca94c4dc67529e3bb2666c07ed10347a13ff1f",
      "in_reply_to_id": 229522523,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, forgot to delete this comment while reviewing..",
      "created_at": "2018-10-31T13:32:19Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229693133",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229693133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229707702",
      "pull_request_review_id": 170269519,
      "id": 229707702,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcwNzcwMg==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Sort includes :-)",
      "created_at": "2018-10-31T14:07:34Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229707702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229707702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229708001",
      "pull_request_review_id": 170269875,
      "id": 229708001,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcwODAwMQ==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Copyright (c) 2011-2013 David Krauss (std::align substitute from c-plus)\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_NETWATCH_H\n+#define BITCOIN_QT_NETWATCH_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <validationinterface.h>\n+\n+#include <QAbstractTableModel>\n+#include <QWidget>\n+\n+QT_BEGIN_NAMESPACE\n+class QLineEdit;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+class CBlock;\n+class CBlockIndex;\n+class ClientModel;\n+class LogEntry;\n+class NetworkStyle;\n+class PlatformStyle;\n+\n+static const int nLongestAddress = 35;\n+\n+class LogEntry {\n+private:\n+    /* data is a uint32_t (meta_t) with the top two bits used for:\n+     *   1: CBlockIndex*\n+     *   2: CTransactionRef\n+     *   3: weak_ptr<const CTransaction>\n+     * The subsequent 30 bits are the timestamp, assumed to be most recent to the current time.\n+     * Following this, and any padding necessary for alignment, the object itself is stored\n+     */\n+    uint8_t *data;\n+\n+    typedef uint32_t meta_t;\n+    typedef std::weak_ptr<const CTransaction> CTransactionWeakref;\n+    static const uint32_t rel_ts_mask = 0x3fffffff;\n+    static const uint64_t rel_ts_mask64 = rel_ts_mask;\n+\n+    template<typename T> static size_t data_sizeof(size_t& offset) {\n+        void *p = (void *)intptr_t(sizeof(meta_t));\n+        size_t dummy_bufsize = sizeof(T) * 2;\n+        p = align(std::alignment_of<T>::value, sizeof(T), p, dummy_bufsize);\n+        assert(p);\n+        offset = size_t(p);\n+        return offset + sizeof(T);\n+    }\n+\n+    // std::align (missing in at least GCC 4.9) substitute from c-plus\n+    static inline void *align( std::size_t alignment, std::size_t size, void *&ptr, std::size_t &space ) {\n+        auto pn = reinterpret_cast<std::uintptr_t>(ptr);\n+        auto aligned = (pn + alignment - 1) & -alignment;\n+        auto new_space = space - (aligned - pn);\n+        if (new_space < size) {\n+            return nullptr;\n+        }\n+        space = new_space;\n+        return ptr = reinterpret_cast<void *>(aligned);\n+    }\n+\n+    void init(const LogEntry&);\n+    void init(int32_t relTimestamp, const CBlockIndex&);\n+    void init(int32_t relTimestamp, const CTransactionWeakref&, bool weak);\n+    void clear();\n+\n+public:\n+    enum LogEntryType {\n+        LET_BLOCK,\n+        LET_TX,\n+    };\n+    static const QString LogEntryTypeAbbreviation(LogEntryType);\n+\n+    LogEntry(const LogEntry&);\n+    LogEntry() : data(NULL) { }\n+    explicit LogEntry(int32_t relTimestamp, const CBlockIndex&);\n+    explicit LogEntry(int32_t relTimestamp, const CTransactionWeakref&, bool weak = true);\n+    explicit LogEntry(int32_t relTimestamp, const CTransactionRef&, bool weak = false);\n+    ~LogEntry();\n+\n+    LogEntry& operator=(const LogEntry& other);\n+\n+    explicit operator bool() const;\n+    int32_t getRelTimestamp() const;\n+    uint64_t getTimestamp(uint64_t now) const;\n+    LogEntryType getType() const;\n+\n+    template <typename T> T* get() const {\n+        void *p = data + sizeof(meta_t);\n+        size_t dummy_bufsize = sizeof(T) * 2;\n+        p = align(std::alignment_of<T>::value, sizeof(T), p, dummy_bufsize);\n+        assert(p);\n+        return (T*)p;\n+    }\n+\n+    const CBlockIndex& getBlockIndex() const;\n+    CTransactionRef getTransactionRef() const;\n+    bool isWeak() const;\n+    bool expired() const;\n+    void makeWeak();\n+};\n+\n+class NetWatchLogModel;\n+\n+class NetWatchLogSearch {\n+public:\n+    QString query;\n+\n+    bool fCheckType;\n+    bool fCheckId;\n+    bool fCheckAddr;\n+    bool fCheckValue;\n+\n+    NetWatchLogSearch(const QString& query, int displayunit);",
      "path": "src/qt/netwatch.h",
      "position": null,
      "original_position": 119,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Make parameter names match between declaration and definition.",
      "created_at": "2018-10-31T14:08:17Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229708001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229708001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229709154",
      "pull_request_review_id": 170271290,
      "id": 229709154,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcwOTE1NA==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 266,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be `explicit`? :-)",
      "created_at": "2018-10-31T14:10:53Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229709154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229709154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229710344",
      "pull_request_review_id": 170272787,
      "id": 229710344,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcxMDM0NA==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    validation_interface(new NetWatchValidationInterface(*this))\n+{\n+    RegisterValidationInterface(validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (validation_interface) {\n+        UnregisterValidationInterface(validation_interface);\n+        delete validation_interface;\n+        validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete validation_interface;\n+    validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());",
      "path": "src/qt/netwatch.cpp",
      "position": 343,
      "original_position": 343,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `!block.vtx.empty()` communicates intention more clearly than `block.vtx.size()`?",
      "created_at": "2018-10-31T14:13:36Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229710344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229710344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 343,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229711281",
      "pull_request_review_id": 170274029,
      "id": 229711281,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcxMTI4MQ==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    validation_interface(new NetWatchValidationInterface(*this))\n+{\n+    RegisterValidationInterface(validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (validation_interface) {\n+        UnregisterValidationInterface(validation_interface);\n+        delete validation_interface;\n+        validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete validation_interface;\n+    validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(EncodeDestination(txdest));\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (clientModel) {\n+                return BitcoinUnits::format(clientModel->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (logpos + row) % log.size();\n+    return log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (clientModel) {\n+                return BitcoinUnits::getAmountColumnTitle(clientModel->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& _query, int displayunit) :\n+    query(_query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    fCheckType = query.length() < 4 && reType.exactMatch(query);\n+    fCheckId = query.length() <= 64 && reHex.exactMatch(query);\n+    fCheckAddr = query.length() <= nLongestAddress;\n+    CAmount val;\n+    fCheckValue = BitcoinUnits::parse(displayunit, query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(query)) {\n+        return true;\n+    } else if (fCheckType && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckId && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckAddr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (fCheckValue && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = clientModel->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    if (currentSearch) {",
      "path": "src/qt/netwatch.cpp",
      "position": null,
      "original_position": 546,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This `if` statement is unnecessary. Deleting a null pointer is a noop.",
      "created_at": "2018-10-31T14:16:00Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229711281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229711281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229712203",
      "pull_request_review_id": 170275230,
      "id": 229712203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcxMjIwMw==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Copyright (c) 2011-2013 David Krauss (std::align substitute from c-plus)\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_NETWATCH_H\n+#define BITCOIN_QT_NETWATCH_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <validationinterface.h>\n+\n+#include <QAbstractTableModel>\n+#include <QWidget>\n+\n+QT_BEGIN_NAMESPACE\n+class QLineEdit;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+class CBlock;\n+class CBlockIndex;\n+class ClientModel;\n+class LogEntry;\n+class NetworkStyle;\n+class PlatformStyle;\n+\n+static const int nLongestAddress = 35;\n+\n+class LogEntry {\n+private:\n+    /* data is a uint32_t (meta_t) with the top two bits used for:\n+     *   1: CBlockIndex*\n+     *   2: CTransactionRef\n+     *   3: weak_ptr<const CTransaction>\n+     * The subsequent 30 bits are the timestamp, assumed to be most recent to the current time.\n+     * Following this, and any padding necessary for alignment, the object itself is stored\n+     */\n+    uint8_t *data;\n+\n+    typedef uint32_t meta_t;\n+    typedef std::weak_ptr<const CTransaction> CTransactionWeakref;\n+    static const uint32_t rel_ts_mask = 0x3fffffff;\n+    static const uint64_t rel_ts_mask64 = rel_ts_mask;\n+\n+    template<typename T> static size_t data_sizeof(size_t& offset) {\n+        void *p = (void *)intptr_t(sizeof(meta_t));\n+        size_t dummy_bufsize = sizeof(T) * 2;\n+        p = align(std::alignment_of<T>::value, sizeof(T), p, dummy_bufsize);\n+        assert(p);\n+        offset = size_t(p);\n+        return offset + sizeof(T);\n+    }\n+\n+    // std::align (missing in at least GCC 4.9) substitute from c-plus\n+    static inline void *align( std::size_t alignment, std::size_t size, void *&ptr, std::size_t &space ) {\n+        auto pn = reinterpret_cast<std::uintptr_t>(ptr);\n+        auto aligned = (pn + alignment - 1) & -alignment;\n+        auto new_space = space - (aligned - pn);\n+        if (new_space < size) {\n+            return nullptr;\n+        }\n+        space = new_space;\n+        return ptr = reinterpret_cast<void *>(aligned);\n+    }\n+\n+    void init(const LogEntry&);\n+    void init(int32_t relTimestamp, const CBlockIndex&);\n+    void init(int32_t relTimestamp, const CTransactionWeakref&, bool weak);\n+    void clear();\n+\n+public:\n+    enum LogEntryType {\n+        LET_BLOCK,\n+        LET_TX,\n+    };\n+    static const QString LogEntryTypeAbbreviation(LogEntryType);\n+\n+    LogEntry(const LogEntry&);\n+    LogEntry() : data(NULL) { }\n+    explicit LogEntry(int32_t relTimestamp, const CBlockIndex&);\n+    explicit LogEntry(int32_t relTimestamp, const CTransactionWeakref&, bool weak = true);\n+    explicit LogEntry(int32_t relTimestamp, const CTransactionRef&, bool weak = false);\n+    ~LogEntry();\n+\n+    LogEntry& operator=(const LogEntry& other);\n+\n+    explicit operator bool() const;\n+    int32_t getRelTimestamp() const;\n+    uint64_t getTimestamp(uint64_t now) const;\n+    LogEntryType getType() const;\n+\n+    template <typename T> T* get() const {\n+        void *p = data + sizeof(meta_t);\n+        size_t dummy_bufsize = sizeof(T) * 2;\n+        p = align(std::alignment_of<T>::value, sizeof(T), p, dummy_bufsize);\n+        assert(p);\n+        return (T*)p;\n+    }\n+\n+    const CBlockIndex& getBlockIndex() const;\n+    CTransactionRef getTransactionRef() const;\n+    bool isWeak() const;\n+    bool expired() const;\n+    void makeWeak();\n+};\n+\n+class NetWatchLogModel;\n+\n+class NetWatchLogSearch {\n+public:\n+    QString query;\n+\n+    bool fCheckType;\n+    bool fCheckId;\n+    bool fCheckAddr;\n+    bool fCheckValue;\n+\n+    NetWatchLogSearch(const QString& query, int displayunit);\n+    bool match(const NetWatchLogModel& model, int row) const;\n+};\n+\n+class NetWatchValidationInterface;\n+\n+class NetWatchLogModel : public QAbstractTableModel\n+{\n+    Q_OBJECT\n+\n+private:\n+    QWidget * const widget;\n+    ClientModel *clientModel = nullptr;\n+\n+    NetWatchValidationInterface *validation_interface;\n+\n+    mutable CCriticalSection cs;\n+    std::vector<LogEntry> log;\n+    static const size_t logsizelimit = 0x400;\n+    size_t logpos = 0;\n+    size_t logskip = 0;\n+\n+    static const size_t max_nonweak_txouts = 0x200;\n+    static const size_t max_vout_per_tx = 0x100;\n+\n+    NetWatchLogSearch *currentSearch = nullptr;\n+\n+    const LogEntry& getLogEntryRow(int row) const;\n+    LogEntry& getLogEntryRow(int row);\n+    void log_append(const LogEntry&, size_t& rows_used);\n+\n+public:\n+    static const int NWLMHeaderCount = 5;\n+    enum Header {\n+        NWLMH_TIME,\n+        NWLMH_TYPE,\n+        NWLMH_ID,\n+        NWLMH_ADDR,\n+        NWLMH_VALUE,\n+    };\n+\n+    NetWatchLogModel(QWidget *parent);",
      "path": "src/qt/netwatch.h",
      "position": null,
      "original_position": 160,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be made `explicit`?",
      "created_at": "2018-10-31T14:18:09Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229712203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229712203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229712853",
      "pull_request_review_id": 170276064,
      "id": 229712853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcxMjg1Mw==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)",
      "path": "src/qt/netwatch.cpp",
      "position": 278,
      "original_position": 278,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be marked `override`?",
      "created_at": "2018-10-31T14:19:39Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229712853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229712853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 278,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229713713",
      "pull_request_review_id": 170277164,
      "id": 229713713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTcxMzcxMw==",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Copyright (c) 2011-2013 David Krauss (std::align substitute from c-plus)\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_NETWATCH_H\n+#define BITCOIN_QT_NETWATCH_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <validationinterface.h>\n+\n+#include <QAbstractTableModel>\n+#include <QWidget>\n+\n+QT_BEGIN_NAMESPACE\n+class QLineEdit;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+class CBlock;\n+class CBlockIndex;\n+class ClientModel;\n+class LogEntry;\n+class NetworkStyle;\n+class PlatformStyle;\n+\n+static const int nLongestAddress = 35;\n+\n+class LogEntry {\n+private:\n+    /* data is a uint32_t (meta_t) with the top two bits used for:\n+     *   1: CBlockIndex*\n+     *   2: CTransactionRef\n+     *   3: weak_ptr<const CTransaction>\n+     * The subsequent 30 bits are the timestamp, assumed to be most recent to the current time.\n+     * Following this, and any padding necessary for alignment, the object itself is stored\n+     */\n+    uint8_t *data;\n+\n+    typedef uint32_t meta_t;\n+    typedef std::weak_ptr<const CTransaction> CTransactionWeakref;\n+    static const uint32_t rel_ts_mask = 0x3fffffff;\n+    static const uint64_t rel_ts_mask64 = rel_ts_mask;\n+\n+    template<typename T> static size_t data_sizeof(size_t& offset) {\n+        void *p = (void *)intptr_t(sizeof(meta_t));\n+        size_t dummy_bufsize = sizeof(T) * 2;\n+        p = align(std::alignment_of<T>::value, sizeof(T), p, dummy_bufsize);\n+        assert(p);\n+        offset = size_t(p);\n+        return offset + sizeof(T);\n+    }\n+\n+    // std::align (missing in at least GCC 4.9) substitute from c-plus\n+    static inline void *align( std::size_t alignment, std::size_t size, void *&ptr, std::size_t &space ) {",
      "path": "src/qt/netwatch.h",
      "position": null,
      "original_position": 56,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove extra spaces after `(` and before `)` :-)",
      "created_at": "2018-10-31T14:21:39Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229713713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229713713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229830322",
      "pull_request_review_id": 170424601,
      "id": 229830322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTgzMDMyMg==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    validation_interface(new NetWatchValidationInterface(*this))\n+{\n+    RegisterValidationInterface(validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (validation_interface) {\n+        UnregisterValidationInterface(validation_interface);\n+        delete validation_interface;\n+        validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete validation_interface;\n+    validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());",
      "path": "src/qt/netwatch.cpp",
      "position": 343,
      "original_position": 343,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": 229710344,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure. The intent is only to make sure `vtx[0]` below is an acceptable dereference.\r\n\r\nThe actual check for block data is above, with `if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA))`",
      "created_at": "2018-10-31T19:08:05Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229830322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229830322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 343,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229836085",
      "pull_request_review_id": 170432166,
      "id": 229836085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTgzNjA4NQ==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)",
      "path": "src/qt/netwatch.cpp",
      "position": 278,
      "original_position": 278,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": 229712853,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nqt/netwatch.cpp:273:70: error: virt-specifiers in ‘ValidationInterfaceUnregistering’ not allowed outside a class definition\r\n```\r\n\r\nAdding it to only the class def instead...",
      "created_at": "2018-10-31T19:26:52Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229836085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229836085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 278,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229837477",
      "pull_request_review_id": 170434054,
      "id": 229837477,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTgzNzQ3Nw==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    widget(parent),\n+    validation_interface(new NetWatchValidationInterface(*this))\n+{\n+    RegisterValidationInterface(validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (validation_interface) {\n+        UnregisterValidationInterface(validation_interface);\n+        delete validation_interface;\n+        validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete validation_interface;\n+    validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return log.size() - logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());",
      "path": "src/qt/netwatch.cpp",
      "position": 343,
      "original_position": 343,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": 229710344,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see -- makes sense :-)",
      "created_at": "2018-10-31T19:31:40Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229837477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229837477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 343,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229837851",
      "pull_request_review_id": 170434583,
      "id": 229837851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTgzNzg1MQ==",
      "diff_hunk": "@@ -0,0 +1,829 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/networkstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QWidget>\n+#include <QVBoxLayout>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.data) {\n+        data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(data + alignment_weak, tx);\n+        new (data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering();\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)",
      "path": "src/qt/netwatch.cpp",
      "position": 278,
      "original_position": 278,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "56bd9fdfc05a64037f027161727402354ba4abdb",
      "in_reply_to_id": 229712853,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good. I commented on the wrong line :-)",
      "created_at": "2018-10-31T19:33:11Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r229837851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229837851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 278,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230554831",
      "pull_request_review_id": 171327281,
      "id": 230554831,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDU1NDgzMQ==",
      "diff_hunk": "@@ -0,0 +1,827 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/networkstyle.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QVBoxLayout>\n+#include <QWidget>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.m_data) {\n+        m_data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.m_data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    m_data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)m_data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&m_data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    m_data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(m_data + alignment_weak, tx);\n+        new (m_data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (m_data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)m_data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!m_data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)m_data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete m_data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return m_data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)m_data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    explicit NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering() override;\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    void TransactionAddedToMempool(const CTransactionRef &) override;\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    m_widget(parent),\n+    m_validation_interface(new NetWatchValidationInterface(*this))\n+{\n+    RegisterValidationInterface(m_validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (m_validation_interface) {\n+        UnregisterValidationInterface(m_validation_interface);\n+        delete m_validation_interface;\n+        m_validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete m_validation_interface;\n+    m_validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return m_log.size() - m_logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(EncodeDestination(txdest));\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (m_client_model) {\n+                return BitcoinUnits::format(m_client_model->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (m_logpos + row) % m_log.size();\n+    return m_log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (m_logpos + row) % m_log.size();\n+    return m_log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return m_widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return m_widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = m_widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (m_client_model) {\n+                return BitcoinUnits::getAmountColumnTitle(m_client_model->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& query, int display_unit) :\n+    m_query(query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    m_check_type = m_query.length() < 4 && reType.exactMatch(m_query);\n+    m_check_id = m_query.length() <= 64 && reHex.exactMatch(m_query);\n+    m_check_addr = m_query.length() <= nLongestAddress;\n+    CAmount val;\n+    m_check_value = BitcoinUnits::parse(display_unit, m_query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(m_query)) {\n+        return true;\n+    } else if (m_check_type && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(m_query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (m_check_id && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(m_query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (m_check_addr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(m_query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (m_check_value && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(m_query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = m_client_model->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    delete m_current_search;\n+    m_current_search = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->m_check_addr || newsearch->m_check_value) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete m_current_search;\n+    m_current_search = nullptr;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (m_logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --m_logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!m_logpos);",
      "path": "src/qt/netwatch.cpp",
      "position": 577,
      "original_position": 577,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "654f66d9e0f7a31e3c9b9ac6af30da5f5bdb4fb1",
      "in_reply_to_id": null,
      "user": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see this assertion on Windows in testing, haven't take a look at the code.\r\n\r\n![image](https://user-images.githubusercontent.com/11154118/47952673-edfe4380-dfad-11e8-8e40-a667be01659c.png)\r\n",
      "created_at": "2018-11-03T13:17:38Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r230554831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230554831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 577,
      "original_line": 577,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238032221",
      "pull_request_review_id": 180487486,
      "id": 238032221,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAzMjIyMQ==",
      "diff_hunk": "@@ -397,6 +404,7 @@ void BitcoinGUI::createMenuBar()\n     settings->addAction(optionsAction);\n \n     QMenu *help = appMenuBar->addMenu(tr(\"&Help\"));\n+    help->addAction(m_show_netwatch_action);",
      "path": "src/qt/bitcoingui.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "654f66d9e0f7a31e3c9b9ac6af30da5f5bdb4fb1",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could go to window menu, which is added in #14573.",
      "created_at": "2018-11-30T23:23:51Z",
      "updated_at": "2019-02-12T16:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r238032221",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238032221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256072587",
      "pull_request_review_id": 202815929,
      "id": 256072587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjA3MjU4Nw==",
      "diff_hunk": "@@ -0,0 +1,827 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/networkstyle.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QVBoxLayout>\n+#include <QWidget>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.m_data) {\n+        m_data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.m_data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    m_data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)m_data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&m_data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    m_data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(m_data + alignment_weak, tx);\n+        new (m_data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (m_data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)m_data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!m_data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)m_data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete m_data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return m_data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)m_data) |= (3 << 30);\n+}\n+\n+class NetWatchValidationInterface final : public CValidationInterface {\n+private:\n+    NetWatchLogModel& model;\n+\n+public:\n+    explicit NetWatchValidationInterface(NetWatchLogModel& model_in) : model(model_in) {}\n+    void ValidationInterfaceUnregistering() override;\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    void TransactionAddedToMempool(const CTransactionRef &) override;\n+};\n+\n+void NetWatchValidationInterface::ValidationInterfaceUnregistering()\n+{\n+    model.OrphanedValidationInterface();\n+}\n+\n+void NetWatchValidationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+{\n+    if (pindexNew != pindexFork) {\n+        model.LogBlock(pindexNew);\n+    }\n+}\n+\n+void NetWatchValidationInterface::TransactionAddedToMempool(const CTransactionRef &ptx)\n+{\n+    model.LogTransaction(ptx);\n+}\n+\n+NetWatchLogModel::NetWatchLogModel(QWidget *parent) :\n+    QAbstractTableModel(parent),\n+    m_widget(parent),\n+    m_validation_interface(new NetWatchValidationInterface(*this))\n+{\n+    RegisterValidationInterface(m_validation_interface);\n+}\n+\n+NetWatchLogModel::~NetWatchLogModel()\n+{\n+    LOCK(cs);\n+    if (m_validation_interface) {\n+        UnregisterValidationInterface(m_validation_interface);\n+        delete m_validation_interface;\n+        m_validation_interface = nullptr;\n+    }\n+}\n+\n+void NetWatchLogModel::OrphanedValidationInterface()\n+{\n+    LOCK(cs);\n+    delete m_validation_interface;\n+    m_validation_interface = nullptr;\n+}\n+\n+int NetWatchLogModel::rowCount(const QModelIndex& parent) const\n+{\n+    LOCK(cs);\n+    return m_log.size() - m_logskip;\n+}\n+\n+int NetWatchLogModel::columnCount(const QModelIndex& parent) const\n+{\n+    return NWLMHeaderCount;\n+}\n+\n+QVariant NetWatchLogModel::data(const CBlockIndex& blockindex, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_BLOCK);\n+        case NWLMH_ID:\n+            return QString::fromStdString(blockindex.GetBlockHash().GetHex());\n+        case NWLMH_ADDR:\n+        case NWLMH_VALUE: {\n+            if (blockindex.nTx == 0 || !(blockindex.nStatus & BLOCK_HAVE_DATA)) {\n+                return QVariant();\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, &blockindex, Params().GetConsensus())) {\n+                // Indicate error somehow?\n+                return QVariant();\n+            }\n+            assert(block.vtx.size());\n+            return data(block.vtx[0], txout_index, header);\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+QVariant NetWatchLogModel::data(const CTransactionRef& tx, int txout_index, const Header header) const\n+{\n+    switch (header) {\n+        case NWLMH_TYPE:\n+            return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+        case NWLMH_ID:\n+            return QString::fromStdString(tx->GetHash().GetHex());\n+        case NWLMH_ADDR: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                // Only datacarriers\n+                ptxout = &tx->vout[0];\n+            }\n+            CTxDestination txdest;\n+            if (ptxout->scriptPubKey[0] == OP_RETURN && ptxout->nValue > 0) {\n+                return tr(\"(Burn)\", \"Tx Watch: Provably burned value in transaction\");\n+            } else if (!ExtractDestination(ptxout->scriptPubKey, txdest)) {\n+                return tr(\"(Unknown)\", \"Tx Watch: Unknown transaction output type\");\n+            }\n+            return QString::fromStdString(EncodeDestination(txdest));\n+        }\n+        case NWLMH_VALUE: {\n+            const CTxOut *ptxout = GetNonDatacarrierOutput(tx, txout_index);\n+            if (!ptxout) {\n+                ptxout = &tx->vout[0];\n+            }\n+            if (m_client_model) {\n+                return BitcoinUnits::format(m_client_model->getOptionsModel()->getDisplayUnit(), ptxout->nValue);\n+            } else {\n+                return qlonglong(ptxout->nValue);\n+            }\n+        }\n+        case NWLMH_TIME: ;  // Not valid here\n+    }\n+    return QVariant();\n+}\n+\n+const LogEntry& NetWatchLogModel::getLogEntryRow(int row) const\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (m_logpos + row) % m_log.size();\n+    return m_log[pos];\n+}\n+\n+LogEntry& NetWatchLogModel::getLogEntryRow(int row)\n+{\n+    AssertLockHeld(cs);\n+    size_t pos = (m_logpos + row) % m_log.size();\n+    return m_log[pos];\n+}\n+\n+bool NetWatchLogModel::isLogRowContinuation(int row) const\n+{\n+    AssertLockHeld(cs);\n+    return !getLogEntryRow(row);\n+}\n+\n+const LogEntry& NetWatchLogModel::findLogEntry(int row, int& out_entry_row) const\n+{\n+    AssertLockHeld(cs);\n+    out_entry_row = 0;\n+    while (row && isLogRowContinuation(row)) {\n+        --row;\n+        ++out_entry_row;\n+    }\n+    return getLogEntryRow(row);\n+}\n+\n+QVariant NetWatchLogModel::data(const QModelIndex& index, int role) const\n+{\n+    const Header header = Header(index.column());\n+    switch (role) {\n+        case Qt::DisplayRole:\n+            break;\n+        case Qt::BackgroundRole: {\n+            if (!data(index, Qt::DisplayRole).isValid()) {\n+                return m_widget->palette().brush(QPalette::WindowText);\n+            }\n+            LogEntry::LogEntryType type;\n+            {\n+                int entry_row;\n+                LOCK(cs);\n+                const LogEntry& le = findLogEntry(index.row(), entry_row);\n+                type = le.getType();\n+            }\n+            if (type == LogEntry::LET_BLOCK) {\n+                return m_widget->palette().brush(QPalette::AlternateBase);\n+            }\n+            return QVariant();\n+        }\n+        case Qt::ForegroundRole: {\n+            if (index.column() < 3) {\n+                bool iscont;\n+                {\n+                    LOCK(cs);\n+                    iscont = isLogRowContinuation(index.row());\n+                }\n+                if (iscont) {\n+                    QBrush brush = m_widget->palette().brush(QPalette::WindowText);\n+                    QColor color = brush.color();\n+                    color.setAlpha(color.alpha() / 2);\n+                    brush.setColor(color);\n+                    return brush;\n+                }\n+            }\n+            return QVariant();\n+        }\n+        case Qt::TextAlignmentRole:\n+            if (header == NWLMH_VALUE) {\n+                return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n+            }\n+            return QVariant();\n+        case Qt::FontRole:\n+            if (header == NWLMH_ID) {\n+                return GUIUtil::fixedPitchFont();\n+            }\n+            return QVariant();\n+        default:\n+            return QVariant();\n+    }\n+    int entry_row;\n+    LOCK(cs);\n+    const LogEntry& le = findLogEntry(index.row(), entry_row);\n+    if (header == NWLMH_TIME) {\n+        return GUIUtil::dateTimeStr(le.getTimestamp(GetTime()));\n+    }\n+    const LogEntry::LogEntryType type = le.getType();\n+    if (type == LogEntry::LET_BLOCK) {\n+        return data(le.getBlockIndex(), entry_row, header);\n+    }\n+    if (header == NWLMH_TYPE) {\n+        return LogEntry::LogEntryTypeAbbreviation(LogEntry::LET_TX);\n+    }\n+\n+    if (le.expired()) {\n+        return QVariant();\n+    }\n+    return data(le.getTransactionRef(), entry_row, header);\n+}\n+\n+QVariant NetWatchLogModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if (orientation != Qt::Horizontal || role != Qt::DisplayRole) {\n+        return QVariant();\n+    }\n+    switch (section) {\n+        case NWLMH_TIME:  return tr(\"Time\"   , \"NetWatch: Time header\");\n+        case NWLMH_TYPE:  return tr(\"Type\"   , \"NetWatch: Type header\");\n+        case NWLMH_ID:    return tr(\"Id\"     , \"NetWatch: Block hash / Txid header\");\n+        case NWLMH_ADDR:  return tr(\"Address\", \"NetWatch: Address header\");\n+        case NWLMH_VALUE:\n+            if (m_client_model) {\n+                return BitcoinUnits::getAmountColumnTitle(m_client_model->getOptionsModel()->getDisplayUnit());\n+            } else {\n+                // Used only for sizing of the column\n+                return BitcoinUnits::getAmountColumnTitle(BitcoinUnits::mBTC);\n+            }\n+    }\n+    return QVariant();\n+}\n+\n+NetWatchLogSearch::NetWatchLogSearch(const QString& query, int display_unit) :\n+    m_query(query)\n+{\n+    const QRegExp reHex(\"^[\\\\da-f]+$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+    const QRegExp reType(\"^(T(xn?)?|B(lk?)?)$\", Qt::CaseInsensitive, QRegExp::RegExp2);\n+\n+    m_check_type = m_query.length() < 4 && reType.exactMatch(m_query);\n+    m_check_id = m_query.length() <= 64 && reHex.exactMatch(m_query);\n+    m_check_addr = m_query.length() <= nLongestAddress;\n+    CAmount val;\n+    m_check_value = BitcoinUnits::parse(display_unit, m_query, &val) && val >= 0 && val <= BitcoinUnits::maxMoney();\n+}\n+\n+bool NetWatchLogSearch::match(const NetWatchLogModel& model, int row) const\n+{\n+    if (model.data(model.index(row, NetWatchLogModel::NWLMH_TIME)).toString().contains(m_query)) {\n+        return true;\n+    } else if (m_check_type && model.data(model.index(row, NetWatchLogModel::NWLMH_TYPE)).toString().contains(m_query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (m_check_id && model.data(model.index(row, NetWatchLogModel::NWLMH_ID)).toString().contains(m_query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (m_check_addr && model.data(model.index(row, NetWatchLogModel::NWLMH_ADDR)).toString().contains(m_query, Qt::CaseInsensitive)) {\n+        return true;\n+    } else if (m_check_value && model.data(model.index(row, NetWatchLogModel::NWLMH_VALUE)).toString().contains(m_query)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void NetWatchLogModel::searchRows(const QString& query, QList<int>& results)\n+{\n+    const auto currentUnit = m_client_model->getOptionsModel()->getDisplayUnit();\n+    NetWatchLogSearch *newsearch = new NetWatchLogSearch(query, currentUnit);\n+    LOCK(cs);\n+    delete m_current_search;\n+    m_current_search = newsearch;\n+\n+    bool fAdding = false;\n+    const size_t rows_used = rowCount();\n+    for (size_t row = 0; row < rows_used; ++row) {\n+        if (isLogRowContinuation(row) || newsearch->m_check_addr || newsearch->m_check_value) {\n+            // Check for a match\n+            fAdding = newsearch->match(*this, row);\n+        }\n+        if (fAdding) {\n+            results.append(row);\n+        }\n+    }\n+}\n+\n+void NetWatchLogModel::searchDisable() {\n+    LOCK(cs);\n+    delete m_current_search;\n+    m_current_search = nullptr;\n+}\n+\n+void NetWatchLogModel::log_append(const LogEntry& le, size_t& rows_used)\n+{\n+    AssertLockHeld(cs);\n+    if (m_logskip) {\n+        // Replace a deleted row\n+        getLogEntryRow(rows_used) = le;\n+        --m_logskip;\n+    } else {\n+        // Haven't filled up yet, so just push_back\n+        assert(!m_logpos);",
      "path": "src/qt/netwatch.cpp",
      "position": 577,
      "original_position": 577,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "654f66d9e0f7a31e3c9b9ac6af30da5f5bdb4fb1",
      "in_reply_to_id": 230554831,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any idea how?>",
      "created_at": "2019-02-12T17:51:52Z",
      "updated_at": "2019-02-12T17:51:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r256072587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256072587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 577,
      "original_line": 577,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256345224",
      "pull_request_review_id": 203146959,
      "id": 256345224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjM0NTIyNA==",
      "diff_hunk": "@@ -0,0 +1,827 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/netwatch.h>\n+\n+#include <qt/bitcoinunits.h>\n+#include <qt/clientmodel.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <qt/networkstyle.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <memory>\n+#include <type_traits>\n+\n+#include <QAbstractTableModel>\n+#include <QHBoxLayout>\n+#include <QLineEdit>\n+#include <QPushButton>\n+#include <QScrollBar>\n+#include <QVBoxLayout>\n+#include <QWidget>\n+\n+namespace {\n+\n+bool IsDatacarrier(const CTxOut& txout)\n+{\n+    return (txout.scriptPubKey[0] == OP_RETURN && txout.nValue == 0);\n+}\n+\n+size_t CountNonDatacarrierOutputs(const CTransactionRef& tx)\n+{\n+    size_t count = 0;\n+    for (const auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        ++count;\n+    }\n+    return count;\n+}\n+\n+const CTxOut* GetNonDatacarrierOutput(const CTransactionRef& tx, const size_t txout_index)\n+{\n+    size_t count = 0;\n+    for (auto& txout : tx->vout) {\n+        if (IsDatacarrier(txout)) continue;\n+        if (count == txout_index) {\n+            return &txout;\n+        }\n+        ++count;\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+const QString LogEntry::LogEntryTypeAbbreviation(const LogEntryType log_entry_type)\n+{\n+    switch (log_entry_type) {\n+        case LET_BLOCK: return QObject::tr(\"Blk\", \"Tx Watch: Block type abbreviation\");\n+        case LET_TX:    return QObject::tr(\"Txn\", \"Tx Watch: Transaction type abbreviation\");\n+    }\n+    return QString();\n+}\n+\n+void LogEntry::init(const LogEntry& other)\n+{\n+    if (!other.m_data) {\n+        m_data = nullptr;\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)other.m_data;\n+    const int32_t relTimestamp = n & rel_ts_mask;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            init(relTimestamp, other.getBlockIndex());\n+            break;\n+        case 2:  // CTransactionRef\n+        {\n+            CTransactionWeakref ptx(*other.get<CTransactionRef>());\n+            init(relTimestamp, ptx, false);\n+            break;\n+        }\n+        case 3:  // CTransactionWeakref\n+            init(relTimestamp, *other.get<CTransactionWeakref>(), true);\n+            break;\n+    }\n+}\n+\n+LogEntry::LogEntry(const LogEntry& other)\n+{\n+    init(other);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    relTimestamp &= rel_ts_mask;\n+    size_t alignment;\n+    const size_t sz = data_sizeof<CBlockIndex*>(alignment);\n+    m_data = (uint8_t*)::operator new(sz);\n+    *((meta_t*)m_data) = relTimestamp | (1 << 30);\n+    *((const CBlockIndex**)&m_data[alignment]) = &blockindex;\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CBlockIndex& blockindex)\n+{\n+    init(relTimestamp, blockindex);\n+}\n+\n+void LogEntry::init(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    relTimestamp &= rel_ts_mask;\n+\n+    // Allocate enough space for either, so we can convert between them\n+    size_t alignment_shared, alignment_weak;\n+    const size_t sz = std::max(data_sizeof<CTransactionRef>(alignment_shared), data_sizeof<CTransactionWeakref>(alignment_weak));\n+    m_data = (uint8_t*)::operator new(sz);\n+\n+    uint32_t type;\n+    if (weak) {\n+        //std::allocator<std::weak_ptr<CTransaction>>::construct(m_data + alignment_weak, tx);\n+        new (m_data + alignment_weak) CTransactionWeakref(tx);\n+        type = 3;\n+    } else {\n+        new (m_data + alignment_shared) CTransactionRef(tx.lock());\n+        type = 2;\n+    }\n+    *((meta_t*)m_data) = relTimestamp | (type << 30);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionWeakref& tx, bool weak)\n+{\n+    init(relTimestamp, tx, weak);\n+}\n+\n+LogEntry::LogEntry(int32_t relTimestamp, const CTransactionRef& tx, bool weak)\n+{\n+    CTransactionWeakref ptx(tx);\n+    init(relTimestamp, ptx, weak);\n+}\n+\n+void LogEntry::clear()\n+{\n+    if (!m_data) {\n+        return;\n+    }\n+    const meta_t n = *(meta_t*)m_data;\n+    switch (n >> 30) {\n+        case 1:  // CBlockIndex*\n+            break;\n+        case 2:  // CTransactionRef\n+            get<CTransactionRef>()->~CTransactionRef();\n+            break;\n+        case 3:  // CTransactionWeakref\n+            get<CTransactionWeakref>()->~CTransactionWeakref();\n+            break;\n+    }\n+    delete m_data;\n+}\n+\n+LogEntry::~LogEntry()\n+{\n+    clear();\n+}\n+\n+LogEntry& LogEntry::operator=(const LogEntry& other)\n+{\n+    if (this != &other) {\n+        clear();\n+        init(other);\n+    }\n+    return *this;\n+}\n+\n+LogEntry::operator bool() const\n+{\n+    return m_data;\n+}\n+\n+int32_t LogEntry::getRelTimestamp() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return n & rel_ts_mask;\n+}\n+\n+uint64_t LogEntry::getTimestamp(uint64_t now) const\n+{\n+    uint64_t ts = (now & ~rel_ts_mask64) | getRelTimestamp();\n+    if (ts > now) {\n+        ts -= (rel_ts_mask64 + 1);\n+    }\n+    return ts;\n+}\n+\n+LogEntry::LogEntryType LogEntry::getType() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return (n >> 31) ? LET_TX : LET_BLOCK;\n+}\n+\n+const CBlockIndex& LogEntry::getBlockIndex() const\n+{\n+    return **(get<const CBlockIndex*>());\n+}\n+\n+CTransactionRef LogEntry::getTransactionRef() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    if ((n >> 30) & 1) {\n+        return get<CTransactionWeakref>()->lock();\n+    } else {\n+        return *get<CTransactionRef>();\n+    }\n+}\n+\n+bool LogEntry::isWeak() const\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    return ((n >> 30) == 3);\n+}\n+\n+bool LogEntry::expired() const\n+{\n+    if (isWeak()) {\n+        return get<CTransactionWeakref>()->expired();\n+    }\n+    return false;\n+}\n+\n+void LogEntry::makeWeak()\n+{\n+    const meta_t n = *(meta_t*)m_data;\n+    if ((n >> 30) != 2) {\n+        return;\n+    }\n+    CTransactionRef * const ptx_old = get<CTransactionRef>();\n+    CTransactionRef tx = *ptx_old;  // save a copy\n+    ptx_old->~CTransactionRef();\n+    CTransactionWeakref * const ptx_new = get<CTransactionWeakref>();\n+    new (ptx_new) CTransactionWeakref(tx);\n+    *((meta_t*)m_data) |= (3 << 30);",
      "path": "src/qt/netwatch.cpp",
      "position": 258,
      "original_position": 258,
      "commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "original_commit_id": "ba6074b561fce84191bce5f3749f66436473599b",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shift overflow?",
      "created_at": "2019-02-13T11:00:48Z",
      "updated_at": "2019-02-13T11:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9849#discussion_r256345224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256345224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 258,
      "original_line": 258,
      "side": "RIGHT"
    }
  ]
}