{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038",
    "id": 369422568,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY5NDIyNTY4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18038",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18038.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18038.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
    "number": 18038,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "P2P: Mempool tracks locally submitted transactions to improve wallet privacy",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR introduces mempool tracking of unbroadcast transactions and periodic reattempts at initial broadcast. This is a part of the rebroadcast project, and a standalone privacy win. \r\n\r\nThe current rebroadcast logic is terrible for privacy because 1. only the source wallet rebroadcasts transactions and 2. it does so quite frequently. In the current system, if a user submits a transaction that does not immediately get broadcast to the network (eg. they are offline), this \"rebroadcast\" behavior is the safety net that can actually serve as the initial broadcast. So, keeping the attempts frequent is important for initial delivery within a reasonable timespan. \r\n\r\nThis PR aims to improve # 2 by reducing the wallet rebroadcast frequency to ~1/day from ~1/15 min. It achieves this by separating the notion of initial broadcast from rebroadcasts. With these changes, the mempool tracks locally submitted transactions & periodically reattempts initial broadcast. Transactions submitted via the wallet or RPC are added to an \"unbroadcast\" set & are removed when a peer sends a `getdata` request, or the transaction is removed from the mempool. Every 10-15 minutes, the node reattempts an initial broadcast. This enables reducing the wallet rebroadcast frequency while ensuring the transactions will be propagated to the network. \r\n\r\nFor privacy improvements around # 1, please see #16698. \r\nThank you to gmaxwell for the idea of how to break out this subset of functionality (https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571399346)",
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
      "id": 4914019,
      "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
      "number": 45,
      "state": "closed",
      "title": "0.21.0",
      "description": "",
      "creator": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 132,
      "created_at": "2019-12-09T08:39:58Z",
      "updated_at": "2021-01-15T19:50:53Z",
      "closed_at": "2021-01-15T19:50:53Z"
    },
    "active_lock_reason": "resolved",
    "created_at": "2020-01-31T05:52:30Z",
    "updated_at": "2022-02-15T10:34:09Z",
    "closed_at": "2020-04-29T08:33:55Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-04-29T08:33:55Z",
    "merge_commit_sha": "0ef0d33f7562c3b7f9c021549e70b3b4dbcc504c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "amitiuttarwar:2020-01-unbroadcast",
      "ref": "2020-01-unbroadcast",
      "sha": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 164037357,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwMzczNTc=",
        "name": "bitcoin",
        "full_name": "amitiuttarwar/bitcoin",
        "owner": {
          "login": "amitiuttarwar",
          "id": 1500952,
          "node_id": "MDQ6VXNlcjE1MDA5NTI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/amitiuttarwar",
          "html_url": "https://github.com/amitiuttarwar",
          "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
          "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
          "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
          "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
          "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/amitiuttarwar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/amitiuttarwar/bitcoin",
        "archive_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/amitiuttarwar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:amitiuttarwar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/amitiuttarwar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/hooks",
        "svn_url": "https://github.com/amitiuttarwar/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 4,
        "stargazers_count": 6,
        "watchers_count": 6,
        "size": 216794,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T23:05:52Z",
        "created_at": "2019-01-04T00:31:16Z",
        "updated_at": "2021-09-05T22:29:09Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "64139803f1225dab26197a20314109d37fa87d5f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 248,
    "deletions": 31,
    "changed_files": 14,
    "commits": 7,
    "review_comments": 194,
    "comments": 31
  },
  "events": [
    {
      "event": "labeled",
      "id": 2995895110,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI5OTU4OTUxMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2995895110",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-31T05:52:58Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 580639076,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDYzOTA3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580639076",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-31T08:39:36Z",
      "updated_at": "2020-04-29T05:04:49Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18807 ([WIP] unbroadcast follow-ups by amitiuttarwar)\n* #18781 (Add templated GetRandDuration<> by MarcoFalke)\n* #18764 (refactor: test: replace inv type magic numbers by constants by theStack)\n* #18446 (test: Add test for wtxid transaction relay by fjahr)\n* #18261 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n* #18044 (Use wtxid for transaction relay by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-580639076",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3011252554,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAxMTI1MjU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3011252554",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-05T19:11:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3011518403,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAxMTUxODQwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3011518403",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-05T20:36:26Z"
    },
    {
      "event": "added_to_project",
      "id": 3012300077,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzMDEyMzAwMDc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3012300077",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-06T02:32:50Z",
      "project_card": {
        "id": 32696953,
        "url": "https://api.github.com/projects/columns/cards/32696953",
        "project_id": 3826895,
        "project_url": "https://api.github.com/projects/3826895",
        "column_name": "Package Relay"
      }
    },
    {
      "event": "moved_columns_in_project",
      "id": 3012300279,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50MzAxMjMwMDI3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3012300279",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-06T02:32:58Z",
      "project_card": {
        "id": 32696953,
        "url": "https://api.github.com/projects/columns/cards/32696953",
        "project_id": 3826895,
        "project_url": "https://api.github.com/projects/3826895",
        "column_name": "Rebroadcasting",
        "previous_column_name": "Package Relay"
      }
    },
    {
      "event": "referenced",
      "id": 3045357570,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNDUzNTc1NzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3045357570",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
      "created_at": "2020-02-18T01:05:19Z"
    },
    {
      "event": "labeled",
      "id": 3045510443,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMwNDU1MTA0NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3045510443",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-18T02:53:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3045780356,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNDU3ODAzNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3045780356",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2fc510301e079ef27438bcb998e95a0ff5a6d640",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/2fc510301e079ef27438bcb998e95a0ff5a6d640",
      "created_at": "2020-02-18T05:54:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3075832060,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3NTgzMjA2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3075832060",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-26T23:33:21Z"
    },
    {
      "event": "unlabeled",
      "id": 3075973817,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzA3NTk3MzgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3075973817",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T00:45:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 592155950,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE1NTk1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592155950",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T20:14:33Z",
      "updated_at": "2020-02-27T20:14:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "travis failure seems unrelated- `feature_fee_estimation.py` ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-592155950",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 592167518,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE2NzUxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592167518",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T20:43:20Z",
      "updated_at": "2020-02-27T20:43:20Z",
      "author_association": "MEMBER",
      "body": "It could be a crash, because node1 stops to log anything at all",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-592167518",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "reviewed",
      "id": 365993014,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTkzMDE0",
      "url": null,
      "actor": null,
      "commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. Some design comments on the first commit 66ec5571ad49b68366e4607cf0b671231083757e",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-365993014",
      "submitted_at": "2020-02-28T16:34:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 366607338,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NjA3MzM4",
      "url": null,
      "actor": null,
      "commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, reviewed code and left comments. Will test once we resolve the discussions.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-366607338",
      "submitted_at": "2020-02-28T18:55:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "mentioned",
      "id": 3092818508,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzA5MjgxODUwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3092818508",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-03T16:07:11Z"
    },
    {
      "event": "subscribed",
      "id": 3092818516,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwOTI4MTg1MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3092818516",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-03T16:07:11Z"
    },
    {
      "event": "labeled",
      "id": 3101207679,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxMDEyMDc2Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3101207679",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-05T13:33:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 366530279,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTMwMjc5",
      "url": null,
      "actor": null,
      "commit_id": "1a1a30cc4adbbcccfbb073fbf8ae9df1090a2996",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some comments for the second commit",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-366530279",
      "submitted_at": "2020-03-05T18:37:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 375561005,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTYxMDA1",
      "url": null,
      "actor": null,
      "commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "If I understand well this PR,  it introduces a initial-broadcast reattempt mechanism through mempool tracking and `GETDATA` monitoring. Compare to wallet rebroadcast, the safety catch of new one isn't _confirmation_-based but _network_-based so once you have reasonable propagation (reasonable=1) you stop initial-broadcast. But I don't grasp where the privacy win is in itself, I would say that's a reliability improvement against network unknowns (maybe even a slight worsening because now a spying node only have to be connected to you for REATTEMPT_BROADCAST_INTERVAL instead of ~1/30min, which decrease attacker deployment cost ?)\r\n\r\nMETA: can you keep your commit message line to 74 characters :) ?",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-375561005",
      "submitted_at": "2020-03-16T20:58:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3138869657,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEzODg2OTY1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3138869657",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-17T20:05:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3138892987,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEzODg5Mjk4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3138892987",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-17T20:12:40Z"
    },
    {
      "event": "unlabeled",
      "id": 3138946109,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzEzODk0NjEwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3138946109",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-17T20:30:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 376376840,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Mzc2ODQw",
      "url": null,
      "actor": null,
      "commit_id": "3d185eda3c6d449e080b749acfb4986e6f88e203",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "just pushed some changes:\r\n- added functionality to persist unbroadcast set across restarts using `mempool.dat` & added some tests\r\n- updates to locking when accessing unbroadcast set \r\n- addressed misc review comments \r\n\r\nI'm looking for review / feedback, particularly in the following areas:\r\n1. that my locking logic makes sense\r\n\r\n2. preference of handling the `mempool.dat` update.\r\nthis current implementation doesn't update the `mempool.dat` version. Instead `LoadMempool` checks if we are at the end of the file. If not, reads the next line into the mempool unbroadcast set. this allows for compatibility with any current `mempool.dat` formats. \r\n\r\nif we bump the version, it may cause some friction when users upgrade, but that might be negligible, and I don't expect persisting the unbroadcast set to be something that's super frequently used, especially in current network conditions. \r\nthen, we could have `DumpMempool` add a bool value that indicates whether or not there are unbroadcast txids, and `LoadMempool` could use a `true` to read the next line into the unbroadcast set. \r\n\r\nI implemented the first way because I thought version interoperability would be simpler, but after seeing this implementation (and how annoyingly difficult it is to identify \"are we at the end of the file?\"), I am leaning towards bumping the version. But since I have it built out, thought I'd post the current version.",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-376376840",
      "submitted_at": "2020-03-17T20:33:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "commented",
      "id": 600304555,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDMwNDU1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600304555",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-17T21:14:03Z",
      "updated_at": "2020-03-17T21:14:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "looks like I have severely aggravated Travis. whoops 🙈. looking into it. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-600304555",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "reviewed",
      "id": 376419558,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDE5NTU4",
      "url": null,
      "actor": null,
      "commit_id": "3d185eda3c6d449e080b749acfb4986e6f88e203",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-376419558",
      "submitted_at": "2020-03-17T21:30:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3139201641,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEzOTIwMTY0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3139201641",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-17T21:54:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3139265498,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEzOTI2NTQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3139265498",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-17T22:19:30Z"
    },
    {
      "event": "commented",
      "id": 600359498,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDM1OTQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600359498",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T00:08:37Z",
      "updated_at": "2020-03-18T00:08:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ariard \r\n\r\n> If I understand well this PR, it introduces a initial-broadcast reattempt mechanism through mempool tracking and GETDATA monitoring. Compare to wallet rebroadcast, the safety catch of new one isn't confirmation-based but network-based so once you have reasonable propagation (reasonable=1) you stop initial-broadcast. \r\n\r\nYup. \r\n\r\n> But I don't grasp where the privacy win is in itself, I would say that's a reliability improvement against network unknowns\r\n\r\n**The privacy improvement is due to wallet rebroadcasts being less frequent.** Updated to ~1/day (between 12-36 hrs) instead of ~1/15 mins (between 0-30mins). The current wallet rebroadcast logic deanonymizes the sender, but is important to ensure the initial delivery in some cases. So, we extract the two functions.\r\n\r\nAlso updated OP to try to make this clearer. \r\n\r\n@gmaxwell summarizes the motivation pretty well [here](https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571399346): \r\n> Has anyone considered significantly increasing the time between rebroadcasts as an additional change (and one that could go in separately much faster)? Particularly once you've performed one successful broadcast per execution additional rebroadcasts usually do nothing except leak data to attackers that frequently reconnect to you-- you won't resend to a host you've sent to before, and its not usually useful to do so. This wouldn't obviate the need to be more intelligent, but it would reduce the bleeding and also make it more acceptable for the rest of the change to be more approximate.\r\n\r\nand in regards to the attack vector,\r\n>  (maybe even a slight worsening because now a spying node only have to be connected to you for REATTEMPT_BROADCAST_INTERVAL instead of ~1/30min, which decrease attacker deployment cost ?)\r\n\r\nBecause of `filterInventoryKnown` logic, its not quite that the attacker needs to be connected to you for that long, but rather that they would need to open a new connection to you during that window of time. Also, my understanding is that the conditions would need to be such that you didn't receive any `GETDATAs` back from any peers in regards to this txn, because otherwise it would be removed from the set. So we'd need: 1. victim sends txn to attacker, 2. attacker doesn't acknowledge with `GETDATA` but notes down txn hash, 3. somehow (either intentional or unintentional) ensure no other peers send back `GETDATA` for the txn 4. open a new connection before next broadcast attempt. Then the attacker can confirm that the victim is the source for that transaction. \r\n\r\nDoes that logic make sense to you? Please poke holes at it :) Or let me know if you have any questions.\r\n\r\nAlso, relevant conversation in this comment thread [here](https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348840194), which I know you've seen but might be worth re-visiting. \r\n\r\n",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-600359498",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3139489089,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzEzOTQ4OTA4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3139489089",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T00:08:37Z"
    },
    {
      "event": "subscribed",
      "id": 3139489091,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMzk0ODkwOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3139489091",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T00:08:37Z"
    },
    {
      "event": "mentioned",
      "id": 3139489093,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzEzOTQ4OTA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3139489093",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T00:08:38Z"
    },
    {
      "event": "subscribed",
      "id": 3139489096,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMzk0ODkwOTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3139489096",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T00:08:38Z"
    },
    {
      "event": "renamed",
      "id": 3141928668,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzE0MTkyODY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3141928668",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T15:18:16Z",
      "rename": {
        "from": "P2P: Mempool tracks locally submitted transactions to improve privacy",
        "to": "P2P: Mempool tracks locally submitted transactions to improve wallet privacy"
      }
    },
    {
      "event": "commented",
      "id": 600683350,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDY4MzM1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600683350",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T15:18:39Z",
      "updated_at": "2020-03-18T15:18:39Z",
      "author_association": "MEMBER",
      "body": "Changed title to indicate that this only improves *wallet* privacy",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-600683350",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "reviewed",
      "id": 376984420,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTg0NDIw",
      "url": null,
      "actor": null,
      "commit_id": "77748da2269bd7f2304ebc3b8616d3a584e7c65f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK. Looks ready to merge, just a ton of style nits.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-376984420",
      "submitted_at": "2020-03-18T16:35:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 378004299,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDA0Mjk5",
      "url": null,
      "actor": null,
      "commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-378004299",
      "submitted_at": "2020-03-19T18:52:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "commented",
      "id": 601366971,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTM2Njk3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/601366971",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-19T19:15:31Z",
      "updated_at": "2020-03-19T19:20:00Z",
      "author_association": "MEMBER",
      "body": "> Does that logic make sense to you? Please poke holes at it :) Or let me know if you have any questions.\r\n\r\nI think we agree, missed inventory filter implications at first, maybe should get some message in your first commit to track goal aimed:\r\n\r\n\"Previously, in case of rebroadcast, a spying node may learn transaction\r\norigin if it was connected to the node during a ~1/15min period.\r\n\r\nNow, mempool is tracking locally submitted transactions. At servicing\r\nGETDATA for an announced local transaction for at least one peer, tracking\r\nis erased. If no GETDATA is processed before mempool initial-broadcast\r\nreattempt period expires, a new announcement is made to every peer. Due\r\nto inventory filter, this is only effective for new peers since last period\r\nexpiration. Transaction origin privacy would only be worsened if a) among\r\nnew nodes there is a spying one b) no honest/reliable peers reported back\r\na GETDATA. Given the mempool rebroadcast period length, if b) occurs, that\r\nwould be a clue of bigger concern.\r\n\r\nThis doesn't improve initial-broadcast privacy where a spying node\r\nis already connected to the node before transaction first announcement.\"\r\n\r\n(but if b) occurs that's a reliability improvement IMO)",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-601366971",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "labeled",
      "id": 3164493808,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxNjQ0OTM4MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3164493808",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T15:29:22Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "milestoned",
      "id": 3168634644,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMxNjg2MzQ2NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3168634644",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T14:56:29Z",
      "milestone": {
        "title": "0.21.0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3169026048,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2OTAyNjA0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3169026048",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T16:22:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3169086817,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2OTA4NjgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3169086817",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T16:36:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3169474104,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2OTQ3NDEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3169474104",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T18:09:47Z"
    },
    {
      "event": "commented",
      "id": 604722444,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDcyMjQ0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604722444",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T22:35:34Z",
      "updated_at": "2020-03-26T22:35:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you for the thoughtful reviews! pushed changes incorporating the feedback. \r\n\r\ncurrently looking into CI failures. appveyor is failing on `feature_versionbits_warning.py`, but travis is failing on `mempool_persist`, so I'm investigating. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-604722444",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 604755044,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDc1NTA0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604755044",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T00:32:07Z",
      "updated_at": "2020-03-27T00:32:07Z",
      "author_association": "MEMBER",
      "body": "Previous runs: \r\n* https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/31747734\r\n* https://travis-ci.org/github/bitcoin/bitcoin/builds/667378104\r\n\r\nI think they are intermittent failures, so I am going to re-run this pull\r\n\r\nOpen-Close to re-run ci. See https://github.com/bitcoin/bitcoin/issues/15847#issuecomment-487591130",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-604755044",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "closed",
      "id": 3170549053,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzE3MDU0OTA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3170549053",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T00:32:07Z"
    },
    {
      "event": "reopened",
      "id": 3170549176,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQzMTcwNTQ5MTc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3170549176",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T00:32:12Z"
    },
    {
      "event": "commented",
      "id": 606165779,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjE2NTc3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606165779",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T18:28:18Z",
      "updated_at": "2020-03-30T18:38:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "the travis valgrind build is failing on `p2p_permissions` test. \r\n\r\ntrying to make sense of the logs... looks like node1 has an unclean shutdown, possibly because the RPC is attempted to be stopped more than once? \r\nI'm a bit confused because it looks like  `test_framework/authproxy.py` is throwing a `ConnectionResetError` from `_request`, but that method should be catching the error? but I think its thrown for a second time in the `except` block.\r\n\r\ntrying to figure out if this is related to my changes. [earlier in this PR](https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-592167518) what first looked like an unrelated failure to me was actually related because of issues with my lock logic. this time doesn't look like either node is crashing. from what I can discern, looks like node1 having an unclean shutdown because of a failure in an http request. which leads me to thinking its test flakiness.\r\n\r\n@MarcoFalke - thoughts? ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606165779",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3179928152,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE3OTkyODE1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3179928152",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T18:30:45Z"
    },
    {
      "event": "subscribed",
      "id": 3179928154,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNzk5MjgxNTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3179928154",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T18:30:45Z"
    },
    {
      "event": "commented",
      "id": 606190183,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjE5MDE4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606190183",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T19:18:17Z",
      "updated_at": "2020-03-30T22:14:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ariard - addressing your 2 outstanding review comments\r\n\r\nRE: wtxid - there is some additional code needed to support unbroadcast set & wtxid relay. I'll work on the patch & depending on timing around which PR is ready for merge first, include the patch here or offer it on the other PR. Thanks again for pointing that out :) \r\n\r\nRE: `filterInventoryKnown` - to make this easier to realize, I mention in a comment above `ReattemptInitialBroadcast`. However, I'm hesitant to impose too much interpretation in the code comments or commit messages, because I want to encourage independent thinking that might conflict with or challenge my own interpretation. Also because there are so many interactions it's kind of impossible to encapsulate them all, and they will also change over time.\r\n\r\nTo be more specific..\r\n> If no GETDATA is processed before mempool initial-broadcast\r\nreattempt period expires, a new announcement is made to every peer. Due\r\nto inventory filter, this is only effective for new peers since last period\r\nexpiration.\r\n\r\nThis is the normal condition, but iirc `filterInventoryKnown` is cleared out based on number of transactions, so maybe under super high traffic network conditions, an announcement is resent to the same peer? \r\n\r\nAnd in regards to the second part of your comment, I don't quite follow..\r\n> Transaction origin privacy would only be worsened if a) among\r\nnew nodes there is a spying one \r\n\r\nSay you have a set of unbroadcast transactions. You attempt initial broadcast, but your wifi is disconnected so they don't go anywhere, but get inserted into `filterInventoryKnown` for your existing connections. A malicious node connects to you. `ReattemptInitialBroadcast` is triggered & you send your wallet transaction to this node. At that time, the node cannot identify that is your transaction with certainty. For it to carry out an attack, it needs to be the ONLY node you submitted the transaction to. Which is possible, but a specific subset of this condition.\r\n\r\n> b) no honest/reliable peers reported back\r\na GETDATA. Given the mempool rebroadcast period length, if b) occurs, that\r\nwould be a clue of bigger concern.\r\n(but if b) occurs that's a reliability improvement IMO)\r\n\r\nso, there are two main reasons a node wouldn't report back a `GETDATA`. Either network issues (it didn't receive announcement, you didn't receive the `GETDATA`). Or it is malicious. If it is occurring because of network issues, it makes sense to try again. Is this the reliability improvement that you are talking about? because thats the main point of this PR :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606190183",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3180096979,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE4MDA5Njk3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180096979",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T19:18:17Z"
    },
    {
      "event": "subscribed",
      "id": 3180096982,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxODAwOTY5ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180096982",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T19:18:17Z"
    },
    {
      "event": "commented",
      "id": 606320113,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjMyMDExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606320113",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T00:16:08Z",
      "updated_at": "2020-03-31T00:16:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "ok! travis is green, all current review comments are addressed. \r\n\r\nthis PR is ready for another round of review! \r\nthanks in advance :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606320113",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 607588970,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzU4ODk3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607588970",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T02:39:49Z",
      "updated_at": "2020-04-02T02:41:06Z",
      "author_association": "MEMBER",
      "body": "Do we have any numbers on how important wallet rebroadcasting is? I have a small concern that stopping the \"fast\" initial broadcast after a single successful transmission may sometimes not be enough (e.g. the peer it's sent to goes offline before forwarding it further). This seems unlikely to happen (both we only submitting once, and them failing immediately afterwards), and even if it happens, it wouldn't be a disaster as the once per day rebroadcast would still occur.\r\n\r\nBesides that, concept and code review ACK.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-607588970",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 608054603,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwODA1NDYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608054603",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T19:19:01Z",
      "updated_at": "2020-04-02T19:19:01Z",
      "author_association": "MEMBER",
      "body": "Code review re-ACK",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-608054603",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 608120418,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwODEyMDQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608120418",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T22:17:44Z",
      "updated_at": "2020-04-02T22:17:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "thanks for the review @sipa! \r\n\r\nunfortunately, I don't have any real-life numbers of wallet rebroadcast usage for getting a transaction initially broadcast. I'd love relevant data. (anyone reading this... ) please let me know if you have any ideas of how I could get relevant info. \r\n\r\nI've mostly been operating in theoretical possibility space & have come to the same conclusion- the likelihood seems slim & there's an additional safety net. in this implementation, it'd be possible to increase the guarantee (eg. ensure we fulfill two `GETDATA` requests instead of one), but the tradeoff hasn't seemed worth it. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-608120418",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3194116250,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE5NDExNjI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3194116250",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T22:17:44Z"
    },
    {
      "event": "subscribed",
      "id": 3194116252,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxOTQxMTYyNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3194116252",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T22:17:44Z"
    },
    {
      "event": "reviewed",
      "id": 392350586,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzUwNTg2",
      "url": null,
      "actor": null,
      "commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 6307582b4d30167a931678d12e99a00a0e75e81a 🐫\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 6307582b4d30167a931678d12e99a00a0e75e81a 🐫\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUg7fQwAs3+uIjFusxFMhvNvRgjY+JbpGN8/UQWcXAe9bRFc2+zDMqZVrDlwOJyQ\r\n64QnpWf16aDzuKZdL7iLh574+jBJuFioMfq0ogPqctgVF9+PamnI9sRWEuZwjVVD\r\n4G+haPYyPi9uR/Ip5f4xbRT62Aq3oi7OY9necxeL2Aev3T/pHbLWyl8hh6nBt24y\r\nskq6k31A+5rOGaQY8VhMaBnp1p6irM1CH+6/XdkVeLNZi+7PGYBcbxPWnc6OLh7r\r\n5bUl9XiMdg1LfVjPg601rQEEvU95spj5Xcm2YE4JblELgewYydF0PpCJcbgww7H5\r\nYW2BA2ubzBOXJTjzOUsU43NH3l5dAIMwGcHmNEmLTKzq1wbf0EmDngI/SgUv0VCU\r\nYBz6FExO8WSf42c2SDqNNEr4JoqkhERt/25nQ1MCQ9F9M4pEUZmZsedM40jp81LM\r\nUa+f7rQJ9ML3+Y8/kjwE8AuU/m4+uBJEzA71qGmyACw2rRnLPp5LyDG89JDxJSpH\r\n4bCE2dPF\r\n=qFW/\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `081497859ee990ba5d941ec43c32052fbadbcdd5237c93dca46251989de90d45  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108081497859ee990ba5d941ec43c32052fbadbcdd5237c93dca46251989de90d45f010b0e82a4717532ba9a45ff573400d086a08fff0106d3d76298e6829b9e6cbec089c20917008f020582406b6d23d1236d53825908e01e06301191452ea8674f3fc7b9011b932df5808f1045e94bbb7f0086facea9c2922cb7a0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010a032675b0d75a7fe6179da35af18f59008f0200a6e31f883cbe3247b242f667e08b5e3490863fd606cc6a8d218a866052679a908f1045e94bbb8f0088d07fb331f404ea50083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010d2f087f9b56eea1d1bfbe8f4cf32148b08f1205a4709efc7a1c526c9b7b54bb713b860e81c6b74e6de10fe84855e8fbecd99ac08f1045e94bbb7f008cb30741aa0d08ab20083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010f311a15bd4973a3f54fc9b425789095c08f120ae29d1c356341275933a68aa7f8c93f63405fc14654368b8d20a0b89daad7ec708f1045e94bbb8f008d5e022d5138de10a0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-392350586",
      "submitted_at": "2020-04-13T19:21:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 394155715,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTU1NzE1",
      "url": null,
      "actor": null,
      "commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-394155715",
      "submitted_at": "2020-04-15T22:44:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 394195437,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTk1NDM3",
      "url": null,
      "actor": null,
      "commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks great. I've added a bunch of nits, but overall this change set is very nice. Strong concept ACK.\r\n\r\nArchitecturally, my only comment would be to make `m_unbroadcast_txids` private, and introduce three access functions `AddUnbroadcastTx()`, `RemoveUnbroadcastTx()` and `GetUnbroadcastTxs()`, so validation/net_processing aren't reaching into `CTxMempool`, and if we decide to have more sophisticated unbroadcast logic in future and the internal data structures change, hopefully those clients don't need to change their calling code as much.\r\n\r\nOther things I was looking out for in this review:\r\n\r\n- this PR adds local data that identifies your own transactions (mempool.dat unbroadcast set and debug logs). I think that's fine - if your bitcoin datadir is compromised you probably have bigger problems.\r\n- I initially thought that mempool.dat should be versioned, but this conversation: https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394483205 has convinced me that I don't need to worry. mempool.dat is such a short-lived file that versioning seems minimally useful.\r\n\r\nOne final comment: for your git commit logs, I recommend you wrap the body lines at 80 chars.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-394195437",
      "submitted_at": "2020-04-15T23:09:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "commented",
      "id": 614325394,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDMyNTM5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614325394",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-15T23:13:54Z",
      "updated_at": "2020-04-15T23:13:54Z",
      "author_association": "MEMBER",
      "body": "> this PR adds local data that identifies your own transactions (mempool.dat unbroadcast set and debug logs). I think that's fine - if your bitcoin datadir is compromised you probably have bigger problems.\r\n\r\nAll the information should already be accessible today in wallet.dat, and debug.log, so this is not getting worse.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-614325394",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 614376730,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDM3NjczMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614376730",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-16T02:23:40Z",
      "updated_at": "2020-04-16T02:23:40Z",
      "author_association": "MEMBER",
      "body": "> All the information should already be accessible today in wallet.dat, and debug.log, so this is not getting worse.\r\n\r\nwallet.dat could be stored externally, and without wallet logging enabled I don't think debug.log will indicate which transactions are yours. But like I said, I don't think it's a big concern.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-614376730",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 614602524,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDYwMjUyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614602524",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-16T11:46:22Z",
      "updated_at": "2020-04-16T11:46:22Z",
      "author_association": "MEMBER",
      "body": "With wallet logging disabled, the tx source is still leaked through ATMP logging, validationinterface logging, RPC logging and NET logging. You'd probably have to pass -nodebuglogfile to make sure nothing is leaked.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-614602524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 618387031,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODM4NzAzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618387031",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T12:56:26Z",
      "updated_at": "2020-04-23T12:56:39Z",
      "author_association": "MEMBER",
      "body": "The underlying assumption here seems to be that all nodes are online 24/7 (or at least several days after a tx broadcast). I have heard from some users that they have a node on their laptop that is not online often but when they want to send a tx they launch it, wait for it to sync, and then broadcast the tx before shutting it down again. Should such a usage pattern be taken into consideration or should it be ignored?",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618387031",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 618391912,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODM5MTkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618391912",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T13:05:58Z",
      "updated_at": "2020-04-23T13:05:58Z",
      "author_association": "MEMBER",
      "body": "@fjahr Can you explain why this is the underlying assumption? A node on a laptop should work fine wiht this. In fact this improves the user experience on exactly such systems.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618391912",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3264976220,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2NDk3NjIyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3264976220",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T13:05:59Z"
    },
    {
      "event": "subscribed",
      "id": 3264976225,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjQ5NzYyMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3264976225",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T13:05:59Z"
    },
    {
      "event": "commented",
      "id": 618394374,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODM5NDM3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618394374",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T13:10:44Z",
      "updated_at": "2020-04-23T13:10:44Z",
      "author_association": "MEMBER",
      "body": "> @fjahr Can you explain why this is the underlying assumption? A node on a laptop should work fine wiht this. In fact this improves the user experience on exactly such systems.\r\n\r\nThe way I understand the logic it seems like if a first attempt at broadcasting the tx fails, the user would need to remember that and relaunch their node ~24h later to retry which may be inconvenient compared to keeping the node running for another hour for 1-2 more retries. But maybe I am getting it wrong, I have not reviewed the code yet.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618394374",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3264995744,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2NDk5NTc0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3264995744",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T13:10:44Z"
    },
    {
      "event": "subscribed",
      "id": 3264995747,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjQ5OTU3NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3264995747",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T13:10:44Z"
    },
    {
      "event": "commented",
      "id": 618396450,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODM5NjQ1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618396450",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T13:21:49Z",
      "updated_at": "2020-04-23T13:21:49Z",
      "author_association": "MEMBER",
      "body": "I don't think we can trivially solve the case where you have only connections to malicious nodes that pretend to want your transaction, but then drop it on the floor.\r\n\r\nAre you saying that waiting another hour after start-up could improve the peers you have and they'd be less like to drop your txs on the floor?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618396450",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 618412982,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODQxMjk4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618412982",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T14:04:15Z",
      "updated_at": "2020-04-23T14:04:15Z",
      "author_association": "MEMBER",
      "body": "I guess I just misunderstood the unbroadcast logic and it's differences to the old wallet rebroadcast, now that I am reviewing the code it makes more sense and I see how it's not an issue for these types of users.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618412982",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3266065299,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI2NjA2NTI5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266065299",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T17:29:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3266190598,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI2NjE5MDU5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266190598",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:01:18Z"
    },
    {
      "event": "commented",
      "id": 618569598,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODU2OTU5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618569598",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:23:32Z",
      "updated_at": "2020-04-23T18:23:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "thanks for the reviews @MarcoFalke, @jnewbery & @fjahr \r\n\r\nI've addressed all review comments. Fixed the issues with raciness around dumping & loading unbroadcast set to `mempool.dat`. Updated so `m_unbroadcast_txids` is private & exposes public methods to add / remove / get the set. And a bunch of small nit fixes. \r\n\r\n@fjahr \r\n> The underlying assumption here seems to be that all nodes are online 24/7 \r\n\r\n>  it seems like if a first attempt at broadcasting the tx fails, the user would need to remember that and relaunch their node ~24h later to retry\r\n\r\n>  now that I am reviewing the code it makes more sense\r\n\r\nok, maybe you're clear now but just incase / for other reviewers..\r\n\r\nif we were to simply bump the wallet rebroadcast from ~1/30 min to ~1/day, we would have exactly the problem you describe. so we introduce the idea of the \"unbroadcast\" set to the mempool. instead of using wallet \"rebroadcast\" logic to do best effort of first delivery, we now use the mempool \"unbroadcast\" logic to serve this function. it does work a bit differently (tries more frequently & keeps trying until a `GETDATA` is received or txn is removed from mempool for a different reason), so reviewers should be critical about the changes.",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618569598",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3266280030,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2NjI4MDAzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266280030",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:23:33Z"
    },
    {
      "event": "subscribed",
      "id": 3266280037,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjYyODAwMzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266280037",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:23:33Z"
    },
    {
      "event": "mentioned",
      "id": 3266280042,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2NjI4MDA0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266280042",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:23:33Z"
    },
    {
      "event": "subscribed",
      "id": 3266280045,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjYyODAwNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266280045",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:23:33Z"
    },
    {
      "event": "mentioned",
      "id": 3266280051,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2NjI4MDA1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266280051",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:23:33Z"
    },
    {
      "event": "subscribed",
      "id": 3266280053,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjYyODAwNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266280053",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:23:33Z"
    },
    {
      "event": "reviewed",
      "id": 399391005,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzkxMDA1",
      "url": null,
      "actor": null,
      "commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-399391005",
      "submitted_at": "2020-04-23T19:01:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 399392664,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzkyNjY0",
      "url": null,
      "actor": null,
      "commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-399392664",
      "submitted_at": "2020-04-23T19:03:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 399398995,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Mzk4OTk1",
      "url": null,
      "actor": null,
      "commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-399398995",
      "submitted_at": "2020-04-23T19:12:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "commented",
      "id": 618603179,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODYwMzE3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618603179",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T19:12:59Z",
      "updated_at": "2020-04-23T19:12:59Z",
      "author_association": "MEMBER",
      "body": "ACK c365159b8922320ba542db97a43ae72a177380bb 💎\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK c365159b8922320ba542db97a43ae72a177380bb 💎\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUi5TQv/UfFNEB6lDNi7ZjPTVQhYPj6JQsYc9pN6r8vGARGWt22PX9t2epW4/WRQ\r\nGWyfjg+uSl3LQYBc1+GZZe2l0uxzH4bbLEN7fL0JxWqnTTboretkD/XEFO36jjGD\r\nXOfzExoOKprAXx1TA1GQqqPyWQy3B+TCIxEHYpJxuQJ2iHKYoBwuqMGV1HHQHRiM\r\nq84fIho0WpgB7hNr56f7IqgdSEhSzIMA7UCJGdo2cnlQJf0CYspPmnx0biRkbZa9\r\n8rYul+/cVI9EICVL/ZZ5Ab61QrqtVncm7fBo+zG/KkXIHKrTEmDfnrLsB0YCtwhM\r\nC9prYyQDLAJ5PreYZZbC7sdzn8IbC/wsdKVK+z2gx7fmGFRp+Zuxtag70+LSxNCn\r\n8vAwGow0d2QIxBDUKHAGpkjg98XAMP5ZWPHDCM2Ky22wvoPSpIV8c+Q0uEf1eSMF\r\nE45fpdbik5tUi2ntm0TXdTwunnWQIJdlY4TocFdF+9ZzyM3vOgcEOrRDYzh47xzQ\r\nMIWA8UcU\r\n=Um+Y\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `40fb7d6151b1989018740bdc8a2582d53f1b63f76e24b76af6cb200fb664ce36  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010840fb7d6151b1989018740bdc8a2582d53f1b63f76e24b76af6cb200fb664ce36f010e2683a013c695a12c9f531ae86cec25c08fff010409417f2723ec4e799cea896a37b282208f1203923e58117f21ea80f7420291741bb679eea3507273fd10eabb5d41f89b429cd08f1045ea1e8acf0082b9535e64c18d6ed0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01048ec8caa5acc6b0132e5539af88d27f008f1045ea1e8adf008cc7e5aafa13e9cf80083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff010591ee08a12d514da0ccabb27a302d4c608f1045ea1e8acf00888d38dd43bd5d96a0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010ce109f2dbcf5feed50bb49df1ca2a81908f1045ea1e8acf0082593b8088186da2b0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618603179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWVlYjRhMzMzNWY4ZTg3MWNjM2Y1Mjg2YWY0NTQ2ZGZmNjYxNzJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "tree": {
        "sha": "6705d43114fbd4a7d308c10a9f3ef27c0556c81f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6705d43114fbd4a7d308c10a9f3ef27c0556c81f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23991ee53af21c2fdc28f6e8e002dc1455c71098",
          "sha": "23991ee53af21c2fdc28f6e8e002dc1455c71098",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/23991ee53af21c2fdc28f6e8e002dc1455c71098"
        }
      ],
      "message": "[mempool] Track \"unbroadcast\" transactions\n\n- Mempool tracks locally submitted transactions (wallet or rpc)\n- Transactions are removed from set when the node receives a GETDATA request\n  from a peer, or if the transaction is removed from the mempool.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:12:59Z"
      },
      "sha": "89eeb4a3335f8e871cc3f5286af4546dff66172a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTkzZWVjY2UzYmM1YTFiN2JiMDI4NGUwNmY5ZTJlNjk0NTRmNWJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
      "tree": {
        "sha": "8121fa55daa531931d75252b63075f423b445af8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8121fa55daa531931d75252b63075f423b445af8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89eeb4a3335f8e871cc3f5286af4546dff66172a",
          "sha": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/89eeb4a3335f8e871cc3f5286af4546dff66172a"
        }
      ],
      "message": "[util] Add method that returns random time in milliseconds",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T01:35:07Z"
      },
      "sha": "7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjVlNDJmMjBhM2FhMzk2NTFmYmMxZjlmYTNkZjFhNDlmMWY1ODY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
      "tree": {
        "sha": "a12777257a609b794d8922379d5f1dc6df5ea1f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a12777257a609b794d8922379d5f1dc6df5ea1f7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
          "sha": "7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba"
        }
      ],
      "message": "[p2p] Reattempt initial send of unbroadcast transactions\n\nEvery 10-15 minutes, the scheduler kicks off a job that queues unbroadcast\ntransactions onto each node.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:19:27Z"
      },
      "sha": "e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzFkYTQ4ZGM1ZTU1MjYyMTU1NjEzMTFjMTg0YThjYmMzNDVlY2Rj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc1da48dc5e5526215561311c184a8cbc345ecdc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dc1da48dc5e5526215561311c184a8cbc345ecdc",
      "tree": {
        "sha": "356652687f4ae7d122a7d2d63a8d4ade6a0448f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/356652687f4ae7d122a7d2d63a8d4ade6a0448f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
          "sha": "e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868"
        }
      ],
      "message": "[wallet] Update the rebroadcast frequency to be ~1/day.\n\nSince the mempool unbroadcast mechanism handles the reattempts for initial\nbroadcast, the wallet rebroadcast attempts can be much less frequent\n(previously ~1/30 min)",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:21:02Z"
      },
      "sha": "dc1da48dc5e5526215561311c184a8cbc345ecdc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODUxNTAyNDcyZDM2MjU0MTZmMGU3Nzk2ZTlmMmEwMzc5ZDE0ZDQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6851502472d3625416f0e7796e9f2a0379d14d49",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6851502472d3625416f0e7796e9f2a0379d14d49",
      "tree": {
        "sha": "9dd95ba8351e778f1bf03aa3eb4b3629a098db40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dd95ba8351e778f1bf03aa3eb4b3629a098db40"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc1da48dc5e5526215561311c184a8cbc345ecdc",
          "sha": "dc1da48dc5e5526215561311c184a8cbc345ecdc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dc1da48dc5e5526215561311c184a8cbc345ecdc"
        }
      ],
      "message": "[refactor/test] Extract P2PTxInvStore into test framework",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-31T02:52:25Z"
      },
      "sha": "6851502472d3625416f0e7796e9f2a0379d14d49"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTdhMTc4NTM2MGM0ZGI2NjJhN2YzZDNhZGU3YjZiNTAzMjU4ZDM5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/297a1785360c4db662a7f3d3ade7b6b503258d39",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/297a1785360c4db662a7f3d3ade7b6b503258d39",
      "tree": {
        "sha": "57acebb7265e853b00a1272d8fb4873c4e1637a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57acebb7265e853b00a1272d8fb4873c4e1637a6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6851502472d3625416f0e7796e9f2a0379d14d49",
          "sha": "6851502472d3625416f0e7796e9f2a0379d14d49",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6851502472d3625416f0e7796e9f2a0379d14d49"
        }
      ],
      "message": "[test] Integration tests for unbroadcast functionality\n\nCheck that...\n- mempool tracks & reattempts delivery of a transaction where a GETDATA hasn't\n  been requested by a peer yet.\n- transaction delivery is not attempted again after GETDATA is received.\n- transaction is removed from the unbroadcast set when its removed from the\n  mempool.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:23:10Z"
      },
      "sha": "297a1785360c4db662a7f3d3ade7b6b503258d39"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGZjNGRmNmM0ZThhODRiZGRhMTNhZGU3YmVkN2EyMTMxNzk2ZjAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "tree": {
        "sha": "f30b5fa6cad650ce39e7259b5a71d8c5b28ae731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f30b5fa6cad650ce39e7259b5a71d8c5b28ae731"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/297a1785360c4db662a7f3d3ade7b6b503258d39",
          "sha": "297a1785360c4db662a7f3d3ade7b6b503258d39",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/297a1785360c4db662a7f3d3ade7b6b503258d39"
        }
      ],
      "message": "[mempool] Persist unbroadcast set to mempool.dat\n\nEnsure that the unbroadcast set will still be meaningful if the node is\nrestarted.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-03-17T17:39:25Z"
      },
      "sha": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3267036506,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI2NzAzNjUwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3267036506",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T21:48:14Z"
    },
    {
      "event": "commented",
      "id": 618702204,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODcwMjIwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618702204",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T22:22:54Z",
      "updated_at": "2020-04-23T22:22:54Z",
      "author_association": "MEMBER",
      "body": "ACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00, I think this is ready for merge now 👻\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00, I think this is ready for merge now 👻\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUirugv7BJubk3aTH2GX+7nvWrieZDFLtNjEb/auwRu/Jbr65RbmVDuMXLwYoOpJ\r\nGYTvWwFz24vA1SUvduymfoYx2wm2IoDlscWld3BHRQ7CLWN0pl5QZMmmaSEcIQ73\r\nGN+RxCSHC2rUlfHNlRa0z9ftsmxj4NXvITuC267Icm8ncxXRBUqAUI52Tdhoebhi\r\najCe4O0ELW8bm+QfhRQAZLDBEn9ozIkr1PF07GGpWK0l0ocXjJXvx9C6kh0Dk6/K\r\nTjag22/C9USANwlNQM5ylZQAFjIvg4NrCW5YNsosD9fGG48CwHEGGIsjZdK83HLp\r\n+b/RiVqdgUEy0xIMVA/h8rzg9WIrw1wF30N8ojifoIXksBy6xiOacNNWbjMyZl5k\r\nEwQe39TciWyiC4SavgApLaNEm2O89F1ioFdEOBSuD1zTvk0NhESUcBP2c0t/QA55\r\nX2EG6E1+QqXh2QHD4FxUY2Ilc3FYLoxjXtZn0hXeYvVVRt5WVjZ8lKCmHAsSQQSD\r\nuEtIKPHC\r\n=fzbr\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `a0ea0b9710aa41df23da3ac2e0fb074613017836932762a951df4f9384b87eae  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108a0ea0b9710aa41df23da3ac2e0fb074613017836932762a951df4f9384b87eaef0105025a8021dc2c2315d82d1f96dc2055108fff01046b71e4070b48b582eb70f06d2194bb308f1045ea21534f008ca729738be4b1c8e0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0108744f8f3a20804c399e58b313b89f62f08f1045ea21533f008877d2aebe4f45bd50083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010b327fd88d445d5b6e37878a59cb9920d08f1045ea21533f008a1b1d6736f96e9040083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010b8397b10e27c6b6d22896ce9c5dad31f08f1045ea21533f0085875f262085e79a10083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618702204",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "reviewed",
      "id": 399527313,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTI3MzEz",
      "url": null,
      "actor": null,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-399527313",
      "submitted_at": "2020-04-23T22:42:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "commented",
      "id": 618748286,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODc0ODI4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618748286",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T01:12:24Z",
      "updated_at": "2020-04-24T01:12:24Z",
      "author_association": "MEMBER",
      "body": "utACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618748286",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "commented",
      "id": 618968618,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODk2ODYxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618968618",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z",
      "updated_at": "2020-04-24T12:01:35Z",
      "author_association": "MEMBER",
      "body": "@fjahr @naumenkogs @jnewbery @ariard Maybe one more re-ACK to push this over the finish line? :pray: \r\n\r\nMerging this early gives more time to test while it is in master until the release of 0.21.0",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618968618",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3269103227,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2OTEwMzIyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103227",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "subscribed",
      "id": 3269103234,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjkxMDMyMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103234",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "mentioned",
      "id": 3269103239,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2OTEwMzIzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103239",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "subscribed",
      "id": 3269103243,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjkxMDMyNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103243",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "mentioned",
      "id": 3269103245,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2OTEwMzI0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103245",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "subscribed",
      "id": 3269103247,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjkxMDMyNDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103247",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "mentioned",
      "id": 3269103253,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2OTEwMzI1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103253",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "subscribed",
      "id": 3269103256,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjkxMDMyNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3269103256",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:01:35Z"
    },
    {
      "event": "reviewed",
      "id": 399945469,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTQ1NDY5",
      "url": null,
      "actor": null,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-399945469",
      "submitted_at": "2020-04-24T13:28:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "commented",
      "id": 619014282,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTAxNDI4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619014282",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T13:35:43Z",
      "updated_at": "2020-04-24T13:35:43Z",
      "author_association": "MEMBER",
      "body": "utACK 50fc4df",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-619014282",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "reviewed",
      "id": 400124132,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTI0MTMy",
      "url": null,
      "actor": null,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00\r\n\r\nminus the `disconnect_p2ps()` thing. I would be ok if you save ACKs and fix it in a follow-up since you have more work that builds on this anyway.\r\n\r\nNow that I understood it, very nice change! :) ",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-400124132",
      "submitted_at": "2020-04-24T17:11:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 400325919,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzI1OTE5",
      "url": null,
      "actor": null,
      "commit_id": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK 50fc4df (minor points no need to invalid other ACKs)\r\n\r\n> unfortunately, I don't have any real-life numbers of wallet rebroadcast usage for getting a transaction initially broadcast. I'd love relevant data. (anyone reading this... ) please let me know if you have any ideas of how I could get relevant info.\r\n\r\nUnless you run a spying node, that's going to be hard because if tx is still in network mempools it won't propagate again through the network, and even if you do you will still have to dissociate Core wallet from other ones. It's sadly doable by observing tx construction pattern but a lot of work. \r\n\r\n> wallet.dat could be stored externally, and without wallet logging enabled I don't think debug.log will indicate which transactions are yours. But like I said, I don't think it's a big concern.\r\n\r\nYou're likely `shrinkdebugfile` or trim your log regularly for host maintenance but that's not the same for mempool.dat, `unbroadcasted` is assumed to be short-lived should be a minor leak. There is still the edge case of you using a new mempool.dat with old node and `unbroadcasted` never going to be dry-up?",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-400325919",
      "submitted_at": "2020-04-25T00:23:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 400536876,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTM2ODc2",
      "url": null,
      "actor": null,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI think this is close. Thoughts:\r\n- ISTM https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571399346 should be mentioned up-front in the PR description as well as a co-author mention in the relevant commit\r\n- if the work in @ariard's commit 2d8ae9a838f5c6ec43db15a7bd36554c351b7442 was used, it would be kind to pull in the commit\r\n- the bug in the functional test cited by @fjahr is trivial to fix and re-ACK the diff and should probably be fixed without waiting for a follow-up\r\n- other comments follow below, feel free to pick and choose\r\n\r\nLast but not least, the resend timer has not been changed since e89b9f6a2ab e.g. way back to 2011 or earlier. It seems best to not rush, and to document and preserve the most salient points of the discussion in the code and tests.\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-400536876",
      "submitted_at": "2020-04-27T12:38:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "reviewed",
      "id": 402096591,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDk2NTkx",
      "url": null,
      "actor": null,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00.\r\n\r\nI've left a few small comments, but they're all just observations or suggestions for a follow-up PR. I think this is ready for merge.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-402096591",
      "submitted_at": "2020-04-28T19:33:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "commented",
      "id": 620881993,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDg4MTk5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/620881993",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:11:04Z",
      "updated_at": "2020-04-28T22:11:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you for the reviews everyone! 🙏 \r\n\r\nThe current tip `50fc4df` currently has 6 ACKs on it, so I've opened #18807 to address the last bits. \r\n\r\n@jonatack \r\n\r\n> ISTM #16698 (comment) should be mentioned up-front in the PR description as well as a co-author mention in the relevant commit\r\n\r\nI’ve updated the PR description to reflect this but I disagree that a co-author mention is necessary in this case. Crediting in-depth conceptual review would be quite a tall task given how helpful people are around here :) \r\n\r\n> if the work in @ariard’s commit 2d8ae9a was used, it would be kind to pull in the commit\r\n\r\nAgree here. I reached out to @ariard yesterday to ask if he’d like to be added as a co-author & expressed preferring not to invalidate the ACKs. \r\n\r\n> Last but not least, the resend timer has not been changed since e89b9f6 e.g. way back to 2011 or earlier. It seems best to not rush, and to document and preserve the most salient points of the discussion in the code and tests.\r\n\r\nI agree that we should not rush. We are changing a core behavior of the wallet and P2P around how transactions are being broadcast. Having critical review analyze different possible repercussions of this functionality is extremely important. So many thanks to all of the reviewers who have thought critically about these changes 🙌 \r\n\r\nI also agree in the value of documentation and testing. I have incorporated the outstanding feedback in the #18807 . I would strongly prefer not to consume reviewers’ time with a re-ACK so hoping further clean-up items can go there.\r\n",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-620881993",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "mentioned",
      "id": 3282320674,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI4MjMyMDY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3282320674",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:11:04Z"
    },
    {
      "event": "subscribed",
      "id": 3282320675,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyODIzMjA2NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3282320675",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:11:04Z"
    },
    {
      "event": "mentioned",
      "id": 3282320678,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI4MjMyMDY3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3282320678",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:11:04Z"
    },
    {
      "event": "subscribed",
      "id": 3282320679,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyODIzMjA2Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3282320679",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:11:04Z"
    },
    {
      "event": "mentioned",
      "id": 3282357062,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI4MjM1NzA2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3282357062",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:25:31Z"
    },
    {
      "event": "subscribed",
      "id": 3282357066,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyODIzNTcwNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3282357066",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:25:31Z"
    },
    {
      "event": "labeled",
      "id": 3282383522,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyODIzODM1MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3282383522",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T22:37:17Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 402392804,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzkyODA0",
      "url": null,
      "actor": null,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00\r\n\r\nGreat idea, thanks for working on this.  Also, thanks for structuring your commits in such an organized way; it made the PR incredibly nice to review!",
      "user": {
        "login": "robot-visions",
        "id": 63171930,
        "node_id": "MDQ6VXNlcjYzMTcxOTMw",
        "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-visions",
        "html_url": "https://github.com/robot-visions",
        "followers_url": "https://api.github.com/users/robot-visions/followers",
        "following_url": "https://api.github.com/users/robot-visions/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-visions/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-visions/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-visions/orgs",
        "repos_url": "https://api.github.com/users/robot-visions/repos",
        "events_url": "https://api.github.com/users/robot-visions/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-visions/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#pullrequestreview-402392804",
      "submitted_at": "2020-04-29T06:54:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
    },
    {
      "event": "merged",
      "id": 3283557675,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzI4MzU1NzY3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3283557675",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0ef0d33f7562c3b7f9c021549e70b3b4dbcc504c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef0d33f7562c3b7f9c021549e70b3b4dbcc504c",
      "created_at": "2020-04-29T08:33:55Z"
    },
    {
      "event": "closed",
      "id": 3283557709,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzI4MzU1NzcwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3283557709",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-29T08:33:56Z"
    },
    {
      "event": "referenced",
      "id": 3285264435,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODUyNjQ0MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3285264435",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7fc0f22e3dba2cd85e75d3d6f91d368b79c5da89",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7fc0f22e3dba2cd85e75d3d6f91d368b79c5da89",
      "created_at": "2020-04-29T15:49:52Z"
    },
    {
      "event": "commented",
      "id": 621429126,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTQyOTEyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/621429126",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-29T19:56:02Z",
      "updated_at": "2020-04-29T19:57:09Z",
      "author_association": "MEMBER",
      "body": "The rebroadcast behaviour changes for own wallets connected on the p2p interface, as opposed to local wallets or wallets connected on the rpc interface.\r\n\r\nFor context, see the IRC log: https://bitcoincore.reviews/18038.html",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-621429126",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18038"
    },
    {
      "event": "referenced",
      "id": 3362729861,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjI3Mjk4NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3362729861",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ad3a61c5f5c9eebff98ee59c8cc4612c1affa046",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad3a61c5f5c9eebff98ee59c8cc4612c1affa046",
      "created_at": "2020-05-21T23:52:10Z"
    },
    {
      "event": "referenced",
      "id": 3363325166,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjMzMjUxNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3363325166",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2c5b7d1147b0c78ab1e4dc3a7d31148a878260cd",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/2c5b7d1147b0c78ab1e4dc3a7d31148a878260cd",
      "created_at": "2020-05-22T05:44:32Z"
    },
    {
      "event": "referenced",
      "id": 3389867749,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzODk4Njc3NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3389867749",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "826fe9c667118cc48ef000cd76e395e4cad4d6c1",
      "commit_url": "https://api.github.com/repos/MarcoFalke/b-c/commits/826fe9c667118cc48ef000cd76e395e4cad4d6c1",
      "created_at": "2020-05-30T16:23:06Z"
    },
    {
      "event": "referenced",
      "id": 3390170931,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzOTAxNzA5MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3390170931",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e89c4bd9d2bda7e1434b58d3dec1015d8e07175e",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/e89c4bd9d2bda7e1434b58d3dec1015d8e07175e",
      "created_at": "2020-05-31T00:21:07Z"
    },
    {
      "event": "referenced",
      "id": 3428717497,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg3MTc0OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428717497",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "285bce192addfa7ee010825cb60e71f3a14f94d5",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/285bce192addfa7ee010825cb60e71f3a14f94d5",
      "created_at": "2020-06-10T09:23:39Z"
    },
    {
      "event": "referenced",
      "id": 3428717512,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg3MTc1MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428717512",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6d07be106f5d03fb4d5e93356f005e124fd829c4",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/6d07be106f5d03fb4d5e93356f005e124fd829c4",
      "created_at": "2020-06-10T09:23:40Z"
    },
    {
      "event": "referenced",
      "id": 3428717517,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg3MTc1MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428717517",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d2fddf6f43822069d858d2373e292fe143cb0fee",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/d2fddf6f43822069d858d2373e292fe143cb0fee",
      "created_at": "2020-06-10T09:23:40Z"
    },
    {
      "event": "referenced",
      "id": 3428984497,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg5ODQ0OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428984497",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69e7eee7a15bf6f5b0b199f425cded2b50b2c2af",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/69e7eee7a15bf6f5b0b199f425cded2b50b2c2af",
      "created_at": "2020-06-10T10:31:16Z"
    },
    {
      "event": "referenced",
      "id": 3428984509,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg5ODQ1MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428984509",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4abc92194d1639c149adc94ed846dbdfb443a1ae",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/4abc92194d1639c149adc94ed846dbdfb443a1ae",
      "created_at": "2020-06-10T10:31:16Z"
    },
    {
      "event": "referenced",
      "id": 3428984517,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg5ODQ1MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428984517",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1cf6ab1d173b4d3fafdb99f88c4b1fb4d19d9843",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/1cf6ab1d173b4d3fafdb99f88c4b1fb4d19d9843",
      "created_at": "2020-06-10T10:31:16Z"
    },
    {
      "event": "referenced",
      "id": 3448517802,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDg1MTc4MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3448517802",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0afbeb73ccb7523794e1e4a3422607c4423d1048",
      "commit_url": "https://api.github.com/repos/MarcoFalke/b-c/commits/0afbeb73ccb7523794e1e4a3422607c4423d1048",
      "created_at": "2020-06-16T11:27:24Z"
    },
    {
      "event": "referenced",
      "id": 3520730438,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MjA3MzA0Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3520730438",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7dda7c0a8c3808685d09b2f7ba9477bf62ac4dd9",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7dda7c0a8c3808685d09b2f7ba9477bf62ac4dd9",
      "created_at": "2020-07-07T14:28:17Z"
    },
    {
      "event": "referenced",
      "id": 3980858786,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTg3ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858786",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "990a3ee8c872de175cac0e6291ecc42fe8573371",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/990a3ee8c872de175cac0e6291ecc42fe8573371",
      "created_at": "2020-11-10T20:39:50Z"
    },
    {
      "event": "referenced",
      "id": 4169142645,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxNjkxNDI2NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4169142645",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c37600777eea9fc248ad0cffcc1a90df9af2410c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37600777eea9fc248ad0cffcc1a90df9af2410c",
      "created_at": "2021-01-05T10:49:41Z"
    },
    {
      "event": "referenced",
      "id": 4172320426,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxNzIzMjA0MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4172320426",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "80b94f53e066c37650862cda6ba42fbe203b1717",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/80b94f53e066c37650862cda6ba42fbe203b1717",
      "created_at": "2021-01-05T22:33:11Z"
    },
    {
      "event": "referenced",
      "id": 4233851221,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMzM4NTEyMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4233851221",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "674a222fdbabc744bc5b6c4c662de4a10096aca0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/674a222fdbabc744bc5b6c4c662de4a10096aca0",
      "created_at": "2021-01-21T14:46:03Z"
    },
    {
      "event": "referenced",
      "id": 4234614668,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMzQ2MTQ2Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4234614668",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9a88bcf4618eed854a1c9020bd100a3dc1469f3b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9a88bcf4618eed854a1c9020bd100a3dc1469f3b",
      "created_at": "2021-01-21T17:00:52Z"
    },
    {
      "event": "referenced",
      "id": 4234661952,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMzQ2NjE5NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4234661952",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0ea6595322805092cfb13a71b45aabce004614d6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/0ea6595322805092cfb13a71b45aabce004614d6",
      "created_at": "2021-01-21T17:11:10Z"
    },
    {
      "event": "referenced",
      "id": 4234760279,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMzQ3NjAyNzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4234760279",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "232939a30114a68a6578387c2f607fd6db383ba9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/232939a30114a68a6578387c2f607fd6db383ba9",
      "created_at": "2021-01-21T17:32:43Z"
    },
    {
      "event": "referenced",
      "id": 4234837418,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMzQ4Mzc0MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4234837418",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1167285f91079e8ec6a1a7bdeea7efb77a8028ee",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/1167285f91079e8ec6a1a7bdeea7efb77a8028ee",
      "created_at": "2021-01-21T17:50:09Z"
    },
    {
      "event": "locked",
      "id": 6073809799,
      "node_id": "LOE_lADOABII584hQVS3zwAAAAFqBvuH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073809799",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:34:09Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385368573",
      "pull_request_review_id": 365993014,
      "id": 385368573,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2ODU3Mw==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast\n+    std::set<uint256> m_unbroadcast_txids;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this not saved to disk? It seems that on restart this set is cleared regardless of whether the tx was sent out.",
      "created_at": "2020-02-27T21:00:46Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385368573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385368573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385795095",
      "pull_request_review_id": 365993014,
      "id": 385795095,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NTA5NQ==",
      "diff_hunk": "@@ -1590,6 +1590,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once a peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The comment is incorrect, since a tx is *not* removed when it is not sent, e.g. because it was not found.",
      "created_at": "2020-02-28T16:31:36Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385795095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385795542",
      "pull_request_review_id": 365993014,
      "id": 385795542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NTU0Mg==",
      "diff_hunk": "@@ -1590,6 +1590,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once a peer requests GETDATA for a txn, we deem initial broadcast a success\n+                int num = mempool.m_unbroadcast_txids.erase(inv.hash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is the tx not removed when it was initially sent out after 15 minutes, e.g. when it was removed from mapRelay and then relayed from the mempool.\r\n\r\nI think this code should go down into the `if(push)` branch",
      "created_at": "2020-02-28T16:32:32Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795542",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385795542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385795926",
      "pull_request_review_id": 365993014,
      "id": 385795926,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NTkyNg==",
      "diff_hunk": "@@ -416,6 +416,10 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    if (mempool.m_unbroadcast_txids.erase(hash)) {\n+        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before GETDATA was received. \\n\", hash.GetHex());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before tx was sent out. \\n\", hash.GetHex());\r\n```",
      "created_at": "2020-02-28T16:33:19Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385795926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385798846",
      "pull_request_review_id": 366530279,
      "id": 385798846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5ODg0Ng==",
      "diff_hunk": "@@ -2332,6 +2332,9 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery(std::bind(&CConnman::DumpAddresses, this), DUMP_PEERS_INTERVAL * 1000);\n \n+    // Attempt to broadcast transactions that have not yet been acknowledged by the network\n+    scheduler.scheduleEvery(std::bind(&CConnman::AttemptInitialBroadcast, this), REATTEMPT_BROADCAST_INTERVAL.count() );",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "1a1a30cc4adbbcccfbb073fbf8ae9df1090a2996",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    scheduler.scheduleEvery([]{this->AttemptInitialBroadcast();}, REATTEMPT_BROADCAST_INTERVAL.count() );\r\n```\r\n\r\n",
      "created_at": "2020-02-28T16:38:26Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385798846",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385798846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2336,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385818114",
      "pull_request_review_id": 366556224,
      "id": 385818114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxODExNA==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast\n+    std::set<uint256> m_unbroadcast_txids;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385368573,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "great point. originally I was thinking of doing as a follow up PR (see [here](https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba#follow-up-prs)), but now that this unbroadcast logic is broken out into its own PR I agree it makes sense here. I'll implement.",
      "created_at": "2020-02-28T17:15:38Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385818114",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385818114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385860440",
      "pull_request_review_id": 366607338,
      "id": 385860440,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MDQ0MA==",
      "diff_hunk": "@@ -1982,7 +1982,7 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    nNextResend = GetTime() + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is not frequency 1/day (as the PR post says). It's a value between 0 and 24 hours, with an average of 12 hours. You probably want to do 12*60*60 + GetRand(12*60*60) or something like that?",
      "created_at": "2020-02-28T18:44:44Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385860440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385860440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385865086",
      "pull_request_review_id": 366607338,
      "id": 385865086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2NTA4Ng==",
      "diff_hunk": "@@ -780,6 +780,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){\n+        CInv inv(MSG_TX, txid);\n+        pnode->PushInventory(inv);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How do you know that it won't be rejected due to \"filterInventoryKnown\"?\r\nWhat is the rationale here?",
      "created_at": "2020-02-28T18:54:54Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385865086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385865086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386613286",
      "pull_request_review_id": 367480404,
      "id": 386613286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzI4Ng==",
      "diff_hunk": "@@ -780,6 +780,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){\n+        CInv inv(MSG_TX, txid);\n+        pnode->PushInventory(inv);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385865086,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It might. Which upholds the same guarantees as the previous logic it's replacing.\r\n\r\nOn current master, wallet transactions get rebroadcast through a scheduler flow that makes its way to `ResendWalletTransactions`, which selects transactions to rebroadcast then invokes `SubmitMemoryPoolAndRelay`. This goes to `BroadcastTransaction`, which checks ATMP then relays via `RelayTransaction`, which uses the `CNode#PushInventory` function that only adds the hash if its not contained in `filterInventoryKnown`. \r\n\r\nThis PR changes the initial parts of the flow... so `BroadcastTransaction` adds the transaction to `mempool.m_unbroadcast_txids`, then there is a scheduled job to periodically `AttemptInitialBroadcast`, but the behavior is matched where the locally-submitted transactions would be reattempted to send to the network, filtered for the connections that were already tried, and sent out to new connections.\r\n\r\nChanging that behavior could be desirable for robustness but of course reduces privacy. So out of scope for this PR. If you think it may be desirable, I'd be happy to think it through / talk about it more, we can open a new issue. (I'm working on the assumption that current delivery guarantees are sufficient). ",
      "created_at": "2020-03-02T19:50:48Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r386613286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386613286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386732669",
      "pull_request_review_id": 367627078,
      "id": 386732669,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMjY2OQ==",
      "diff_hunk": "@@ -1982,7 +1982,7 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    nNextResend = GetTime() + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385860440,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`12*60*60 + GetRand(12*60*60)` would get an average of 24 hours with a range of 12-36",
      "created_at": "2020-03-03T00:27:53Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r386732669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386732669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386781925",
      "pull_request_review_id": 367683008,
      "id": 386781925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4MTkyNQ==",
      "diff_hunk": "@@ -1590,6 +1590,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once a peer requests GETDATA for a txn, we deem initial broadcast a success\n+                int num = mempool.m_unbroadcast_txids.erase(inv.hash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": 385795542,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you are right, this is a mistake. thanks 🙏🏽",
      "created_at": "2020-03-03T03:33:35Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r386781925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386781925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387124518",
      "pull_request_review_id": 368110911,
      "id": 387124518,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDUxOA==",
      "diff_hunk": "@@ -1982,7 +1982,7 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    nNextResend = GetTime() + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385860440,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ajtowns yeah, that's what would be closer to 1/day, right? Not sure what you meant to say.",
      "created_at": "2020-03-03T16:07:11Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387124518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387124518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387131829",
      "pull_request_review_id": 368120220,
      "id": 387131829,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTgyOQ==",
      "diff_hunk": "@@ -780,6 +780,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){\n+        CInv inv(MSG_TX, txid);\n+        pnode->PushInventory(inv);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385865086,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah I see. Just want to be clear that if the network is not really used, the bloom filter doesn't roll and transaction may be not rebroadcast in days.\r\nIf that's what you have in mind when designing the whole thing, let's just leave a comment that this can happen.",
      "created_at": "2020-03-03T16:17:25Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387131829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387131829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387426782",
      "pull_request_review_id": 368478382,
      "id": 387426782,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjc4Mg==",
      "diff_hunk": "@@ -1982,7 +1982,7 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    nNextResend = GetTime() + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385860440,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh my god. `12*60*60 + GetRand(24*60*60)` was what I was trying to type; min of 12h, max of 36h, average of 24h.",
      "created_at": "2020-03-04T03:08:30Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387426782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387426782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387431128",
      "pull_request_review_id": 368483385,
      "id": 387431128,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMTEyOA==",
      "diff_hunk": "@@ -780,6 +780,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){\n+        CInv inv(MSG_TX, txid);\n+        pnode->PushInventory(inv);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385865086,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `filterInventoryKnown` is per-peer though, so it just won't be rebroadcast to a peer that already knew about it somehow; but it'll stay in the unbroadcast set and be retried for other peers until a getdata actually makes its way through (or until it gets dropped from the mempool)? If all of your peers ignore your INV and don't request a GETDATA, you'll not send more INVs until you find a new peer, but... even if you did, those peers would probably still not send a GETDATA anyway, so what else would you do?",
      "created_at": "2020-03-04T03:28:20Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387431128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387431128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387431682",
      "pull_request_review_id": 368484015,
      "id": 387431682,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMTY4Mg==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast\n+    std::set<uint256> m_unbroadcast_txids;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385368573,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_unbroadcast_txids` declaration is missing the `GUARDED_BY(cs)` thread safety annotation, and I think the errors adding that turns up indicates there's more locking needed which probably explains the node segfaulting in travis.",
      "created_at": "2020-03-04T03:30:54Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387431682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387431682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387662775",
      "pull_request_review_id": 366530279,
      "id": 387662775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2Mjc3NQ==",
      "diff_hunk": "@@ -48,6 +48,9 @@ static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\"\n // Dump addresses to peers.dat every 15 minutes (900s)\n static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;\n \n+// Attempt initial broadcast of locally submitted txns every 10 minutes.\n+static constexpr std::chrono::milliseconds REATTEMPT_BROADCAST_INTERVAL = std::chrono::milliseconds(10 * 60 * 1000);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While I couldn't come up with a privacy-leaking attack based on this being a constant, I'd still suggest to make the delay random to avoid network-wide synchronized events that don't need to be synchronized",
      "created_at": "2020-03-04T13:24:02Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387662775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387662775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387705673",
      "pull_request_review_id": 368828617,
      "id": 387705673,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNTY3Mw==",
      "diff_hunk": "@@ -1982,7 +1982,7 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    nNextResend = GetTime() + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385860440,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, I think we should do what you just suggested.",
      "created_at": "2020-03-04T14:35:45Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387705673",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387705673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387750082",
      "pull_request_review_id": 368886517,
      "id": 387750082,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1MDA4Mg==",
      "diff_hunk": "@@ -780,6 +780,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){\n+        CInv inv(MSG_TX, txid);\n+        pnode->PushInventory(inv);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385865086,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe it's the naming that confuses me. It's called \"rebroadcast\", not \"consider to rebroadcast\".\r\n>even if you did, those peers would probably still not send a GETDATA anyway\r\n\r\nNot sure about that. If transaction expires from a mempool, and there's not much activity on-chain, filter would still prevent us from re-announcing it. The correspondence between the two is questionable.\r\n\r\nBut yeah, if that's only my own confusion, I don't care about just keeping it this way without any comments.\r\n\r\n",
      "created_at": "2020-03-04T15:40:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387750082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387750082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393293074",
      "pull_request_review_id": 375561005,
      "id": 393293074,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MzA3NA==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast\n+    std::set<uint256> m_unbroadcast_txids;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Have you weighted implications of wtxid-relay (#18044) ? I think you will need to track both txid/wtxid for backward-compability with non-upgraded nodes.",
      "created_at": "2020-03-16T20:31:56Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393293074",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393293074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393297027",
      "pull_request_review_id": 375561005,
      "id": 393297027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NzAyNw==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"periodically (REATTEMPT_BROADCAST_INTERVAL)\"",
      "created_at": "2020-03-16T20:40:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393297027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393297027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393946770",
      "pull_request_review_id": 376376840,
      "id": 393946770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0Njc3MA==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "3d185eda3c6d449e080b749acfb4986e6f88e203",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is the best option I've been able to identify for how to check if we are at the end of the file. would love to hear about any cleaner solutions.",
      "created_at": "2020-03-17T20:22:46Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393946770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393946770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5053,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393955311",
      "pull_request_review_id": 376387657,
      "id": 393955311,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NTMxMQ==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast\n+    std::set<uint256> m_unbroadcast_txids;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385368573,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "- added logic to save unbroadcast set to disk\r\n- added thread safety annotation & missing locks from lots of call sites 😛\r\n\r\nthank you both for this feedback 🙏🏽\r\nwould love further review on the added logic ",
      "created_at": "2020-03-17T20:39:14Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393955311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393955311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393957572",
      "pull_request_review_id": 376390280,
      "id": 393957572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NzU3Mg==",
      "diff_hunk": "@@ -1590,6 +1590,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once a peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": 385795095,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't fully understand what you mean here. Are you pointing out that there are other ways the transaction gets removed from the set?\r\n\r\nI updated to: \"We intepret processing a GETDATA for a transaction as a successful initial broadcast and remove it from our unbroadcast set.\" \r\n\r\nDoes that seem reasonable? Or am I still missing the point? \r\n",
      "created_at": "2020-03-17T20:43:04Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393957572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393957572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393957842",
      "pull_request_review_id": 376390633,
      "id": 393957842,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Nzg0Mg==",
      "diff_hunk": "@@ -1590,6 +1590,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once a peer requests GETDATA for a txn, we deem initial broadcast a success\n+                int num = mempool.m_unbroadcast_txids.erase(inv.hash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": 385795542,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed. Thanks again.",
      "created_at": "2020-03-17T20:43:33Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393957842",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393957842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393959353",
      "pull_request_review_id": 376392446,
      "id": 393959353,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1OTM1Mw==",
      "diff_hunk": "@@ -416,6 +416,10 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    if (mempool.m_unbroadcast_txids.erase(hash)) {\n+        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before GETDATA was received. \\n\", hash.GetHex());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": 385795926,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I updated it to \"from m_unbroadcast_txids before confirmation that txn was sent out\", but I feel uncertain... saying \"before GETDATA was received\" seems more clear & specific than \"confirmation that txn was sent out\". Could you explain further why you didn't like it? \r\n\r\nis this related to [this](https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795095)?",
      "created_at": "2020-03-17T20:46:24Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393959353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393959353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393961149",
      "pull_request_review_id": 376394643,
      "id": 393961149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2MTE0OQ==",
      "diff_hunk": "@@ -1982,7 +1982,7 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    nNextResend = GetTime() + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385860440,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated.\r\n\r\nfunny to update the code to match the comment language rather than vice versa 😛 but I don't have a strong preference around 12-36hrs vs 0-24hrs, both have small tradeoffs. ",
      "created_at": "2020-03-17T20:49:44Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393961149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393961149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393968358",
      "pull_request_review_id": 376402597,
      "id": 393968358,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2ODM1OA==",
      "diff_hunk": "@@ -780,6 +780,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){\n+        CInv inv(MSG_TX, txid);\n+        pnode->PushInventory(inv);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 385865086,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Maybe it's the naming that confuses me. It's called \"rebroadcast\", not \"consider to rebroadcast\".\r\n\r\nthe language I'm introducing is \"unbroadcast\", which means consider it as initial broadcast. but there are these interactions with `filterInventoryKnown` to consider in different cases. \r\n\r\nI added some comments [here](https://github.com/bitcoin/bitcoin/pull/18038/files#diff-eff7adeaec73a769788bb78858815c91R782) in an attempt to make this more apparent. \r\n\r\ngoing to resolve this conversation, but @naumenkogs let me know if you think this is something we need to more carefully consider in regards to this PR. ",
      "created_at": "2020-03-17T21:01:56Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393968358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393968358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393982029",
      "pull_request_review_id": 376419558,
      "id": 393982029,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4MjAyOQ==",
      "diff_hunk": "@@ -1605,7 +1622,21 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {\n+                int num = 0;\n+\n+                // We intepret processing a GETDATA for a transaction as a successful initial broadcast\n+                // and remove it from our unbroadcast set.\n+                {\n+                    LOCK(mempool.cs);\n+                    num = mempool.m_unbroadcast_txids.erase(inv.hash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "3d185eda3c6d449e080b749acfb4986e6f88e203",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Needs rebase to make the `const CTxMemPool&` non-const",
      "created_at": "2020-03-17T21:30:03Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393982029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393982029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1633,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393995780",
      "pull_request_review_id": 376435905,
      "id": 393995780,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTc4MA==",
      "diff_hunk": "@@ -2332,6 +2332,9 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery(std::bind(&CConnman::DumpAddresses, this), DUMP_PEERS_INTERVAL * 1000);\n \n+    // Attempt to broadcast transactions that have not yet been acknowledged by the network\n+    scheduler.scheduleEvery(std::bind(&CConnman::AttemptInitialBroadcast, this), REATTEMPT_BROADCAST_INTERVAL.count() );",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "1a1a30cc4adbbcccfbb073fbf8ae9df1090a2996",
      "in_reply_to_id": 385798846,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated. although I was surprised to find out I had to pass \"this\" through in the capture list. ",
      "created_at": "2020-03-17T22:00:51Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393995780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393995780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2336,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394003478",
      "pull_request_review_id": 376445015,
      "id": 394003478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzQ3OA==",
      "diff_hunk": "@@ -48,6 +48,9 @@ static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\"\n // Dump addresses to peers.dat every 15 minutes (900s)\n static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;\n \n+// Attempt initial broadcast of locally submitted txns every 10 minutes.\n+static constexpr std::chrono::milliseconds REATTEMPT_BROADCAST_INTERVAL = std::chrono::milliseconds(10 * 60 * 1000);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ddec88f59b32928495767daa548dc41558d56c",
      "in_reply_to_id": 387662775,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, I thought through the possible privacy leaks but didn't think about weird circumstances that could lead to synchronized network-wide events. \r\n\r\nupdated reattempts to be between 10-15 minutes, chosen every time a node starts up.",
      "created_at": "2020-03-17T22:20:12Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394003478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394003478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394005374",
      "pull_request_review_id": 376447137,
      "id": 394005374,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNTM3NA==",
      "diff_hunk": "@@ -1605,7 +1622,21 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {\n+                int num = 0;\n+\n+                // We intepret processing a GETDATA for a transaction as a successful initial broadcast\n+                // and remove it from our unbroadcast set.\n+                {\n+                    LOCK(mempool.cs);\n+                    num = mempool.m_unbroadcast_txids.erase(inv.hash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "3d185eda3c6d449e080b749acfb4986e6f88e203",
      "in_reply_to_id": 393982029,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks!",
      "created_at": "2020-03-17T22:24:54Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394005374",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394005374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1633,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394006471",
      "pull_request_review_id": 376448339,
      "id": 394006471,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjQ3MQ==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast\n+    std::set<uint256> m_unbroadcast_txids;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": 393293074,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, good point. will think this through. thanks! ",
      "created_at": "2020-03-17T22:27:44Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394006471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394006471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394006704",
      "pull_request_review_id": 376449063,
      "id": 394006704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjcwNA==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": 393297027,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "going to pass on this one, especially since I removed the constant for some variability in intervals.",
      "created_at": "2020-03-17T22:28:21Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394006704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394006704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394440617",
      "pull_request_review_id": 376984420,
      "id": 394440617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0MDYxNw==",
      "diff_hunk": "@@ -1605,7 +1605,21 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {\n+                int num = 0;\n+\n+                // We intepret processing a GETDATA for a transaction as a successful initial broadcast\n+                // and remove it from our unbroadcast set.\n+                {\n+                    LOCK(mempool.cs);\n+                    num = mempool.m_unbroadcast_txids.erase(inv.hash);\n+                }\n+\n+                if (num) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "77748da2269bd7f2304ebc3b8616d3a584e7c65f",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 77748da2269bd7f2304ebc3b8616d3a584e7c65f:\r\n\r\nCan be written shorter as\r\n```suggestion\r\n                if (WITH_LOCK(mempool.cs, return mempool.m_unbroadcast_txids.erase(inv.hash);)) {\r\n```",
      "created_at": "2020-03-18T15:36:32Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394440617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394440617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1631,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394443323",
      "pull_request_review_id": 376984420,
      "id": 394443323,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0MzMyMw==",
      "diff_hunk": "@@ -78,6 +78,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool tracks locally submitted transactions to make a\n+        // best-effort of initial broadcast\n+        WITH_LOCK(mempool.cs, mempool.m_unbroadcast_txids.insert(hashTx));",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "77748da2269bd7f2304ebc3b8616d3a584e7c65f",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 77748da:\r\n\r\nPlease use `node.mempool` and not the global",
      "created_at": "2020-03-18T15:40:03Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394443323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394443323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394455686",
      "pull_request_review_id": 376984420,
      "id": 394455686,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NTY4Ng==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 2f3f449dc9c89420a444cc8263c5a5fe537a475b:\r\n\r\nI still haven't figured out  a way to exploit this for privacy leaks, but making each node pick a unique fingerprint (heartbeat between 10-15 minutes) doesn't seem too great. Sometimes nodes offer a tor p2p interface and a clearnet p2p interface and ideally those should be uncorrelated. Obviously horribly broken in the current p2p implementation, but we shouldn't make it worse, I think.\r\n\r\nSo what do you think about just scheduling this once here and then reschedule this at the end of the `AttemptInitialBroadcast` function?\r\n\r\nSomething like\r\n\r\n```cpp\r\nvoid CConnman::ScheduleNextInitialBroadcast(CScheduler& s) const\r\n{\r\n const auto delta = std::chrono::minutes{10} + GetRandMicros(std::chrono::minutes{5});\r\n s.schedule([&]{this->AttemptInitialBroadcast(s);}, delta);\r\n}",
      "created_at": "2020-03-18T15:55:31Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394455686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394455686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394459225",
      "pull_request_review_id": 376984420,
      "id": 394459225,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1OTIyNQ==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.\n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 2f3f449dc9c89420a444cc8263c5a5fe537a475b:\r\n\r\nstyle nit. Can be a reference because it is never null\r\n```suggestion\r\nvoid PeerLogicValidation::QueueUnbroadcastTxs(CNode& pnode)\r\n```",
      "created_at": "2020-03-18T15:59:39Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394459225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394459225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394459527",
      "pull_request_review_id": 376984420,
      "id": 394459527,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1OTUyNw==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.\n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    LOCK(mempool.cs);\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 2f3f449dc9c89420a444cc8263c5a5fe537a475b:\r\n\r\nPlease use m_mempool and not the global.",
      "created_at": "2020-03-18T16:00:01Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394459527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394459527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394470334",
      "pull_request_review_id": 376984420,
      "id": 394470334,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3MDMzNA==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 2f3f449:\r\n\r\nI don't understand this comment, why would it have weaker delivery guarantees? Is it the bloom filter false positive rate?",
      "created_at": "2020-03-18T16:14:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394470334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394470334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394470902",
      "pull_request_review_id": 376984420,
      "id": 394470902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3MDkwMg==",
      "diff_hunk": "@@ -75,7 +75,8 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n+    /** Retrieve unbroadcast transactions from the mempool and possibly send to pnode */\n+    void QueueUnbroadcastTxs(CNode* pnode) override;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 2f3f449:\r\n\r\nCan be const?\r\n\r\n```suggestion\r\n    void QueueUnbroadcastTxs(CNode& node) const override;\r\n```",
      "created_at": "2020-03-18T16:15:44Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394470902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394470902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394474255",
      "pull_request_review_id": 376984420,
      "id": 394474255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NDI1NQ==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\r\n\r\nStyle nit. Could add trailing comma for symmetry, git blame, and code formatters?\r\n\r\n```suggestion\r\n        hex_str_to_bytes,\r\n```",
      "created_at": "2020-03-18T16:20:35Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394474255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394474255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394475575",
      "pull_request_review_id": 376984420,
      "id": 394475575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NTU3NQ==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 62,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\r\n\r\nI think assert is a statement, not a function, so should be without `()`\r\n```suggestion\r\n        assert wallet_tx_hsh not in mempool\r\n```",
      "created_at": "2020-03-18T16:22:27Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394475575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394475575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394476596",
      "pull_request_review_id": 376984420,
      "id": 394476596,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NjU5Ng==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 64,
      "original_position": 64,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\r\n\r\nCould do the same test again with a `self.nodes[0].restart_node()` added here?\r\n\r\nThis way it will test to persist txs on disk.",
      "created_at": "2020-03-18T16:23:54Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394476596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394476596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394478852",
      "pull_request_review_id": 376984420,
      "id": 394478852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3ODg1Mg==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15*60) # 15 min in seconds\n+        wait_until(lambda: len(self.nodes[1].getrawmempool()) == 2, timeout=30)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 69,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\r\n\r\nCan be shorter, because self.sync_mempools() does the same, I think\r\n```suggestion\r\n        self.sync_mempools()\r\n```",
      "created_at": "2020-03-18T16:27:01Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394478852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394478852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394480786",
      "pull_request_review_id": 376984420,
      "id": 394480786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4MDc4Ng==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15*60) # 15 min in seconds\n+        wait_until(lambda: len(self.nodes[1].getrawmempool()) == 2, timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh in mempool)\n+        assert(wallet_tx_hsh in mempool)\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15*60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        # create a transaction & submit to node\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        utxo = utxos.pop()\n+        outputs = { node.getnewaddress() : 0.0001 }\n+        inputs = [{'txid': utxo['txid'], 'vout': utxo['vout']}]\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        txhsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # mine a block with that transaction\n+        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1))\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signed_tx['hex'])))\n+        block.vtx.append(tx)\n+        block.rehash()\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        node.submitblock(ToHex(block))",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 107,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit f40f687:\r\n\r\nDoes the block need to be created manually? What about a simple two-liner?\r\n\r\n```\r\nself.nodes[0].sendtoaddress()\r\nself.nodes[0].generate(1)\r\n```\r\n\r\nAlternatively, if you want to test both wallet txs and rpc txs, you could factor out the tx-creation code from the previous test case into a new helper function and call it here.",
      "created_at": "2020-03-18T16:29:47Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394480786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394480786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394483205",
      "pull_request_review_id": 376984420,
      "id": 394483205,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4MzIwNQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71:\r\n\r\nWhy is this needed?\r\n\r\nI think you can just go ahead and assume that the set was serialized. If it wasn't it will result in a one-time `LogPrintf` that the mempool data couldn't be deserialized. I think this is fine if it is mentioned in the release notes or as a code comment or not at all.",
      "created_at": "2020-03-18T16:33:27Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394483205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394483205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394502466",
      "pull_request_review_id": 377062629,
      "id": 394502466,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjQ2Ng==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394455686,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Although this is supposed to happen extremely rare, I think Marco's comment is very valid. I agree with his suggestion.",
      "created_at": "2020-03-18T17:01:38Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394502466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394502466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394518591",
      "pull_request_review_id": 377083258,
      "id": 394518591,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODU5MQ==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394474255,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@amitiuttarwar Since this is a new file, you might want to run [`black`](https://black.readthedocs.io/en/stable/) on the entire file to get proper formatting which addresses MarcoFalke's nit and all other formatting nits :)",
      "created_at": "2020-03-18T17:26:33Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394518591",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394518591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394518928",
      "pull_request_review_id": 377083258,
      "id": 394518928,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODkyOA==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 62,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394475575,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@amitiuttarwar Same goes for this one: `black` on the entire file to get proper formatting for free :)",
      "created_at": "2020-03-18T17:27:02Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394518928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394518928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394540166",
      "pull_request_review_id": 377110505,
      "id": 394540166,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MDE2Ng==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394474255,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@practicalswift \r\nStyle is subjective and we allow the pull request author to pick the style, as long as it is reasonable. We don't require a specific python formatter. While black or yapf (https://github.com/bitcoin/bitcoin/blob/master/.style.yapf) or the built-in formatter of your editor can be used, they are not mandatory.",
      "created_at": "2020-03-18T18:01:03Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394540166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394540166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394608061",
      "pull_request_review_id": 377195882,
      "id": 394608061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwODA2MQ==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394474255,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@MarcoFalke Have I claimed anything else? :)  This is _your_ style nit - I'm just suggesting a way to address it automatically :)",
      "created_at": "2020-03-18T20:05:30Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394608061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394608061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395248783",
      "pull_request_review_id": 378004299,
      "id": 395248783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0ODc4Mw==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See https://github.com/ariard/bitcoin/commit/2d8ae9a838f5c6ec43db15a7bd36554c351b7442, I find a bit weird to schedule a mempool task from connection manager instead of message processing layer. It should achieve the same goal while removing one new method (or have you already considered this and turn away for a good reason) ?",
      "created_at": "2020-03-19T18:52:25Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r395248783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395248783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396720480",
      "pull_request_review_id": 379776210,
      "id": 396720480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDQ4MA==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394470334,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no, simpler.. just mean some transactions will get filtered & not relayed because of `filterInventoryKnown`. this was a result of the confusion & conversation in https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385865086. \r\n\r\nbut maybe without that context this comment is misleading? appreciate any feedback on how to clarify. right now I'm thinking of just deleting the second paragraph. ",
      "created_at": "2020-03-23T19:57:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r396720480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396720480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396721669",
      "pull_request_review_id": 379777685,
      "id": 396721669,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMTY2OQ==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394470334,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why would `filterInventoryKnown` return a match when the transaction was initially never sent out to that peer?",
      "created_at": "2020-03-23T19:59:40Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r396721669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396721669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396788390",
      "pull_request_review_id": 379861725,
      "id": 396788390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4ODM5MA==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394470334,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "eg. if you disconnect wifi & submit a txn to your mempool. code will add to the bloom filters but the transaction never actually went anywhere ",
      "created_at": "2020-03-23T22:13:42Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r396788390",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396788390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397477029",
      "pull_request_review_id": 380715909,
      "id": 397477029,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3NzAyOQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "so, are you proposing \r\n- remove writing the boolean `has_unbroadcast_txns` to the file [here](https://github.com/bitcoin/bitcoin/pull/18038/files#diff-24efdb00bfbe56b140fb006b562cc70bR5121)\r\n- remove try block above, just leave the `file>>pool.m_unbroadcast_txids;` code below \r\n- if there are no `m_unbroadcast_txids`, there will be a `LogPrintf` that \"Failed to deserialize mempool data on disk. Continuing anyway\", and code moves on? \r\n\r\nif I am interpreting correctly.... I find that to be very misleading user output. And I'd expect it to happen frequently since the unbroadcast set is more of a safety mechanism and hopefully nodes aren't often shutting down without their local transactions being broadcast to the network. So I'm not really seeing the reasoning / benefits. But maybe I'm misunderstanding your suggestion.",
      "created_at": "2020-03-24T21:38:06Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397477029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397477029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397535101",
      "pull_request_review_id": 380779869,
      "id": 397535101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTEwMQ==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394455686,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah great point. p2p fingerprints are never good. thanks for pointing out. \r\n\r\nhaving `AttemptInitialBroadcast` call `ScheduleNextInitialBroadcast` to schedule the next `AttemptInitialBroadcast` seems a bit much to me (and I'd have to pass the scheduler through anyways), so I'll just schedule the next invocation at the end of the function itself. ",
      "created_at": "2020-03-25T00:05:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397535101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397535101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397536773",
      "pull_request_review_id": 380781575,
      "id": 397536773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjc3Mw==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The logprint should only happen on node update. A serialized empty set is hopefully different from no serialized set.",
      "created_at": "2020-03-25T00:11:11Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397536773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397536773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397537337",
      "pull_request_review_id": 380782148,
      "id": 397537337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNzMzNw==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/5236b2e267a58870239673c7ec85e5df0cb8fc8e/src/serialize.h#L972",
      "created_at": "2020-03-25T00:12:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397537337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397537337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397549618",
      "pull_request_review_id": 380795029,
      "id": 397549618,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTYxOA==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, so in normal case we'll get this error once: when the node is updated to use this code, and attempts to use the file from previous runs. Which is, yeah, not ideal, but probably fine.\r\nIf you'd really want to avoid that, I'd rather add versioning of the file, rather than having bools like that you suggest.\r\n(See how we do versioning in peers.dat AddrMan serialization if interested)",
      "created_at": "2020-03-25T00:55:31Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397549618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397549618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397914899",
      "pull_request_review_id": 381222756,
      "id": 397914899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDg5OQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This file is already versioned, but the version shouldn't be bumped because that will silently drop *all* transactions of the mempool",
      "created_at": "2020-03-25T14:49:41Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397914899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397914899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397970619",
      "pull_request_review_id": 381293207,
      "id": 397970619,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MDYxOQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why does it have to drop all transactions? The new code can just be aware of the previous version, and not attempt to read unbroadcast_txs in that case, but just carefully read all old transactions (the advantage over this current PR is that no error is thrown/logged).",
      "created_at": "2020-03-25T15:58:40Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397970619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397970619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397982629",
      "pull_request_review_id": 381307997,
      "id": 397982629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4MjYyOQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Why does it have to drop all transactions?\r\n\r\nWhen bumping the version here and assuming the code is merged into 0.21.0, then reading a mempool.dat created by Bitcoin Core 0.21.0 will fail completely on a Bitcoin Core 0.20.0, because the code is already released and the logic of that code is to drop all transactions when the version is not equal to 1.",
      "created_at": "2020-03-25T16:14:03Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397982629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397982629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397986621",
      "pull_request_review_id": 381312926,
      "id": 397986621,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4NjYyMQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "True. But who would use a mempool.dat from 0.21 on 0.20 node? I would say the most common scenario is opposite, upgrading from 0.20 to 0.21.",
      "created_at": "2020-03-25T16:19:19Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397986621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397986621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397989382",
      "pull_request_review_id": 381316387,
      "id": 397989382,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4OTM4Mg==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Miners might want to upgrade, test the new version for a bit and then downgrade temporarily because they noticed an RPC breaking change. They should be able to continue mining on the txs they had before. For many users, a version upgrade/downgrade is the only time they restart the node. So this is the only time when this code is run and can provide them with value. If the code fails to be useful in the only use-case we might as well remove it altogether. ;)",
      "created_at": "2020-03-25T16:22:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397989382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397989382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397990626",
      "pull_request_review_id": 381317881,
      "id": 397990626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MDYyNg==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you guys think that a try-catch is useful to avoid the debug LogPrint, fine. I am ok with that too. But I don't see a reason for this boolean.",
      "created_at": "2020-03-25T16:24:34Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397990626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397990626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397996259",
      "pull_request_review_id": 381324723,
      "id": 397996259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NjI1OQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also don't see a good reason for this boolean.",
      "created_at": "2020-03-25T16:31:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397996259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397996259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398190554",
      "pull_request_review_id": 381561194,
      "id": 398190554,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5MDU1NA==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok! I'm following now. I wasn't aware of the serialization logic. I'll remove the bool & try-catch as well. thanks!",
      "created_at": "2020-03-25T21:47:21Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398190554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398190554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398192894",
      "pull_request_review_id": 381563859,
      "id": 398192894,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5Mjg5NA==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 395248783,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is awesome! thanks for the patch. I was also realizing there's a simpler flow via `RelayTransaction`, but I agree that kicking off the process in `PeerLogicValidation` constructor makes more sense conceptually than `CConnman::Start`. Also I like your rename to `ReattemptInitialBroadcast`, small change but makes intentions more obvious. Thank you! 🙏🏽",
      "created_at": "2020-03-25T21:52:07Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398192894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398192894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398637924",
      "pull_request_review_id": 382092222,
      "id": 398637924,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNzkyNA==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 395248783,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed nice patch @ariard ",
      "created_at": "2020-03-26T14:56:13Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398637924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398637924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398721924",
      "pull_request_review_id": 382197900,
      "id": 398721924,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyMTkyNA==",
      "diff_hunk": "@@ -1605,7 +1605,21 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {\n+                int num = 0;\n+\n+                // We intepret processing a GETDATA for a transaction as a successful initial broadcast\n+                // and remove it from our unbroadcast set.\n+                {\n+                    LOCK(mempool.cs);\n+                    num = mempool.m_unbroadcast_txids.erase(inv.hash);\n+                }\n+\n+                if (num) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "77748da2269bd7f2304ebc3b8616d3a584e7c65f",
      "in_reply_to_id": 394440617,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "pass on this one. the `num` var gets compiled out regardless, and I personally think its much clearer to have it broken out, and helps indicate that erasing returns a number thats evaluated for the if statement",
      "created_at": "2020-03-26T16:41:11Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398721924",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398721924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1631,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398722015",
      "pull_request_review_id": 382198019,
      "id": 398722015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyMjAxNQ==",
      "diff_hunk": "@@ -78,6 +78,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool tracks locally submitted transactions to make a\n+        // best-effort of initial broadcast\n+        WITH_LOCK(mempool.cs, mempool.m_unbroadcast_txids.insert(hashTx));",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "77748da2269bd7f2304ebc3b8616d3a584e7c65f",
      "in_reply_to_id": 394443323,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed ",
      "created_at": "2020-03-26T16:41:20Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398722015",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398722015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398722892",
      "pull_request_review_id": 382199085,
      "id": 398722892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyMjg5Mg==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394455686,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed. thanks!",
      "created_at": "2020-03-26T16:42:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398722892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398722892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398724101",
      "pull_request_review_id": 382200605,
      "id": 398724101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNDEwMQ==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.\n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394459225,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "method no longer exists, but pass by reference for `ReattemptInitialBroadcast`",
      "created_at": "2020-03-26T16:44:06Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398724101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398724101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398724543",
      "pull_request_review_id": 382201094,
      "id": 398724543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNDU0Mw==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.\n+void PeerLogicValidation::QueueUnbroadcastTxs(CNode* pnode)\n+{\n+    LOCK(mempool.cs);\n+    for(const uint256& txid : mempool.m_unbroadcast_txids){",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394459527,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "method no longer exists, but fixed in `ReattemptInitialBroadcast`",
      "created_at": "2020-03-26T16:44:38Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398724543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398724543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398726113",
      "pull_request_review_id": 382203055,
      "id": 398726113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNjExMw==",
      "diff_hunk": "@@ -779,6 +779,23 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// We don't force an attempt to relay unbroadcast txns by directly adding them\n+// to setInventoryTxToSend, but instead pass to PushInventory which checks\n+// filterInventoryKnown.\n+//\n+// Passing txns through the bloom filter has a stronger privacy model, but weaker\n+// delivery guarantees. Under certain network & node conditions, it may still\n+// take an extended period of time for the transaction to be initially broadcast\n+// to the network.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394470334,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated this so comment above `ReattemptInitialBroadcast` just notes that unbroadcast txs will be passed through `filterInventoryKnown`. Leaving the tradeoff analysis for reviewers / future people writing code. ",
      "created_at": "2020-03-26T16:46:43Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398726113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398726113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 789,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398726490",
      "pull_request_review_id": 382203505,
      "id": 398726490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNjQ5MA==",
      "diff_hunk": "@@ -75,7 +75,8 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n+    /** Retrieve unbroadcast transactions from the mempool and possibly send to pnode */\n+    void QueueUnbroadcastTxs(CNode* pnode) override;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 394470902,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Method no longer exists but made `ReattemptInitialBroadcast` const. ",
      "created_at": "2020-03-26T16:47:10Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398726490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398726490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727249",
      "pull_request_review_id": 382204460,
      "id": 398727249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNzI0OQ==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394474255,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed! thanks for the style tips ",
      "created_at": "2020-03-26T16:48:12Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727249",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727457",
      "pull_request_review_id": 382204741,
      "id": 398727457,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNzQ1Nw==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 62,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394475575,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed ",
      "created_at": "2020-03-26T16:48:30Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727457",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727723",
      "pull_request_review_id": 382204980,
      "id": 398727723,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNzcyMw==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 64,
      "original_position": 64,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394476596,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good idea! updated.",
      "created_at": "2020-03-26T16:48:46Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727977",
      "pull_request_review_id": 382205284,
      "id": 398727977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNzk3Nw==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15*60) # 15 min in seconds\n+        wait_until(lambda: len(self.nodes[1].getrawmempool()) == 2, timeout=30)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 69,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394478852,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated ",
      "created_at": "2020-03-26T16:49:04Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727977",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398727977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398729959",
      "pull_request_review_id": 382207805,
      "id": 398729959,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyOTk1OQ==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+from io import BytesIO\n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+        wait_until,\n+        hex_str_to_bytes\n+)\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF['hex'])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS['hex'])  # txhsh in hex\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh not in mempool)\n+        assert(wallet_tx_hsh not in mempool)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15*60) # 15 min in seconds\n+        wait_until(lambda: len(self.nodes[1].getrawmempool()) == 2, timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert(rpc_tx_hsh in mempool)\n+        assert(wallet_tx_hsh in mempool)\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15*60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        # create a transaction & submit to node\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        utxo = utxos.pop()\n+        outputs = { node.getnewaddress() : 0.0001 }\n+        inputs = [{'txid': utxo['txid'], 'vout': utxo['vout']}]\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        txhsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # mine a block with that transaction\n+        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1))\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signed_tx['hex'])))\n+        block.vtx.append(tx)\n+        block.rehash()\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        node.submitblock(ToHex(block))",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 107,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "f40f6875f5570cb25882d8a04a6cbeb61ee7366d",
      "in_reply_to_id": 394480786,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ahahhahaha omg I'm glad its been a while since I wrote this test & I don't remember how long I spent figuring out how to manually make the txn and block 😝\r\n\r\ntwo-liner is much cleaner. I feel comfortable with the coverage of wallet & rpc from previous test.\r\n\r\nthanks! ",
      "created_at": "2020-03-26T16:51:39Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398729959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398729959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398730247",
      "pull_request_review_id": 382208138,
      "id": 398730247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczMDI0Nw==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed! thanks again",
      "created_at": "2020-03-26T16:52:01Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398730247",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398730247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398730775",
      "pull_request_review_id": 382208774,
      "id": 398730775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczMDc3NQ==",
      "diff_hunk": "@@ -2345,6 +2342,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n+    // Periodically attempt to broadcast transactions that have not yet been acknowledged by the network\n+    // To ensure impossibility of network-wide synchronization event, stagger retry intervals between 10-15 minutes.\n+    std::chrono::seconds reattempt_broadcast_interval = std::chrono::seconds(10*60 + GetRand(5*60));\n+    scheduler.scheduleEvery([this]{this->AttemptInitialBroadcast();}, std::chrono::milliseconds(reattempt_broadcast_interval));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "2f3f449dc9c89420a444cc8263c5a5fe537a475b",
      "in_reply_to_id": 395248783,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "incorporated. thanks again! ",
      "created_at": "2020-03-26T16:52:43Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398730775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398730775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400569145",
      "pull_request_review_id": 384319528,
      "id": 400569145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2OTE0NQ==",
      "diff_hunk": "@@ -534,6 +534,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast\n+    std::set<uint256> m_unbroadcast_txids;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "66ec5571ad49b68366e4607cf0b671231083757e",
      "in_reply_to_id": 393293074,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "from https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606190183\r\n\r\nRE: wtxid - there is some additional code needed to support unbroadcast set & wtxid relay. I'll work on the patch & depending on timing around which PR is ready for merge first, include the patch here or offer it on the other PR. Thanks again for pointing that out :)",
      "created_at": "2020-03-31T00:14:40Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r400569145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400569145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407647622",
      "pull_request_review_id": 392350586,
      "id": 407647622,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0NzYyMg==",
      "diff_hunk": "@@ -1605,7 +1605,15 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {\n+                // We intepret processing a GETDATA for a transaction as a successful initial broadcast\n+                // and remove it from our unbroadcast set.\n+                int num = WITH_LOCK(mempool.cs, return mempool.m_unbroadcast_txids.erase(inv.hash););\n+                if (num) {\n+                    LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids \\n\", inv.hash.GetHex());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "e82fdd329c812623c6e8a9022322fe43e1000c5b\r\n\r\n```suggestion\r\n                    LogPrint(BCLog::NET, \"Removed %i from the set of unbroadcast txs\\n\", inv.hash.GetHex());\r\n```\r\n\r\nAny reason for the trailing whitespace?\r\n\r\nAlso, leaking source code names into the debug log might cause parse issues when the symbol is renamed",
      "created_at": "2020-04-13T18:47:25Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407647622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407647622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407648006",
      "pull_request_review_id": 392350586,
      "id": 407648006,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODAwNg==",
      "diff_hunk": "@@ -417,6 +417,10 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    if (mempool.m_unbroadcast_txids.erase(hash)) {\n+        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before confirmation that txn was sent out. \\n\", hash.GetHex());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        LogPrint(BCLog::NET, \"Removed %i from set of unbroadcast txs before confirmation that txn was sent out\\n\", hash.GetHex());\r\n```\r\n\r\nSame",
      "created_at": "2020-04-13T18:48:03Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407648006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407648006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407648718",
      "pull_request_review_id": 392350586,
      "id": 407648718,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODcxOA==",
      "diff_hunk": "@@ -533,6 +533,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should probably be a doxygen comment. See the developer notes on how to get one.\r\n```suggestion\r\n    /** track locally submitted transactions & periodically retry initial broadcast */\r\n```",
      "created_at": "2020-04-13T18:49:09Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407648718",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407648718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407652787",
      "pull_request_review_id": 392350586,
      "id": 407652787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1Mjc4Nw==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "a11968c8780424ddb0fd01341101bb28ff6953a8",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a11968c8780424ddb0fd01341101bb28ff6953a8\r\n\r\nSorry, I still don't understand why this comment is relevant to rebroadcasting. I remember in an earlier discussion you mentioned that a user might disconnect their wifi. A tx might get added to filterInventoryKnown, but then never sent out.\r\n\r\nI don't think this is true. Either, we reconnect the wifi and be still connected to the peer, in which case we can push the inv out and wait for them to request the tx. Or, we drop the peer (either because the wifi isn't turned on again, or it took us too long to do so), in which case a new peer will pop up and they will receive the inv (after 10-15 minutes).",
      "created_at": "2020-04-13T18:56:47Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407652787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407652787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407655025",
      "pull_request_review_id": 392350586,
      "id": 407655025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1NTAyNQ==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown\n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids;\n+    WITH_LOCK(m_mempool.cs, unbroadcast_txids = m_mempool.m_unbroadcast_txids);\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::milliseconds(10 * 60 * 1000 + GetRand(5 * 60 * 1000));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "a11968c8780424ddb0fd01341101bb28ff6953a8",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\r\n```\r\n\r\nYou might have to add `GetRandMillis` by copying from `GetRandMicros`.",
      "created_at": "2020-04-13T19:00:39Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407655025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407655025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407664223",
      "pull_request_review_id": 392350586,
      "id": 407664223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NDIyMw==",
      "diff_hunk": "@@ -5023,12 +5024,19 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        {\n+            LOCK(pool.cs);\n+            file >> pool.m_unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "6307582b4d30167a931678d12e99a00a0e75e81a\r\n\r\nThis is not safe. You are erasing the existing content of the `m_unbroadcast_txids`",
      "created_at": "2020-04-13T19:18:00Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407664223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407664223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5030,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407665982",
      "pull_request_review_id": 392350586,
      "id": 407665982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NTk4Mg==",
      "diff_hunk": "@@ -5072,6 +5080,13 @@ bool DumpMempool(const CTxMemPool& pool)\n         }\n \n         file << mapDeltas;\n+\n+        {\n+            LOCK(pool.cs);\n+            LogPrintf(\"Writing %d unbroadcast transactions to disk.\\n\", pool.m_unbroadcast_txids.size());\n+            file << pool.m_unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is racy and you might end up with zombie txids here that are never removed because the corresponding mempool tx has not been written to disk",
      "created_at": "2020-04-13T19:21:04Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407665982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407665982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5087,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409150876",
      "pull_request_review_id": 394155715,
      "id": 409150876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE1MDg3Ng==",
      "diff_hunk": "@@ -417,6 +417,10 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    if (mempool.m_unbroadcast_txids.erase(hash)) {\n+        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before confirmation that txn was sent out. \\n\", hash.GetHex());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a reason this is categorized as a NET log? I think it makes more sense as a MEMPOOL, or even uncategorized as a `LogPrintf()`.",
      "created_at": "2020-04-15T21:41:43Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409150876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409150876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409151246",
      "pull_request_review_id": 394155715,
      "id": 409151246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE1MTI0Ng==",
      "diff_hunk": "@@ -417,6 +417,10 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    if (mempool.m_unbroadcast_txids.erase(hash)) {\n+        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before confirmation that txn was sent out. \\n\", hash.GetHex());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "in_reply_to_id": 407648006,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree that it's better to avoid using variable names in logs.",
      "created_at": "2020-04-15T21:42:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409151246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409151246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409152838",
      "pull_request_review_id": 394155715,
      "id": 409152838,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE1MjgzOA==",
      "diff_hunk": "@@ -1644,17 +1644,6 @@ void CConnman::ThreadDNSAddressSeed()\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n \n-",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also think this whitespace is ugly, but I think you can leave removing it for another time!",
      "created_at": "2020-04-15T21:45:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409152838",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409152838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1647,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409159855",
      "pull_request_review_id": 394155715,
      "id": 409159855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE1OTg1NQ==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "a11968c8780424ddb0fd01341101bb28ff6953a8",
      "in_reply_to_id": 407652787,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with Marco that this comment can just be removed.",
      "created_at": "2020-04-15T22:01:06Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409159855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409159855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409163442",
      "pull_request_review_id": 394155715,
      "id": 409163442,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2MzQ0Mg==",
      "diff_hunk": "@@ -606,3 +606,19 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n                 # Check that none of the txs are now in the mempool\n                 for tx in txs:\n                     assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+class P2PTxInvStore(P2PInterface):",
      "path": "test/functional/test_framework/mininode.py",
      "position": 17,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I prefer all classes in the framework to have a docstring, even if it's very simple. This one would be something like:\r\n\r\n\"A P2PInterface which stores a count of how many times each txid has been announced\"",
      "created_at": "2020-04-15T22:08:42Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409163442",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409163442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 613,
      "original_line": 613,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409164540",
      "pull_request_review_id": 394155715,
      "id": 409164540,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2NDU0MA==",
      "diff_hunk": "@@ -606,3 +606,19 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n                 # Check that none of the txs are now in the mempool\n                 for tx in txs:\n                     assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+class P2PTxInvStore(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.tx_invs_received = defaultdict(int)\n+\n+    def on_inv(self, message):\n+        # Store how many times invs have been received for each tx.\n+        for i in message.inv:\n+            if i.type == 1:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 13,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we import `MSG_TX` from `.messages` and `if i.type == MSG_TX` to remove the magic 1 number?",
      "created_at": "2020-04-15T22:11:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409164540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409164540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 618,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409165264",
      "pull_request_review_id": 394155715,
      "id": 409165264,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2NTI2NA==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 14,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: sort :stuck_out_tongue: ",
      "created_at": "2020-04-15T22:13:22Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409165264",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409165264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409166712",
      "pull_request_review_id": 394155715,
      "id": 409166712,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2NjcxMg==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown\n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids;\n+    WITH_LOCK(m_mempool.cs, unbroadcast_txids = m_mempool.m_unbroadcast_txids);\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::milliseconds(10 * 60 * 1000 + GetRand(5 * 60 * 1000));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could declare these two times as constants.",
      "created_at": "2020-04-15T22:17:04Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409166712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409166712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409168043",
      "pull_request_review_id": 394155715,
      "id": 409168043,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2ODA0Mw==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        # since the node doesn't have any connections, it will not receive",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 87,
      "original_position": 86,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is true. You added a `P2PTxInvStore` in `test_broadcast()` which I think is still connected.",
      "created_at": "2020-04-15T22:20:26Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409168043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409168043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409169031",
      "pull_request_review_id": 394155715,
      "id": 409169031,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2OTAzMQ==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+        self.nodes[0].generate(1)\n+\n+        # add a connection to node\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # the transaction should have been removed from the unbroadcast set\n+        # since it was removed from the mempool for MemPoolRemovalReason::BLOCK.\n+        # verify by checking it isn't broadcast to the node's new connection.",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 97,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can also verify this by using `assert_debug_log()` to check that the \"Removed %i from m_unbroadcast_txids before confirmation that txn was sent out\" log has been printed. That might be simpler than connected a new peer.",
      "created_at": "2020-04-15T22:23:01Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409169031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409169031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409177251",
      "pull_request_review_id": 394155715,
      "id": 409177251,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NzI1MQ==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> but the version shouldn't be bumped because that will silently drop all transactions of the mempool\r\n\r\n@MarcoFalke - this is interesting. It means if we ever have to bump the version number we'd have to do something like:\r\n\r\n- Bitcoin Core version X only understands mempool.dat v1\r\n- add mempool.dat v2 parsing logic in Bitcoin Core version X+1\r\n- add mempoo.dat v2 writing logic in Bitcoin Core version X+2\r\n\r\nI think to avoid the debug LogPrint we can wrap the m_unbroadcast_txids parsing in its own try-except. Something like:\r\n\r\n```\r\n        try {\r\n            LOCK(pool.cs);\r\n            file >> pool.m_unbroadcast_txids;\r\n            unbroadcast = pool.m_unbroadcast_txids.size();\r\n        } catch (const std::exception& e) {\r\n            // mempool.dat files created prior to v0.21 will not have an\r\n            // unbroadcast set. No need to log a failure if parsing fails\r\n            // here.\r\n        }\r\n```",
      "created_at": "2020-04-15T22:44:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409177251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409177251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409179516",
      "pull_request_review_id": 394187999,
      "id": 409179516,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3OTUxNg==",
      "diff_hunk": "@@ -5072,6 +5080,13 @@ bool DumpMempool(const CTxMemPool& pool)\n         }\n \n         file << mapDeltas;\n+\n+        {\n+            LOCK(pool.cs);\n+            LogPrintf(\"Writing %d unbroadcast transactions to disk.\\n\", pool.m_unbroadcast_txids.size());\n+            file << pool.m_unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 407665982,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. All of the data should be brought out of the mempool under one lock. Make a local `std::set<uint256>` and populate it under the same lock as `mapDeltas` and `vinfo` get populated.",
      "created_at": "2020-04-15T22:50:23Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409179516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409179516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5087,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409186292",
      "pull_request_review_id": 394195837,
      "id": 409186292,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NjI5Mg==",
      "diff_hunk": "@@ -1644,17 +1644,6 @@ void CConnman::ThreadDNSAddressSeed()\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n \n-",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409152838,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Our guidelines say that whitespace may be fixed up when the line is touched for other reasons. I doubt anyone is going to touch an empty line any time soon. It seems fine to remove an empty line in net.cpp in a pull request that modifies p2p code.",
      "created_at": "2020-04-15T23:10:07Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409186292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409186292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1647,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409782771",
      "pull_request_review_id": 394917749,
      "id": 409782771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4Mjc3MQ==",
      "diff_hunk": "@@ -1644,17 +1644,6 @@ void CConnman::ThreadDNSAddressSeed()\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n \n-",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409152838,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Touching a file in a commit for no other reason than to remove the whitespace doesn't make any sense! I'm surprised that you would think otherwise.",
      "created_at": "2020-04-16T19:01:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409782771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409782771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1647,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413989313",
      "pull_request_review_id": 399323862,
      "id": 413989313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4OTMxMw==",
      "diff_hunk": "@@ -1605,7 +1605,15 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {\n+                // We intepret processing a GETDATA for a transaction as a successful initial broadcast\n+                // and remove it from our unbroadcast set.\n+                int num = WITH_LOCK(mempool.cs, return mempool.m_unbroadcast_txids.erase(inv.hash););\n+                if (num) {\n+                    LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids \\n\", inv.hash.GetHex());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "in_reply_to_id": 407647622,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2020-04-23T17:32:01Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413989313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413989313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413989766",
      "pull_request_review_id": 399324418,
      "id": 413989766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4OTc2Ng==",
      "diff_hunk": "@@ -417,6 +417,10 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    if (mempool.m_unbroadcast_txids.erase(hash)) {\n+        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before confirmation that txn was sent out. \\n\", hash.GetHex());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "in_reply_to_id": 407648006,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2020-04-23T17:32:44Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413989766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413989766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413992829",
      "pull_request_review_id": 399327980,
      "id": 413992829,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MjgyOQ==",
      "diff_hunk": "@@ -533,6 +533,10 @@ class CTxMemPool\n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     uint64_t CalculateDescendantMaximum(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    // track locally submitted transactions & periodically retry initial broadcast",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e82fdd329c812623c6e8a9022322fe43e1000c5b",
      "in_reply_to_id": 407648718,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed & added doxygen comments for new methods I introduced into txmempool ",
      "created_at": "2020-04-23T17:37:22Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413992829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413992829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413993391",
      "pull_request_review_id": 399328696,
      "id": 413993391,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzM5MQ==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "a11968c8780424ddb0fd01341101bb28ff6953a8",
      "in_reply_to_id": 407652787,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> we reconnect the wifi and be still connected to the peer, in which case we can push the inv out and wait for them to request the tx. \r\n\r\nah, I didn't realize. thanks! \r\n\r\nremoved the comment. ",
      "created_at": "2020-04-23T17:38:18Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413993391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413993391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413994990",
      "pull_request_review_id": 399330622,
      "id": 413994990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDk5MA==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown\n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids;\n+    WITH_LOCK(m_mempool.cs, unbroadcast_txids = m_mempool.m_unbroadcast_txids);\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::milliseconds(10 * 60 * 1000 + GetRand(5 * 60 * 1000));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "a11968c8780424ddb0fd01341101bb28ff6953a8",
      "in_reply_to_id": 407655025,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added the method `GetRandMillis` & updated here. I was thinking might make sense to have a template for the different chrono types? I haven't looked into it yet but you mentioned that it wouldn't work? ",
      "created_at": "2020-04-23T17:40:46Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413994990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413994990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413996219",
      "pull_request_review_id": 399331946,
      "id": 413996219,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjIxOQ==",
      "diff_hunk": "@@ -5023,12 +5024,19 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        {\n+            LOCK(pool.cs);\n+            file >> pool.m_unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 407664223,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, thanks for catching. fixed via new mempool methods",
      "created_at": "2020-04-23T17:42:24Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413996219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413996219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5030,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413996603",
      "pull_request_review_id": 399332415,
      "id": 413996603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjYwMw==",
      "diff_hunk": "@@ -5072,6 +5080,13 @@ bool DumpMempool(const CTxMemPool& pool)\n         }\n \n         file << mapDeltas;\n+\n+        {\n+            LOCK(pool.cs);\n+            LogPrintf(\"Writing %d unbroadcast transactions to disk.\\n\", pool.m_unbroadcast_txids.size());\n+            file << pool.m_unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 407665982,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops. thanks for catching. fixed ",
      "created_at": "2020-04-23T17:42:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413996603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413996603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5087,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413996903",
      "pull_request_review_id": 399332800,
      "id": 413996903,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjkwMw==",
      "diff_hunk": "@@ -417,6 +417,10 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    if (mempool.m_unbroadcast_txids.erase(hash)) {\n+        LogPrint(BCLog::NET, \"Removed %i from m_unbroadcast_txids before confirmation that txn was sent out. \\n\", hash.GetHex());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409150876,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "historic that I didn't notice. fixed now",
      "created_at": "2020-04-23T17:43:26Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413996903",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413996903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413997604",
      "pull_request_review_id": 399333580,
      "id": 413997604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NzYwNA==",
      "diff_hunk": "@@ -1644,17 +1644,6 @@ void CConnman::ThreadDNSAddressSeed()\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n \n-",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409152838,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "😢\r\n\r\nunfortunately I can't disagree that its silly to touch a file _just_ to remove whitespace.\r\n\r\nempty lines in net.cpp... I will be back for you! ",
      "created_at": "2020-04-23T17:44:31Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413997604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413997604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1647,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413997770",
      "pull_request_review_id": 399333794,
      "id": 413997770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5Nzc3MA==",
      "diff_hunk": "@@ -606,3 +606,19 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n                 # Check that none of the txs are now in the mempool\n                 for tx in txs:\n                     assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+class P2PTxInvStore(P2PInterface):",
      "path": "test/functional/test_framework/mininode.py",
      "position": 17,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409163442,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-04-23T17:44:49Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413997770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413997770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 613,
      "original_line": 613,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413999950",
      "pull_request_review_id": 399336207,
      "id": 413999950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5OTk1MA==",
      "diff_hunk": "@@ -606,3 +606,19 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n                 # Check that none of the txs are now in the mempool\n                 for tx in txs:\n                     assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+class P2PTxInvStore(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.tx_invs_received = defaultdict(int)\n+\n+    def on_inv(self, message):\n+        # Store how many times invs have been received for each tx.\n+        for i in message.inv:\n+            if i.type == 1:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 13,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409164540,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "turns out, `MSG_TX` was already imported. fixed.",
      "created_at": "2020-04-23T17:47:57Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413999950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413999950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 618,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414000297",
      "pull_request_review_id": 399336574,
      "id": 414000297,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMDI5Nw==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 14,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409165264,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2020-04-23T17:48:29Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414000297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414000297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414000987",
      "pull_request_review_id": 399337388,
      "id": 414000987,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMDk4Nw==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown\n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids;\n+    WITH_LOCK(m_mempool.cs, unbroadcast_txids = m_mempool.m_unbroadcast_txids);\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::milliseconds(10 * 60 * 1000 + GetRand(5 * 60 * 1000));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409166712,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "pass on this one, I pulled `delta` out for readability, but breaking into two constants seems a bit overkill to me",
      "created_at": "2020-04-23T17:49:33Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414000987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414000987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414004345",
      "pull_request_review_id": 399341162,
      "id": 414004345,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNDM0NQ==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        # since the node doesn't have any connections, it will not receive",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 87,
      "original_position": 86,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409168043,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point! looks like since `P2PTxInvStore` overwrites the `on_inv` function, it doesn't send back a `GETDATA`, so the relevant piece of functionality from a connection isn't triggered.\r\n\r\nfor this PR, I added a line to `disconnect_p2ps` so the expectations make more sense (making the comment true). \r\n\r\nbut I do think its confusing that `P2PTxInvStore` inherits from `P2PInterface` but abandons this one piece of functionality. I'm thinking as a small followup I can have `P2PTxInvStore` call through to the parent `on_inv` after it stores the txid to behave more as expected. what do you think?  ",
      "created_at": "2020-04-23T17:54:17Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414004345",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414004345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414004728",
      "pull_request_review_id": 399341640,
      "id": 414004728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNDcyOA==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+        self.nodes[0].generate(1)\n+\n+        # add a connection to node\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # the transaction should have been removed from the unbroadcast set\n+        # since it was removed from the mempool for MemPoolRemovalReason::BLOCK.\n+        # verify by checking it isn't broadcast to the node's new connection.",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 97,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409169031,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems more straightforward so I updated",
      "created_at": "2020-04-23T17:54:54Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414004728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414004728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414007402",
      "pull_request_review_id": 399344643,
      "id": 414007402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNzQwMg==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think to avoid the debug LogPrint we can wrap the m_unbroadcast_txids parsing in its own try-except\r\n\r\nI considered doing this but decided not to because a one-time error message (with functionality working fine) seems more desirable than a nested try / catch statement that would probably live in the code for a very long time.",
      "created_at": "2020-04-23T17:58:51Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414007402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414007402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414010082",
      "pull_request_review_id": 399347773,
      "id": 414010082,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxMDA4Mg==",
      "diff_hunk": "@@ -606,3 +606,19 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n                 # Check that none of the txs are now in the mempool\n                 for tx in txs:\n                     assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+class P2PTxInvStore(P2PInterface):",
      "path": "test/functional/test_framework/mininode.py",
      "position": 17,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409163442,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also added to the docstring at the top of the file.",
      "created_at": "2020-04-23T18:02:43Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414010082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414010082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 613,
      "original_line": 613,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414048438",
      "pull_request_review_id": 399391005,
      "id": 414048438,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0ODQzOA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # check transaction was removed from unbroadcast set due to presence in\n+        # a block\n+        removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out.\".format(txhsh)\n+        with node.assert_debug_log(expected_msgs=removal_reason):",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 95,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't work. You can try by modifying the string above\r\n\r\nThe type needs to be an array",
      "created_at": "2020-04-23T19:01:14Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414048438",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414048438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414049819",
      "pull_request_review_id": 399392664,
      "id": 414049819,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0OTgxOQ==",
      "diff_hunk": "@@ -1128,6 +1141,9 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n     scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+\n+    const std::chrono::milliseconds delta = std::chrono::milliseconds(10 * 60 * 1000 + GetRand(5 * 60 * 1000));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please use the same for consistency. Either by copy-pasting from above or by putting the two lines into a function",
      "created_at": "2020-04-23T19:03:27Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414049819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414049819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414055529",
      "pull_request_review_id": 399398995,
      "id": 414055529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1NTUyOQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason why these are inline? I think we don't that elsewhere.\r\n\r\nAlso, it might be good to move the implementation of this one to the cpp file, so that logging doesn't have to be included in the header and compiled on every include.",
      "created_at": "2020-04-23T19:12:28Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414055529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414055529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414065418",
      "pull_request_review_id": 399410174,
      "id": 414065418,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NTQxOA==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thought it was more efficient since these functions are so simple. \r\n\r\nwe don't have inline functions in txmempool, but there are plenty scattered around the codebase. \r\n\r\n👍 RE logging. I can def move this function to the cpp. Do you prefer I move them all? ",
      "created_at": "2020-04-23T19:28:45Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414065418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414065418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414069725",
      "pull_request_review_id": 399415067,
      "id": 414069725,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2OTcyNQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The others can stay, but I think the `inline` keyword is still not needed? (With \"inline\" I meant \"`inline`\" (the keyword))",
      "created_at": "2020-04-23T19:35:46Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414069725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414069725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414085582",
      "pull_request_review_id": 399433007,
      "id": 414085582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NTU4Mg==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh interesting.. reading around, seems like `inline` keyword is just a compiler hint & usually the compiler will deduce when necessary? the code compiles fine when I remove them. is there any harm in leaving it in? on the flip, is there any time they *should* be used? ",
      "created_at": "2020-04-23T20:01:17Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414085582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414085582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414091130",
      "pull_request_review_id": 399439596,
      "id": 414091130,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MTEzMA==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@amitiuttarwar `inline` has two independent effects:\r\n* A hint to the compiler that it should try inlining the function (both in C and C++). Modern compilers will do this automatically in many cases, with or without the keyword.\r\n* Indicating that this symbol may appear in multiple modules (but they will all be identical). This is only in C++, and makes it possible to have code in header files (as it will end up in every module that includes it). Member functions defined in classes *always* have this implicitly, no need to add the \"inline\" keyword for it (unless you also want to hinting effect above).\r\n\r\nSo the only time you *have to* use `inline` is for functions in headers files that are not member functions.",
      "created_at": "2020-04-23T20:10:58Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414091130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414091130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414099396",
      "pull_request_review_id": 399448740,
      "id": 414099396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5OTM5Ng==",
      "diff_hunk": "@@ -779,6 +779,21 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+// Note: unbroadcast transactions will be filtered through filterInventoryKnown\n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids;\n+    WITH_LOCK(m_mempool.cs, unbroadcast_txids = m_mempool.m_unbroadcast_txids);\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::milliseconds(10 * 60 * 1000 + GetRand(5 * 60 * 1000));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "a11968c8780424ddb0fd01341101bb28ff6953a8",
      "in_reply_to_id": 407655025,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@amitiuttarwar Done here: #18751 ",
      "created_at": "2020-04-23T20:24:52Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414099396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414099396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414131405",
      "pull_request_review_id": 399484608,
      "id": 414131405,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzMTQwNQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah okay, this is very helpful. I think I'm understanding- its a clue to the compiler to try expanding in line, as well as an indicator that the symbol defined in more than one translation unit are the same, which the compiler can enforce. when a member function is defined, not just declared, within the class definition- the compiler automatically interprets this as an inline member function. so, the keyword `inline` in the implementation I have here is redundant. ",
      "created_at": "2020-04-23T21:18:53Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414131405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414131405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414134271",
      "pull_request_review_id": 399487760,
      "id": 414134271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNDI3MQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "but, since I'm pulling out the definition of `RemoveUnbroadcastTx` to `txmempool.cpp`, it will no longer be automatically inlined. So, adding `inline` there would be a hint to the compiler to inline the function at the call sites, but the compiler might do it anyway / ignore. \r\n\r\nis this sounding correct?",
      "created_at": "2020-04-23T21:24:10Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414134271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414134271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414134919",
      "pull_request_review_id": 399488475,
      "id": 414134919,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNDkxOQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> that the symbol defined in more than one translation unit are the same\r\n\r\nNot just that they're the same; that they may occur in multiple translation units in the first place. Without `inline` (or a member being defined in a class body), you will get a linker error if you define the same symbol in multiple translation units.\r\n\r\nUnless (there's always an unless...), it's in an anonymous namespace as well (or `static` for globals). In *that* case, every translation unit will get its own individual copy, which won't be seen as conflicting by the linker at all - but they also won't get deduplicated.",
      "created_at": "2020-04-23T21:25:21Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414134919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414134919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414137349",
      "pull_request_review_id": 399491141,
      "id": 414137349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNzM0OQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Once you've moved the function definition to the .cpp file, it can only get inlined anymore inside the txmempool.cpp translation unit (until we enable LTO, which we currently don't do by default or in releases). With or without `inline`, it will still get inlined there, and with or without `inline` it won't get inlined elsewhere. Adding the keyword may still make it a stronger hint to the compiler to do so - unsure.",
      "created_at": "2020-04-23T21:30:00Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414137349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414137349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414141955",
      "pull_request_review_id": 399495962,
      "id": 414141955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0MTk1NQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok ya, got the part where `inline` indicates permission for same symbol in multiple translation units. the part about `inline` in `.cpp` being limited to the file unless the optimization is enabled makes sense. and the special case for anonymous namespace is 🤯 and I'm going to go have to learn / tinker more 😛 \r\n\r\nbut first I'm going to push fixups. thanks so much for these explanations! I'm learning a lot :) ",
      "created_at": "2020-04-23T21:38:52Z",
      "updated_at": "2020-04-23T21:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414141955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414141955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414147048",
      "pull_request_review_id": 399501354,
      "id": 414147048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0NzA0OA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # check transaction was removed from unbroadcast set due to presence in\n+        # a block\n+        removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out.\".format(txhsh)\n+        with node.assert_debug_log(expected_msgs=removal_reason):",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": null,
      "original_position": 95,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414048438,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good catch. fixed",
      "created_at": "2020-04-23T21:48:43Z",
      "updated_at": "2020-04-23T21:48:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414147048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414147048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414147133",
      "pull_request_review_id": 399501426,
      "id": 414147133,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0NzEzMw==",
      "diff_hunk": "@@ -1128,6 +1141,9 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n     scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+\n+    const std::chrono::milliseconds delta = std::chrono::milliseconds(10 * 60 * 1000 + GetRand(5 * 60 * 1000));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414049819,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2020-04-23T21:48:52Z",
      "updated_at": "2020-04-23T21:48:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414147133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414147133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414147829",
      "pull_request_review_id": 399502206,
      "id": 414147829,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0NzgyOQ==",
      "diff_hunk": "@@ -698,6 +702,28 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    inline void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    inline void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 29,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "c365159b8922320ba542db97a43ae72a177380bb",
      "in_reply_to_id": 414055529,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed `inline` keywords, moved `RemoveUnbroadcastTx` function definition to `txmempool.cpp` & removed including `logging.h` in the header.",
      "created_at": "2020-04-23T21:50:17Z",
      "updated_at": "2020-04-23T21:50:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414147829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414147829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 712,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414172020",
      "pull_request_review_id": 399527313,
      "id": 414172020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MjAyMA==",
      "diff_hunk": "@@ -5023,12 +5024,21 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        std::set<uint256> unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps this section for deserializing unbroadcast txids can be moved to a separate `try` ... `catch` block, so that the normal \"Imported ...\" message appears rather than a deserialization error?",
      "created_at": "2020-04-23T22:42:39Z",
      "updated_at": "2020-04-23T22:42:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414172020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414172020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5028,
      "original_line": 5028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414195526",
      "pull_request_review_id": 399550267,
      "id": 414195526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NTUyNg==",
      "diff_hunk": "@@ -5023,12 +5024,21 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        std::set<uint256> unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414172020,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is this in regards to preventing the one-time error when upgrading? or more general possible errors?",
      "created_at": "2020-04-23T23:41:57Z",
      "updated_at": "2020-04-23T23:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414195526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414195526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5028,
      "original_line": 5028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414199728",
      "pull_request_review_id": 399554031,
      "id": 414199728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5OTcyOA==",
      "diff_hunk": "@@ -5023,12 +5024,21 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        std::set<uint256> unbroadcast_txids;",
      "path": "src/validation.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414172020,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, it seems the return value of LoadMempool is actually ignored in case of failure, so it's indeed just a warning issue. It would seem cleaner that LoadMempool returns either returns true for successfully loaded (whether unbroadcast_txids was present or not), and false + empty mempool otherwise. That's just code esthetics though, no need to address it here.",
      "created_at": "2020-04-23T23:53:24Z",
      "updated_at": "2020-04-23T23:53:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414199728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414199728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5028,
      "original_line": 5028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414575673",
      "pull_request_review_id": 399945469,
      "id": 414575673,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3NTY3Mw==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Imagine in future we will not care about privacy here (e.g., use Tor or whatnot), and allow `push` for unsolicited GETDATA.\r\nThen, if the condition for rebroadcast is still `if (push)` it would be trivial to censor a transaction by sending unsolicited GETDATA. It means that with this code, effectiveness of rebroadcast depend on this privacy behaviour we have.\r\nI'm afraid that this non-obvious relation might screw us up in future. I wish we documented this more, maybe in the comment right above.\r\nI'm fine with keeping it this way too, just want to raise some awareness here.",
      "created_at": "2020-04-24T13:28:11Z",
      "updated_at": "2020-04-24T13:28:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414575673",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414575673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414583726",
      "pull_request_review_id": 399955102,
      "id": 414583726,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4MzcyNg==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, I don't follow. How would a node send GETDATA without knowing the txid? Also, how would it censor (prevent you other connections from sending a GETDATA) by just sending a GETDATA?",
      "created_at": "2020-04-24T13:39:46Z",
      "updated_at": "2020-04-24T13:39:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414583726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414583726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414729953",
      "pull_request_review_id": 400124132,
      "id": 414729953,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyOTk1Mw==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        # since the node doesn't have any connections, it will not receive",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 87,
      "original_position": 86,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409168043,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are missing the parenthesis behind the function call: `node.disconnect_p2ps()` so this line is not doing the disconnecting at the moment. So the comment is indeed wrong and it just \"accidentally\" works because `P2PTxInvStore` doesn't send a `GETDATA`. I think I would expect it to send a `GETDATA` because it is part of the framework now, but in general, I think the `P2PInterface` is there so you can override the behavior to be what you need so I don't have a strong feeling about it. If it was part of the test I would say it doesn't matter but because it moves to the framework, slight preference to call the super behavior.\r\n\r\nEDIT: For reference, I mean this line: https://github.com/bitcoin/bitcoin/pull/18038/files#diff-5e6f5e6aab04f82ec4b58148c4bdec72R85 the linking isn't working properly because I commented on an outdated conversation.",
      "created_at": "2020-04-24T17:07:51Z",
      "updated_at": "2020-04-24T17:47:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414729953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414729953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414839572",
      "pull_request_review_id": 400245266,
      "id": 414839572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzOTU3Mg==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not fully following either, but a couple of points to highlight: \r\n- lets distinguish *unbroadcast* from *rebroadcast*. unbroadcast is extra attempts at successful initial broadcast. rebroadcast is repeated broadcasts (from the POV of the node, which cannot know full picture). \r\n- in this implementation, if victim sends INV to only one peer, peer is adversarial, replies back with GETDATA but doesn't propagate it out to the network -> victim removes from unbroadcast set & doesn't retry until ~1 day later when `ResendWalletTransactions` is triggered. so, prevents txn from making it out to mempool for a day.\r\n- @naumenkogs do you think unsolicited GETDATA messages would change this? ",
      "created_at": "2020-04-24T20:20:36Z",
      "updated_at": "2020-04-24T20:20:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414839572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414839572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414841223",
      "pull_request_review_id": 400247080,
      "id": 414841223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0MTIyMw==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        # since the node doesn't have any connections, it will not receive",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 87,
      "original_position": 86,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409168043,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "🤦‍♀️ sigh. thanks for catching! \r\n\r\nya I agree with the reasoning of in test vs framework. I'll do a small followup to add parens & have `P2PTxInvStore` call through super. ",
      "created_at": "2020-04-24T20:23:50Z",
      "updated_at": "2020-04-24T20:23:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414841223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414841223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414866281",
      "pull_request_review_id": 400273957,
      "id": 414866281,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NjI4MQ==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Imagine a lightning node submits a tx, but it is offline, and will be online in 30 minutes to relay it from Unbroadcast.\r\nNow an attacker connect to the victim once they got online, and send GETDATA for that transaction (before a victim broadcasts from unbroadcast).\r\n\r\nRight now, it will be ignored, because it's unsolicited (for privacy reasons!).\r\nIf we discard those privacy reasons, and now forget about this *inherent unbroadcast behaviour*, and allow unsolicited GETDATA, an attacker will be able to prevent us from broadcasting a tx, by removing a tx from unbroadcast.\r\n\r\nAnd yeah, one day for lightning is pretty bad, you will simply loose money in most of the implementations today.",
      "created_at": "2020-04-24T21:13:03Z",
      "updated_at": "2020-04-24T21:13:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414866281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414866281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414913018",
      "pull_request_review_id": 400319437,
      "id": 414913018,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzAxOA==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes that's a good point, in LN there is class of transaction where txid is known from remote party due to the fact they counter-sign them (HTLC-timeout) but honest party have to broadcast with time-constrain to avoid any risk of money-loss.\r\n\r\nRight now most of implementations are pretty aggressive at triggering rebroadcast at every block, i.e calling again `sendrawtransaction` which isn't great for privacy and this may change in the future. That said, often offline nodes, like mobile, won't use core as a backend and broadcast directly their transaction on the p2p layer or submit to a third-party server. Routing nodes assumed to run core, should rebroadcast at every block so it would override some attacker messing with their unbroadcast logic.\r\n\r\nI think adopting wtxid would solve this issue because counterparty won't know about witness, at least for LN. But I agree, we should document this to keep track (add a comment commit on top or as a follow-up)",
      "created_at": "2020-04-24T23:14:40Z",
      "updated_at": "2020-04-24T23:14:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414913018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414913018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414914956",
      "pull_request_review_id": 400321111,
      "id": 414914956,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNDk1Ng==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A simpler fix would be to add a one-line check that `pfrom` is outbound, no?",
      "created_at": "2020-04-24T23:21:07Z",
      "updated_at": "2020-04-24T23:21:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414914956",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414914956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414920979",
      "pull_request_review_id": 400325919,
      "id": 414920979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMDk3OQ==",
      "diff_hunk": "@@ -698,6 +701,21 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    void AddUnbroadcastTx(const uint256& txid) {",
      "path": "src/txmempool.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "89eeb4a\r\n\r\nShould we annotate this new methods `EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs)` to increase confidence that lock order is preserved ? (like some of them are called from node helpers code and we may refactor lock tacking there at some point)",
      "created_at": "2020-04-24T23:42:02Z",
      "updated_at": "2020-04-25T00:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414920979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414920979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 705,
      "original_line": 705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414923208",
      "pull_request_review_id": 400325919,
      "id": 414923208,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMzIwOA==",
      "diff_hunk": "@@ -779,6 +779,19 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future",
      "path": "src/net_processing.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "e25e42f\r\n\r\nYou could have comment that rational of recursively calling `scheduleFromNow` is to get a different `delta` every time and that way avoid an observable reattempt-period fingerprint.",
      "created_at": "2020-04-24T23:49:56Z",
      "updated_at": "2020-04-25T00:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414923208",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414923208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 790,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414923848",
      "pull_request_review_id": 400325919,
      "id": 414923848,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMzg0OA==",
      "diff_hunk": "@@ -1978,7 +1978,8 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    // resend 12-36 hours from now, ~1 day on average.\n+    nNextResend = GetTime() + (12 * 60 * 60) + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "dc1da48dc5e5526215561311c184a8cbc345ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "dc1da48\r\n\r\n@MarcoFalke should we add a release note for this, I mean that's a substantial wallet behavior change and people may have stuff depending on this ? ",
      "created_at": "2020-04-24T23:52:16Z",
      "updated_at": "2020-04-25T00:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414923848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414923848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1982,
      "original_line": 1982,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414934194",
      "pull_request_review_id": 400335588,
      "id": 414934194,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzNDE5NA==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that's okay as a fix, it won't degrade the reliability improvement of aimed by this PR because we already announce sooner to outbound. But we should document better these maybe-cases of time-sensitive tx propagation obstruction (both at p2p/mempool layers) like last thread on ml shows.",
      "created_at": "2020-04-25T00:31:59Z",
      "updated_at": "2020-04-25T00:32:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414934194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414934194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414944454",
      "pull_request_review_id": 400341889,
      "id": 414944454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk0NDQ1NA==",
      "diff_hunk": "@@ -1978,7 +1978,8 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    // resend 12-36 hours from now, ~1 day on average.\n+    nNextResend = GetTime() + (12 * 60 * 60) + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "dc1da48dc5e5526215561311c184a8cbc345ecdc",
      "in_reply_to_id": 414923848,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah definitely. I'm planning to add a release note as a follow up.",
      "created_at": "2020-04-25T01:20:40Z",
      "updated_at": "2020-04-25T01:20:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414944454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414944454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1982,
      "original_line": 1982,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415376599",
      "pull_request_review_id": 400536876,
      "id": 415376599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3NjU5OQ==",
      "diff_hunk": "@@ -779,6 +779,19 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);",
      "path": "src/net_processing.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e25e42f, would suggest replacing the two instances of `const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});` and their associated comments, with a well-named function that can be called directly within each `scheduleFromNow`. The function could be Doxygen-commented with @ariard's https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414923208 above.",
      "created_at": "2020-04-26T18:58:10Z",
      "updated_at": "2020-04-27T12:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415376599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415376599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 792,
      "original_line": 792,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415707349",
      "pull_request_review_id": 400536876,
      "id": 415707349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwNzM0OQ==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 68,
      "original_position": 68,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "297a178 suggestion\r\n```diff\r\n+MAX_INITIAL_BROADCAST_DELAY = 15 * 60  # 15 minutes in seconds\r\n \r\n class MempoolUnbroadcastTest(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n@@ -65,7 +66,7 @@ class MempoolUnbroadcastTest(BitcoinTestFramework):\r\n         connect_nodes(node, 1)\r\n \r\n         # fast forward into the future & ensure that the second node has the txns\r\n-        node.mockscheduler(15 * 60)  # 15 min in seconds\r\n+        node.mockscheduler(MAX_INITIAL_BROADCAST_DELAY)  # 15 min in seconds\r\n         self.sync_mempools(timeout=30)\r\n         mempool = self.nodes[1].getrawmempool()\r\n         assert rpc_tx_hsh in mempool\r\n@@ -74,7 +75,7 @@ class MempoolUnbroadcastTest(BitcoinTestFramework):\r\n         self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\r\n \r\n         conn = node.add_p2p_connection(P2PTxInvStore())\r\n-        node.mockscheduler(15 * 60)\r\n+        node.mockscheduler(MAX_INITIAL_BROADCAST_DELAY)\r\n         time.sleep(5)\r\n```",
      "created_at": "2020-04-27T10:46:29Z",
      "updated_at": "2020-04-27T12:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415707349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415707349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415708579",
      "pull_request_review_id": 400536876,
      "id": 415708579,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwODU3OQ==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 78,
      "original_position": 78,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "297a178 is the 5 second sleep necessary? It adds 50% to the run time of this file which appears to pass reliably without it. If it is needed, could add a comment explaining why?",
      "created_at": "2020-04-27T10:48:21Z",
      "updated_at": "2020-04-27T12:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415708579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415708579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415709839",
      "pull_request_review_id": 400536876,
      "id": 415709839,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwOTgzOQ==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 85,
      "original_position": 85,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "297a178 this looks like a bug?\r\n```diff\r\n-        node.disconnect_p2ps\r\n+        node.disconnect_p2ps()\r\n```",
      "created_at": "2020-04-27T10:50:29Z",
      "updated_at": "2020-04-27T12:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415709839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415709839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415750840",
      "pull_request_review_id": 400536876,
      "id": 415750840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MDg0MA==",
      "diff_hunk": "@@ -69,9 +54,10 @@ def run_test(self):\n         node.p2ps[1].sync_with_ping()\n         assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n \n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n+        self.log.info(\"Bump time & check that transaction is rebroadcast\")\n+        # Transaction should be rebroadcast approximately 24 hours in the future,\n+        # but can range from 12-36. So bump 36 hours to be sure.\n+        rebroadcast_time = int(time.time()) + 36 * 60 * 60",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": 59,
      "original_position": 59,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In dc1da48 I think a test is missing here to check that the transaction is not rebroadcast the first 12 hours.\r\n```python\r\n        # Check transaction is rebroadcast in 12-36 hour time interval.\r\n        time_now = int(time.time())\r\n\r\n        self.log.info(\"Bump time 12 hours from now, check transaction is not yet rebroadcast\")\r\n        rebroadcast_time = time_now  + (12 * 60 * 60)\r\n        node.setmocktime(rebroadcast_time)\r\n        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\r\n\r\n        self.log.info(\"Bump time 36 hours from now, check transaction is rebroadcast\")\r\n        rebroadcast_time = time_now + (36 * 60 * 60)\r\n        node.setmocktime(rebroadcast_time)\r\n        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\r\n```",
      "created_at": "2020-04-27T11:58:33Z",
      "updated_at": "2020-04-27T12:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415750840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415750840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415780848",
      "pull_request_review_id": 400914880,
      "id": 415780848,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4MDg0OA==",
      "diff_hunk": "@@ -698,6 +701,21 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    void AddUnbroadcastTx(const uint256& txid) {",
      "path": "src/txmempool.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "in_reply_to_id": 414920979,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> [89eeb4a](https://github.com/bitcoin/bitcoin/commit/89eeb4a3335f8e871cc3f5286af4546dff66172a)\r\n> \r\n> Should we annotate this new methods `EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs)` to increase confidence that lock order is preserved ? (like some of them are called from node helpers code and we may refactor lock tacking there at some point)\r\n\r\nWas asking myself this as well.",
      "created_at": "2020-04-27T12:45:41Z",
      "updated_at": "2020-04-27T12:45:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415780848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415780848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 705,
      "original_line": 705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415783405",
      "pull_request_review_id": 400917754,
      "id": 415783405,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4MzQwNQ==",
      "diff_hunk": "@@ -698,6 +701,21 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    void AddUnbroadcastTx(const uint256& txid) {",
      "path": "src/txmempool.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "in_reply_to_id": 414920979,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Enforcing lock order with annotations has never been done in the past. This is generally a layer violation, see also https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-605657525",
      "created_at": "2020-04-27T12:49:21Z",
      "updated_at": "2020-04-27T12:49:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415783405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415783405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 705,
      "original_line": 705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416826914",
      "pull_request_review_id": 402096591,
      "id": 416826914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyNjkxNA==",
      "diff_hunk": "@@ -1978,7 +1978,8 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    // resend 12-36 hours from now, ~1 day on average.\n+    nNextResend = GetTime() + (12 * 60 * 60) + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For follow-up PR: I think it should now be possible to remove the `nLastResend` logic, since we'd always expect there to be a block in the 12-36 hours since the last rebroadcast attempt.",
      "created_at": "2020-04-28T18:20:28Z",
      "updated_at": "2020-04-28T19:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416826914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416826914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1982,
      "original_line": 1982,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416834316",
      "pull_request_review_id": 402096591,
      "id": 416834316,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNDMxNg==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 78,
      "original_position": 78,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415708579,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's to give the scheduler thread time to wake and call `ReattemptInitialBroadcast()` again. If you remove the sleep, then the transaction could potentially be broadcast after the assert_equal below and the test wouldn't test that the tx isn't being unbroadcast.\r\n\r\nI think the sleep could be a bit shorter, and a comment wouldn't harm, but only if the PR is being retouched.",
      "created_at": "2020-04-28T18:32:02Z",
      "updated_at": "2020-04-28T19:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416834316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416834316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416837031",
      "pull_request_review_id": 402096591,
      "id": 416837031,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNzAzMQ==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 84,
      "original_position": 84,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When you're retouching this, I suggest moving the disconnection logic to the end of `test_broadcast()`, so that each sub-test starts with the same state (no connections). It's not a problem now, but in larger test files where there are many subtests, lingering state between subtests makes debugging more difficult.",
      "created_at": "2020-04-28T18:36:32Z",
      "updated_at": "2020-04-28T19:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416837031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416837031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416837980",
      "pull_request_review_id": 402096591,
      "id": 416837980,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNzk4MA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # check transaction was removed from unbroadcast set due to presence in\n+        # a block\n+        removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out\".format(txhsh)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 94,
      "original_position": 94,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(for a future PR) it'd be a nice enhancement to update:\r\n\r\n- the `getmempoolinfo` RPC to show an unbroadcast count\r\n- the `getrawmempool` RPCs to show an unbroadcast flag for each transaction\r\n\r\nThat'd make it easier to test this directly rather than through log-parsing.",
      "created_at": "2020-04-28T18:38:07Z",
      "updated_at": "2020-04-28T19:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416837980",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416837980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416861609",
      "pull_request_review_id": 402096591,
      "id": 416861609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MTYwOQ==",
      "diff_hunk": "@@ -779,6 +779,19 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For a follow-up, I think we should sanity check that the transaction still exists in the mempool before rebroadcasting. If not, delete the entry from the unbroadcast set.\r\n\r\nIf we don't do this, then a logic error where the entry isn't removed from the unbroadcast set when the tx is removed from the mempool turns into a memory leak and a network spam.\r\n\r\n(Removal logic in removeUnchecked() is pretty straightforward and looks fine in this PR, but adding this extra check does no harm. It'd prevent a bug like https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407665982 from causing eternal network spam)",
      "created_at": "2020-04-28T19:18:29Z",
      "updated_at": "2020-04-28T19:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416861609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416861609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 785,
      "original_line": 785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416862364",
      "pull_request_review_id": 402096591,
      "id": 416862364,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjM2NA==",
      "diff_hunk": "@@ -549,6 +549,9 @@ class CTxMemPool\n \n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** track locally submitted transactions to periodically retry initial broadcast */\n+    std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);",
      "path": "src/txmempool.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this could be an unordered_set for constant-time insertion/lookup, but the size is going to be so small that it doesn't matter.",
      "created_at": "2020-04-28T19:19:48Z",
      "updated_at": "2020-04-28T19:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416862364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416862364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 553,
      "original_line": 553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416941785",
      "pull_request_review_id": 402233875,
      "id": 416941785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MTc4NQ==",
      "diff_hunk": "@@ -779,6 +779,19 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future",
      "path": "src/net_processing.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
      "in_reply_to_id": 414923208,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍 added in https://github.com/bitcoin/bitcoin/pull/18807/commits/b5bb038f0eae2eefb923343fdb05b3992c32c208",
      "created_at": "2020-04-28T21:42:35Z",
      "updated_at": "2020-04-28T21:42:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416941785",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416941785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 790,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416942057",
      "pull_request_review_id": 402234182,
      "id": 416942057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MjA1Nw==",
      "diff_hunk": "@@ -1978,7 +1978,8 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    // resend 12-36 hours from now, ~1 day on average.\n+    nNextResend = GetTime() + (12 * 60 * 60) + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "dc1da48dc5e5526215561311c184a8cbc345ecdc",
      "in_reply_to_id": 414923848,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added here: https://github.com/bitcoin/bitcoin/pull/18807/commits/bff4e9a5005409811e3f48c8d8877d63b32c9054",
      "created_at": "2020-04-28T21:43:09Z",
      "updated_at": "2020-04-28T21:43:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416942057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416942057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1982,
      "original_line": 1982,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416944577",
      "pull_request_review_id": 402237060,
      "id": 416944577,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NDU3Nw==",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+\n+        # since the node doesn't have any connections, it will not receive",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 87,
      "original_position": 86,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "6307582b4d30167a931678d12e99a00a0e75e81a",
      "in_reply_to_id": 409168043,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed here: https://github.com/bitcoin/bitcoin/pull/18807/commits/97f15b487f064cf359e8042afa25a5d0fb88bf8c ",
      "created_at": "2020-04-28T21:48:27Z",
      "updated_at": "2020-04-28T21:48:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416944577",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416944577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416944839",
      "pull_request_review_id": 402237368,
      "id": 416944839,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NDgzOQ==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 85,
      "original_position": 85,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415709839,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, see https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414729953.\r\nfixed in https://github.com/bitcoin/bitcoin/pull/18807/commits/97f15b487f064cf359e8042afa25a5d0fb88bf8c.",
      "created_at": "2020-04-28T21:49:03Z",
      "updated_at": "2020-04-28T21:49:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416944839",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416944839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416945180",
      "pull_request_review_id": 402237797,
      "id": 416945180,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NTE4MA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 68,
      "original_position": 68,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415707349,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken in https://github.com/bitcoin/bitcoin/pull/18807/commits/97f15b487f064cf359e8042afa25a5d0fb88bf8c (PR #18807)",
      "created_at": "2020-04-28T21:49:48Z",
      "updated_at": "2020-04-28T21:51:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416945180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416945180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416946204",
      "pull_request_review_id": 402239018,
      "id": 416946204,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjIwNA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 78,
      "original_position": 78,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415708579,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yup. reduced sleep and added comment here: 97f15b487f064cf359e8042afa25a5d0fb88bf8c (PR #18807)",
      "created_at": "2020-04-28T21:52:13Z",
      "updated_at": "2020-04-28T21:52:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416946204",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416946204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416946573",
      "pull_request_review_id": 402239476,
      "id": 416946573,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjU3Mw==",
      "diff_hunk": "@@ -69,9 +54,10 @@ def run_test(self):\n         node.p2ps[1].sync_with_ping()\n         assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n \n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n+        self.log.info(\"Bump time & check that transaction is rebroadcast\")\n+        # Transaction should be rebroadcast approximately 24 hours in the future,\n+        # but can range from 12-36. So bump 36 hours to be sure.\n+        rebroadcast_time = int(time.time()) + 36 * 60 * 60",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": 59,
      "original_position": 59,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415750840,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks! added test here: e77984eaeb1fc10d66e64574f006c2781b38fec7 (PR#18807)",
      "created_at": "2020-04-28T21:53:01Z",
      "updated_at": "2020-04-28T21:53:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416946573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416946573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416946993",
      "pull_request_review_id": 402239987,
      "id": 416946993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Njk5Mw==",
      "diff_hunk": "@@ -779,6 +779,19 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);",
      "path": "src/net_processing.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415376599,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks for the suggestion but I am a pass. I tried it out and it comes out to be about double the code overall, and a lot of passing the scheduler around.",
      "created_at": "2020-04-28T21:53:59Z",
      "updated_at": "2020-04-28T21:53:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416946993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416946993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 792,
      "original_line": 792,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416947490",
      "pull_request_review_id": 402240574,
      "id": 416947490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NzQ5MA==",
      "diff_hunk": "@@ -1978,7 +1978,8 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    // resend 12-36 hours from now, ~1 day on average.\n+    nNextResend = GetTime() + (12 * 60 * 60) + GetRand(24 * 60 * 60);",
      "path": "src/wallet/wallet.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 416826914,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes good point. noted here https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742 and will incorporate into the follow-up. resolving this comment in favor of tracking there.\r\n\r\nthanks!  ",
      "created_at": "2020-04-28T21:55:04Z",
      "updated_at": "2020-04-28T21:55:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416947490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416947490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1982,
      "original_line": 1982,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416947934",
      "pull_request_review_id": 402241053,
      "id": 416947934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NzkzNA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 84,
      "original_position": 84,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 416837031,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "makes sense. updated here: 97f15b487f064cf359e8042afa25a5d0fb88bf8c (PR #18807) and will keep in mind when writing future tests. ",
      "created_at": "2020-04-28T21:56:00Z",
      "updated_at": "2020-04-28T21:56:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416947934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416947934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416948901",
      "pull_request_review_id": 402242154,
      "id": 416948901,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0ODkwMQ==",
      "diff_hunk": "@@ -779,6 +779,19 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+",
      "path": "src/net_processing.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 416861609,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah totally agree. also was planning this for follow up. I've noted as a todo here: https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742. Resolving this conversation and will track there.",
      "created_at": "2020-04-28T21:58:01Z",
      "updated_at": "2020-04-28T21:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416948901",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416948901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 785,
      "original_line": 785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416949893",
      "pull_request_review_id": 402243342,
      "id": 416949893,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0OTg5Mw==",
      "diff_hunk": "@@ -69,9 +54,10 @@ def run_test(self):\n         node.p2ps[1].sync_with_ping()\n         assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n \n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n+        self.log.info(\"Bump time & check that transaction is rebroadcast\")\n+        # Transaction should be rebroadcast approximately 24 hours in the future,\n+        # but can range from 12-36. So bump 36 hours to be sure.\n+        rebroadcast_time = int(time.time()) + 36 * 60 * 60",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": 59,
      "original_position": 59,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415750840,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks @amitiuttarwar ",
      "created_at": "2020-04-28T22:00:14Z",
      "updated_at": "2020-04-28T22:00:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416949893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416949893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416950770",
      "pull_request_review_id": 402244273,
      "id": 416950770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1MDc3MA==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # check transaction was removed from unbroadcast set due to presence in\n+        # a block\n+        removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out\".format(txhsh)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 94,
      "original_position": 94,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 416837980,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good idea! def seems useful to expose some unbroadcast info via the RPCs. I've added it to the follow up todos here: https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742.\r\n\r\nbut not sure how what you're proposing would lead to being able to change this test? because this test is verifying the _reason_ the txn was removed from unbroadcast set. If we just check that its no longer in the set, we don't know if its because of another reason like processing a `GETDATA` ",
      "created_at": "2020-04-28T22:02:09Z",
      "updated_at": "2020-04-28T22:02:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416950770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416950770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416958964",
      "pull_request_review_id": 402253753,
      "id": 416958964,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1ODk2NA==",
      "diff_hunk": "@@ -549,6 +549,9 @@ class CTxMemPool\n \n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** track locally submitted transactions to periodically retry initial broadcast */\n+    std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);",
      "path": "src/txmempool.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 416862364,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, that makes sense. enforces the same uniqueness guarantees that I need, but the ordering is unnecessary.",
      "created_at": "2020-04-28T22:20:51Z",
      "updated_at": "2020-04-28T22:20:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416958964",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416958964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 553,
      "original_line": 553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417012141",
      "pull_request_review_id": 402309743,
      "id": 417012141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMjE0MQ==",
      "diff_hunk": "@@ -698,6 +701,21 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    void AddUnbroadcastTx(const uint256& txid) {",
      "path": "src/txmempool.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "in_reply_to_id": 414920979,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we don't acquire `cs_main` lock for this function, so I don't understand how this comment is applicable? ",
      "created_at": "2020-04-29T00:57:16Z",
      "updated_at": "2020-04-29T00:57:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417012141",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417012141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 705,
      "original_line": 705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417017563",
      "pull_request_review_id": 402315249,
      "id": 417017563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNzU2Mw==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # check transaction was removed from unbroadcast set due to presence in\n+        # a block\n+        removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out\".format(txhsh)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 94,
      "original_position": 94,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 416837980,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you disconnect all P2P connections, then there's no peer to send a GETDATA.",
      "created_at": "2020-04-29T01:20:08Z",
      "updated_at": "2020-04-29T01:20:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417017563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417017563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417018771",
      "pull_request_review_id": 402316467,
      "id": 417018771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxODc3MQ==",
      "diff_hunk": "@@ -698,6 +701,21 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    void AddUnbroadcastTx(const uint256& txid) {",
      "path": "src/txmempool.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "in_reply_to_id": 414920979,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe the comments were not about lock order, but whether the cs_main lock is needed as per #14963? :thinking: \r\n\r\nHaven't thought about this, but if I had to guess, I'd say no.",
      "created_at": "2020-04-29T01:25:12Z",
      "updated_at": "2020-04-29T01:25:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417018771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417018771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 705,
      "original_line": 705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417024192",
      "pull_request_review_id": 402322059,
      "id": 417024192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAyNDE5Mg==",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # check transaction was removed from unbroadcast set due to presence in\n+        # a block\n+        removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out\".format(txhsh)",
      "path": "test/functional/mempool_unbroadcast.py",
      "position": 94,
      "original_position": 94,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 416837980,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in that case yes (assuming the test actually works and you don't accidentally write a bug like I did :)) \r\n\r\nwhat I'm trying to get at is that the log parsing tests the expectation more directly by confirming the reason for removal. the removal reasons / code pathways are simple enough right now, but over time they might change and if we were just checking for removal the test might not fail even though the expectations have changed. \r\n\r\nanyway, I don't think this is a big deal? we could even test both in the follow-up =P \r\nI'm going to resolve this conversation, but feel free to lmk if you feel strongly.",
      "created_at": "2020-04-29T01:48:40Z",
      "updated_at": "2020-04-29T01:48:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417024192",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417024192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417031606",
      "pull_request_review_id": 402329176,
      "id": 417031606,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzMTYwNg==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, updating to check `pfrom` is from outbound sounds good to me. increases delivery guarantee for the general case too. I added this to the todo list on follow ups pr https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742. code is just 1 line change, but I want to make sure to update other relevant comments to clarify its removed via _outbound_ getdata & hopefully add a test case. \r\n\r\nI'm going to resolve this comment here. thanks!",
      "created_at": "2020-04-29T02:19:49Z",
      "updated_at": "2020-04-29T02:19:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417031606",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417031606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417093232",
      "pull_request_review_id": 402392804,
      "id": 417093232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5MzIzMg==",
      "diff_hunk": "@@ -80,6 +83,11 @@ def run_test(self):\n         assert_greater_than_or_equal(tx_creation_time, tx_creation_time_lower)\n         assert_greater_than_or_equal(tx_creation_time_higher, tx_creation_time)\n \n+        # disconnect nodes & make a txn that remains in the unbroadcast set.\n+        disconnect_nodes(self.nodes[0], 2)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"12\"))\n+        connect_nodes(self.nodes[0], 2)",
      "path": "test/functional/mempool_persist.py",
      "position": 21,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-visions",
        "id": 63171930,
        "node_id": "MDQ6VXNlcjYzMTcxOTMw",
        "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-visions",
        "html_url": "https://github.com/robot-visions",
        "followers_url": "https://api.github.com/users/robot-visions/followers",
        "following_url": "https://api.github.com/users/robot-visions/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-visions/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-visions/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-visions/orgs",
        "repos_url": "https://api.github.com/users/robot-visions/repos",
        "events_url": "https://api.github.com/users/robot-visions/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-visions/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I add `time.sleep(10)` before or after `connect_nodes`, then the test fails locally for me (the mempool for node 2 has 6, instead of the expected 5 transactions).\r\n\r\nDoes this test depend on particular timings (e.g. node 1 doesn't have time to relay the transaction to node 2 before the nodes are all shut down)?  If so, in a future change would it make sense to either (i) document the necessary timing assumptions, or (ii) update the test to depend less on particular timings?",
      "created_at": "2020-04-29T06:31:56Z",
      "updated_at": "2020-04-29T06:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417093232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417093232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417408126",
      "pull_request_review_id": 402785608,
      "id": 417408126,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwODEyNg==",
      "diff_hunk": "@@ -69,9 +54,10 @@ def run_test(self):\n         node.p2ps[1].sync_with_ping()\n         assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n \n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n+        self.log.info(\"Bump time & check that transaction is rebroadcast\")\n+        # Transaction should be rebroadcast approximately 24 hours in the future,\n+        # but can range from 12-36. So bump 36 hours to be sure.\n+        rebroadcast_time = int(time.time()) + 36 * 60 * 60",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": 59,
      "original_position": 59,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 415750840,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure this is actually testing anything. If you bump the mocktime and then immediately assert that you haven't received the tx, you haven't given the scheduler any time to do anything.",
      "created_at": "2020-04-29T15:31:00Z",
      "updated_at": "2020-04-29T15:31:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417408126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417408126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417509808",
      "pull_request_review_id": 402912180,
      "id": 417509808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwOTgwOA==",
      "diff_hunk": "@@ -5045,12 +5046,30 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        // check if there are unbroadcast transactions\n+        bool has_unbroadcast_txns = false;\n+\n+        try {\n+            file >> has_unbroadcast_txns;\n+        } catch (const std::exception &e) {\n+            // eof gets set when we try to read the end of the file\n+            // so specifically catch expected error and move on.\n+            if (!file.eof()) throw e;\n+        }\n+\n+        if (has_unbroadcast_txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71",
      "in_reply_to_id": 394483205,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, based on another review comment or two, ended up implementing here 191fc04e9bb99589f204ccfceece7d715a82f4c0 (PR #18807)",
      "created_at": "2020-04-29T18:04:20Z",
      "updated_at": "2020-04-29T18:04:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417509808",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417509808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5061,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418699291",
      "pull_request_review_id": 404353590,
      "id": 418699291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5OTI5MQ==",
      "diff_hunk": "@@ -1605,7 +1622,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 414575673,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "on further thought, I don't think it makes sense to only remove unbroadcast txns on receiving `GETDATA` from outbound peers. \r\n\r\nthis relies on the expectation that outbound peers get the txn before inbound peers (otherwise they might relay), which isn't necessarily true in edge cases. if we were to implement, I'd want to add logic to remove from unbroadcast set if we receive an `inv` from a peer. However, doing all this seems unnecessary right now, especially considering the greater direction of this project (#16698).",
      "created_at": "2020-05-01T19:27:34Z",
      "updated_at": "2020-05-01T19:27:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r418699291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418699291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1626,
      "original_line": 1626,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418754629",
      "pull_request_review_id": 404420321,
      "id": 418754629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NDYyOQ==",
      "diff_hunk": "@@ -80,6 +83,11 @@ def run_test(self):\n         assert_greater_than_or_equal(tx_creation_time, tx_creation_time_lower)\n         assert_greater_than_or_equal(tx_creation_time_higher, tx_creation_time)\n \n+        # disconnect nodes & make a txn that remains in the unbroadcast set.\n+        disconnect_nodes(self.nodes[0], 2)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"12\"))\n+        connect_nodes(self.nodes[0], 2)",
      "path": "test/functional/mempool_persist.py",
      "position": 21,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 417093232,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good catch! this is a bug. line 87 isn't actually disconnecting the two nodes because its passing `node_num` of `2` rather than `1`\r\n\r\nI've added commit 41fd9c1b7b372d7769e005db1d92000c0373651e on the follow-up PR #18807 to fix this issue.\r\n\r\nthank you! ",
      "created_at": "2020-05-01T21:55:21Z",
      "updated_at": "2020-05-01T21:55:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r418754629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418754629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418864246",
      "pull_request_review_id": 404496517,
      "id": 418864246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODg2NDI0Ng==",
      "diff_hunk": "@@ -80,6 +83,11 @@ def run_test(self):\n         assert_greater_than_or_equal(tx_creation_time, tx_creation_time_lower)\n         assert_greater_than_or_equal(tx_creation_time_higher, tx_creation_time)\n \n+        # disconnect nodes & make a txn that remains in the unbroadcast set.\n+        disconnect_nodes(self.nodes[0], 2)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"12\"))\n+        connect_nodes(self.nodes[0], 2)",
      "path": "test/functional/mempool_persist.py",
      "position": 21,
      "original_position": 21,
      "commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "original_commit_id": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "in_reply_to_id": 417093232,
      "user": {
        "login": "robot-visions",
        "id": 63171930,
        "node_id": "MDQ6VXNlcjYzMTcxOTMw",
        "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-visions",
        "html_url": "https://github.com/robot-visions",
        "followers_url": "https://api.github.com/users/robot-visions/followers",
        "following_url": "https://api.github.com/users/robot-visions/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-visions/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-visions/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-visions/orgs",
        "repos_url": "https://api.github.com/users/robot-visions/repos",
        "events_url": "https://api.github.com/users/robot-visions/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-visions/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Confirmed that with 41fd9c1b7b372d7769e005db1d92000c0373651e the test passes even with random `time.sleep(10)` thrown.  Thanks for updating!",
      "created_at": "2020-05-02T03:33:34Z",
      "updated_at": "2020-05-02T03:33:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18038#discussion_r418864246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418864246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    }
  ]
}