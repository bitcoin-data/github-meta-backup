{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
    "id": 300383935,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzAwMzgzOTM1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16442",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16442.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16442.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/6782deb365cc5a9db763aad1bd0604f515ee9a68",
    "number": 16442,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Serve BIP 157 compact filters",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This enables nodes to serve block filters compliant with [BIP 157](https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki). This is the last PR required for BIP 157/158 compatibility.\r\n\r\nIf the node has the block filter index enabled, once the index is in sync, the node will begin signaling the BIP 158 service bit and responding to BIP 157 requests. On invalid requests, the node disconnects the offending peer.\r\n\r\nThis is tested using functional tests. I have also synced an [lnd](https://github.com/lightningnetwork/lnd) testnet node using the neutrino backend connected to a Core node running this code.\r\n\r\nQuestions:\r\n- Should there be a separate CLI flag other than `-blockfilterindex` to enable serving of filters from the index?\r\n- Is the mechanism to only signal the service flag once the index is in sync OK?\r\n- Is the use of `boost::shared_lock` around the checkpoint cache acceptable?",
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-07-23T16:49:00Z",
    "updated_at": "2022-08-16T17:01:59Z",
    "closed_at": "2020-05-05T03:08:47Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "51900c4411e63b59b5a5938ce9ba28a94a46b163",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jimpo:bip157-net",
      "ref": "bip157-net",
      "sha": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 18502174,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODUwMjE3NA==",
        "name": "bitcoin",
        "full_name": "jimpo/bitcoin",
        "owner": {
          "login": "jimpo",
          "id": 881253,
          "node_id": "MDQ6VXNlcjg4MTI1Mw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jimpo",
          "html_url": "https://github.com/jimpo",
          "followers_url": "https://api.github.com/users/jimpo/followers",
          "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
          "organizations_url": "https://api.github.com/users/jimpo/orgs",
          "repos_url": "https://api.github.com/users/jimpo/repos",
          "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jimpo/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jimpo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jimpo/bitcoin",
        "archive_url": "https://api.github.com/repos/jimpo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jimpo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jimpo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jimpo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jimpo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jimpo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jimpo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jimpo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jimpo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jimpo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jimpo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jimpo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jimpo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jimpo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jimpo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jimpo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jimpo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jimpo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jimpo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jimpo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jimpo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jimpo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jimpo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jimpo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jimpo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jimpo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jimpo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jimpo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jimpo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jimpo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jimpo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jimpo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jimpo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jimpo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jimpo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jimpo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jimpo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jimpo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jimpo/bitcoin/hooks",
        "svn_url": "https://github.com/jimpo/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 126773,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2020-05-04T07:11:12Z",
        "created_at": "2014-04-06T23:53:29Z",
        "updated_at": "2019-08-03T04:25:20Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "2e6a16b968a9d111da9a94e82b576460b563c7e3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 777,
    "deletions": 11,
    "changed_files": 16,
    "commits": 16,
    "review_comments": 95,
    "comments": 48
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 2503783793,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwMzc4Mzc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2503783793",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T17:04:49Z"
    },
    {
      "event": "labeled",
      "id": 2504001172,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MDQwMDExNzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2504001172",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T18:24:04Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 514329131,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDMyOTEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514329131",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T18:29:33Z",
      "updated_at": "2020-05-04T21:37:27Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18638 (net: Use mockable time for ping/pong, add tests by MarcoFalke)\n* #18450 (util: Use locale independent ToString(…) instead of locale dependent strprintf(…) for low-level string formatting by practicalswift)\n* #18242 (Add BIP324 encrypted p2p transport de-/serializer (only used in tests) by jonasschnelli)\n* #18165 (Consolidate service flag bit-to-name conversion to a shared serviceFlagToStr function by luke-jr)\n* #18000 (Index for UTXO Set Statistics by fjahr)\n* #17479 (Return BlockValidationState from ProcessNewBlock if CheckBlock/AcceptBlock fails by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514329131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 514333563,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDMzMzU2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514333563",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-23T18:41:54Z",
      "updated_at": "2019-07-23T18:41:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice! Thanks for working on this.\r\n\r\n> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\r\n\r\nI think so,... because some users may want to use the blockfilters only \"internal\", more specific, to rescan wallets (especially in prune mode), though functionality hasn't been added to Bitcoin Core yet\r\n\r\n> Is the mechanism to only signal the service flag once the index is in sync OK?\r\n\r\nI'd say yes. But unsure since I think we also signal NODE_NETWORK when in IBD.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514333563",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2505345833,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwNTM0NTgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2505345833",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-24T07:24:29Z"
    },
    {
      "event": "commented",
      "id": 514643609,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDY0MzYwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514643609",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-24T13:58:07Z",
      "updated_at": "2019-07-24T13:58:07Z",
      "author_association": "MEMBER",
      "body": "Concept ACK - will review within the next few days.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514643609",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "labeled",
      "id": 2507205586,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MDcyMDU1ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2507205586",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-24T18:15:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 268012403,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY4MDEyNDAz",
      "url": null,
      "actor": null,
      "commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just reviewed the first bit but I presume some of these comments will apply later too.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-268012403",
      "submitted_at": "2019-07-29T21:16:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "mentioned",
      "id": 2521128822,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUyMTEyODgyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2521128822",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T20:12:56Z"
    },
    {
      "event": "subscribed",
      "id": 2521128828,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MjExMjg4Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2521128828",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T20:12:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2521132088,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyMTEzMjA4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2521132088",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T20:14:07Z"
    },
    {
      "event": "unlabeled",
      "id": 2521361418,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUyMTM2MTQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2521361418",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T21:44:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "mentioned",
      "id": 2538043963,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUzODA0Mzk2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2538043963",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-06T20:36:04Z"
    },
    {
      "event": "subscribed",
      "id": 2538043965,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MzgwNDM5NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2538043965",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-06T20:36:04Z"
    },
    {
      "event": "mentioned",
      "id": 2539422418,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUzOTQyMjQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2539422418",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-07T09:33:03Z"
    },
    {
      "event": "subscribed",
      "id": 2539422419,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1Mzk0MjI0MTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2539422419",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-07T09:33:03Z"
    },
    {
      "event": "reviewed",
      "id": 272189096,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcyMTg5MDk2",
      "url": null,
      "actor": null,
      "commit_id": "9da9daad6053934009448344bae77f4e18f36869",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-272189096",
      "submitted_at": "2019-08-07T19:46:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "reviewed",
      "id": 272196705,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcyMTk2NzA1",
      "url": null,
      "actor": null,
      "commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-272196705",
      "submitted_at": "2019-08-07T20:01:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "reviewed",
      "id": 272626687,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcyNjI2Njg3",
      "url": null,
      "actor": null,
      "commit_id": "bbb909cf12d11cb546fff2d47c02f93001ed5bdf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\r\n\r\nCode looks great! Especially the tests. A few small comments, but this is very close to an ACK from me.\r\n\r\n### Review checklist\r\n\r\n- [x] 7da4f239e4 net: Signal NODE_COMPACT_FILTERS if the block filter index is on.\r\n- [x] cfc30957b2 net: Define new BIP 157 protocol messages.\r\n- [x] 7bbf08cbba net: Message handling for GETCFILTERS.\r\n- [x] abc58d6984 net: Message handling for GETCFHEADERS.\r\n\r\n  Inconsistent return type (false instead of true).\r\n\r\n- [x] 9da9daad60 net: Message handling for GETCFCHECKPT.\r\n\r\n  Inconsistent return type (false instead of true).\r\n\r\n- [x] bbb909cf12 blockfilter: Fix default (de)?serialization of BlockFilter.\r\n- [x] ab0ea72734 test: Functional tests for cfilters P2P interface.\r\n\r\n  Nice tests!\r\n\r\n- [x] 77653ec568 net: Synchronize cfilter request handling with block filter index.\r\n- [x] f928bdd05f test: Exercise cache update code during getcfcheckpt handling.\r\n- [x] 3499e8877b net: Cache compact filter checkpoints in memory.\r\n\r\n\r\n### Tests\r\n\r\nBuilt and run locally for about a day so far with no problems. Synced filters\r\nfrom somewhere in the mid 500ks.\r\n\r\nConfirmed that the service bit flips appropriately: During filter syncing:\r\n\r\n```\r\n$ ./src/bitcoin-cli -datadir=/data/bitcoin getnetworkinfo\r\n  ...\r\n  \"localservices\": \"0000000000000409\",\r\n\r\n```\r\n\r\nAfter filter syncing:\r\n```\r\n$ ./src/bitcoin-cli -datadir=/data/bitcoin getnetworkinfo\r\n  ...\r\n  \"localservices\": \"0000000000000449\",\r\n```\r\n\r\nThe comprehensive functional test coverage is cause for optimism.              \r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-272626687",
      "submitted_at": "2019-08-08T18:46:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "mentioned",
      "id": 2546528284,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU0NjUyODI4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2546528284",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-09T13:45:31Z"
    },
    {
      "event": "subscribed",
      "id": 2546528285,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1NDY1MjgyODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2546528285",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-09T13:45:31Z"
    },
    {
      "event": "commented",
      "id": 520897695,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDg5NzY5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520897695",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-13T16:01:12Z",
      "updated_at": "2019-08-13T16:09:20Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\n> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\r\n\r\nYes, suggest defaulting to `true`. It can wait until #15845.\r\n\r\n> Is the mechanism to only signal the service flag once the index is in sync OK?\r\n\r\nI guess it's already built, but I'd be fine with moving that to a followup (and kick the `src/net.cpp` discussion can down the road). For fresh nodes the index is synced along with IBD. For existing nodes which add the index there's a slight lag between when this setting is enabled and when it's available. These flags take time to get gossiped around. The odds of another node wasting time because of that seems orders of magnitude smaller than the odds of the node just being offline.\r\n\r\nOn macOS 10.14.6 when configured with `--enable-debug` the newly added `p2p_cfilters.py` ignites my fan and failed the first time with `Block sync timed out:` (passed the second time). ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-520897695",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 522805991,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjgwNTk5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522805991",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-20T00:38:44Z",
      "updated_at": "2019-08-20T00:38:44Z",
      "author_association": "MEMBER",
      "body": "> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\r\n\r\nBIP 157 is controversial, so I think yes.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-522805991",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2585470300,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU4NTQ3MDMwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2585470300",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-27T01:38:16Z"
    },
    {
      "event": "subscribed",
      "id": 2585470302,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1ODU0NzAzMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2585470302",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-27T01:38:16Z"
    },
    {
      "event": "reviewed",
      "id": 279909596,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc5OTA5NTk2",
      "url": null,
      "actor": null,
      "commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. Reviewed each commit and ran tests for each of them. I also did a full IBD and verified that the `NODE_COMPACT_FILTERS` flag is flipped on.",
      "user": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-279909596",
      "submitted_at": "2019-08-27T02:20:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "commented",
      "id": 526909565,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjkwOTU2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526909565",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-01T11:13:53Z",
      "updated_at": "2019-10-25T15:57:10Z",
      "author_association": "MEMBER",
      "body": "I spun up a temporary testnet node in case anyone wants to test the p2p behavior: `uskjxnd7tud7qkeg.onion:18333`",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-526909565",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "reviewed",
      "id": 285164857,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1MTY0ODU3",
      "url": null,
      "actor": null,
      "commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-285164857",
      "submitted_at": "2019-09-07T09:33:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "referenced",
      "id": 2623046450,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MjMwNDY0NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2623046450",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5bee2ae6b25bd607601d34923817f070332d298b",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/5bee2ae6b25bd607601d34923817f070332d298b",
      "created_at": "2019-09-10T17:14:04Z"
    },
    {
      "event": "referenced",
      "id": 2623053640,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MjMwNTM2NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2623053640",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1d08108437f8fca09909214f549b111b37354e36",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/1d08108437f8fca09909214f549b111b37354e36",
      "created_at": "2019-09-10T17:16:29Z"
    },
    {
      "event": "mentioned",
      "id": 2623262006,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjYyMzI2MjAwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2623262006",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T18:29:34Z"
    },
    {
      "event": "subscribed",
      "id": 2623262009,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2MjMyNjIwMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2623262009",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T18:29:34Z"
    },
    {
      "event": "referenced",
      "id": 2625934587,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MjU5MzQ1ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2625934587",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "82e53f37e1bfa6e34eac16b33329d70c3c0127da",
      "commit_url": "https://api.github.com/repos/jamesob/bitcoin/commits/82e53f37e1bfa6e34eac16b33329d70c3c0127da",
      "created_at": "2019-09-11T14:25:06Z"
    },
    {
      "event": "referenced",
      "id": 2636012228,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MzYwMTIyMjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2636012228",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eb812257a3fd2b829131f9fead71ab030e87d9e7",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb812257a3fd2b829131f9fead71ab030e87d9e7",
      "created_at": "2019-09-16T11:15:18Z"
    },
    {
      "event": "referenced",
      "id": 2637800993,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2Mzc4MDA5OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2637800993",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6208e34cd0466a63e7fcade13399cfb2e133a95a",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/6208e34cd0466a63e7fcade13399cfb2e133a95a",
      "created_at": "2019-09-16T21:00:37Z"
    },
    {
      "event": "commented",
      "id": 535989758,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzNTk4OTc1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/535989758",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T15:33:59Z",
      "updated_at": "2019-09-27T15:33:59Z",
      "author_association": "MEMBER",
      "body": "@jimpo any plans to address feedback here? It'd be great to see this PR move towards merge.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-535989758",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2669067426,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjY2OTA2NzQyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2669067426",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T15:33:59Z"
    },
    {
      "event": "subscribed",
      "id": 2669067427,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2NjkwNjc0Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2669067427",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T15:33:59Z"
    },
    {
      "event": "labeled",
      "id": 2672888861,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2NzI4ODg4NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2672888861",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T11:28:45Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "labeled",
      "id": 2699529732,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2OTk1Mjk3MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2699529732",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T15:42:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2708186424,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDgxODY0MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708186424",
      "actor": {
        "login": "PierreRochard",
        "id": 6299681,
        "node_id": "MDQ6VXNlcjYyOTk2ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PierreRochard",
        "html_url": "https://github.com/PierreRochard",
        "followers_url": "https://api.github.com/users/PierreRochard/followers",
        "following_url": "https://api.github.com/users/PierreRochard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PierreRochard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PierreRochard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
        "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
        "repos_url": "https://api.github.com/users/PierreRochard/repos",
        "events_url": "https://api.github.com/users/PierreRochard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2abefd332399db8d3d39499a3563c06c233d2684",
      "commit_url": "https://api.github.com/repos/PierreRochard/bitcoin/commits/2abefd332399db8d3d39499a3563c06c233d2684",
      "created_at": "2019-10-12T16:52:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2726974968,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNjk3NDk2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2726974968",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T10:31:25Z"
    },
    {
      "event": "commented",
      "id": 544125600,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDEyNTYwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544125600",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T10:32:13Z",
      "updated_at": "2019-10-19T10:32:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jamesob Sorry for the delay, just pushed up changes.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-544125600",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2726975349,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcyNjk3NTM0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2726975349",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T10:32:13Z"
    },
    {
      "event": "subscribed",
      "id": 2726975350,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MjY5NzUzNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2726975350",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T10:32:13Z"
    },
    {
      "event": "unlabeled",
      "id": 2727026173,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjcyNzAyNjE3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2727026173",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T12:18:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 545364727,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTM2NDcyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545364727",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T09:52:26Z",
      "updated_at": "2019-10-23T10:48:56Z",
      "author_association": "MEMBER",
      "body": "I lightly tested 8d08df4 on macOS 10.15 using `-bind=127.0.0.1 -debug=net -blockfilterindex=1 -peercfilters=1 -blocksonly` against a locally running Lnd node (master @ 8ed75834480e7be3f42d77f5d96e2880c94156fb) with `bitcoin.node=neutrino` and `neutrino.connect=127.0.0.1`. It initially catches up to the tip nicely.\r\n\r\nI then connect to the using Zap desktop, at which point Lnd starts complaining (maybe an Lnd / Zap bug):\r\n```\r\n2019-10-23 11:18:35.411 [INF] BTCN: New valid peer 127.0.0.1:8333 (outbound) (/Satoshi:0.19.99/)\r\n2019-10-23 11:18:35.412 [INF] BTCN: Syncing to block height 600677 from peer 127.0.0.1:8333\r\n2019-10-23 11:18:35.412 [INF] BTCN: Fetching set of headers from tip (height=600677) from peer 127.0.0.1:8333\r\n2019-10-23 11:19:00.399 [ERR] BTCN: Query failed with 0 out of 435 filters received\r\n2019-10-23 11:19:00.399 [ERR] LNWL: Neutrino rescan ended with error: unable to fetch cfilter\r\n```\r\n\r\nIt seems that bitcoind is disconnecting the Lnd node for requesting too many filters:\r\n\r\n```\r\n2019-10-23T09:18:30Z received: getcfilters (37 bytes) peer=13\r\n2019-10-23T09:18:30Z peer 13 requested too many cfilters/cfheaders: 435 / 100\r\n2019-10-23T09:18:30Z disconnecting peer=13\r\n....\r\n2019-10-23T09:18:35Z Added connection peer=14\r\n2019-10-23T09:18:35Z connection from 127.0.0.1:54906 accepted\r\n2019-10-23T09:18:35Z received: version (121 bytes) peer=14\r\n2019-10-23T09:18:35Z sending version (103 bytes) peer=14\r\n2019-10-23T09:18:35Z send version message: version 70015, blocks=600677, us=[::]:0, peer=14\r\n2019-10-23T09:18:35Z sending verack (0 bytes) peer=14\r\n2019-10-23T09:18:35Z receive version message: /btcwire:0.5.0/neutrino:0.0.4-beta/: version 70013, blocks=600677, us=127.0.0.1:8333, peer=14\r\n2019-10-23T09:18:35Z received: verack (0 bytes) peer=14\r\n2019-10-23T09:18:35Z sending sendheaders (0 bytes) peer=14\r\n2019-10-23T09:18:35Z sending ping (8 bytes) peer=14\r\n2019-10-23T09:18:35Z sending addr (31 bytes) peer=14\r\n2019-10-23T09:18:35Z sending feefilter (8 bytes) peer=14\r\n2019-10-23T09:18:35Z received: getaddr (0 bytes) peer=14\r\n2019-10-23T09:18:35Z received: getheaders (997 bytes) peer=14\r\n2019-10-23T09:18:35Z getheaders -1 to end from peer=14\r\n2019-10-23T09:18:35Z sending headers (1 bytes) peer=14\r\n2019-10-23T09:18:35Z received: pong (8 bytes) peer=14\r\n2019-10-23T09:18:46Z sending addr (30003 bytes) peer=14\r\n```\r\n\r\nAs a result it's not detecting the confirmed coins I sent to the Lnd / Zap wallet. It seems unable to perform the required rescan:\r\n\r\n```\r\nlncli newaddress p2wkh\r\n[lncli] rpc error: code = Unknown desc = Rescan is already done and cannot be updated. It returned error: unable to fetch cfilter`\r\n```\r\n\r\nThere's different maxima for `getcfilters` from `getcfheaders`: https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#getcfilters\r\n\r\n`getcfilters`:\r\n\r\n> 3. The height of the block with hash StopHash MUST be greater than or equal to StartHeight, and the difference MUST be strictly less than 100.\r\n\r\n`getcfheaders`:\r\n\r\n> 3. The height of the block with hash StopHash MUST be greater than or equal to StartHeight, and the difference MUST be strictly less than 2,000.\r\n\r\nBtcd uses the wrong value for `getcfilters`: https://github.com/btcsuite/btcd/blob/master/wire/msggetcfilters.go#L15\r\n\r\nPR: https://github.com/btcsuite/btcd/pull/1482 (makes the error go away, and now it finds the UTXO)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-545364727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 545402053,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTQwMjA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545402053",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T11:38:25Z",
      "updated_at": "2019-10-23T11:49:17Z",
      "author_association": "MEMBER",
      "body": "Should there be a limit to how much filter data we give a peer? My Lnd is going berserk (https://github.com/lightningnetwork/lnd/issues/3630), and bitcoind happily sent it 15 GB of filters and counting:\r\n\r\n```\r\n{\r\n    \"id\": 1,\r\n    \"addr\": \"127.0.0.1:56456\",\r\n    ...\r\n    \"servicesnames\": [\r\n      \"WITNESS\"\r\n    ],\r\n    \"relaytxes\": false,\r\n    \"lastsend\": 1571830501,\r\n    \"lastrecv\": 1571830501,\r\n    \"bytessent\": 15615598004,\r\n    \"bytesrecv\": 514550,\r\n    \"conntime\": 1571829847,\r\n    \"version\": 70013,\r\n    \"subver\": \"/btcwire:0.5.0/neutrino:0.0.4-beta/\",\r\n    \"inbound\": true,\r\n    \"startingheight\": 600689,\r\n    \"banscore\": 0,\r\n    \"synced_headers\": -1,\r\n    \"synced_blocks\": -1,\r\n    \"inflight\": [],\r\n    \"whitelisted\": false,\r\n    \"permissions\": [\r\n      \"noban\",\r\n      \"relay\",\r\n      \"mempool\"\r\n    ],\r\n    \"minfeefilter\": 0,\r\n    \"bytessent_per_msg\": {\r\n      \"addr\": 30192,\r\n      \"block\": 140862657,\r\n      \"cfheaders\": 854,\r\n      \"cfilter\": 15474702573,\r\n      \"feefilter\": 32,\r\n      \"getdata\": 61,\r\n      \"headers\": 742,\r\n      \"inv\": 366,\r\n      \"ping\": 192,\r\n      \"pong\": 160,\r\n      \"sendheaders\": 24,\r\n      \"verack\": 24,\r\n      \"version\": 127\r\n    },\r\n    \"bytesrecv_per_msg\": {\r\n      \"*other*\": 496906,\r\n      \"getaddr\": 24,\r\n      \"getdata\": 8723,\r\n      \"getheaders\": 7339,\r\n      \"inv\": 1037,\r\n      \"ping\": 160,\r\n      \"pong\": 192,\r\n      \"verack\": 24,\r\n      \"version\": 145\r\n    }\r\n  }\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-545402053",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "added_to_project",
      "id": 2741888569,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyNzQxODg4NTY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2741888569",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T19:05:13Z",
      "project_card": {
        "id": 28254720,
        "url": "https://api.github.com/projects/columns/cards/28254720",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "labeled",
      "id": 2755710221,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NTU3MTAyMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2755710221",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-30T12:11:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 548382656,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODM4MjY1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548382656",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T13:46:07Z",
      "updated_at": "2019-10-31T13:46:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors Why would you limit filter data? We don't limit the amount of block data served to a peer...",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-548382656",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2759866877,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc1OTg2Njg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2759866877",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T13:46:08Z"
    },
    {
      "event": "subscribed",
      "id": 2759866878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NTk4NjY4Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2759866878",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T13:46:08Z"
    },
    {
      "event": "commented",
      "id": 549064548,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTA2NDU0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549064548",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T17:30:19Z",
      "updated_at": "2019-11-02T17:30:19Z",
      "author_association": "MEMBER",
      "body": "@jimpo indeed, we discussed this during the IRC meeting. No need to rate limit this specific message.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-549064548",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2765417223,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc2NTQxNzIyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2765417223",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T17:30:20Z"
    },
    {
      "event": "subscribed",
      "id": 2765417225,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NjU0MTcyMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2765417225",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T17:30:20Z"
    },
    {
      "event": "commented",
      "id": 549545829,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTU0NTgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549545829",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-04T21:03:35Z",
      "updated_at": "2019-11-04T21:03:35Z",
      "author_association": "MEMBER",
      "body": "Ping @jimpo for a rebase. Looking to review shortly.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-549545829",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2769219960,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc2OTIxOTk2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2769219960",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-04T21:03:35Z"
    },
    {
      "event": "subscribed",
      "id": 2769219962,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NjkyMTk5NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2769219962",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-04T21:03:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2770730373,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3MDczMDM3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2770730373",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T09:47:33Z"
    },
    {
      "event": "unlabeled",
      "id": 2770908255,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc3MDkwODI1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2770908255",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T10:40:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2779201517,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3OTIwMTUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2779201517",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-07T12:45:50Z"
    },
    {
      "event": "referenced",
      "id": 2786559571,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODY1NTk1NzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2786559571",
      "actor": {
        "login": "barrystyle",
        "id": 14147070,
        "node_id": "MDQ6VXNlcjE0MTQ3MDcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14147070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barrystyle",
        "html_url": "https://github.com/barrystyle",
        "followers_url": "https://api.github.com/users/barrystyle/followers",
        "following_url": "https://api.github.com/users/barrystyle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/barrystyle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/barrystyle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/barrystyle/subscriptions",
        "organizations_url": "https://api.github.com/users/barrystyle/orgs",
        "repos_url": "https://api.github.com/users/barrystyle/repos",
        "events_url": "https://api.github.com/users/barrystyle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/barrystyle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1dd464f8af7af6da057a47b8a15373a1d62dffcb",
      "commit_url": "https://api.github.com/repos/zentoshi/zentoshi/commits/1dd464f8af7af6da057a47b8a15373a1d62dffcb",
      "created_at": "2019-11-11T03:13:20Z"
    },
    {
      "event": "commented",
      "id": 552434757,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjQzNDc1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/552434757",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-11T12:55:24Z",
      "updated_at": "2019-11-11T12:55:24Z",
      "author_association": "MEMBER",
      "body": "There's still some ongoing discussion about `getcfilters` limit in the BIP https://github.com/bitcoin/bips/pull/857 (cc @TheBlueMatt, @harding)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-552434757",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2787844403,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc4Nzg0NDQwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2787844403",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-11T12:55:25Z"
    },
    {
      "event": "subscribed",
      "id": 2787844404,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3ODc4NDQ0MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2787844404",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-11T12:55:25Z"
    },
    {
      "event": "mentioned",
      "id": 2787844410,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc4Nzg0NDQxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2787844410",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-11T12:55:25Z"
    },
    {
      "event": "subscribed",
      "id": 2787844412,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3ODc4NDQ0MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2787844412",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-11T12:55:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2789142541,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc4OTE0MjU0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2789142541",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-11T20:01:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2791356228,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc5MTM1NjIyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2791356228",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-12T12:56:25Z"
    },
    {
      "event": "commented",
      "id": 553689319,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzY4OTMxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553689319",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T02:02:13Z",
      "updated_at": "2019-11-14T02:02:13Z",
      "author_association": "MEMBER",
      "body": "Note that if you want to use the new max limit, you’ll need to do something closer to what we do for getdatas - dumping the full set of requested filters into the send buffer opens us up to a massive dos attack (based purely on Harding’s estimated size I haven’t checked the match myself).\n\n> On Nov 11, 2019, at 07:55, Sjors Provoost <notifications@github.com> wrote:\n> \n> ﻿\n> There's still some ongoing discussion about getcfilters limit in the BIP bitcoin/bips#857 (cc @TheBlueMatt, @harding)\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-553689319",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2797459041,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc5NzQ1OTA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797459041",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T02:02:13Z"
    },
    {
      "event": "subscribed",
      "id": 2797459042,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3OTc0NTkwNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797459042",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T02:02:13Z"
    },
    {
      "event": "mentioned",
      "id": 2797459047,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc5NzQ1OTA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797459047",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T02:02:14Z"
    },
    {
      "event": "subscribed",
      "id": 2797459049,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3OTc0NTkwNDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797459049",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T02:02:14Z"
    },
    {
      "event": "commented",
      "id": 553835807,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzgzNTgwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553835807",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T10:56:47Z",
      "updated_at": "2019-11-14T10:57:28Z",
      "author_association": "MEMBER",
      "body": "Should net_processing maintain a queue of filter messages (20 kb each) we want to send, and then drip them out 10(?) at a time each time `SendMessages` is called? Or not even the messages themselves, but instead construct on the fly?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-553835807",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 554537231,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDUzNzIzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554537231",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-15T21:33:51Z",
      "updated_at": "2019-11-15T21:33:51Z",
      "author_association": "MEMBER",
      "body": "See ProcessGetData - we'll want to do that, yea, keep a queue of what was requested and, just like ProcessGetData, hit that every time we get to ProcessMessage for the peer or SendMessages for the peer, and do nothing else until afterwards. In fact, why is there a new message for fetching these things anyway? Is there any reason to not literally just do it via invs? Would be a smaller diff and pretty in-line with the point of getdata anyway.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-554537231",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "referenced",
      "id": 2805314308,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDUzMTQzMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2805314308",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ae36367f10b1dab6a98bd8fdc229885845790108",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/ae36367f10b1dab6a98bd8fdc229885845790108",
      "created_at": "2019-11-17T10:09:31Z"
    },
    {
      "event": "commented",
      "id": 555256244,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTI1NjI0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555256244",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T23:21:00Z",
      "updated_at": "2019-11-18T23:21:00Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. This looks really good. The commits are nicely laid out and the change set is very easy to follow. I haven't yet done a in-depth review, but I've skimmed through the code and have some high-level feedback:\r\n\r\n- some of the later commits could be squashed into earlier commits to avoid code churn (eg _net: Raise MAX_GETCFILTERS_SIZE following change to BIP 158._ into _net: Message handling for GETCFILTERS._ and _init: Separate CLI flag for block filter index and serving cfilters._ into _net: Define new BIP 157 protocol messages._)\r\n- I don't like the code in net.cpp that accesses the indexer to set the service flags. As well as introducing an unpleasant coupling between net and the indexer, it seems to go against the common understanding of what service flags represent (capabilities rather than current node state)\r\n- Can the compact filter checkpoints be cached in the indexer rather than net_processing? It seems strange to have net_processing burdened with storing index data and its `UpdatedBlockTip()` callback being used to update that cache. The index is already a validationinterface client. Can't it handle updating and serving data from its own cache?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-555256244",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "reviewed",
      "id": 319398156,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE5Mzk4MTU2",
      "url": null,
      "actor": null,
      "commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-319398156",
      "submitted_at": "2019-11-19T22:27:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "reviewed",
      "id": 318775518,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE4Nzc1NTE4",
      "url": null,
      "actor": null,
      "commit_id": "06cd88c6bc822f327b74e1f619dc06fd370f8de3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. Nicely done! Left some comments but haven't made it through the tests yet.",
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-318775518",
      "submitted_at": "2019-11-20T01:15:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "commented",
      "id": 555994220,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk5NDIyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555994220",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:02:48Z",
      "updated_at": "2019-11-20T13:02:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jnewbery @jkczyz Thanks for the reviews!\r\n\r\nOn point 2, I've heard the feedback that dynamically switching the service flags is a bad idea a few times. I also don't like the idea of leaving the service flag on before the index is in sync as it complicates client logic. Maybe it's OK to just not allow the `-peercfilters` flag until the index is in sync. So the user experience is that a fresh node can turn on all the flags, but a node that is in sync without the index will first need to run with `-blockfilterindex=basic` until in sync, then the node operator restarts with the `-peercfilters` flag.\r\n\r\nOn point 3, my reasoning is that the concept of checkpoints, including the checkpoint interval parameter, is specific to the net layer. But I don't think there's too much harm in moving that to the `BlockFilterIndex` and probably is a bit cleaner, so I'd be happy to make that change.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-555994220",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2815169753,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgxNTE2OTc1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2815169753",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:02:49Z"
    },
    {
      "event": "subscribed",
      "id": 2815169754,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4MTUxNjk3NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2815169754",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:02:49Z"
    },
    {
      "event": "mentioned",
      "id": 2815169762,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgxNTE2OTc2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2815169762",
      "actor": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:02:49Z"
    },
    {
      "event": "subscribed",
      "id": 2815169765,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4MTUxNjk3NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2815169765",
      "actor": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:02:49Z"
    },
    {
      "event": "commented",
      "id": 556000306,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjAwMDMwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/556000306",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:20:10Z",
      "updated_at": "2019-11-20T14:14:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "@TheBlueMatt \r\n\r\n> See ProcessGetData - we'll want to do that, yea, keep a queue of what was requested and, just like ProcessGetData, hit that every time we get to ProcessMessage for the peer or SendMessages for the peer, and do nothing else until afterwards. In fact, why is there a new message for fetching these things anyway? Is there any reason to not literally just do it via invs? Would be a smaller diff and pretty in-line with the point of getdata anyway.\r\n\r\nThe rationale is that filters are much smaller than blocks so it's not worthwhile to send a `getdata` for each individual filter. And unlike transactions, which may be of a similar size if not smaller, block filters can be queried more efficiently than individually by specifying a range of blocks. \r\n\r\nA pretty hacky idea might be to getdata with `MSG_BLOCK_FILTER` where the inv is the first 30 bytes of the block hash and the last 2 bytes (which should be 0 due to min difficulty) are replaced by the number of preceding block filters, allowing one to effectively encode a range of blocks into an inv message.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-556000306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2815223076,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgxNTIyMzA3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2815223076",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:20:10Z"
    },
    {
      "event": "subscribed",
      "id": 2815223077,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4MTUyMjMwNzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2815223077",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T13:20:10Z"
    },
    {
      "event": "reviewed",
      "id": 320126712,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIwMTI2NzEy",
      "url": null,
      "actor": null,
      "commit_id": "dd577bef3c4e1f227809a71ad43679b4548fbacf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nWill try to do proper testing in the next days. \r\n\r\nI am not sure why there is a ? in the commit message of f927847519b5a5f8644dcd843af2249e89653a11 and I agree with @jnewbery that some of the later commits could be squashed.\r\n\r\nI don't know if switching the service flag while running is that bad but it seems to me like a good idea to go with a simpler approach first, even if users have to do a little more manual work. A better solution would be great as a follow-up.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-320126712",
      "submitted_at": "2019-11-20T17:21:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "commented",
      "id": 556453838,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjQ1MzgzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/556453838",
      "actor": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T21:58:44Z",
      "updated_at": "2019-11-20T21:58:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "`NODE_COMPACT_FILTERS` should be added to [GetServicesNames](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/util.cpp#L735)",
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-556453838",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "reviewed",
      "id": 321110460,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIxMTEwNDYw",
      "url": null,
      "actor": null,
      "commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Sorry if nit's being annoying, but these `const`'s does help reviewing, when you can \"drop\" that variable from the \"brain cache\" immediately :) .",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-321110460",
      "submitted_at": "2019-11-21T19:35:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "mentioned",
      "id": 2821565205,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgyMTU2NTIwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2821565205",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-21T23:53:38Z"
    },
    {
      "event": "subscribed",
      "id": 2821565212,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4MjE1NjUyMTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2821565212",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-21T23:53:38Z"
    },
    {
      "event": "commented",
      "id": 561811357,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTgxMTM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561811357",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-04T19:50:44Z",
      "updated_at": "2019-12-04T19:50:44Z",
      "author_association": "NONE",
      "body": "my `getnetworkinfo` shows:\r\n```\r\n\"localservicesnames\": [\r\n    \"NETWORK\",\r\n    \"WITNESS\",\r\n    \"NETWORK_LIMITED\"\r\n  ],\r\n```\r\nWhy I don't see `NODE_COMPACT_FILTERS`? `lnd` is working fine in my regtest setup, using `bitcoin.node=neutrino`, so it seems working (received mined coins into lnd wallet), just curious about that service flag.\r\n\r\nI've launched:\r\n```\r\n ./bitcoin-qt -chain=regtest\r\n```\r\nwhile my `bitcoin.conf` is:\r\n```\r\n[regtest]\r\nblockfilterindex=basic\r\npeercfilters=1\r\nserver=1\r\nlisten=1\r\nbind=0.0.0.0\r\n```",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-561811357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 561876826,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTg3NjgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561876826",
      "actor": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-04T22:52:33Z",
      "updated_at": "2019-12-04T22:52:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Why I don't see `NODE_COMPACT_FILTERS`?\r\n\r\n@Talkless I believe that is because `GetServicesNames` hasn't been updated yet. See: https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-556453838\r\n",
      "user": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-561876826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2855832025,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjg1NTgzMjAyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2855832025",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-04T22:52:34Z"
    },
    {
      "event": "subscribed",
      "id": 2855832028,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4NTU4MzIwMjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2855832028",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-04T22:52:34Z"
    },
    {
      "event": "commented",
      "id": 562222259,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjIyMjI1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562222259",
      "actor": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-05T17:08:01Z",
      "updated_at": "2019-12-05T17:08:01Z",
      "author_association": "NONE",
      "body": "Uhg, I've missed that part. Thanks @marcinja .",
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-562222259",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 2858615066,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjg1ODYxNTA2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2858615066",
      "actor": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-05T17:08:01Z"
    },
    {
      "event": "subscribed",
      "id": 2858615070,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4NTg2MTUwNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2858615070",
      "actor": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-05T17:08:01Z"
    },
    {
      "event": "labeled",
      "id": 2918807509,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI5MTg4MDc1MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2918807509",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-02T21:14:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 339014775,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDE0Nzc1",
      "url": null,
      "actor": null,
      "commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "- I don't think that both dynamically changing service flag and coupling index/server sync are great. A lot of PR complexity seems to be due to avoiding client complexity at all price. It's not worth it because client would have to be robust anyway, like reliable peers over an unreliable connection or divergent tips for a short time period. Reading neutrino go backend for example, query timeout have already been implemented, it's just peer error handling don't dissociate between protocol misbehaves and unknown errors.\r\n\r\n- Lack of DoS protection for block servicing doesn't mean we shouldn't for filters. Encumbering block servicing may hamper IBD or normal block propagation, that's not a concern here. Apart of DoS, I would favor at least extending -maxuploadtarget to cover bip 157, nodes operators should be able to do resources control if they want to service bip 157 with some bound. It may align incentives better.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-339014775",
      "submitted_at": "2020-01-07T03:57:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "reviewed",
      "id": 344281599,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MjgxNTk5",
      "url": null,
      "actor": null,
      "commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-344281599",
      "submitted_at": "2020-01-16T23:23:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "commented",
      "id": 583060208,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzA2MDIwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/583060208",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-06T19:04:50Z",
      "updated_at": "2020-02-06T19:04:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-583060208",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "reviewed",
      "id": 359417445,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDE3NDQ1",
      "url": null,
      "actor": null,
      "commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-359417445",
      "submitted_at": "2020-02-16T17:26:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3085817024,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4NTgxNzAyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3085817024",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-01T19:35:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3085820850,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4NTgyMDg1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3085820850",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-01T19:41:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3085909581,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4NTkwOTU4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3085909581",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-01T21:52:43Z"
    },
    {
      "event": "unlabeled",
      "id": 3085918915,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzA4NTkxODkxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3085918915",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-01T22:06:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3089555590,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4OTU1NTU5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3089555590",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T20:33:36Z"
    },
    {
      "event": "referenced",
      "id": 3101773502,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxMDE3NzM1MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3101773502",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "96b402aa40811c860e939f444864780fa45448b6",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/96b402aa40811c860e939f444864780fa45448b6",
      "created_at": "2020-03-05T15:48:21Z"
    },
    {
      "event": "referenced",
      "id": 3101773510,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxMDE3NzM1MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3101773510",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "498546fdc47670fed92af1952f5344e8f2fb5186",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/498546fdc47670fed92af1952f5344e8f2fb5186",
      "created_at": "2020-03-05T15:48:22Z"
    },
    {
      "event": "referenced",
      "id": 3101773518,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxMDE3NzM1MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3101773518",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "482126f3bcb30ec05f2831887061cca9d0b31369",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/482126f3bcb30ec05f2831887061cca9d0b31369",
      "created_at": "2020-03-05T15:48:22Z"
    },
    {
      "event": "labeled",
      "id": 3119170500,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxMTkxNzA1MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3119170500",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T14:54:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3153017429,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE1MzAxNzQyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3153017429",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-22T19:52:50Z"
    },
    {
      "event": "unlabeled",
      "id": 3153068053,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzE1MzA2ODA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3153068053",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-22T20:57:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 604086819,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDA4NjgxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604086819",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T21:04:41Z",
      "updated_at": "2020-03-25T21:04:41Z",
      "author_association": "MEMBER",
      "body": "Looks like there is a data race now (see Travis output https://travis-ci.org/github/bitcoin/bitcoin/jobs/665594933).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-604086819",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3175437722,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3NTQzNzcyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175437722",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T23:56:06Z"
    },
    {
      "event": "reviewed",
      "id": 385370724,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzcwNzI0",
      "url": null,
      "actor": null,
      "commit_id": "7608b32fc27254c84c16090af9a32d6bbdf60ec7",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "kilrau",
        "id": 19181985,
        "node_id": "MDQ6VXNlcjE5MTgxOTg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/19181985?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kilrau",
        "html_url": "https://github.com/kilrau",
        "followers_url": "https://api.github.com/users/kilrau/followers",
        "following_url": "https://api.github.com/users/kilrau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kilrau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kilrau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kilrau/subscriptions",
        "organizations_url": "https://api.github.com/users/kilrau/orgs",
        "repos_url": "https://api.github.com/users/kilrau/repos",
        "events_url": "https://api.github.com/users/kilrau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kilrau/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-385370724",
      "submitted_at": "2020-04-01T08:32:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "commented",
      "id": 611054359,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTA1NDM1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/611054359",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-08T16:20:05Z",
      "updated_at": "2020-04-08T16:20:05Z",
      "author_association": "MEMBER",
      "body": "It looks like the test times out when run in valgrind. Maybe you could bump the timeout like some of the other tests do?\r\n\r\n```py\r\nself.rpc_timeout = 120",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-611054359",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "labeled",
      "id": 3214951554,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyMTQ5NTE1NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3214951554",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-08T16:45:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 621985134,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTk4NTEzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/621985134",
      "actor": {
        "login": "brakmic",
        "id": 56779,
        "node_id": "MDQ6VXNlcjU2Nzc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brakmic",
        "html_url": "https://github.com/brakmic",
        "followers_url": "https://api.github.com/users/brakmic/followers",
        "following_url": "https://api.github.com/users/brakmic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brakmic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brakmic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
        "organizations_url": "https://api.github.com/users/brakmic/orgs",
        "repos_url": "https://api.github.com/users/brakmic/repos",
        "events_url": "https://api.github.com/users/brakmic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brakmic/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T17:10:08Z",
      "updated_at": "2020-04-30T17:10:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. \r\n\r\nBuilt, run and tested on macOS Catalina 10.15.4.",
      "user": {
        "login": "brakmic",
        "id": 56779,
        "node_id": "MDQ6VXNlcjU2Nzc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brakmic",
        "html_url": "https://github.com/brakmic",
        "followers_url": "https://api.github.com/users/brakmic/followers",
        "following_url": "https://api.github.com/users/brakmic/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brakmic/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brakmic/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
        "organizations_url": "https://api.github.com/users/brakmic/orgs",
        "repos_url": "https://api.github.com/users/brakmic/repos",
        "events_url": "https://api.github.com/users/brakmic/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brakmic/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-621985134",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 621991277,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTk5MTI3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/621991277",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T17:21:48Z",
      "updated_at": "2020-04-30T17:21:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "What is the target release of bitcoin-core to have this included?",
      "user": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-621991277",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "removed_from_project",
      "id": 3290982796,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MzI5MDk4Mjc5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3290982796",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T19:18:09Z",
      "project_card": {
        "id": 28254720,
        "url": "https://api.github.com/projects/columns/cards/28254720",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 622052330,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjA1MjMzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622052330",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T19:18:42Z",
      "updated_at": "2020-04-30T19:18:42Z",
      "author_association": "MEMBER",
      "body": "Removed from high-prio for now because it needs rebase. Can be re-added right after the rebase.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622052330",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 622060837,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjA2MDgzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622060837",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T19:34:01Z",
      "updated_at": "2020-04-30T19:34:01Z",
      "author_association": "MEMBER",
      "body": "@prusnak afaik it depends on review; master currently targets v0.21",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622060837",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3291037099,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI5MTAzNzA5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291037099",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T19:34:01Z"
    },
    {
      "event": "subscribed",
      "id": 3291037100,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyOTEwMzcxMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291037100",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T19:34:01Z"
    },
    {
      "event": "commented",
      "id": 622140888,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjE0MDg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622140888",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T22:05:45Z",
      "updated_at": "2020-04-30T22:05:45Z",
      "author_association": "MEMBER",
      "body": "@jimpo would you like me to maintain this branch/pull request? Happy to rebase it and squash the fixup commits.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622140888",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3291525467,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI5MTUyNTQ2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291525467",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T22:05:46Z"
    },
    {
      "event": "subscribed",
      "id": 3291525468,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyOTE1MjU0Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291525468",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-30T22:05:46Z"
    },
    {
      "event": "referenced",
      "id": 3291646937,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646937",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "076b956d4aa1387d88eaebf49e5b128f1cdf8f6c",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/076b956d4aa1387d88eaebf49e5b128f1cdf8f6c",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646940,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646940",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "86e3db85f7a5c57fe286f61705976aa337238c46",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/86e3db85f7a5c57fe286f61705976aa337238c46",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646943,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646943",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f8c299b3d45345456180e7957b37939c93765ece",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/f8c299b3d45345456180e7957b37939c93765ece",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646947,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646947",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "732c02ec7f4df6a7507adf7b1be38ee683f55983",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/732c02ec7f4df6a7507adf7b1be38ee683f55983",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646951,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646951",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d8fd9669a64ebbef1174919757a59b4e50254480",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/d8fd9669a64ebbef1174919757a59b4e50254480",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646954,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646954",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ed6ce3fcbb342886bdbf2d8dfa8c881f0b6071b0",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/ed6ce3fcbb342886bdbf2d8dfa8c881f0b6071b0",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646959,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646959",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "373019fd81bdee6918077931d13dd059f40ebe7b",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/373019fd81bdee6918077931d13dd059f40ebe7b",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646961,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646961",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "16beef351015bbe0a9c624a0eeaa19dabf426f8a",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/16beef351015bbe0a9c624a0eeaa19dabf426f8a",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646964,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646964",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5c365b4d64ed2708f790b0baf80fcd0b842f047",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/d5c365b4d64ed2708f790b0baf80fcd0b842f047",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646969,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5Njk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646969",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "edc3eeca687e6c07dad9c5b6a795a6fc739e4677",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/edc3eeca687e6c07dad9c5b6a795a6fc739e4677",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646976,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646976",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fc278034da232d2a582badd0253616620cb2d2c5",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/fc278034da232d2a582badd0253616620cb2d2c5",
      "created_at": "2020-04-30T22:52:49Z"
    },
    {
      "event": "referenced",
      "id": 3291646981,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646981",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3f89d7f49c720a3b620ef979be019ab93480c4d3",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/3f89d7f49c720a3b620ef979be019ab93480c4d3",
      "created_at": "2020-04-30T22:52:50Z"
    },
    {
      "event": "referenced",
      "id": 3291646987,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646987",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8d63eab4270130a13d6f2128cf0908b82c1f33a9",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/8d63eab4270130a13d6f2128cf0908b82c1f33a9",
      "created_at": "2020-04-30T22:52:50Z"
    },
    {
      "event": "referenced",
      "id": 3291646989,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646989",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "448b218af5ef16e1422dfecf394850e4c9fa8a65",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/448b218af5ef16e1422dfecf394850e4c9fa8a65",
      "created_at": "2020-04-30T22:52:50Z"
    },
    {
      "event": "referenced",
      "id": 3291646992,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646992",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e53faa241ab98a934b06f6f7d6f6397734621d44",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/e53faa241ab98a934b06f6f7d6f6397734621d44",
      "created_at": "2020-04-30T22:52:50Z"
    },
    {
      "event": "referenced",
      "id": 3291646994,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTE2NDY5OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3291646994",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0dcb2910f92694b1c6af17490468f05794ddefb7",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/0dcb2910f92694b1c6af17490468f05794ddefb7",
      "created_at": "2020-04-30T22:52:50Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2ExMzFjM2Q5MzA3ZWEzN2RmZjFmZjc0MDZkNGE3YzI4NzE2MjZl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
      "tree": {
        "sha": "a2dd3657c67ffd715cdc04dc02988589050ddd88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2dd3657c67ffd715cdc04dc02988589050ddd88"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/608359b071dac82a9cf33a6c9e01f87abfcb90eb",
          "sha": "608359b071dac82a9cf33a6c9e01f87abfcb90eb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/608359b071dac82a9cf33a6c9e01f87abfcb90eb"
        }
      ],
      "message": "net: Signal NODE_COMPACT_FILTERS if the block filter index is on.\n\nThe node will enable the NODE_COMPACT_FILTERS service flag once the\nblock filter index catches up to the active chain.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-01T18:10:43Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T12:25:03Z"
      },
      "sha": "1ca131c3d9307ea37dff1ff7406d4a7c2871626e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODBkYjdjNDQwMWU0M2UwODEwMjk0MDdmMTVkOTA4M2Y1MzI5ZTEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e80db7c4401e43e081029407f15d9083f5329e13",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e80db7c4401e43e081029407f15d9083f5329e13",
      "tree": {
        "sha": "7687bbc69d9305bdd62d57e31b5ef72d0c3afe87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7687bbc69d9305bdd62d57e31b5ef72d0c3afe87"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
          "sha": "1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ca131c3d9307ea37dff1ff7406d4a7c2871626e"
        }
      ],
      "message": "net: Define new BIP 157 protocol messages.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-01T18:10:43Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:20:10Z"
      },
      "sha": "e80db7c4401e43e081029407f15d9083f5329e13"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3294714556,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5NDcxNDU1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294714556",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T23:08:02Z"
    },
    {
      "event": "unlabeled",
      "id": 3294735152,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzI5NDczNTE1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294735152",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T23:22:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 622660886,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY2MDg4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622660886",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T03:16:56Z",
      "updated_at": "2020-05-02T03:16:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yes, that would be very appreciated. Thank you @jnewbery!",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622660886",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3294943087,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI5NDk0MzA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294943087",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T03:16:56Z"
    },
    {
      "event": "subscribed",
      "id": 3294943088,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyOTQ5NDMwODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294943088",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T03:16:56Z"
    },
    {
      "event": "commented",
      "id": 622892081,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjg5MjA4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622892081",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T08:47:28Z",
      "updated_at": "2020-05-02T08:47:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "The current changeset seems to be failing the `p2p_cfilters.py` test on some configurations.",
      "user": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622892081",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 623037890,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzAzNzg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623037890",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-03T01:16:10Z",
      "updated_at": "2020-05-03T01:16:10Z",
      "author_association": "MEMBER",
      "body": "ACK 72784c3dac 📶\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 72784c3dac 📶\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhRkwv9GYZx75PbE6Q6VqEuDomfW8amF89WneIQOES2IG69dMBT9QVDjwyBiAhW\r\nJUZBEd5+QruLK+F7zaVSA0MWBTrytjbOPJooVW4zqwz6pvmCGDfvK5GgIq+rxpXi\r\nb+RtNaJOozJOtjzKgYnXnjVMTIsXlikvHNRfPV78ut7rQesZFyvfs/KFEHNDZiQn\r\ntAmTpIWkjCSL+AzCPRHl1oM4btBQYo4U05zXz5R4mwgmfFiGIR9/zVyeGj+IZdjg\r\niyzonjZxcgfkQliBxoKIiuMrZJpUREoxdtz7Bz3K6M/EvAE/uXs1UvO4nW6C9NPb\r\n4ZxzHAHW0ZpFar7rokzAdrYKMol57tMzu4+Zy4+ORR7iFLEtM6/eusoaM926LtgR\r\n7lHn6w7BI4e47WZUOv6B2blJ2PDhUbIMaGGJHcp0L0oq82g8G3+ifKrMQnBMx+t0\r\nvY0uiIqXux9qPmEzCBeTdrRcP9ttEx0dUa9J8CX8SB1nAkHn3Tqm4EI3AjwTqBv1\r\n8rak+MEe\r\n=7kNY\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `1689fa73387e19ab3b3f9823a2aeee68cde8d5c8190a7f072880b6df2ab6a10f  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401081689fa73387e19ab3b3f9823a2aeee68cde8d5c8190a7f072880b6df2ab6a10ff010116a6819232e2b7c8da8d79b8657871408fff0100daeb44aefe15238dd72c149d0a61c8908f020e93f7f5de146a5e6b255c59ab9a8928b56e2ef398f8aa482333d1b5b8e9632e008f1045eae1b48f008b42eb6464aa2ddda0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010177cb55d63e7507acb02cbd5855f257d08f1045eae1b48f008611edd6694efcdd80083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0106b124d1f1dc8b10b78954600389a0bc908f1045eae1b48f00848892b16fb9b7ebe0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010bfee21ae66d65b01d2a92143ddfbe93908f1045eae1b48f008d2d2fc958927c8ce0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623037890",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "milestoned",
      "id": 3296958984,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMyOTY5NTg5ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3296958984",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-03T01:19:34Z",
      "milestone": {
        "title": "0.21.0"
      }
    },
    {
      "event": "added_to_project",
      "id": 3296959227,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzMjk2OTU5MjI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3296959227",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-03T01:20:05Z",
      "project_card": {
        "id": 37448697,
        "url": "https://api.github.com/projects/columns/cards/37448697",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 623038565,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzAzODU2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623038565",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-03T01:23:44Z",
      "updated_at": "2020-05-03T01:23:44Z",
      "author_association": "MEMBER",
      "body": "Re-added to the high-prio project, per my previous comment.\r\n\r\nAlso assigned 0.21.0 milestone to get this merged hopefully early in the timeline, so that additional long-term testing can be conducted.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623038565",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "reviewed",
      "id": 404567931,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTY3OTMx",
      "url": null,
      "actor": null,
      "commit_id": "14df7f7b17f1936ae641c619ae95989090f5a063",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Please bump the rpc_timeout in the test. Feel free to ignore the other stylistic-only nits.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#pullrequestreview-404567931",
      "submitted_at": "2020-05-03T16:17:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGE3Y2I3ODVmMmRjNDZlZmNjYWJhZWFiZjY3YTE3OTdlMzJkOWU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
      "tree": {
        "sha": "b68df1a8db7cd3a1eeffbeedf7fbd0c48b2bc169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b68df1a8db7cd3a1eeffbeedf7fbd0c48b2bc169"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e80db7c4401e43e081029407f15d9083f5329e13",
          "sha": "e80db7c4401e43e081029407f15d9083f5329e13",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e80db7c4401e43e081029407f15d9083f5329e13"
        }
      ],
      "message": "net: Message handling for GETCFILTERS.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:08Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:42:13Z"
      },
      "sha": "94a7cb785f2dc46efccabaeabf67a1797e32d9e6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTRmODM3MjlmNmFjOGViMTFlZWZhYzQwMDlmMGU5YzA5ZDQ3YjBk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
      "tree": {
        "sha": "522d9057cd7ad5fe524eee895077897f23ba9d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/522d9057cd7ad5fe524eee895077897f23ba9d93"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
          "sha": "94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/94a7cb785f2dc46efccabaeabf67a1797e32d9e6"
        }
      ],
      "message": "net: Message handling for GETCFHEADERS.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:48:53Z"
      },
      "sha": "454f83729f6ac8eb11eefac4009f0e9c09d47b0d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTgzZGIyMTA0MGUxM2NjZDZiMzYxYjI1NmU3NGQ0NmU1OTAyOWE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a83db21040e13ccd6b361b256e74d46e59029a5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2a83db21040e13ccd6b361b256e74d46e59029a5",
      "tree": {
        "sha": "0151a454b42e565cc450124abf9b0a8b931d069a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0151a454b42e565cc450124abf9b0a8b931d069a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
          "sha": "454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/454f83729f6ac8eb11eefac4009f0e9c09d47b0d"
        }
      ],
      "message": "net: Message handling for GETCFCHECKPT.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:19:40Z"
      },
      "sha": "2a83db21040e13ccd6b361b256e74d46e59029a5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Yjc2YWRiNGY4NTA0NWFhNzZlZWU5MjE2NzYzNzZhYzcxNDU1ODFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b76adb4f85045aa76eee921676376ac7145581a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6b76adb4f85045aa76eee921676376ac7145581a",
      "tree": {
        "sha": "1a92e157d6c917a8f5e478d54a9b2b4824c960dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a92e157d6c917a8f5e478d54a9b2b4824c960dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a83db21040e13ccd6b361b256e74d46e59029a5",
          "sha": "2a83db21040e13ccd6b361b256e74d46e59029a5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2a83db21040e13ccd6b361b256e74d46e59029a5"
        }
      ],
      "message": "blockfilter: Fix default (de)?serialization of BlockFilter.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:23:44Z"
      },
      "sha": "6b76adb4f85045aa76eee921676376ac7145581a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YThhZDcyNGExOThlNDhhNjFkNzVjODIxNTcyN2Y2NWNmYTdhMGZl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
      "tree": {
        "sha": "3bbb423109acadd144ef5a5f3abba9b111cbd8c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bbb423109acadd144ef5a5f3abba9b111cbd8c9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b76adb4f85045aa76eee921676376ac7145581a",
          "sha": "6b76adb4f85045aa76eee921676376ac7145581a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b76adb4f85045aa76eee921676376ac7145581a"
        }
      ],
      "message": "test: Functional tests for cfilters P2P interface.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:22:44Z"
      },
      "sha": "4a8ad724a198e48a61d75c8215727f65cfa7a0fe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Zjg0NmE0NzcxMjdmOGY5OGVjZDM0NzE3MGIzMDM4YmEzMGM0Yzk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f846a477127f8f98ecd347170b3038ba30c4c99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6f846a477127f8f98ecd347170b3038ba30c4c99",
      "tree": {
        "sha": "35305a35809bf5322f93ec6365992fd637674f22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35305a35809bf5322f93ec6365992fd637674f22"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
          "sha": "4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8ad724a198e48a61d75c8215727f65cfa7a0fe"
        }
      ],
      "message": "net: Synchronize cfilter request handling with block filter index.\n\nSince the block filter index is updated asynchronously by proxy of the\nValidationInterface queue, lazily synchronize the net thread with the\nblock filter index in case lookups fail.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T15:01:58Z"
      },
      "sha": "6f846a477127f8f98ecd347170b3038ba30c4c99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjNkMmNlZTgwYjdmY2ZlZDVlZjY5MGI3YTc5ZDZiZjQ0NDFkNGQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
      "tree": {
        "sha": "a10dca36e490223a7c0cd8b778db7de16d3e960e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a10dca36e490223a7c0cd8b778db7de16d3e960e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f846a477127f8f98ecd347170b3038ba30c4c99",
          "sha": "6f846a477127f8f98ecd347170b3038ba30c4c99",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6f846a477127f8f98ecd347170b3038ba30c4c99"
        }
      ],
      "message": "test: Exercise cache update code during getcfcheckpt handling.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:31:07Z"
      },
      "sha": "763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTVmN2M1ZjhlOTg0MTZmOTVkM2JkOTFhYjU2MzliNjdiMjhlZWYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
      "tree": {
        "sha": "61e2c7053f598e73c6550eef21b3382a06696fe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61e2c7053f598e73c6550eef21b3382a06696fe3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
          "sha": "763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5"
        }
      ],
      "message": "net: Cache compact filter checkpoints in memory.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:41:28Z"
      },
      "sha": "be5f7c5f8e98416f95d3bd91ab5639b67b28eef2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjcxM2NkNzI3NGY2Zjc4YjljNzFmNjQyOWNmNjE3ZWMwMjRjZjM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82713cd7274f6f78b9c71f6429cf617ec024cf34",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/82713cd7274f6f78b9c71f6429cf617ec024cf34",
      "tree": {
        "sha": "26f1450597624f3385b8327f2fca15c232082a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26f1450597624f3385b8327f2fca15c232082a05"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
          "sha": "be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2"
        }
      ],
      "message": "init: Separate CLI flag for block filter index and serving cfilters.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-10-19T10:23:47Z"
      },
      "sha": "82713cd7274f6f78b9c71f6429cf617ec024cf34"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDhhODI1MTczMzk2MDE3N2NmYTU2YjhhYTBlZWFhYzM1ODMzY2Yz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d8a8251733960177cfa56b8aa0eeaac35833cf3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8a8251733960177cfa56b8aa0eeaac35833cf3",
      "tree": {
        "sha": "8ed4bb6ad8fe6040e3c37f9c023c6efe5e07ed09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed4bb6ad8fe6040e3c37f9c023c6efe5e07ed09"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82713cd7274f6f78b9c71f6429cf617ec024cf34",
          "sha": "82713cd7274f6f78b9c71f6429cf617ec024cf34",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/82713cd7274f6f78b9c71f6429cf617ec024cf34"
        }
      ],
      "message": "net: Raise MAX_GETCFILTERS_SIZE following change to BIP 157.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-11-11T20:00:41Z"
      },
      "sha": "5d8a8251733960177cfa56b8aa0eeaac35833cf3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTNlZTc3NzVkNGQyOWZkNTY0OGQxNWJiOGRiOGRhMDc1NWVmYjA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/793ee7775d4d29fd5648d15bb8db8da0755efb07",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/793ee7775d4d29fd5648d15bb8db8da0755efb07",
      "tree": {
        "sha": "1bb72dbab9acafe5edf261a7d26bb216f679ad40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb72dbab9acafe5edf261a7d26bb216f679ad40"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d8a8251733960177cfa56b8aa0eeaac35833cf3",
          "sha": "5d8a8251733960177cfa56b8aa0eeaac35833cf3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8a8251733960177cfa56b8aa0eeaac35833cf3"
        }
      ],
      "message": "util: Add NODE_COMPACT_FILTERS to GetServicesNames.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-02-29T00:39:47Z"
      },
      "sha": "793ee7775d4d29fd5648d15bb8db8da0755efb07"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGE2NjJlMjY5OWJmMjNjZTRhYWU1ZTEyOTE1YmY4NDY3MzU5Zjc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a662e2699bf23ce4aae5e12915bf8467359f76",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/94a662e2699bf23ce4aae5e12915bf8467359f76",
      "tree": {
        "sha": "91513c5d4f1b6292964ae4adbed6a1f06ff92ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91513c5d4f1b6292964ae4adbed6a1f06ff92ee5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/793ee7775d4d29fd5648d15bb8db8da0755efb07",
          "sha": "793ee7775d4d29fd5648d15bb8db8da0755efb07",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/793ee7775d4d29fd5648d15bb8db8da0755efb07"
        }
      ],
      "message": "const all the things.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-02-29T01:05:44Z"
      },
      "sha": "94a662e2699bf23ce4aae5e12915bf8467359f76"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGNkMzYzMDYwZGJjZmRmNDkyMzVhNjFkYjM2NjdiOTljNThjYzFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dcd363060dbcfdf49235a61db3667b99c58cc1d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcd363060dbcfdf49235a61db3667b99c58cc1d",
      "tree": {
        "sha": "6ff00b79110215c790e1292667e9cabc82d3ed8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ff00b79110215c790e1292667e9cabc82d3ed8a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a662e2699bf23ce4aae5e12915bf8467359f76",
          "sha": "94a662e2699bf23ce4aae5e12915bf8467359f76",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/94a662e2699bf23ce4aae5e12915bf8467359f76"
        }
      ],
      "message": "net: Remove dynamic setting of local service flags.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-02-29T01:57:09Z"
      },
      "sha": "0dcd363060dbcfdf49235a61db3667b99c58cc1d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzgyZGViMzY1Y2M1YTlkYjc2M2FhZDFiZDA2MDRmNTE1ZWU5YTY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "tree": {
        "sha": "d04b965e47e3e5b38434b1768ea0d736050fc2f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d04b965e47e3e5b38434b1768ea0d736050fc2f7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dcd363060dbcfdf49235a61db3667b99c58cc1d",
          "sha": "0dcd363060dbcfdf49235a61db3667b99c58cc1d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcd363060dbcfdf49235a61db3667b99c58cc1d"
        }
      ],
      "message": "net: Fix concurrency issues with CF checkpts cache updates.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-03-28T23:54:52Z"
      },
      "sha": "6782deb365cc5a9db763aad1bd0604f515ee9a68"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3298553864,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5ODU1Mzg2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3298553864",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T07:11:27Z"
    },
    {
      "event": "commented",
      "id": 623354890,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzM1NDg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623354890",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T09:22:48Z",
      "updated_at": "2020-05-04T09:23:28Z",
      "author_association": "MEMBER",
      "body": "@jimpo what's the bandwidth consumption by month of a BIP157 client ? I guess you have done simulations but how many clients you can onboard for a given number of public peers servicing filters, these peers allocating half of their 350GB/month available bandwidth to light clients ?",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623354890",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3299011518,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI5OTAxMTUxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3299011518",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T09:22:48Z"
    },
    {
      "event": "subscribed",
      "id": 3299011520,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyOTkwMTE1MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3299011520",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T09:22:48Z"
    },
    {
      "event": "commented",
      "id": 623415561,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQxNTU2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623415561",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T11:45:01Z",
      "updated_at": "2020-05-04T11:45:01Z",
      "author_association": "MEMBER",
      "body": "re-ACK 6782deb365cc5a9db763aad1bd0604f515ee9a68 , only change is bumping the test timeout 🦑\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK 6782deb365cc5a9db763aad1bd0604f515ee9a68 , only change is bumping the test timeout 🦑\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUgd5wv/fOA6Wp1SOJL7RkcBPP6E2vCWfAHgO1Nkqm8IM0b3ni39GycRiGPo8byX\r\nLb4OJoBp1eYn16M3jQM/6p+qwHIaGtK8PF3dYAHE5ausfPbU08i7lSXXgiwLhLRT\r\nyL80XA7GSfmndXRVlC4oT+gEZTiLmtHjRHPxncHBUwk0CsbDranHW26L5yWM837q\r\nIpEEvYmNGdY25EkdyomYPKdYubC1kg3KNfs2al/stHfnZOcc2qHER7TG1iae0uKS\r\nUR+LlZM8YC1m7YDNnfQax7YZha/7uO2mtWk4NRiMF0kKVc+5OMxYafYmG5TgsCyX\r\n/V6yf3PCsDljHqCVMLXIpq7yMa+HFkY0o5VHK/f/rzRHSN5O0by+jejhXqFuHbf4\r\n3hSLWGDxPOZ7t0sJRmmsUXvpd+3a4InTIwYFPXUnMb+8MtoZ+s1y8lyXGeJ0n4LY\r\nhqU/z6KG7Jwco1Jw31/OuLQEj9xps5c5n5sXRo7/RRSsOFVbaPYAyHy+T3X1etrU\r\n+ZINQMb8\r\n=R4ah\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `12b25cde2d674e19d526f72520f81959ca1a59d56f42ab8c777377410a6d12f9  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010812b25cde2d674e19d526f72520f81959ca1a59d56f42ab8c777377410a6d12f9f010c7d24dbfb146ab6e6c5a22d57269ac1708fff0103e6c5ca09555ff20e7dd1e96b0976efb08f1045eb0002df008e35f7261b67005f90083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0109ccc1979b025bd9c1bf622b93174fa8708f120e4784dd7e8cac3b0c23c46c0bced1deff743b811d3e245fcc0ad5a9536cafcdf08f1045eb0002df008e09ae1e5e41df72f0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010f46b84a9e199245ef2f17a502946d28508f1204c580456716c88eb5b5acca33bfb5744c30c27222bcd40548fc2c5154f4fea8708f1045eb0002df0084706c0390824600b0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010f7d0803aa5fd313cd8bca9e19a298a3908f1045eb0002cf00834c0a779f87cdfc80083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623415561",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 623416425,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQxNjQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623416425",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T11:47:13Z",
      "updated_at": "2020-05-04T11:47:13Z",
      "author_association": "MEMBER",
      "body": "@ariard I think maxuploadtarget documentation can be added in a follow-up. No need to solve all issues in one pull request.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623416425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3299495029,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI5OTQ5NTAyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3299495029",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T11:47:13Z"
    },
    {
      "event": "subscribed",
      "id": 3299495037,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyOTk0OTUwMzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3299495037",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T11:47:14Z"
    },
    {
      "event": "commented",
      "id": 623593981,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzU5Mzk4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623593981",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T17:19:45Z",
      "updated_at": "2020-05-04T17:19:45Z",
      "author_association": "MEMBER",
      "body": "> Yes, that would be very appreciated. Thank you @jnewbery!\r\n\r\nThanks @jimpo . I plan to do the following:\r\n\r\n- squash all fixup commits into their respective commits\r\n- rebase on master\r\n- re-order commits and then open PRs for subsets of the functionality so we can make some progress towards merging this.\r\n\r\nThanks again for all your work on this :)",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623593981",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3300894785,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMDg5NDc4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3300894785",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T17:19:45Z"
    },
    {
      "event": "subscribed",
      "id": 3300894793,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDA4OTQ3OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3300894793",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T17:19:45Z"
    },
    {
      "event": "mentioned",
      "id": 3300894803,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMDg5NDgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3300894803",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T17:19:45Z"
    },
    {
      "event": "subscribed",
      "id": 3300894804,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDA4OTQ4MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3300894804",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T17:19:45Z"
    },
    {
      "event": "commented",
      "id": 623690795,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzY5MDc5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623690795",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T20:34:28Z",
      "updated_at": "2020-05-04T20:38:17Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke It's not a question of node resources management, but a more broader concern about light clients current scalability model. Even with a low-bandwidth protocol such as BIP157/158, you may still have a huge discrepancy between the numbers of requesting clients and opt-in public peers to serve them.\r\n\r\nAt its heart, you will always have a incentives conflict between clients asking for resources and offering nothing back and full-node operators. Unless your light client protocol is so ridiculous cheap to rely on niceness of a subset of nodes operators offering free resources, it won't scale for thousands or millions of clients. And it's likely you will always have a ratio disequilibrium between numbers of clients and numbers of full-node, even worst their growth rate won't be the same, first one are so much easier to setup.\r\n\r\nI have been through mailing posts about BIP157/158 design but haven't seen any realistic projections and specially what people do aim to achieve by integrating this at the *p2p* layer. I do understand people may be interested to use compact filters for their own Neutrino-style client and if so they should use the RPC interface. I'm worried about wallet vendors building such chain access backend for people not connecting to their own full-node but directly to the broader network, which maybe fine now because you have really few BIP157 clients, but going to hit a bandwidth scalability wall few years from now instead of pursing better solutions.\r\n\r\nMaybe I'm completely wrong, missing some numbers and I would be super glad to read about what have been previously thought on this issue. In the meanwhile I'm Concept NACK on this and happy to bring it during next meeting and explained issues as I perceived it on the ml.\r\n\r\nNote, that doesn't restrain to get this PR ready for merge.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623690795",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3301605098,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMTYwNTA5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301605098",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T20:34:28Z"
    },
    {
      "event": "subscribed",
      "id": 3301605104,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDE2MDUxMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301605104",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T20:34:28Z"
    },
    {
      "event": "commented",
      "id": 623699520,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzY5OTUyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623699520",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T20:53:04Z",
      "updated_at": "2020-05-04T20:53:04Z",
      "author_association": "MEMBER",
      "body": "@ariard please take discussion of light-client scalability to the mailing list. Comments on this PR should be for review of the implementation.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623699520",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3301667081,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMTY2NzA4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301667081",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T20:53:04Z"
    },
    {
      "event": "subscribed",
      "id": 3301667083,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDE2NjcwODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301667083",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T20:53:04Z"
    },
    {
      "event": "commented",
      "id": 623722125,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzcyMjEyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623722125",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:39:19Z",
      "updated_at": "2020-05-04T21:39:19Z",
      "author_association": "MEMBER",
      "body": "@ariard This is an optional feature, not enabled by default. It might make some sense to support it for trusted peers only (missing from this PR), although protocols like Stratum are probably better for that purpose (but nobody has implemented it for Core to date).\r\n\r\n@jnewbery Concept NACKs, and the explanation therefore (required by dev notes!) do belong on PRs...\r\n\r\nI think I'm going to mirror @ariard's Concept NACK. We do have bloom already for trusted peers, and using this for public peers does indeed harm the network. We can't stop anyone else from deploying it, but with Core's monopoly, that hardly matters.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623722125",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3301819975,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMTgxOTk3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301819975",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:39:19Z"
    },
    {
      "event": "subscribed",
      "id": 3301819978,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDE4MTk5Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301819978",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:39:19Z"
    },
    {
      "event": "mentioned",
      "id": 3301819983,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMTgxOTk4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301819983",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:39:19Z"
    },
    {
      "event": "subscribed",
      "id": 3301819985,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDE4MTk5ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301819985",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:39:19Z"
    },
    {
      "event": "commented",
      "id": 623729168,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzcyOTE2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623729168",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:56:10Z",
      "updated_at": "2020-05-04T21:56:10Z",
      "author_association": "MEMBER",
      "body": "@ariard Of course there are always questions about incentives to provide public data for free by nodes, but that problem isn't unique to BIP157 - you can also question if nodes have reason to provide blocks, transactions, to participate in relay, ... etc. Perhaps there is a future where all these things eventually have to be paid for, but for now, trying to solve this perfectly would just lead you to the conclusion that all non-miner nodes should be turned off, and if someone wants to audit the chain they can connect directly to miners. The relevant question is how BIP157 costs compare to services already offered, which doesn't seem very bad to me.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623729168",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3301870715,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMTg3MDcxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301870715",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:56:10Z"
    },
    {
      "event": "subscribed",
      "id": 3301870718,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDE4NzA3MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301870718",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T21:56:10Z"
    },
    {
      "event": "commented",
      "id": 623731993,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzczMTk5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623731993",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T22:03:17Z",
      "updated_at": "2020-05-04T22:03:17Z",
      "author_association": "MEMBER",
      "body": "@luke-jr Certainly reasons to reject an implementation of a BIP should go on a PR, but you have principled objections to a BIP - which seems to be the case here - it is much more useful to have that criticism be visible more widely. It would be strange if there is apparent consensus that a BIP is a good idea, and then having it not be implemented in Core because of an argument only presented there.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623731993",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3301891542,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMTg5MTU0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301891542",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T22:03:17Z"
    },
    {
      "event": "subscribed",
      "id": 3301891547,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDE4OTE1NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3301891547",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T22:03:17Z"
    },
    {
      "event": "commented",
      "id": 623808184,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzgwODE4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623808184",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T02:59:53Z",
      "updated_at": "2020-05-05T02:59:53Z",
      "author_association": "MEMBER",
      "body": "Github doesn't allow PRs to be transferred, so I've opened #18876 for the new branch.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623808184",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "commented",
      "id": 623809735,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzgwOTczNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623809735",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T03:08:47Z",
      "updated_at": "2020-05-05T03:08:47Z",
      "author_association": "MEMBER",
      "body": "Closing this for #18876. Discussion / review should move to #18876 and the sub-PRs.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623809735",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "closed",
      "id": 3302432823,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzMwMjQzMjgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3302432823",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T03:08:47Z"
    },
    {
      "event": "removed_from_project",
      "id": 3302433031,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MzMwMjQzMzAzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3302433031",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T03:08:58Z",
      "project_card": {
        "id": 37448697,
        "url": "https://api.github.com/projects/columns/cards/37448697",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "demilestoned",
      "id": 3302433270,
      "node_id": "MDE3OkRlbWlsZXN0b25lZEV2ZW50MzMwMjQzMzI3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3302433270",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T03:09:08Z",
      "milestone": {
        "title": "0.21.0"
      }
    },
    {
      "event": "commented",
      "id": 623975146,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzk3NTE0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623975146",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:26:36Z",
      "updated_at": "2020-05-05T10:26:36Z",
      "author_association": "MEMBER",
      "body": "@luke-jr Yes I noticed that's an optional feature, used the term opt-in somehow IIRC.\r\n\r\n@sipa that's the right but you may have an indirect incentive to relay blocks and likely-to-be-blocks to foster network robustness and make your transactions more censorship-resistant. Killing a light client doesn't increase or decrease network security ?\r\n\r\nAnyway, thanks for your comments, throw a lengthy argumentation on the mailing list on this.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623975146",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16442"
    },
    {
      "event": "mentioned",
      "id": 3303588945,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMzU4ODk0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303588945",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:26:36Z"
    },
    {
      "event": "subscribed",
      "id": 3303588950,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDM1ODg5NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303588950",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:26:36Z"
    },
    {
      "event": "mentioned",
      "id": 3303588959,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMzU4ODk1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303588959",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:26:36Z"
    },
    {
      "event": "subscribed",
      "id": 3303588960,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDM1ODg5NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303588960",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:26:36Z"
    },
    {
      "event": "referenced",
      "id": 3426654493,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MjY2NTQ0OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3426654493",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b75ee9bcf6dbde81ab137252adc62cbb335565cd",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/b75ee9bcf6dbde81ab137252adc62cbb335565cd",
      "created_at": "2020-06-09T20:12:59Z"
    },
    {
      "event": "referenced",
      "id": 3900101747,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5MDAxMDE3NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3900101747",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fbda81eaa4b4621742d8a29c94792b9d6ec3d529",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/fbda81eaa4b4621742d8a29c94792b9d6ec3d529",
      "created_at": "2020-10-20T18:05:08Z"
    },
    {
      "event": "referenced",
      "id": 5539528972,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFKLoEM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5539528972",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6e2e4ce09edf5a9a3b9a95199b730e3de1c0fa57",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/6e2e4ce09edf5a9a3b9a95199b730e3de1c0fa57",
      "created_at": "2021-10-29T09:51:53Z"
    },
    {
      "event": "referenced",
      "id": 5543283772,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFKZ8w8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5543283772",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7e47d328e76ddf22682eb570b0d179d6bccf847c",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/7e47d328e76ddf22682eb570b0d179d6bccf847c",
      "created_at": "2021-10-30T01:00:41Z"
    },
    {
      "event": "referenced",
      "id": 5555344235,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFLH9Nr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5555344235",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e87bd6335c350725d78de02b9852142baf20433d",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/e87bd6335c350725d78de02b9852142baf20433d",
      "created_at": "2021-11-02T13:38:45Z"
    },
    {
      "event": "referenced",
      "id": 5578847399,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFMhnSn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5578847399",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bc296316669352d4c9ddcff5062a77ec0c05d16a",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/bc296316669352d4c9ddcff5062a77ec0c05d16a",
      "created_at": "2021-11-07T09:15:00Z"
    },
    {
      "event": "referenced",
      "id": 5578949652,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFMiAQU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5578949652",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "295d6423659e3dd8916e20f1e87c4af1a50cd06b",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/295d6423659e3dd8916e20f1e87c4af1a50cd06b",
      "created_at": "2021-11-07T11:15:27Z"
    },
    {
      "event": "referenced",
      "id": 5601334481,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFN3ZTR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5601334481",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "12ab004e7e15feaf4d602d729e88a1ba8ff6e25f",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/12ab004e7e15feaf4d602d729e88a1ba8ff6e25f",
      "created_at": "2021-11-11T04:01:11Z"
    },
    {
      "event": "referenced",
      "id": 5609099594,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFOVBFK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5609099594",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a4783503152bbd5baf2a9e81e089b2dccbe70dc3",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/a4783503152bbd5baf2a9e81e089b2dccbe70dc3",
      "created_at": "2021-11-12T11:40:00Z"
    },
    {
      "event": "referenced",
      "id": 5613010216,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFOj70o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5613010216",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "228fa42768f66cac4c852e5b1e478d2cafcc9d0d",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/228fa42768f66cac4c852e5b1e478d2cafcc9d0d",
      "created_at": "2021-11-13T10:45:40Z"
    },
    {
      "event": "referenced",
      "id": 5613984802,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFOnpwi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5613984802",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fb20b4e82e4a38469e2421209c6aa745c8110d1c",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/fb20b4e82e4a38469e2421209c6aa745c8110d1c",
      "created_at": "2021-11-14T08:23:17Z"
    },
    {
      "event": "referenced",
      "id": 5614440523,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFOpZBL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5614440523",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "72beaa63b6c6401fe316600e653583168a091dd3",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/72beaa63b6c6401fe316600e653583168a091dd3",
      "created_at": "2021-11-14T16:02:47Z"
    },
    {
      "event": "referenced",
      "id": 5621859957,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAFPFsZ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5621859957",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "47714ab3b71507d2a29859fb1e3e013a06d8aaab",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/47714ab3b71507d2a29859fb1e3e013a06d8aaab",
      "created_at": "2021-11-16T01:44:38Z"
    },
    {
      "event": "referenced",
      "id": 6630696264,
      "node_id": "REFE_lADOABII584cHzuCzwAAAAGLOGVI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6630696264",
      "actor": {
        "login": "gades",
        "id": 4200730,
        "node_id": "MDQ6VXNlcjQyMDA3MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4200730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gades",
        "html_url": "https://github.com/gades",
        "followers_url": "https://api.github.com/users/gades/followers",
        "following_url": "https://api.github.com/users/gades/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gades/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gades/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gades/subscriptions",
        "organizations_url": "https://api.github.com/users/gades/orgs",
        "repos_url": "https://api.github.com/users/gades/repos",
        "events_url": "https://api.github.com/users/gades/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gades/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c7d3760455f31c74a231cae43529da0983932fab",
      "commit_url": "https://api.github.com/repos/cosanta/cosanta-core/commits/c7d3760455f31c74a231cae43529da0983932fab",
      "created_at": "2022-05-18T09:24:51Z"
    },
    {
      "event": "locked",
      "id": 7199002053,
      "node_id": "LOE_lADOABII584cHzuCzwAAAAGtGA3F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199002053",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:01:59Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308415562",
      "pull_request_review_id": 268012403,
      "id": 308415562,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQxNTU2Mg==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please dont add more node logic in net.cpp - if you want node logic put it in net_processing. But, honestly, this should be handled either by init checking these conditions or by the filtering code itself.",
      "created_at": "2019-07-29T20:10:24Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308415562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308415562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308426316",
      "pull_request_review_id": 268012403,
      "id": 308426316,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyNjMxNg==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this defined behavior?",
      "created_at": "2019-07-29T20:37:36Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308426316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308426316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428158",
      "pull_request_review_id": 268012403,
      "id": 308428158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODE1OA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is redundant with BlockRequestAllowed.",
      "created_at": "2019-07-29T20:42:16Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428510",
      "pull_request_review_id": 268012403,
      "id": 308428510,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODUxMA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: bad indentation here.",
      "created_at": "2019-07-29T20:43:11Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428510",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428727",
      "pull_request_review_id": 268012403,
      "id": 308428727,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODcyNw==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: bad indentation here.",
      "created_at": "2019-07-29T20:43:42Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1910,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308429740",
      "pull_request_review_id": 268012403,
      "id": 308429740,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyOTc0MA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't actually think this is sufficient. The stop block may be BlockRequestAllowed while the previous block(s) may not. I think it is sufficient to check BlockRequestAllowed both on the stop block and the start block, but you should also update the comment there to make that an invariant in the future.",
      "created_at": "2019-07-29T20:46:27Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308429740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308429740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1882,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430487",
      "pull_request_review_id": 268012403,
      "id": 308430487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQzMDQ4Nw==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));",
      "path": "src/net_processing.cpp",
      "position": 140,
      "original_position": 79,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because you haven't checked filter_type is sane yet, this allows DoS by filling someone's debug.log with garbage by repeatedly requesting undefined filter types.",
      "created_at": "2019-07-29T20:48:25Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2066,
      "original_line": 2066,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430811",
      "pull_request_review_id": 268012403,
      "id": 308430811,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQzMDgxMQ==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is max_height_diff a parameter? Why not just use the constant directly?",
      "created_at": "2019-07-29T20:49:04Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308440314",
      "pull_request_review_id": 268012403,
      "id": 308440314,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQ0MDMxNA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I actually don't think we want to return false here and a few other places. All it does is change logging but no need to print twice when you just printed the error.",
      "created_at": "2019-07-29T21:13:30Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308440314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308441053",
      "pull_request_review_id": 268012403,
      "id": 308441053,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQ0MTA1Mw==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;\n+    }\n+\n+    std::vector<BlockFilter> filters;\n+\n+    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(INIT_PROTO_VERSION)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should use the peer protocol version, not that I think it matters.",
      "created_at": "2019-07-29T21:15:12Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308441053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308441053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699585",
      "pull_request_review_id": 268364395,
      "id": 308699585,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY5OTU4NQ==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308429740,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point!",
      "created_at": "2019-07-30T12:47:11Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1882,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699798",
      "pull_request_review_id": 268364641,
      "id": 308699798,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY5OTc5OA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308430811,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'll be obvious in subsequent commits.",
      "created_at": "2019-07-30T12:47:37Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308700863",
      "pull_request_review_id": 268365954,
      "id": 308700863,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMDg2Mw==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));",
      "path": "src/net_processing.cpp",
      "position": 140,
      "original_position": 79,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308430487,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Filter type is checked at the top of this function?",
      "created_at": "2019-07-30T12:49:53Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308700863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308700863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2066,
      "original_line": 2066,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308702676",
      "pull_request_review_id": 268368258,
      "id": 308702676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMjY3Ng==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The point of this code is that the filter index may be building in the background and we don't want to signal NODE_COMPACT_FILTERS to peers until it is in sync. Then as soon as it does finish syncing, turn it on. \r\n\r\nI'm not sure this is the best way to do this so, I'm open to suggestions (this is the subject of two of the questions in the PR description). Another option would be to have a separate CLI flag for signalling NODE_COMPACT_FILTERS, which also blocks the net threads until the filter indices are in sync. That way the user can sync the filter index in the background, then shut down the node and restart with the BIP 157 net stuff enabled. Thoughts?",
      "created_at": "2019-07-30T12:53:39Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308702676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308702676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308703023",
      "pull_request_review_id": 268368690,
      "id": 308703023,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMzAyMw==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308426316,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, BlockFilterType is `enum class BlockFilterType : uint8_t`.",
      "created_at": "2019-07-30T12:54:21Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308703023",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308703023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920904",
      "pull_request_review_id": 268639745,
      "id": 308920904,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMDkwNA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308429740,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Upon further reflection, this seems to not be an issue. Discussed offline with @TheBlueMatt.",
      "created_at": "2019-07-30T20:12:55Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920904",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1882,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920968",
      "pull_request_review_id": 268639809,
      "id": 308920968,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMDk2OA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308426316,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmmm, actually I don't think so? SO quotes:\r\n\r\n    C++ standard 5.2.9 Static cast [expr.static.cast] paragraph 7\r\n\r\n    A value of integral or enumeration type can be explicitly converted to an enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the resulting enumeration value is unspecified / undefined (since C++17).\r\n",
      "created_at": "2019-07-30T20:13:03Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308923954",
      "pull_request_review_id": 268643681,
      "id": 308923954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMzk1NA==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308426316,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Converting a uint8_t to a uint8_t-based enum should always result in something in range?",
      "created_at": "2019-07-30T20:20:14Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308923954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308923954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308926293",
      "pull_request_review_id": 268646789,
      "id": 308926293,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyNjI5Mw==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308426316,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"For an enumeration whose underlying type is fixed, the values of the enumeration are the values of the underlying type.\"\r\n\r\nhttps://stackoverflow.com/questions/18195312/what-happens-if-you-static-cast-invalid-value-to-enum-class",
      "created_at": "2019-07-30T20:26:05Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308926293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308926293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308927259",
      "pull_request_review_id": 268648088,
      "id": 308927259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyNzI1OQ==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308440314,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Changed to return true.",
      "created_at": "2019-07-30T20:28:39Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308927259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308927259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311262606",
      "pull_request_review_id": 271599508,
      "id": 311262606,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTI2MjYwNg==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I spent a few minutes writing an indignant comment about how we should be okay with taking this small hack on as technical debt, but it actually looks like it might be pretty easy to address @TheBlueMatt's concerns by adding a method to `CConman` (eg `AddLocalService(ServiceFlags flag)`) that just modifies `nLocalServices`. The indexing code could call it on sync completion. Any reason not to do that?",
      "created_at": "2019-08-06T20:36:03Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311262606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311262606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311263083",
      "pull_request_review_id": 271600110,
      "id": 311263083,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTI2MzA4Mw==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(FWIW I hate the idea of blocking net threads while waiting for filter indices to sync, and slightly less hate requiring a restart to serve the filters.)",
      "created_at": "2019-08-06T20:37:19Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311263083",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311263083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311457705",
      "pull_request_review_id": 271840050,
      "id": 311457705,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ1NzcwNQ==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jamesob Yes, that would work too, but I wouldn't want to index to call CConmann directly. It should do it through some sort of callback to avoid coupling them, which just creates more indirection. I think this approach is a bit easier, but I'd be OK with a callback that updates `nLocalServices` as well.",
      "created_at": "2019-08-07T09:33:03Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311457705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311457705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311731513",
      "pull_request_review_id": 272189096,
      "id": 311731513,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTczMTUxMw==",
      "diff_hunk": "@@ -1989,6 +1991,49 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     return true;\n }\n \n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        return false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "9da9daad6053934009448344bae77f4e18f36869",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/16442/commits/9da9daad6053934009448344bae77f4e18f36869\r\n\r\nWhy isn't this `true` as in `ProcessGetCFilters()`? (Same question for `ProcessGetCFHeaders()`.)",
      "created_at": "2019-08-07T19:46:18Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311731513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311731513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311737473",
      "pull_request_review_id": 272196705,
      "id": 311737473,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTczNzQ3Mw==",
      "diff_hunk": "@@ -403,6 +405,10 @@ limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ)\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;\n+static boost::shared_mutex active_chain_cf_headers_mtx;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\r\n\r\nMight want to make a note here about why we're adding more boost usage instead of using the utilities in `sync` (ie `std::mutex`). I assume this is because we want to allow multiple threads to be able to read the headers cache simultaneously?",
      "created_at": "2019-08-07T20:01:12Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311737473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311737473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311993840",
      "pull_request_review_id": 272517940,
      "id": 311993840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTk5Mzg0MA==",
      "diff_hunk": "@@ -403,6 +405,10 @@ limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ)\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;\n+static boost::shared_mutex active_chain_cf_headers_mtx;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": 311737473,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, the rationale is that `std` doesn't get `shared_mutex` until C++17. I'll add a comment.",
      "created_at": "2019-08-08T11:52:56Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311993840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311993840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312078105",
      "pull_request_review_id": 272626687,
      "id": 312078105,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjA3ODEwNQ==",
      "diff_hunk": "@@ -143,8 +143,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash",
      "path": "src/blockfilter.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "bbb909cf12d11cb546fff2d47c02f93001ed5bdf",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These changes *don't* require reindexing because we [manually spell out the serialization format](https://github.com/jamesob/bitcoin/blob/3499e8877b3be1a629647353ddb8bb380c10a513/src/index/blockfilterindex.cpp#L211) when writing to disk (and same with reads) instead of using these serialization ops, right?",
      "created_at": "2019-08-08T14:48:52Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312078105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312078105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 148,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312182612",
      "pull_request_review_id": 272626687,
      "id": 312182612,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjE4MjYxMg==",
      "diff_hunk": "@@ -1201,6 +1207,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    boost::unique_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);\n+\n+    CChain& active_chain = ::ChainActive();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\r\n\r\nFWIW could make this `const`.",
      "created_at": "2019-08-08T18:29:50Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312182612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312182612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312186387",
      "pull_request_review_id": 272626687,
      "id": 312186387,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjE4NjM4Nw==",
      "diff_hunk": "@@ -2043,23 +2087,37 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return false;\n     }\n \n-    bool index_in_sync = false;\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        boost::shared_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To be clear: at the moment, the `shared_lock` is more or less moot because this is only ever called into from a single thread (`msghand`). I'm not necessarily opposed to using the shared_lock before necessary, but might be worth falling back to our standard `RecursiveMutex` (which comes with lock diagnostics) until and if we actually hit this from multiple threads.",
      "created_at": "2019-08-08T18:38:21Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312186387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312186387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2092,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312467117",
      "pull_request_review_id": 273122878,
      "id": 312467117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQ2NzExNw==",
      "diff_hunk": "@@ -143,8 +143,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash",
      "path": "src/blockfilter.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "bbb909cf12d11cb546fff2d47c02f93001ed5bdf",
      "in_reply_to_id": 312078105,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right",
      "created_at": "2019-08-09T12:59:25Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312467117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312467117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 148,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312470069",
      "pull_request_review_id": 273126581,
      "id": 312470069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQ3MDA2OQ==",
      "diff_hunk": "@@ -2043,23 +2087,37 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return false;\n     }\n \n-    bool index_in_sync = false;\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        boost::shared_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": 312186387,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, for some reason I thought there were multiple message handler threads. Since there's just one and this doesn't require recursive locking, I think going to a `std::mutex` makes sense. Agree?",
      "created_at": "2019-08-09T13:06:54Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312470069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312470069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2092,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312485687",
      "pull_request_review_id": 273147517,
      "id": 312485687,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQ4NTY4Nw==",
      "diff_hunk": "@@ -2043,23 +2087,37 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return false;\n     }\n \n-    bool index_in_sync = false;\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        boost::shared_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": 312186387,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jimpo yep, that'd be my inclination.",
      "created_at": "2019-08-09T13:45:31Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312485687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312485687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2092,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317856404",
      "pull_request_review_id": 279909596,
      "id": 317856404,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg1NjQwNA==",
      "diff_hunk": "@@ -0,0 +1,264 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    NODE_NETWORK, NODE_COMPACT_FILTERS, NODE_WITNESS, NODE_NETWORK_LIMITED,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 nodes in the chain.",
      "path": "test/functional/p2p_cfilters.py",
      "position": null,
      "original_position": 55,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": null,
      "user": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \r\n```suggestion\r\n        # Nodes 0 & 1 share the same first 999 blocks in the chain.\r\n```",
      "created_at": "2019-08-27T01:06:28Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317856404",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317856404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317859935",
      "pull_request_review_id": 279909596,
      "id": 317859935,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg1OTkzNQ==",
      "diff_hunk": "@@ -0,0 +1,264 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    NODE_NETWORK, NODE_COMPACT_FILTERS, NODE_WITNESS, NODE_NETWORK_LIMITED,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 nodes in the chain.\n+        self.nodes[0].generate(999)\n+        sync_blocks(self.nodes)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        # Fetch cfcheckpt on node 0. Since the implementation caches the checkpoints on the active\n+        # chain in memory, this checks that the cache is updated correctly upon subsequent queries\n+        # after the reorg.\n+        request = msg_getcfcheckpt(",
      "path": "test/functional/p2p_cfilters.py",
      "position": 75,
      "original_position": 72,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": null,
      "user": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was a bit confused reviewing ab0ea72734ee0bcf7fdf8201d611941ea86ed15f here before seeing the synchronization code added later. If you decide to remove synchronization between the net thread and the filter-index thread, you can use the `syncwithvalidationinterface` RPC here and after reorging `node0` to keep the tests working consistently.\r\n\r\nOtherwise (without 77653ec568628291f69ea1b5a31bee35a6492a4a) I believe it is possible that the block filter index might not be synced at this point and the request would fail. ",
      "created_at": "2019-08-27T01:27:55Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317859935",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317859935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317861704",
      "pull_request_review_id": 279909596,
      "id": 317861704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg2MTcwNA==",
      "diff_hunk": "@@ -1989,6 +1991,49 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     return true;\n }\n \n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        return false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "9da9daad6053934009448344bae77f4e18f36869",
      "in_reply_to_id": 311731513,
      "user": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like @jimpo may have just forgotten to update the corresponding return statements when updating the PR earlier. See: https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314 \"All it does is change logging but no need to print twice when you just printed the error.\"\r\n\r\nIt should be consistent though.",
      "created_at": "2019-08-27T01:38:15Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317861704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317861704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317867252",
      "pull_request_review_id": 279909596,
      "id": 317867252,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg2NzI1Mg==",
      "diff_hunk": "@@ -1848,6 +1899,238 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": null,
      "user": {
        "login": "marcinja",
        "id": 12243734,
        "node_id": "MDQ6VXNlcjEyMjQzNzM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12243734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcinja",
        "html_url": "https://github.com/marcinja",
        "followers_url": "https://api.github.com/users/marcinja/followers",
        "following_url": "https://api.github.com/users/marcinja/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcinja/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcinja/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcinja/subscriptions",
        "organizations_url": "https://api.github.com/users/marcinja/orgs",
        "repos_url": "https://api.github.com/users/marcinja/repos",
        "events_url": "https://api.github.com/users/marcinja/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcinja/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rather than block the message handler thread until the filter index has synced, is there much downside to ignoring messages when a filter query fails because it is not yet synced? (i.e. not sending anything back to the peer as implemented before 77653ec568628291f69ea1b5a31bee35a6492a4a) \r\n\r\nBy the spec in BIP 157, clients should be downloading from multiple peers so they wouldn't be wasting much bandwidth because of dropped messages caused by this. Blocking the message handler thread just seems to have more downsides IMO.",
      "created_at": "2019-08-27T02:11:37Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317867252",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317867252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1995,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321962707",
      "pull_request_review_id": 285164857,
      "id": 321962707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTk2MjcwNw==",
      "diff_hunk": "@@ -0,0 +1,264 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    NODE_NETWORK, NODE_COMPACT_FILTERS, NODE_WITNESS, NODE_NETWORK_LIMITED,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 nodes in the chain.\n+        self.nodes[0].generate(999)\n+        sync_blocks(self.nodes)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        # Fetch cfcheckpt on node 0. Since the implementation caches the checkpoints on the active\n+        # chain in memory, this checks that the cache is updated correctly upon subsequent queries\n+        # after the reorg.\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n+        # Reorg node 0 to a new chain\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks(self.nodes)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        default_services = NODE_NETWORK | NODE_WITNESS | NODE_NETWORK_LIMITED\n+\n+        # Check that nodes have signalled expected services.\n+        assert_equal(node0.nServices, default_services | NODE_COMPACT_FILTERS)\n+        assert_equal(node1.nServices, default_services)\n+\n+        # Check that the localservices is as expected.\n+        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16),\n+                     default_services | NODE_COMPACT_FILTERS)\n+        assert_equal(int(self.nodes[1].getnetworkinfo()['localservices'], 16),\n+                     default_services)\n+\n+        # Check that peers can fetch cfcheckpt on active chain.\n+        tip_hash = self.nodes[0].getbestblockhash()\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(tip_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+\n+        main_cfcheckpt = self.nodes[0].getblockfilter(main_block_hash, 'basic')['header']\n+        tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+        )\n+\n+        # Check that peers can fetch cfcheckpt on stale chain.\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+\n+        stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (stale_cfcheckpt,)]\n+        )\n+\n+        # Check that peers can fetch cfheaders on active chain.\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(main_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        main_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(main_cfcheckpt, 16)\n+        )\n+\n+        # Check that peers can fetch cfheaders on stale chain.\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        stale_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(stale_cfcheckpt, 16)\n+        )\n+\n+        # Check that peers can fetch cfilters.\n+        stop_hash = self.nodes[0].getblockhash(10)\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stop_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 10)\n+\n+        # Check that cfilter responses are correct.\n+        for cfilter, cfhash, height in zip(response, main_cfhashes, range(1, 11)):\n+            block_hash = self.nodes[0].getblockhash(height)\n+            assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+            assert_equal(cfilter.block_hash, int(block_hash, 16))\n+            computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+            assert_equal(computed_cfhash, cfhash)\n+\n+        # Check thet peers can fetch cfilters for stale blocks.",
      "path": "test/functional/p2p_cfilters.py",
      "position": null,
      "original_position": 186,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be \"that\"? :-)",
      "created_at": "2019-09-07T09:32:13Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r321962707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321962707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322897395",
      "pull_request_review_id": 286350774,
      "id": 322897395,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjg5NzM5NQ==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just had an offline conversation with @sdaftuar here (with regard to #16847) which I think is relevant. Dynamically flipping `nLocalServices` bits doesn't make a ton of sense because we'd need to disconnect and reconnect to all of our peers in order for the flip to have any effect.\r\n\r\nWhen thinking about this, it's instructive to look at how IBD works: we don't flip `NODE_NETWORK` off and on once we've started and finished IBD; instead net_processing just behaves differently during IBD and peers are able to gracefully handle nodes that signal NODE_NETWORK but haven't completed the sync yet and therefore drop getheaders messages.\r\n\r\nI think the way forward in this case is to do something analogous: signal `NODE_COMPACT_FILTERS` from startup when appropriate and ensure that nodes seeking block filters account for the fact that a peer they request filters from may be in the process of building them.",
      "created_at": "2019-09-10T18:29:34Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r322897395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322897395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731085",
      "pull_request_review_id": 304206235,
      "id": 336731085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjczMTA4NQ==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Dynamically flipping nLocalServices bits doesn't make a ton of sense because we'd need to disconnect and reconnect to all of our peers in order for the flip to have any effect.\r\n\r\nI disagree with this. New inbound connections will see that the service bit has been flipped. And clients who need the filters wouldn't connect until it is on, so it's not like any inbound connections need to periodically disconnect/reconnect. And if I understand correctly, we re-advertise our local address with service bits to each peer every day on average, so the network should see the change eventually without the node operator having to do anything.\r\n\r\n>  instead net_processing just behaves differently during IBD and peers are able to gracefully handle nodes that signal NODE_NETWORK but haven't completed the sync yet and therefore drop getheaders messages.\r\n\r\nThis feels a bit different because the `version` message includes a start height indicating how far behind the node is. I suppose clients could also just request checkpoints and determine how far behind a node's filter index is at least to within 1,000 blocks though.\r\n",
      "created_at": "2019-10-19T10:11:21Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731315",
      "pull_request_review_id": 304206475,
      "id": 336731315,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjczMTMxNQ==",
      "diff_hunk": "@@ -1848,6 +1899,238 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "3499e8877b3be1a629647353ddb8bb380c10a513",
      "in_reply_to_id": 317867252,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It just makes the client logic more complicated as they need to have timeouts and if the index is active (like it has gotten in sync once since the node has been running), it should catch up to the tip pretty fast.",
      "created_at": "2019-10-19T10:18:32Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1995,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346092157",
      "pull_request_review_id": 316669244,
      "id": 346092157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjA5MjE1Nw==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In any case, can you simply modify `nLocalServices` directly when the index has finished syncing? Or does other code that accesses it directly need to see the bit set even before sync is done?",
      "created_at": "2019-11-14T01:47:08Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r346092157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346092157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347724051",
      "pull_request_review_id": 318775518,
      "id": 347724051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzcyNDA1MQ==",
      "diff_hunk": "@@ -230,6 +230,43 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+\n+/**\n+ * getcfilters requests compact filters for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFILTERS;\n+/**\n+ * cfilter is a response to a getcfilters request containing a single compact\n+ * filter.\n+ */\n+extern const char *CFILTER;\n+/**\n+ * getcfheaders requests compact filter headers for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFHEADERS;\n+/**\n+ * cfheaders is a response to a getcfheaders request containing a vector of\n+ * filter headers for each block in the requested range.",
      "path": "src/protocol.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "06cd88c6bc822f327b74e1f619dc06fd370f8de3",
      "in_reply_to_id": null,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be the previous filter header and a vector of filter hashes.",
      "created_at": "2019-11-19T04:13:52Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r347724051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347724051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": 256,
      "original_start_line": 252,
      "start_side": "RIGHT",
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347726881",
      "pull_request_review_id": 318775518,
      "id": 347726881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzcyNjg4MQ==",
      "diff_hunk": "@@ -1880,6 +1883,98 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "in_reply_to_id": null,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would this logic be more suitable encapsulated as a method of `CNode`?",
      "created_at": "2019-11-19T04:31:58Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r347726881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347726881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": 1897,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348203012",
      "pull_request_review_id": 319398156,
      "id": 348203012,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODIwMzAxMg==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        bool lookup_success = QueryFilterIndexWithRetry(\n+            filter_index, index_in_sync,\n+            [=, &prev_header]{ return filter_index->LookupFilterHeader(prev_block, prev_header); }\n+        );\n+        if (!lookup_success) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filter_hashes]{ return filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+        bool index_in_sync = false;\n+\n+        // Populate headers.\n+        int i = headers.size() - 1;\n+        const CBlockIndex* block_index = stop_index;\n+        for (; i >= 0; i--) {\n+            uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n+            block_index = block_index->GetAncestor(height);\n+\n+            if (static_cast<size_t>(i) < active_chain_cf_headers.size() &&\n+                active_chain_cf_headers[i].first == block_index) {\n+                break;\n+            }\n+\n+            // Filter header requested for stale block.",
      "path": "src/net_processing.cpp",
      "position": 267,
      "original_position": 309,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you mean by this comment? Looking at the tests, it seems like we should be able to retrieve filters, headers and checkpoint headers on stale chains.",
      "created_at": "2019-11-19T22:27:35Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348203012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348203012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2193,
      "original_line": 2193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348231611",
      "pull_request_review_id": 318775518,
      "id": 348231611,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODIzMTYxMQ==",
      "diff_hunk": "@@ -1221,6 +1226,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+    const CChain& active_chain = ::ChainActive();\n+\n+    // Drop any entries in the checkpoint cache that have been reorganized off the active chain.\n+    int new_size = active_chain_cf_headers.size();\n+    for (; new_size > 0; new_size--) {\n+        if (active_chain.Contains(active_chain_cf_headers[new_size - 1].first)) {\n+            break;\n+        }\n+    }\n+    active_chain_cf_headers.resize(new_size);\n+\n+    // Populate the checkpoint cache with headers for blocks on the active chain.\n+    for (uint32_t height = (new_size + 1) * CFCHECKPT_INTERVAL;\n+         height <= static_cast<uint32_t>(active_chain.Height());\n+         height += CFCHECKPT_INTERVAL) {\n+        const CBlockIndex* block_index = active_chain[height];\n+        uint256 filter_header;\n+\n+        if (!filter_index.LookupFilterHeader(block_index, filter_header)) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_index.GetFilterType()),\n+                         block_index->GetBlockHash().ToString());",
      "path": "src/net_processing.cpp",
      "position": 74,
      "original_position": 49,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "878825452632fc053e4e9565338c1f42c14d94f1",
      "in_reply_to_id": null,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like you are swallowing the return value below. Can this function be void instead? Or is this a common pattern when you want to log and return early?",
      "created_at": "2019-11-19T23:59:56Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348231611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348231611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": 1331,
      "original_start_line": 1253,
      "start_side": "RIGHT",
      "line": 1333,
      "original_line": 1333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348235765",
      "pull_request_review_id": 318775518,
      "id": 348235765,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODIzNTc2NQ==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        bool lookup_success = QueryFilterIndexWithRetry(\n+            filter_index, index_in_sync,\n+            [=, &prev_header]{ return filter_index->LookupFilterHeader(prev_block, prev_header); }\n+        );\n+        if (!lookup_success) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filter_hashes]{ return filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+        bool index_in_sync = false;\n+\n+        // Populate headers.\n+        int i = headers.size() - 1;\n+        const CBlockIndex* block_index = stop_index;\n+        for (; i >= 0; i--) {\n+            uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n+            block_index = block_index->GetAncestor(height);\n+\n+            if (static_cast<size_t>(i) < active_chain_cf_headers.size() &&\n+                active_chain_cf_headers[i].first == block_index) {\n+                break;\n+            }\n+\n+            // Filter header requested for stale block.",
      "path": "src/net_processing.cpp",
      "position": 267,
      "original_position": 309,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": 348203012,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The preceding condition is checking if the cfheader (i.e. filter header) is cached and thus for a block on the active chain. It breaks early and populates the remaining results from the cache. The comment here is for stale blocks where an index lookup is required since the filter header won't be in the cache. Once the active chain is reached (on a later iteration) the loop breaks and the cache is used.",
      "created_at": "2019-11-20T00:16:41Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348235765",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348235765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2193,
      "original_line": 2193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348246889",
      "pull_request_review_id": 318775518,
      "id": 348246889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODI0Njg4OQ==",
      "diff_hunk": "@@ -1998,17 +2022,27 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return true;\n     }\n \n+    bool index_in_sync = false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7a05bb6cb94902ba7ab442134b7c52f5813e4280",
      "in_reply_to_id": null,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Both the interface and implementation of `QueryFilterIndexWithRetry` are quite complex and a bit difficult to reason about, especially when the output parameter `in_sync` is not used by the caller.\r\n\r\nWould it be detrimental to first unconditionally call `index->BlockUntilSyncedToCurrentChain()` at each call site instead of only calling it before retrying? It would make the code more readable by eliminating the retry function and all the complexities around it (e.g. output parameter dependency).",
      "created_at": "2019-11-20T01:02:55Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348246889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348246889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2025,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348631764",
      "pull_request_review_id": 320126712,
      "id": 348631764,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODYzMTc2NA==",
      "diff_hunk": "@@ -2645,7 +2647,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {\n+        BlockFilterIndex* basic_filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+        if (!basic_filter_index) {\n+            LogPrintf(\"WARNING: NODE_COMPACT_FILTERS is signaled, but filter index is not available\\n\");\n+        }\n+        if (!basic_filter_index || !basic_filter_index->IsSynced()) {\n+            // If block filter index is still syncing, do not advertise the service bit.",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "dd577bef3c4e1f227809a71ad43679b4548fbacf",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could print a message to logs in this case too IMO.",
      "created_at": "2019-11-20T17:01:45Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348631764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348631764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2657,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348651034",
      "pull_request_review_id": 320151775,
      "id": 348651034,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODY1MTAzNA==",
      "diff_hunk": "@@ -1221,6 +1226,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+    const CChain& active_chain = ::ChainActive();\n+\n+    // Drop any entries in the checkpoint cache that have been reorganized off the active chain.\n+    int new_size = active_chain_cf_headers.size();\n+    for (; new_size > 0; new_size--) {\n+        if (active_chain.Contains(active_chain_cf_headers[new_size - 1].first)) {\n+            break;\n+        }\n+    }\n+    active_chain_cf_headers.resize(new_size);\n+\n+    // Populate the checkpoint cache with headers for blocks on the active chain.\n+    for (uint32_t height = (new_size + 1) * CFCHECKPT_INTERVAL;\n+         height <= static_cast<uint32_t>(active_chain.Height());\n+         height += CFCHECKPT_INTERVAL) {\n+        const CBlockIndex* block_index = active_chain[height];\n+        uint256 filter_header;\n+\n+        if (!filter_index.LookupFilterHeader(block_index, filter_header)) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_index.GetFilterType()),\n+                         block_index->GetBlockHash().ToString());",
      "path": "src/net_processing.cpp",
      "position": 74,
      "original_position": 49,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "878825452632fc053e4e9565338c1f42c14d94f1",
      "in_reply_to_id": 348231611,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, the return value of this function is ignored, but returning a success indicator is a pretty common pattern and I don't see any downside.",
      "created_at": "2019-11-20T17:39:34Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348651034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348651034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": 1331,
      "original_start_line": 1253,
      "start_side": "RIGHT",
      "line": 1333,
      "original_line": 1333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348652799",
      "pull_request_review_id": 320154084,
      "id": 348652799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODY1Mjc5OQ==",
      "diff_hunk": "@@ -1880,6 +1883,98 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "in_reply_to_id": 347726881,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see any places where it's duplicated, so I don't feel the need to move it.",
      "created_at": "2019-11-20T17:43:21Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348652799",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348652799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": 1897,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348654175",
      "pull_request_review_id": 320155847,
      "id": 348654175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODY1NDE3NQ==",
      "diff_hunk": "@@ -1998,17 +2022,27 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return true;\n     }\n \n+    bool index_in_sync = false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7a05bb6cb94902ba7ab442134b7c52f5813e4280",
      "in_reply_to_id": 348246889,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I agree that `QueryFilterIndexWithRetry` is quite ugly, but I really don't like the idea of blocking the net thread on background processing unless necessary. In fact, I don't like the idea of doing it at all, but there's not really infrastructure for doing proper async logic here.",
      "created_at": "2019-11-20T17:46:19Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348654175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348654175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2025,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349259713",
      "pull_request_review_id": 321110460,
      "id": 349259713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI1OTcxMw==",
      "diff_hunk": "@@ -85,19 +85,23 @@ class BaseIndex : public CValidationInterface\n \n     virtual DB& GetDB() const = 0;\n \n-    /// Get the name of the index for display in logs.\n-    virtual const char* GetName() const = 0;\n-\n public:\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     virtual ~BaseIndex();\n \n+    /// Get the name of the index for display in logs.\n+    virtual const char* GetName() const = 0;\n+\n+    /// Returns whether index has completed the initial sync with the active chain.\n+    /// After returning true once, this function will return true on all subsequent calls.\n+    bool IsSynced() const { return m_synced; }",
      "path": "src/index/base.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: trivial, could be `noexcept`",
      "created_at": "2019-11-21T18:53:22Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349259713",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349259713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349260084",
      "pull_request_review_id": 321110460,
      "id": 349260084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI2MDA4NA==",
      "diff_hunk": "@@ -946,6 +947,18 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Signal NODE_COMPACT_FILTERS if peercfilters and required index are both enabled.\n+    if (gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS)) {\n+        bool index_enabled = std::find(g_enabled_filter_types.begin(),",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** bool index_enabled",
      "created_at": "2019-11-21T18:54:03Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349260084",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349260084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349263563",
      "pull_request_review_id": 321110460,
      "id": 349263563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI2MzU2Mw==",
      "diff_hunk": "@@ -1214,6 +1226,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);",
      "path": "src/net_processing.cpp",
      "position": 51,
      "original_position": 52,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Kinda off-topic I guess, bug locking two mutex'es makes you think, maybe bitcoin codebase would need something like `std::lock`, or better `std::scoped_lock` (C++17) to lock multiple locks in deadlock-free way, with same LOCK() debugging features.",
      "created_at": "2019-11-21T19:01:09Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349263563",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349263563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1310,
      "original_line": 1310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349267940",
      "pull_request_review_id": 321110460,
      "id": 349267940,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI2Nzk0MA==",
      "diff_hunk": "@@ -1214,6 +1226,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+    const CChain& active_chain = ::ChainActive();\n+\n+    // Drop any entries in the checkpoint cache that have been reorganized off the active chain.\n+    int new_size = active_chain_cf_headers.size();",
      "path": "src/net_processing.cpp",
      "position": 56,
      "original_position": 57,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggestion: consider simplifying this bit to remove these manual \"off-by-one'ness-ness\" like `>`, `-1`, etc, using reverse iterators and `find_if`, with something like this:\r\n```\r\nconst auto it = std::find_if(active_chain_cf_headers.crbegin(), active_chain_cf_headers.crend(), [&](const std::pair<const CBlockIndex*, uint256> &i) {\r\n    return active_chain.Contains(i.first);\r\n});\r\nactive_chain_cf_headers.erase(it.base(), active_chain_cf_headers.cend());\r\n```\r\nlater `(new_size + 1)` obviously can be changed into `active_chain_cf_headers.size()`.\r\n\r\nThis method be toyed-with using this trivial example:\r\n```\r\n#include <algorithm>\r\n#include <iostream>\r\n#include <iterator>\r\n#include <vector>\r\n\r\nint main()\r\n{\r\n    std::vector<int> vals{1, 1, 0, 0, 0};\r\n\r\n    const auto it = std::find_if(vals.crbegin(), vals.crend(), [](int v) -> bool {\r\n        return v > 0;\r\n    });\r\n\r\n    vals.erase(it.base(), vals.cend());\r\n\r\n    std::copy(vals.cbegin(),\r\n              vals.cend(),\r\n              std::ostream_iterator<int>(std::cout, \" \"));\r\n}\r\n```",
      "created_at": "2019-11-21T19:11:09Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349267940",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349267940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1315,
      "original_line": 1315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349268350",
      "pull_request_review_id": 321110460,
      "id": 349268350,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI2ODM1MA==",
      "diff_hunk": "@@ -1214,6 +1226,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+    const CChain& active_chain = ::ChainActive();\n+\n+    // Drop any entries in the checkpoint cache that have been reorganized off the active chain.\n+    int new_size = active_chain_cf_headers.size();\n+    for (; new_size > 0; new_size--) {\n+        if (active_chain.Contains(active_chain_cf_headers[new_size - 1].first)) {\n+            break;\n+        }\n+    }\n+    active_chain_cf_headers.resize(new_size);\n+\n+    // Populate the checkpoint cache with headers for blocks on the active chain.\n+    for (uint32_t height = (new_size + 1) * CFCHECKPT_INTERVAL;\n+         height <= static_cast<uint32_t>(active_chain.Height());\n+         height += CFCHECKPT_INTERVAL) {\n+        const CBlockIndex* block_index = active_chain[height];",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be const CBlockIndex* **const** block_index",
      "created_at": "2019-11-21T19:11:57Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349268350",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349268350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349268778",
      "pull_request_review_id": 321110460,
      "id": 349268778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI2ODc3OA==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** bool supported_filter_type",
      "created_at": "2019-11-21T19:13:00Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349268778",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349268778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1944,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349270345",
      "pull_request_review_id": 321110460,
      "id": 349270345,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3MDM0NQ==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 186,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** BlockFilterType filter_type",
      "created_at": "2019-11-21T19:16:29Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349270345",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349270345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349271947",
      "pull_request_review_id": 321110460,
      "id": 349271947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3MTk0Nw==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** bool lookup_success",
      "created_at": "2019-11-21T19:19:54Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349271947",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349271947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2031,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349272389",
      "pull_request_review_id": 321110460,
      "id": 349272389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3MjM4OQ==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** BlockFilterType filter_type",
      "created_at": "2019-11-21T19:20:52Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349272389",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349272389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2058,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349274558",
      "pull_request_review_id": 321110460,
      "id": 349274558,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3NDU1OA==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 240,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be const CBlockIndex* **const** prev_block\r\n\r\nAlso, IDE notes about `start_height - 1` being implicitly converted to `int` (`GetAncestor()` takes int), maybe worth \"documenting\"/\"warning\" by using `static_cast`? Though maybe overkill, idk.",
      "created_at": "2019-11-21T19:25:17Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349274558",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349274558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2072,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349274727",
      "pull_request_review_id": 321110460,
      "id": 349274727,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3NDcyNw==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        bool lookup_success = QueryFilterIndexWithRetry(",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 241,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** bool lookup_success",
      "created_at": "2019-11-21T19:25:36Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349274727",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349274727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349275064",
      "pull_request_review_id": 321110460,
      "id": 349275064,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3NTA2NA==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        bool lookup_success = QueryFilterIndexWithRetry(\n+            filter_index, index_in_sync,\n+            [=, &prev_header]{ return filter_index->LookupFilterHeader(prev_block, prev_header); }\n+        );\n+        if (!lookup_success) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    bool lookup_success = QueryFilterIndexWithRetry(",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 252,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: ditto, could be **const** bool lookup_success",
      "created_at": "2019-11-21T19:26:20Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349275064",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349275064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2084,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349275707",
      "pull_request_review_id": 321110460,
      "id": 349275707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3NTcwNw==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        bool lookup_success = QueryFilterIndexWithRetry(\n+            filter_index, index_in_sync,\n+            [=, &prev_header]{ return filter_index->LookupFilterHeader(prev_block, prev_header); }\n+        );\n+        if (!lookup_success) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filter_hashes]{ return filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 280,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** BlockFilterType filter_type",
      "created_at": "2019-11-21T19:27:37Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349275707",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349275707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349276315",
      "pull_request_review_id": 321110460,
      "id": 349276315,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI3NjMxNQ==",
      "diff_hunk": "@@ -1880,6 +1930,240 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)\n+{\n+    while (!fn()) {\n+        if (in_sync) {\n+            return false;\n+        }\n+        if (!index->BlockUntilSyncedToCurrentChain()) {\n+            return error(\"%s is not ready yet\", index->GetName());\n+        }\n+        in_sync = true;\n+    }\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    std::vector<BlockFilter> filters;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filters]{ return filter_index->LookupFilterRange(start_height, stop_index, filters); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    bool index_in_sync = false;\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        bool lookup_success = QueryFilterIndexWithRetry(\n+            filter_index, index_in_sync,\n+            [=, &prev_header]{ return filter_index->LookupFilterHeader(prev_block, prev_header); }\n+        );\n+        if (!lookup_success) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    bool lookup_success = QueryFilterIndexWithRetry(\n+        filter_index, index_in_sync,\n+        [=, &filter_hashes]{ return filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes); }\n+    );\n+    if (!lookup_success) {\n+        return error(\"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+        bool index_in_sync = false;\n+\n+        // Populate headers.\n+        int i = headers.size() - 1;\n+        const CBlockIndex* block_index = stop_index;\n+        for (; i >= 0; i--) {\n+            uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n+            block_index = block_index->GetAncestor(height);\n+\n+            if (static_cast<size_t>(i) < active_chain_cf_headers.size() &&\n+                active_chain_cf_headers[i].first == block_index) {\n+                break;\n+            }\n+\n+            // Filter header requested for stale block.\n+            bool lookup_success = QueryFilterIndexWithRetry(",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 310,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "Talkless",
        "id": 292191,
        "node_id": "MDQ6VXNlcjI5MjE5MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/292191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Talkless",
        "html_url": "https://github.com/Talkless",
        "followers_url": "https://api.github.com/users/Talkless/followers",
        "following_url": "https://api.github.com/users/Talkless/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Talkless/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Talkless/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Talkless/subscriptions",
        "organizations_url": "https://api.github.com/users/Talkless/orgs",
        "repos_url": "https://api.github.com/users/Talkless/repos",
        "events_url": "https://api.github.com/users/Talkless/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Talkless/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could be **const** bool lookup_success",
      "created_at": "2019-11-21T19:28:55Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349276315",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349276315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349366658",
      "pull_request_review_id": 321251503,
      "id": 349366658,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTM2NjY1OA==",
      "diff_hunk": "@@ -1880,6 +1883,98 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "in_reply_to_id": 347726881,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Duplication is one reason to refactor code, but there are others such as improving readability by hiding complexity. Compare:\r\n\r\n```c++\r\nif (!pfrom->SupportsBlockFilter(BlockFilterType::BASIC)) {\r\n    // ...\r\n}",
      "created_at": "2019-11-21T23:18:55Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349366658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349366658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": 1897,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2029,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349373734",
      "pull_request_review_id": 321251503,
      "id": 349373734,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTM3MzczNA==",
      "diff_hunk": "@@ -1998,17 +2022,27 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return true;\n     }\n \n+    bool index_in_sync = false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7a05bb6cb94902ba7ab442134b7c52f5813e4280",
      "in_reply_to_id": 348246889,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That seems like an orthogonal concern to my point. From what I can tell, `BlockUntilSyncedToCurrentChain` won't block needlessly:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/46d6930f8c7ba7cbcd7d86dd5d0117642fcbc819/src/index/base.h#L95-L100\r\n\r\nThat is, it is short-circuited if the index is current:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b2a6b0216192b6e8428f1a80b47f5178fccb961a/src/index/base.cpp#L282-L289\r\n\r\nSo in best case you would just verify that the index is caught up before querying it. And in worse case, you would block until caught up just as you're already doing in `QueryFilterIndexWithRetry`.\r\n\r\nWould also obliviate the need to address some of @Talkless's nits. ;)",
      "created_at": "2019-11-21T23:43:44Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349373734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349373734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2025,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363578596",
      "pull_request_review_id": 339014775,
      "id": 363578596,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3ODU5Ng==",
      "diff_hunk": "@@ -1880,6 +1883,98 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));",
      "path": "src/net_processing.cpp",
      "position": 102,
      "original_position": 39,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "aaceafd\r\n\r\nIs generic BIP 157 support can be checked at beginning of ProcessMessage like it's done for NODE_BLOOM ? It would avoid to busy ThreadMessageHandler for nothing?",
      "created_at": "2020-01-07T03:28:46Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363578596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363578596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2028,
      "original_line": 2028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363579193",
      "pull_request_review_id": 339014775,
      "id": 363579193,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3OTE5Mw==",
      "diff_hunk": "@@ -1880,6 +1883,98 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "path": "src/net_processing.cpp",
      "position": 115,
      "original_position": 52,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "aaceafd\r\n\r\nThis seems to assume than both client and server blockchain views are in sync. In case of diverging tips seen, client may be disconnected for a non-reprehensible request, just for being too fast ? (BlockRequestAllowed is for block which has been validated at least once)",
      "created_at": "2020-01-07T03:33:07Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363579193",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363579193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2041,
      "original_line": 2041,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363579742",
      "pull_request_review_id": 339014775,
      "id": 363579742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3OTc0Mg==",
      "diff_hunk": "@@ -1880,6 +1883,98 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);",
      "path": "src/net_processing.cpp",
      "position": 138,
      "original_position": 75,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "aaceafd\r\n\r\nAs you said, filter type support is already checked at first step. What does this check add ? ",
      "created_at": "2020-01-07T03:36:37Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363579742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363579742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2064,
      "original_line": 2064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363579935",
      "pull_request_review_id": 339014775,
      "id": 363579935,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3OTkzNQ==",
      "diff_hunk": "@@ -1975,6 +1977,51 @@ static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainPar\n     return true;\n }\n \n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {",
      "path": "src/net_processing.cpp",
      "position": 204,
      "original_position": 33,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "07dd76272cf5dc336594c03d32f0ddb107b10568",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "07dd762\r\n\r\nWhat the purpose of checking filters header availability before start of the range ? It seems like zeal on the bip",
      "created_at": "2020-01-07T03:38:00Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363579935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363579935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2130,
      "original_line": 2130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580053",
      "pull_request_review_id": 339014775,
      "id": 363580053,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MDA1Mw==",
      "diff_hunk": "@@ -1975,6 +1977,51 @@ static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainPar\n     return true;\n }\n \n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;",
      "path": "src/net_processing.cpp",
      "position": 213,
      "original_position": 41,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "07dd76272cf5dc336594c03d32f0ddb107b10568",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "07dd762\r\n\r\nnit: filter_headers, also log message",
      "created_at": "2020-01-07T03:38:38Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2139,
      "original_line": 2139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580460",
      "pull_request_review_id": 339014775,
      "id": 363580460,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MDQ2MA==",
      "diff_hunk": "@@ -396,6 +397,10 @@ limitedmap<uint256, std::chrono::microseconds> g_already_asked_for GUARDED_BY(cs\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;",
      "path": "src/net_processing.cpp",
      "position": 38,
      "original_position": 13,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "878825452632fc053e4e9565338c1f42c14d94f1",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "8788254\r\n\r\nWhat the perf improvement of caching checkpoints ? If clients are configured with trusted checkpoints, they are only going to use the higher range, or maybe a rolling checkpoints for last X headers/filters would be better as they are likely to be requested by everyone",
      "created_at": "2020-01-07T03:41:23Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 441,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580801",
      "pull_request_review_id": 339014775,
      "id": 363580801,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MDgwMQ==",
      "diff_hunk": "@@ -1944,6 +1944,25 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7a05bb6cb94902ba7ab442134b7c52f5813e4280",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But you may have race condition between client and server where block isn't fully processed before request is handled, so client would have to bear this case anyway",
      "created_at": "2020-01-07T03:43:38Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580980",
      "pull_request_review_id": 339014775,
      "id": 363580980,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MDk4MA==",
      "diff_hunk": "@@ -946,6 +947,18 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Signal NODE_COMPACT_FILTERS if peercfilters and required index are both enabled.\n+    if (gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS)) {",
      "path": "src/init.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "1b7fbb57a25fdfe27e0d8dc44c3d51f638e06a78",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1b7fbb5\r\n\r\nIMO you can set -blockfilterindex by transivity if -peercfilters is already set, just mention it in the helper.",
      "created_at": "2020-01-07T03:44:58Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580980",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363580980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 991,
      "original_line": 991,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367700676",
      "pull_request_review_id": 344281599,
      "id": 367700676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwMDY3Ng==",
      "diff_hunk": "@@ -0,0 +1,267 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    NODE_NETWORK, NODE_COMPACT_FILTERS, NODE_WITNESS, NODE_NETWORK_LIMITED,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [\n+            [\"-blockfilterindex\", \"-peercfilters\"],\n+            [\"-blockfilterindex\"],\n+        ]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n+        self.nodes[0].generate(999)\n+        sync_blocks(self.nodes)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        # Fetch cfcheckpt on node 0. Since the implementation caches the checkpoints on the active\n+        # chain in memory, this checks that the cache is updated correctly upon subsequent queries\n+        # after the reorg.\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n+        # Reorg node 0 to a new chain\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks(self.nodes)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        default_services = NODE_NETWORK | NODE_WITNESS | NODE_NETWORK_LIMITED\n+\n+        # Check that nodes have signalled expected services.\n+        assert_equal(node0.nServices, default_services | NODE_COMPACT_FILTERS)\n+        assert_equal(node1.nServices, default_services)\n+\n+        # Check that the localservices is as expected.\n+        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16),\n+                     default_services | NODE_COMPACT_FILTERS)\n+        assert_equal(int(self.nodes[1].getnetworkinfo()['localservices'], 16),\n+                     default_services)",
      "path": "test/functional/p2p_cfilters.py",
      "position": null,
      "original_position": 103,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't seem to be the right place to test default node services... Suggest initialising `default_services` to `node1.nServices`, and checking that it excludes `NODE_COMPACT_FILTERS`.",
      "created_at": "2020-01-16T23:23:25Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r367700676",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367700676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/374317003",
      "pull_request_review_id": 352531802,
      "id": 374317003,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxNzAwMw==",
      "diff_hunk": "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "in_reply_to_id": 308430811,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `const` `stop_hash` would make the role the arg plays more clear - absent that pass by reference could be misleading",
      "created_at": "2020-02-03T20:13:44Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r374317003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/374317003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379919162",
      "pull_request_review_id": 359417445,
      "id": 379919162,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxOTE2Mg==",
      "diff_hunk": "@@ -253,6 +290,9 @@ enum ServiceFlags : uint64_t {\n     // NODE_WITNESS indicates that a node can be asked for blocks and transactions including\n     // witness data.\n     NODE_WITNESS = (1 << 3),\n+    // NODE_COMPACT_FILTERS means the node will service basic block filter requests.\n+    // See BIP157 and BIP158 for details on how this is implemented.\n+    NODE_COMPACT_FILTERS = (1 << 6),",
      "path": "src/protocol.h",
      "position": 50,
      "original_position": 50,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`NODE_COMPACT_FILTERS` does not show up in the `getnetworkinfo` RPC's `\"localservices\"` key, presumably because there's no entry for it in `GetServicesNames`.",
      "created_at": "2020-02-16T17:26:24Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r379919162",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379919162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 300,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385982696",
      "pull_request_review_id": 366759268,
      "id": 385982696,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MjY5Ng==",
      "diff_hunk": "@@ -1998,17 +2022,27 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return true;\n     }\n \n+    bool index_in_sync = false;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7a05bb6cb94902ba7ab442134b7c52f5813e4280",
      "in_reply_to_id": 348246889,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, you are right. I guess I wanted to avoid taking cs_main, but it already does in `PrepareBlockFilterRequest` so maybe that's an unnecessary optimization.",
      "created_at": "2020-02-29T00:45:47Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385982696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385982696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2025,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385983243",
      "pull_request_review_id": 366759892,
      "id": 385983243,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzI0Mw==",
      "diff_hunk": "@@ -1214,6 +1226,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);",
      "path": "src/net_processing.cpp",
      "position": 51,
      "original_position": 52,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "459aead0e664edd3f383aa740123fc38dc41c248",
      "in_reply_to_id": 349263563,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't seem actionable here. Probably best to open an issue or discuss in IRC or something?",
      "created_at": "2020-02-29T00:49:46Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385983243",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385983243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1310,
      "original_line": 1310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986232",
      "pull_request_review_id": 366763329,
      "id": 385986232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjIzMg==",
      "diff_hunk": "@@ -1880,6 +1883,98 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);",
      "path": "src/net_processing.cpp",
      "position": 138,
      "original_position": 75,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "aaceafd7497afe7f6f6cdf07fbdbf6cbfe7079ef",
      "in_reply_to_id": 363579742,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't a check, this is a lookup? I agree that the check below this *should* never fail though. It's just there for defensive purposes to prevent a segfault.",
      "created_at": "2020-02-29T01:12:38Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2064,
      "original_line": 2064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986457",
      "pull_request_review_id": 366763599,
      "id": 385986457,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjQ1Nw==",
      "diff_hunk": "@@ -1975,6 +1977,51 @@ static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainPar\n     return true;\n }\n \n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {",
      "path": "src/net_processing.cpp",
      "position": 204,
      "original_position": 33,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "07dd76272cf5dc336594c03d32f0ddb107b10568",
      "in_reply_to_id": 363579935,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you mean? Like fetching the filter at `start_height - 1`? The purpose is that the one filter header before the start of the range is required to compute the filter headers for all filters in the range given their hashes (it's a hash chain).",
      "created_at": "2020-02-29T01:14:39Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986457",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2130,
      "original_line": 2130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986536",
      "pull_request_review_id": 366763718,
      "id": 385986536,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjUzNg==",
      "diff_hunk": "@@ -1975,6 +1977,51 @@ static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainPar\n     return true;\n }\n \n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;",
      "path": "src/net_processing.cpp",
      "position": 213,
      "original_position": 41,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "07dd76272cf5dc336594c03d32f0ddb107b10568",
      "in_reply_to_id": 363580053,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, I think `filter_hashes` is right.",
      "created_at": "2020-02-29T01:15:30Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986536",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2139,
      "original_line": 2139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986689",
      "pull_request_review_id": 366763853,
      "id": 385986689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjY4OQ==",
      "diff_hunk": "@@ -396,6 +397,10 @@ limitedmap<uint256, std::chrono::microseconds> g_already_asked_for GUARDED_BY(cs\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;",
      "path": "src/net_processing.cpp",
      "position": 38,
      "original_position": 13,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "878825452632fc053e4e9565338c1f42c14d94f1",
      "in_reply_to_id": 363580460,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `GETCFCHECKPT` request returns all filter checkpoints. There's no parameter to request a subset from a different start height because the message is small and only requested once per catchup generally.",
      "created_at": "2020-02-29T01:16:42Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986689",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385986689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 441,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386134269",
      "pull_request_review_id": 366880973,
      "id": 386134269,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNDI2OQ==",
      "diff_hunk": "@@ -1944,6 +1944,25 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7a05bb6cb94902ba7ab442134b7c52f5813e4280",
      "in_reply_to_id": 363580801,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The node is only guaranteed to serve a block filter/filter header if it has already advertised the block through a `headers` or `block` message to the requesting peer.",
      "created_at": "2020-03-01T19:37:22Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r386134269",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386134269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387286843",
      "pull_request_review_id": 368315717,
      "id": 387286843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4Njg0Mw==",
      "diff_hunk": "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "in_reply_to_id": 308415562,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have removed the dynamic flipping in accordance with reviewers' suggestions.",
      "created_at": "2020-03-03T20:53:22Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r387286843",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387286843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2651,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401443707",
      "pull_request_review_id": 385370724,
      "id": 401443707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MzcwNw==",
      "diff_hunk": "@@ -1697,6 +1710,19 @@ bool AppInitMain(NodeContext& node)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (nLocalServices & NODE_COMPACT_FILTERS) {\n+        const BlockFilterIndex* const basic_filter_index =\n+            GetBlockFilterIndex(BlockFilterType::BASIC);\n+        if (!basic_filter_index) {\n+            error(\"NODE_COMPACT_FILTERS is signaled, but filter index is not available\");\n+            return false;\n+        }\n+        if (!basic_filter_index->IsSynced()) {\n+            InitError(strprintf(_(\"Cannot enable -peercfilters until basic block filter index is in sync. Please disable and reenable once filters have been indexed.\").translated));",
      "path": "src/init.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7608b32fc27254c84c16090af9a32d6bbdf60ec7",
      "in_reply_to_id": null,
      "user": {
        "login": "kilrau",
        "id": 19181985,
        "node_id": "MDQ6VXNlcjE5MTgxOTg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/19181985?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kilrau",
        "html_url": "https://github.com/kilrau",
        "followers_url": "https://api.github.com/users/kilrau/followers",
        "following_url": "https://api.github.com/users/kilrau/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kilrau/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kilrau/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kilrau/subscriptions",
        "organizations_url": "https://api.github.com/users/kilrau/orgs",
        "repos_url": "https://api.github.com/users/kilrau/repos",
        "events_url": "https://api.github.com/users/kilrau/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kilrau/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I ran into this error when I had to restart a still-syncing node. So while I can add the `-peercfilters` flag when starting the node for the first time and syncing from scratch, I have to remove it when restarting a syncing node (otherwise it'd refuse to start with this error). I think it's better to either always allow the `-peercfilters` flag or only allow it once the filter index is ready. Former being preferred, since if combined with https://github.com/bitcoin/bitcoin/pull/16442/files#r363580980, it allows for everything to work with the `-peercfilters` flag only.\r\n\r\nOther than that: amazing work!",
      "created_at": "2020-04-01T08:32:15Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r401443707",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401443707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1791,
      "original_line": 1791,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419023456",
      "pull_request_review_id": 404567931,
      "id": 419023456,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMzQ1Ng==",
      "diff_hunk": "@@ -1965,6 +1969,98 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;",
      "path": "src/net_processing.cpp",
      "position": 165,
      "original_position": 98,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "14df7f7b17f1936ae641c619ae95989090f5a063",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 14df7f7b17: Seems a bit odd to return true here, but not in the error case (which is also) logged. I suggest making the return type here `void`",
      "created_at": "2020-05-02T23:56:57Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419023456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419023456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2091,
      "original_line": 2091,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419029945",
      "pull_request_review_id": 404567931,
      "id": 419029945,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyOTk0NQ==",
      "diff_hunk": "@@ -1965,6 +2012,206 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "72784c3dac1e9d482cf5499170f689f483c1da51",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in commit 14df7f7b17f1936ae641c619ae95989090f5a063\r\n\r\n```suggestion\r\n                                      const uint256& stop_hash, uint32_t max_height_diff,\r\n```",
      "created_at": "2020-05-03T01:12:29Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419029945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419029945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419031024",
      "pull_request_review_id": 404567931,
      "id": 419031024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTAyNA==",
      "diff_hunk": "@@ -127,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFILTERS_SIZE = 100;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "14df7f7b17f1936ae641c619ae95989090f5a063",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "note to reviewers, in commit 14df7f7b17f1936ae641c619ae95989090f5a063 \r\n\r\nThe BIP https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#getcfilters says 1000. This is fixed up in a later commit 7f59550cb176ad2ea3ef6e9a75422bc8ffcc5c7e",
      "created_at": "2020-05-03T01:25:03Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419031024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419031024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419125215",
      "pull_request_review_id": 404567931,
      "id": 419125215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNTIxNQ==",
      "diff_hunk": "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC, NODE_COMPACT_FILTERS,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True",
      "path": "test/functional/p2p_cfilters.py",
      "position": 45,
      "original_position": 45,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "a7b375a4469fcef823a274e3f05db0f9ab7aa035",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit a7b375a4469fcef823a274e3f05db0f9ab7aa035 : \r\n\r\nThe test still times out on valgrind. Please bump the timeout.\r\n\r\n```diff\r\ndiff --git a/test/functional/p2p_cfilters.py b/test/functional/p2p_cfilters.py\r\nindex dca35f4e89..d16946510b 100755\r\n--- a/test/functional/p2p_cfilters.py\r\n+++ b/test/functional/p2p_cfilters.py\r\n@@ -42,6 +42,7 @@ class CFiltersClient(P2PInterface):\r\n \r\n class CompactFiltersTest(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n+        self.rpc_timeout = 480\r\n         self.setup_clean_chain = True\r\n         self.num_nodes = 2\r\n         self.extra_args = [\r\n```\r\n\r\n(generating more than 1000 blocks in valgrind takes time)\r\n\r\n\r\nhttps://travis-ci.org/github/bitcoin/bitcoin/jobs/682347754#L3147\r\n\r\n\r\n```\r\ntest_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 120.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)",
      "created_at": "2020-05-03T16:16:12Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419125215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419125215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419125307",
      "pull_request_review_id": 404567931,
      "id": 419125307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNTMwNw==",
      "diff_hunk": "@@ -1512,3 +1515,154 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n \n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n+\n+\n+class msg_getcfilters:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    command = b\"getcfilters\"",
      "path": "test/functional/test_framework/messages.py",
      "position": null,
      "original_position": 25,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "a7b375a4469fcef823a274e3f05db0f9ab7aa035",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit a7b375a4469fcef823a274e3f05db0f9ab7aa035 : \r\n\r\nCould you please squash 72784c3dac1e9d482cf5499170f689f483c1da51 into this commit?",
      "created_at": "2020-05-03T16:16:48Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419125307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419125307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419246556",
      "pull_request_review_id": 404748918,
      "id": 419246556,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0NjU1Ng==",
      "diff_hunk": "@@ -1965,6 +1969,98 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;",
      "path": "src/net_processing.cpp",
      "position": 165,
      "original_position": 98,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "14df7f7b17f1936ae641c619ae95989090f5a063",
      "in_reply_to_id": 419023456,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It returns `false` in cases that are unexpected, our-fault errors (more like exceptions) and returns true and logs when it's just an invalid request.",
      "created_at": "2020-05-04T07:10:37Z",
      "updated_at": "2020-05-04T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419246556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419246556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2091,
      "original_line": 2091,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552292721",
      "pull_request_review_id": 562251532,
      "id": 552292721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI5MjcyMQ==",
      "diff_hunk": "@@ -1697,6 +1710,19 @@ bool AppInitMain(NodeContext& node)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (nLocalServices & NODE_COMPACT_FILTERS) {\n+        const BlockFilterIndex* const basic_filter_index =\n+            GetBlockFilterIndex(BlockFilterType::BASIC);\n+        if (!basic_filter_index) {\n+            error(\"NODE_COMPACT_FILTERS is signaled, but filter index is not available\");\n+            return false;\n+        }\n+        if (!basic_filter_index->IsSynced()) {\n+            InitError(strprintf(_(\"Cannot enable -peercfilters until basic block filter index is in sync. Please disable and reenable once filters have been indexed.\").translated));",
      "path": "src/init.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "original_commit_id": "7608b32fc27254c84c16090af9a32d6bbdf60ec7",
      "in_reply_to_id": 401443707,
      "user": {
        "login": "alejagapatrick",
        "id": 17803411,
        "node_id": "MDQ6VXNlcjE3ODAzNDEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17803411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alejagapatrick",
        "html_url": "https://github.com/alejagapatrick",
        "followers_url": "https://api.github.com/users/alejagapatrick/followers",
        "following_url": "https://api.github.com/users/alejagapatrick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alejagapatrick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alejagapatrick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alejagapatrick/subscriptions",
        "organizations_url": "https://api.github.com/users/alejagapatrick/orgs",
        "repos_url": "https://api.github.com/users/alejagapatrick/repos",
        "events_url": "https://api.github.com/users/alejagapatrick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alejagapatrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "# # # # # # #",
      "created_at": "2021-01-06T00:46:36Z",
      "updated_at": "2021-01-06T00:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r552292721",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552292721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1791,
      "original_line": 1791,
      "side": "RIGHT"
    }
  ]
}