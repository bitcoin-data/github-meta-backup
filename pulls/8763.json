{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
    "id": 85914147,
    "node_id": "MDExOlB1bGxSZXF1ZXN0ODU5MTQxNDc=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8763",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/8763.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/8763.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8763",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8763/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/58afbb2868902669b17d8084afe55d3615bf9f6d",
    "number": 8763,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Optionally sweep funds from private key.",
    "user": {
      "login": "CryptAxe",
      "id": 8107318,
      "node_id": "MDQ6VXNlcjgxMDczMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptAxe",
      "html_url": "https://github.com/CryptAxe",
      "followers_url": "https://api.github.com/users/CryptAxe/followers",
      "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
      "repos_url": "https://api.github.com/users/CryptAxe/repos",
      "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Declared wallet rpc function \"sweepkey\" in src/wallet/rpcwallet.cpp\n\nAdded \"sweepkey\" rpc function, can be used to sweep a wallet's private key's\noutputs to a new key.\n\nIn rpc wallet function \"importprivkey\", added 2 optional parameters\nbool sweep & destination bitcoin address for sweep transaction.\n(Optionally sweep funds on private key import)\n\nAdded SweepPrivKey function to src/wallet/rpcdump.cpp to help \"sweepkey\"\nand \"importprivkey\"\n",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2016-09-20T05:43:37Z",
    "updated_at": "2021-09-08T11:49:06Z",
    "closed_at": "2016-10-01T19:06:48Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "aca2799d24947ba7e2b03aa06993658670207cd7",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "bitcoin-nakamoto:2751PullRequest",
      "ref": "2751PullRequest",
      "sha": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "user": {
        "login": "bitcoin-nakamoto",
        "id": 21977308,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxOTc3MzA4",
        "avatar_url": "https://avatars.githubusercontent.com/u/21977308?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-nakamoto",
        "html_url": "https://github.com/bitcoin-nakamoto",
        "followers_url": "https://api.github.com/users/bitcoin-nakamoto/followers",
        "following_url": "https://api.github.com/users/bitcoin-nakamoto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-nakamoto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-nakamoto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-nakamoto/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-nakamoto/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-nakamoto/repos",
        "events_url": "https://api.github.com/users/bitcoin-nakamoto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-nakamoto/received_events",
        "type": "Organization",
        "site_admin": false
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d8b4b631c5bed8bc2c68198be3be6272f0aa8c51",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 174,
    "deletions": 3,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 30,
    "comments": 4
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGFmYmIyODY4OTAyNjY5YjE3ZDgwODRhZmU1NWQzNjE1YmY5ZjZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58afbb2868902669b17d8084afe55d3615bf9f6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/58afbb2868902669b17d8084afe55d3615bf9f6d",
      "tree": {
        "sha": "94359163933373659e7967cd27c7c2836c616f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94359163933373659e7967cd27c7c2836c616f46"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 94359163933373659e7967cd27c7c2836c616f46\nparent 1e5799c52535a3fc20e885916f1e7ed33ecc7f46\nauthor CryptAxe <cryptaxe@gmail.com> 1474346997 -0700\ncommitter CryptAxe <cryptaxe@gmail.com> 1474346997 -0700\n\nOptionally sweep funds from private key.\n\nDeclared wallet rpc function \"sweepkey\" in src/wallet/rpcwallet.cpp\n\nAdded \"sweepkey\" rpc function, can be used to sweep a wallet's private key's\noutputs to a new key.\n\nIn rpc wallet function \"importprivkey\", added 2 optional parameters\nbool sweep & destination bitcoin address for sweep transaction.\n(Optionally sweep funds on private key import)\n\nAdded SweepPrivKey function to src/wallet/rpcdump.cpp to help \"sweepkey\"\nand \"importprivkey\"\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4MXjAAoJEJHwhYy7m2V07iMP/2XyGeY+SGkWYg90LY2/IKoo\n+Un+hPpoQllLNQR06G9xmyzeJJ8HBD7XmwhXW1WL+AMcT6h6Ik05vvQvPGwVWi7Q\nw7pYLYa9nMywGSCruJMRzwlDTOQksie7rkUkI1hUTZDt1f/DYqkFOr1eOi95wY34\ncDXTNeY3+d9Kg9h/hlh0dc/SKsflt/H9yJnegzdnQ3H7LWM6gq9VwMkf4eLQ+2x0\nMx0lT6t7XGDSa2RKVE0gYD++/N021mw0IthoUvQERXc5tXswmez2cBz0fA/KvyCr\nOpySTCHhSxQ4NgcUD6ABlZ+DeiXIf2g37OpYXGEA5ufNuEypT6mG/HgnvwEOUEQ2\n3i+HlSiQU089F9ziMVN6/sjgbFLGV3Z1OVi73iLiOhv1/MuPHtNA1uofR+MMrdS7\ngoRhQRcSNrdP/ZzPmZbxevq3pw+kM+q/M+f9tZLNTtJ2Jq9ngY1CrcYXaKExzGwr\nrGvAVJnXgmZN/A8KslQJK6DPxLyxUM9acx31RFnIDuBJCfAN219HtJy349M0KkL/\nDEAGcW+fzs3XHHnWDCQYgjj8ACOFg6dmPiPk35e/aV5v8HePo65c0h3LKy8oLzux\nLkO0+P4k7GWqLPZsC+vITcyvF8GJMqoobdMMuy66M9Aqe3JVR3smp3bvjpvmlAvd\nqO2M97sefn/mVgyO8n5J\n=pEVn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
          "sha": "1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5799c52535a3fc20e885916f1e7ed33ecc7f46"
        }
      ],
      "message": "Optionally sweep funds from private key.\n\nDeclared wallet rpc function \"sweepkey\" in src/wallet/rpcwallet.cpp\n\nAdded \"sweepkey\" rpc function, can be used to sweep a wallet's private key's\noutputs to a new key.\n\nIn rpc wallet function \"importprivkey\", added 2 optional parameters\nbool sweep & destination bitcoin address for sweep transaction.\n(Optionally sweep funds on private key import)\n\nAdded SweepPrivKey function to src/wallet/rpcdump.cpp to help \"sweepkey\"\nand \"importprivkey\"",
      "committer": {
        "name": "CryptAxe",
        "email": "cryptaxe@gmail.com",
        "date": "2016-09-20T04:49:57Z"
      },
      "author": {
        "name": "CryptAxe",
        "email": "cryptaxe@gmail.com",
        "date": "2016-09-20T04:49:57Z"
      },
      "sha": "58afbb2868902669b17d8084afe55d3615bf9f6d"
    },
    {
      "event": "commented",
      "id": 248207693,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODIwNzY5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248207693",
      "actor": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-20T05:48:21Z",
      "updated_at": "2016-09-20T05:48:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "#2751\n",
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#issuecomment-248207693",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8763"
    },
    {
      "event": "reviewed",
      "id": 686249,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2MjQ5",
      "url": null,
      "actor": null,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#pullrequestreview-686249",
      "submitted_at": "2016-09-20T06:39:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
    },
    {
      "event": "reviewed",
      "id": 687104,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg3MTA0",
      "url": null,
      "actor": null,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#pullrequestreview-687104",
      "submitted_at": "2016-09-20T06:40:29Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
    },
    {
      "event": "commented",
      "id": 248219746,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODIxOTc0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248219746",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-20T07:01:11Z",
      "updated_at": "2016-09-20T07:01:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think a `sweep` command is desirable.\n\nJust thinking: how would it be if we would have something like `createrawsweeptransaction <pubkey> <outputaddress>` as a first step.\nThe people can use `signrawtransaction` together with the privatekey.\nWe could still support a `sweepkey` RPC call that would use `createrawsweeptransaction || signrawtransaction || sendrawtransaction`.\n\nSplitting it up into a `createrawsweeptransaction` would allow to have more control over the sweep (confirmation page, etc.).\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#issuecomment-248219746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8763"
    },
    {
      "event": "labeled",
      "id": 795199045,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDc5NTE5OTA0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/795199045",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-20T07:01:18Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 700228,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwMjI4",
      "url": null,
      "actor": null,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#pullrequestreview-700228",
      "submitted_at": "2016-09-20T08:27:30Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
    },
    {
      "event": "labeled",
      "id": 795460862,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDc5NTQ2MDg2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/795460862",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-20T10:48:12Z",
      "label": {
        "name": "Wallet",
        "color": "02d7e1"
      }
    },
    {
      "event": "commented",
      "id": 248505705,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODUwNTcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248505705",
      "actor": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T04:02:11Z",
      "updated_at": "2016-09-21T04:02:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks everyone, I will take all of your input and come back with something improved when I have the time. Does everyone agree with @jonasschnelli 's suggestion to separate the creation of the sweep transaction from the signing / broadcast? It seems like a good idea to me.  \n",
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#issuecomment-248505705",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8763"
    },
    {
      "event": "mentioned",
      "id": 796713971,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Nzk2NzEzOTcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796713971",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T04:02:11Z"
    },
    {
      "event": "subscribed",
      "id": 796713972,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDc5NjcxMzk3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796713972",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T04:02:11Z"
    },
    {
      "event": "mentioned",
      "id": 796890400,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Nzk2ODkwNDAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796890400",
      "actor": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T07:55:32Z"
    },
    {
      "event": "subscribed",
      "id": 796890402,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDc5Njg5MDQwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796890402",
      "actor": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T07:55:32Z"
    },
    {
      "event": "mentioned",
      "id": 796890404,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Nzk2ODkwNDA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796890404",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T07:55:32Z"
    },
    {
      "event": "subscribed",
      "id": 796890405,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDc5Njg5MDQwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796890405",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T07:55:32Z"
    },
    {
      "event": "mentioned",
      "id": 796902380,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Nzk2OTAyMzgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796902380",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T08:06:36Z"
    },
    {
      "event": "subscribed",
      "id": 796902381,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDc5NjkwMjM4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/796902381",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T08:06:36Z"
    },
    {
      "event": "commented",
      "id": 248711076,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODcxMTA3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248711076",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-21T19:05:53Z",
      "updated_at": "2016-09-21T23:12:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "As an aside, any new functionality which requires a rescan really must take a block range (allowing for a range that is open on the upper side.. e.g. a starting height) as an (optional) argument.\n\n[hmm. so this could be done without a rescan by only evaluating the utxo set...]\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#issuecomment-248711076",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8763"
    },
    {
      "event": "closed",
      "id": 809402142,
      "node_id": "MDExOkNsb3NlZEV2ZW50ODA5NDAyMTQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/809402142",
      "actor": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-01T19:06:48Z"
    },
    {
      "event": "locked",
      "id": 5271778176,
      "node_id": "LOE_lADOABII584Km5qdzwAAAAE6OPOA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271778176",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:49:06Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543223",
      "pull_request_review_id": 686249,
      "id": 79543223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQzMjIz",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet",
      "path": "src/wallet/rpcdump.cpp",
      "position": 32,
      "original_position": 32,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But the wallet won't have tracked UTXOs for this private key...\n",
      "created_at": "2016-09-20T06:29:47Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 93,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543266",
      "pull_request_review_id": 686249,
      "id": 79543266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQzMjY2",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)",
      "path": "src/wallet/rpcdump.cpp",
      "position": 38,
      "original_position": 38,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's the full UTXO set you need to look through, not merely the wallet's coins.\n",
      "created_at": "2016-09-20T06:30:20Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543628",
      "pull_request_review_id": 686249,
      "id": 79543628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQzNjI4",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);",
      "path": "src/wallet/rpcdump.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3x the fee why? Probably should make this configurable...\n",
      "created_at": "2016-09-20T06:34:10Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 131,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543694",
      "pull_request_review_id": 686249,
      "id": 79543694,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQzNjk0",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();",
      "path": "src/wallet/rpcdump.cpp",
      "position": 72,
      "original_position": 72,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should probably be shared with the wallet code doing the same...\n",
      "created_at": "2016-09-20T06:34:58Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 133,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543831",
      "pull_request_review_id": 686249,
      "id": 79543831,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQzODMx",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {",
      "path": "src/wallet/rpcdump.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should probably get moved into a non-RPC-specific location, and RPC-specific errors moved out.\n",
      "created_at": "2016-09-20T06:36:30Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 80,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543909",
      "pull_request_review_id": 686249,
      "id": 79543909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQzOTA5",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Too late to error here - it's already been fed into AcceptToMemoryPool.\n",
      "created_at": "2016-09-20T06:37:24Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543977",
      "pull_request_review_id": 686249,
      "id": 79543977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQzOTc3",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": 131,
      "original_position": 131,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggest \"sweepprivkey\" to match \"dumpprivkey\" and \"importprivkey\"\n",
      "created_at": "2016-09-20T06:37:57Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544011",
      "pull_request_review_id": 686249,
      "id": 79544011,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQ0MDEx",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": 135,
      "original_position": 135,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "bitcoinaddress isn't a JSON type. Just string.\n",
      "created_at": "2016-09-20T06:38:17Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 196,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544067",
      "pull_request_review_id": 686249,
      "id": 79544067,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQ0MDY3",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();",
      "path": "src/wallet/rpcdump.cpp",
      "position": 145,
      "original_position": 145,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why? Shouldn't this work without unlocking the wallet?\n",
      "created_at": "2016-09-20T06:38:55Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 206,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544110",
      "pull_request_review_id": 686249,
      "id": 79544110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQ0MTEw",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": 135,
      "original_position": 135,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Furthermore, so long as you're insisting on an address here, it makes no sense to include this as a wallet RPC...\n",
      "created_at": "2016-09-20T06:39:22Z",
      "updated_at": "2016-09-20T06:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 196,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544186",
      "pull_request_review_id": 687104,
      "id": 79544186,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQ0MTg2",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    string strSecret = params[0].get_str();\n+    string strAddress = params[1].get_str();\n+\n+    CBitcoinSecret vchSecret;\n+    if (!vchSecret.SetString(strSecret))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+\n+    CBitcoinAddress address(strAddress);\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    if (!SweepPrivKey(vchSecret, address))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"SweepPrivKey failed!\");\n+\n+    return NullUniValue;\n+}\n+\n UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. sweepkey             (boolean, optional, default=false) Sweep imported key for improved security\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": 179,
      "original_position": 179,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Importing an untrusted key is never secure, so it doesn't make sense to import+sweep...\n",
      "created_at": "2016-09-20T06:40:19Z",
      "updated_at": "2016-09-20T06:40:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 238,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79547155",
      "pull_request_review_id": 689920,
      "id": 79547155,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQ3MTU1",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();",
      "path": "src/wallet/rpcdump.cpp",
      "position": 145,
      "original_position": 145,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79544067,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'll need to be unlocked at some point won't it? (in order to move the bitcoins from the swept address), although ideally there ought to be a way to do this without needing to unlock manually - i.e. store the private key for the swept address but require the private key of the wallet it is being swept to to access them.\n",
      "created_at": "2016-09-20T07:07:51Z",
      "updated_at": "2016-09-20T07:08:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79547155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79547155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 206,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79549986",
      "pull_request_review_id": 692389,
      "id": 79549986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTQ5OTg2",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();",
      "path": "src/wallet/rpcdump.cpp",
      "position": 145,
      "original_position": 145,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79544067,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No. The swept _key_ (not address; addresses don't control bitcoins) is not part of the wallet, and the wallet doesn't need to be unlocked to receive. Furthermore, so long as the user is proving the sweep-to address, the wallet isn't even being _used_.\n",
      "created_at": "2016-09-20T07:29:52Z",
      "updated_at": "2016-09-20T07:29:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79549986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79549986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 206,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558562",
      "pull_request_review_id": 700228,
      "id": 79558562,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTU4NTYy",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)",
      "path": "src/wallet/rpcdump.cpp",
      "position": 38,
      "original_position": 38,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543266,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Don't use `BOOST_*`\n",
      "created_at": "2016-09-20T08:24:48Z",
      "updated_at": "2016-09-20T08:27:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79558562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558765",
      "pull_request_review_id": 700228,
      "id": 79558765,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NTU4NzY1",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);",
      "path": "src/wallet/rpcdump.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543628,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree. Also, the new rpc should take a dictionary as input and not positional args to make this easier.\n",
      "created_at": "2016-09-20T08:26:11Z",
      "updated_at": "2016-09-20T08:27:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79558765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 131,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757460",
      "pull_request_review_id": 881105,
      "id": 79757460,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU3NDYw",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {",
      "path": "src/wallet/rpcdump.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543831,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed \n",
      "created_at": "2016-09-21T04:02:43Z",
      "updated_at": "2016-09-21T04:02:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79757460",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 80,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757543",
      "pull_request_review_id": 881182,
      "id": 79757543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU3NTQz",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet",
      "path": "src/wallet/rpcdump.cpp",
      "position": 32,
      "original_position": 32,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543223,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is intended for a private key that is already in the wallet, with outputs.\n",
      "created_at": "2016-09-21T04:03:59Z",
      "updated_at": "2016-09-21T04:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79757543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 93,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757691",
      "pull_request_review_id": 881319,
      "id": 79757691,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU3Njkx",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)",
      "path": "src/wallet/rpcdump.cpp",
      "position": 38,
      "original_position": 38,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543266,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is for after importing a private key. \n\nI see BOOST_FOREACH particularly used in many places throughout the bitcoin source code, I will remove it but could you educate me as to me why I shouldn't use it?\n",
      "created_at": "2016-09-21T04:06:16Z",
      "updated_at": "2016-09-21T04:06:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79757691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757939",
      "pull_request_review_id": 881540,
      "id": 79757939,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU3OTM5",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);",
      "path": "src/wallet/rpcdump.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543628,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In testing I ended up with a sweep transaction where the fee estimation was not enough, and the tx was rejected from the memory pool. This is a bad solution though, I'm more than open to suggestions. \n",
      "created_at": "2016-09-21T04:09:31Z",
      "updated_at": "2016-09-21T04:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79757939",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79757939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 131,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758105",
      "pull_request_review_id": 881685,
      "id": 79758105,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU4MTA1",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();",
      "path": "src/wallet/rpcdump.cpp",
      "position": 72,
      "original_position": 72,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543694,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you talking about setting nLockTime? I didn't see that... Will look \n",
      "created_at": "2016-09-21T04:12:03Z",
      "updated_at": "2016-09-21T04:12:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79758105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 133,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758255",
      "pull_request_review_id": 881814,
      "id": 79758255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU4MjU1",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543909,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I perform this check and throw the error before AcceptToMemoryPool, would that be okay?\n",
      "created_at": "2016-09-21T04:14:17Z",
      "updated_at": "2016-09-21T04:14:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79758255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758396",
      "pull_request_review_id": 881938,
      "id": 79758396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU4Mzk2",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();",
      "path": "src/wallet/rpcdump.cpp",
      "position": 145,
      "original_position": 145,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79544067,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was making this with the intention that the private key is actually in the wallet, or being imported, in which case it will be in the wallet before the sweep. \n",
      "created_at": "2016-09-21T04:17:09Z",
      "updated_at": "2016-09-21T04:17:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79758396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 206,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758437",
      "pull_request_review_id": 881971,
      "id": 79758437,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzU4NDM3",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    string strSecret = params[0].get_str();\n+    string strAddress = params[1].get_str();\n+\n+    CBitcoinSecret vchSecret;\n+    if (!vchSecret.SetString(strSecret))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+\n+    CBitcoinAddress address(strAddress);\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    if (!SweepPrivKey(vchSecret, address))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"SweepPrivKey failed!\");\n+\n+    return NullUniValue;\n+}\n+\n UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. sweepkey             (boolean, optional, default=false) Sweep imported key for improved security\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": 179,
      "original_position": 179,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79544186,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well that was the main issue pointed out in #2751 or I am just very confused. \n",
      "created_at": "2016-09-21T04:17:46Z",
      "updated_at": "2016-09-21T04:17:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79758437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79758437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 238,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79774417",
      "pull_request_review_id": 896458,
      "id": 79774417,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5Nzc0NDE3",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)",
      "path": "src/wallet/rpcdump.cpp",
      "position": 38,
      "original_position": 38,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543266,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We are moving towards using the cpp11 for loop, no need to go back in new code and use a framework.\n",
      "created_at": "2016-09-21T07:34:07Z",
      "updated_at": "2016-09-21T07:34:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79774417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79774417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79774803",
      "pull_request_review_id": 896801,
      "id": 79774803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5Nzc0ODAz",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);",
      "path": "src/wallet/rpcdump.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543628,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "E.g. `fundrawtransaction` takes options to set the fee rate.\n",
      "created_at": "2016-09-21T07:36:51Z",
      "updated_at": "2016-09-21T07:36:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79774803",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79774803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 131,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79777484",
      "pull_request_review_id": 899216,
      "id": 79777484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5Nzc3NDg0",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    string strSecret = params[0].get_str();\n+    string strAddress = params[1].get_str();\n+\n+    CBitcoinSecret vchSecret;\n+    if (!vchSecret.SetString(strSecret))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+\n+    CBitcoinAddress address(strAddress);\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    if (!SweepPrivKey(vchSecret, address))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"SweepPrivKey failed!\");\n+\n+    return NullUniValue;\n+}\n+\n UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. sweepkey             (boolean, optional, default=false) Sweep imported key for improved security\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": 179,
      "original_position": 179,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79544186,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@CryptAxe I think @luke-jr means that the risk is having funds to the imported key. Is this what you mean, @luke-jr ?  I'm not sure how this would happen, but as part of making a key autoswept, I would hope this pull would make it less easy to select for receipt of funds as part of this.\n",
      "created_at": "2016-09-21T07:55:32Z",
      "updated_at": "2016-09-21T07:55:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79777484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79777484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 238,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79778487",
      "pull_request_review_id": 900251,
      "id": 79778487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5Nzc4NDg3",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet",
      "path": "src/wallet/rpcdump.cpp",
      "position": 32,
      "original_position": 32,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543223,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why would you sweep it, if it's in the wallet (and thereby trusted to be exclusively yours)?\n",
      "created_at": "2016-09-21T08:02:03Z",
      "updated_at": "2016-09-21T08:02:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79778487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79778487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 93,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79778603",
      "pull_request_review_id": 900359,
      "id": 79778603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5Nzc4NjAz",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79543909,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "n/a if create and broadcast are split up.\n",
      "created_at": "2016-09-21T08:02:52Z",
      "updated_at": "2016-09-21T08:02:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79778603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79778603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79779172",
      "pull_request_review_id": 900834,
      "id": 79779172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5Nzc5MTcy",
      "diff_hunk": "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    string strSecret = params[0].get_str();\n+    string strAddress = params[1].get_str();\n+\n+    CBitcoinSecret vchSecret;\n+    if (!vchSecret.SetString(strSecret))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+\n+    CBitcoinAddress address(strAddress);\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    if (!SweepPrivKey(vchSecret, address))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"SweepPrivKey failed!\");\n+\n+    return NullUniValue;\n+}\n+\n UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. sweepkey             (boolean, optional, default=false) Sweep imported key for improved security\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": 179,
      "original_position": 179,
      "commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_commit_id": "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "in_reply_to_id": 79544186,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The first \"use case\" in #2751 I assume is poorly phrased. You never want to import such a key. What makes sense, and what @jgarzik probably meant, is that _instead_ of importing the key, you sweep it, and keep a copy of the private key in an as-of-yet-non-existent part of the wallet to be continually swept in case someone sends funds to it in the future.\n\nThe second use case is not likely to occur often in practice, but would benefit from the old keys being moved into a separated sweep-only keystore as well.\n",
      "created_at": "2016-09-21T08:06:36Z",
      "updated_at": "2016-09-21T08:06:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79779172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79779172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 238,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}