{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315",
    "id": 436104203,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDM2MTA0MjAz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19315",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19315.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19315.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
    "number": 19315,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[tests] Allow outbound & block-relay-only connections in functional tests. ",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The existing functional test framework uses the `addnode` RPC to spin up manual connections between bitcoind nodes. This limits our ability to add integration tests for our networking code, which often executes different code paths for different connection types. \r\n\r\n**This PR enables creating `outbound` & `block-relay-only` P2P connections in the functional tests.** This allows us to increase our p2p test coverage, since we can now verify expectations around these connection types.\r\n\r\nThis builds out the [prototype](https://github.com/bitcoin/bitcoin/issues/14210#issuecomment-527421978) proposed by ajtowns in #14210. üôåüèΩ\r\n\r\nAn overview of this branch:\r\n- introduces a new test-only RPC function `addconnection` which initiates opening an `outbound` or `block-relay-only` connection. (conceptually similar to `addnode` but for different connection types & restricted to regtest)\r\n- adds `test_framework` support so a mininode can open an `outbound`/`block-relay-only` connection to a `P2PInterface`/`P2PConnection`.\r\n- updates `p2p_blocksonly` tests to create a `block-relay-only` connection & verify expectations around transaction relay. \r\n- introduces `p2p_add_connections` test that checks the behaviors of the newly introduced `add_outbound_p2p_connection` test framework function. \r\n\r\nWith these changes, there are many more behaviors that we can add integration tests for. The blocksonly updates is just one example. \r\n\r\nHuge props to ajtowns for conceiving the approach & providing me feedback as I've built out this branch. Also thank you to jnewbery for lots of thoughtful input along the way. ",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-06-17T21:25:12Z",
    "updated_at": "2022-08-16T17:11:32Z",
    "closed_at": "2021-01-11T20:08:15Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-01-11T20:08:15Z",
    "merge_commit_sha": "6af013792f1bf85824803fc5283bf0d68a8fd080",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "amitiuttarwar:2020-06-test-outbounds",
      "ref": "2020-06-test-outbounds",
      "sha": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 164037357,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwMzczNTc=",
        "name": "bitcoin",
        "full_name": "amitiuttarwar/bitcoin",
        "owner": {
          "login": "amitiuttarwar",
          "id": 1500952,
          "node_id": "MDQ6VXNlcjE1MDA5NTI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/amitiuttarwar",
          "html_url": "https://github.com/amitiuttarwar",
          "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
          "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
          "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
          "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
          "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/amitiuttarwar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/amitiuttarwar/bitcoin",
        "archive_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/amitiuttarwar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:amitiuttarwar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/amitiuttarwar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/hooks",
        "svn_url": "https://github.com/amitiuttarwar/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 4,
        "stargazers_count": 6,
        "watchers_count": 6,
        "size": 216794,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T23:05:52Z",
        "created_at": "2019-01-04T00:31:16Z",
        "updated_at": "2021-09-05T22:29:09Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b6a71b80d28c79796b557cdb6bae05abb34d1225",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 368,
    "deletions": 54,
    "changed_files": 9,
    "commits": 6,
    "review_comments": 228,
    "comments": 34
  },
  "events": [
    {
      "event": "labeled",
      "id": 3455660052,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM0NTU2NjAwNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3455660052",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T22:36:55Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 3455660053,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM0NTU2NjAwNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3455660053",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T22:36:55Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 3455660054,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM0NTU2NjAwNTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3455660054",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T22:36:55Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 3455660055,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM0NTU2NjAwNTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3455660055",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T22:36:55Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 645672477,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTY3MjQ3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645672477",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T23:09:44Z",
      "updated_at": "2021-01-09T20:28:40Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20726 (p2p: Add DISABLETX message for negotiating block-relay-only connections by sdaftuar)\n* #20277 (p2p: Stop processing unrequested transactions during IBD and extend p2p_ibd_txrelay.py coverage by ariard)\n* #20012 (rpc: Remove duplicate name and argNames from CRPCCommand by MarcoFalke)\n* #18261 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-645672477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "commented",
      "id": 646271653,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjI3MTY1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646271653",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T19:49:16Z",
      "updated_at": "2020-06-18T19:49:16Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Being able to explicitly test different connection types including outbounds will be really useful.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-646271653",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "commented",
      "id": 653332533,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzMzMjUzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/653332533",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T04:05:05Z",
      "updated_at": "2020-07-03T04:05:05Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, that's a substantial move to increase coverage of p2p!\r\n\r\n@t-bast, see https://github.com/ariard/bitcoin/commits/2020-07-tda-mitigation-block-relay, based on this PR, it should allow you to open manual block-relay-only connection to a side-node _without_ leaking its presence due to addr-relay. That's one of the mitigation we talked offline against time-dilation and it should prevent you against unknown in-protocol eclipses. This is experimental software ofc, beware of not killing any kittens :)",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653332533",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3509483258,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUwOTQ4MzI1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3509483258",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T04:05:05Z"
    },
    {
      "event": "subscribed",
      "id": 3509483260,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MDk0ODMyNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3509483260",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T04:05:05Z"
    },
    {
      "event": "reviewed",
      "id": 442187488,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTg3NDg4",
      "url": null,
      "actor": null,
      "commit_id": "b43b7dba9feadcdad6bd966eac924b01bca59e1c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Neat, thanks for the notification! Concept ACK.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-442187488",
      "submitted_at": "2020-07-03T07:05:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "commented",
      "id": 653599673,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzU5OTY3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/653599673",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T15:35:54Z",
      "updated_at": "2020-07-03T15:35:54Z",
      "author_association": "MEMBER",
      "body": "@t-bast I'd strongly encourage you to _not_ use this branch or anything based on it for anything other than testing:\r\n\r\n- it's not merged yet, so still unreviewed\r\n- it's intended for testing only, and there are no guarantees about how it would work long-term in production (for example, the way that CConnman tracks the number of open connections is not updated to take account of these test connections. The commit here: https://github.com/ariard/bitcoin/commit/ea9943251b051a59d1b4cc7ae0ff34aeaea441f4 doesn't fix that)\r\n- since it's for testing only and not a public method, it may be removed or changed at any time.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653599673",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3511449323,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUxMTQ0OTMyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3511449323",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T15:35:54Z"
    },
    {
      "event": "subscribed",
      "id": 3511449325,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MTE0NDkzMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3511449325",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T15:35:54Z"
    },
    {
      "event": "commented",
      "id": 653610473,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzYxMDQ3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/653610473",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T16:10:01Z",
      "updated_at": "2020-07-03T16:10:01Z",
      "author_association": "MEMBER",
      "body": "Thanks for the concerns @jnewbery, no worries I'm not planning on using anything else than official `bitcoind` releases for `eclair`, I'm simply adding my concept ACK on the overall direction that will be quite helpful for hardening lightning!",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653610473",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3511530866,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUxMTUzMDg2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3511530866",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T16:10:01Z"
    },
    {
      "event": "subscribed",
      "id": 3511530867,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MTE1MzA4Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3511530867",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T16:10:01Z"
    },
    {
      "event": "commented",
      "id": 653624340,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzYyNDM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/653624340",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T17:02:19Z",
      "updated_at": "2020-07-03T17:17:28Z",
      "author_association": "MEMBER",
      "body": "@jnewbery thanks to press on the warning. The provided commit is for experimentation-only and MUST NOT be used in production for reasons aforementioned.\r\n\r\nFor anyone reading this and providing more context, Lightning nodes interested to prevent against time-dilation attacks (a no-hashrate eclipse variant against offchain protocols) should have multiple access to the chain view. As of today, the classic infra setup is to run the LN stack on top of _one_ full-node, if this one gets sybilled and partitioned from the rest of the network, the channel funds are at risk. Running a self-hosted or controlled secondary node connected to your main node would mitigate at least eclipses due to weaknesses in addr management or peer selection. As of today, we do have automatic block-relay-only peers, for which in theory their topology should stay masked to an external observer. But a bug in peer selection may be leveraged to lure block-only-relay connections to attacker controlled-peers. Adding redundant _manual_ block-relay-only connections will prevent this. Manual block-only secondary nodes won't fit there as they do leak addr-relay, which can be used to learn about their presence.\r\n\r\nProvided commit (https://github.com/ariard/bitcoin/commit/ea9943251b051a59d1b4cc7ae0ff34aeaea441f4) let you experiment such primary/secondary block-relay-only topology setup. There is no guarantee that anything will stay stable. If by playing with it, you do see value in this configuration, please concept ack and help to review downstream branches. If you don't understand what you're doing don't use it or ask questions.\r\n\r\n ",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653624340",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3511639050,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUxMTYzOTA1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3511639050",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T17:02:19Z"
    },
    {
      "event": "subscribed",
      "id": 3511639056,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MTE2MzkwNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3511639056",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-03T17:02:19Z"
    },
    {
      "event": "labeled",
      "id": 3521724422,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1MjE3MjQ0MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3521724422",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-07T18:28:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3645665565,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NDU2NjU1NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3645665565",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ce3bdd0ed1bbfeaa19a5b75dc07943118826f930",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce3bdd0ed1bbfeaa19a5b75dc07943118826f930",
      "created_at": "2020-08-12T02:02:06Z"
    },
    {
      "event": "referenced",
      "id": 3654370095,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NTQzNzAwOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3654370095",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a338d21a642dc81f4e238e3918146651a90730a6",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/a338d21a642dc81f4e238e3918146651a90730a6",
      "created_at": "2020-08-14T01:10:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3667690005,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY2NzY5MDAwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3667690005",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T18:53:29Z"
    },
    {
      "event": "commented",
      "id": 675656643,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTY1NjY0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675656643",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T18:59:57Z",
      "updated_at": "2020-08-18T18:59:57Z",
      "author_association": "MEMBER",
      "body": "Yay rebase! You can remove the \"This PR builds on #19316. Please review that first.\" from the PR description. Is this PR now ready for review?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-675656643",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "commented",
      "id": 675657592,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTY1NzU5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675657592",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T19:01:56Z",
      "updated_at": "2020-08-18T19:01:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "hahha I was going to let the tests pass first, but yes it should be ready for review :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-675657592",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "unlabeled",
      "id": 3667767549,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzY2Nzc2NzU0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3667767549",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T19:16:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 3667781376,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzY2Nzc4MTM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3667781376",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T19:21:01Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 3667781377,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzY2Nzc4MTM3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3667781377",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-18T19:21:01Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "reviewed",
      "id": 471442648,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDQyNjQ4",
      "url": null,
      "actor": null,
      "commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "This is wonderful. It's really useful functionality for testing, and the implementation is simple, clean and easy to follow.\r\n\r\nI've left a few style comments inline. The test needs tweaking to work without wallet compiled in, but otherwise I think this could be merged as-is.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-471442648",
      "submitted_at": "2020-08-20T10:36:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "mentioned",
      "id": 3681496820,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4MTQ5NjgyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3681496820",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T00:18:54Z"
    },
    {
      "event": "subscribed",
      "id": 3681496822,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODE0OTY4MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3681496822",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T00:18:55Z"
    },
    {
      "event": "comment_deleted",
      "id": 3681501826,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQzNjgxNTAxODI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3681501826",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-22T00:22:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3687163675,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY4NzE2MzY3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3687163675",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-24T20:45:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3688310914,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY4ODMxMDkxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3688310914",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T05:49:23Z"
    },
    {
      "event": "reviewed",
      "id": 474288186,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Mjg4MTg2",
      "url": null,
      "actor": null,
      "commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "the test might be flaky (feel free to ignore the style nits)\r\n\r\nConcept ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-474288186",
      "submitted_at": "2020-08-25T09:24:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "commented",
      "id": 679938150,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTkzODE1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/679938150",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T10:18:45Z",
      "updated_at": "2020-08-25T10:18:45Z",
      "author_association": "MEMBER",
      "body": "Thanks for addressing all my comments @amitiuttarwar . Changes look good to me.\r\n\r\nI'll wait until you've resolved the test timeout issue before a full rereview.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-679938150",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3689377379,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY4OTM3NzM3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3689377379",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T10:18:45Z"
    },
    {
      "event": "subscribed",
      "id": 3689377383,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2ODkzNzczODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3689377383",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T10:18:45Z"
    },
    {
      "event": "labeled",
      "id": 3693765666,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2OTM3NjU2NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3693765666",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-26T09:02:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 476841303,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODQxMzAz",
      "url": null,
      "actor": null,
      "commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, I'm a big fan of this idea!",
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-476841303",
      "submitted_at": "2020-08-27T18:26:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "reviewed",
      "id": 477723783,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NzIzNzgz",
      "url": null,
      "actor": null,
      "commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK! Super excited for testing outbounds in functional tests!!! This is way less complicated than I imagined, but I still feel like there's some documentation lacking. I also nitpicked a little (sorry heh).\r\n\r\nI'm having trouble tracing where `connect_id` (and later `idx`) would be used / who is responsible for setting it. Are the functional tests supposed to pass in a `connect_id`? It looks like, in ` listen()`, `connect_id` needs to be specified if `port` isn't. This leads me to believe... in the case we don't know what port to use, a `connect_id` helps specify one? It doesn't seem like `NetworkThread` keeps track of what indexes have been used. So then... if I just do `node.add_outbound_p2p_connection` multiple times without specifying `connect_id`, it won't work because it tries to use the same port (I think).\r\n\r\nIn general I'd just want some documentation and unit tests for the new `NetworkThread` class methods to help check that the networking code works. ",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-477723783",
      "submitted_at": "2020-08-28T14:57:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "commented",
      "id": 683210775,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzIxMDc3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683210775",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-29T01:13:12Z",
      "updated_at": "2020-08-29T01:13:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nVery nice to be able to test this extremely important logic. Thanks for doing this!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-683210775",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "commented",
      "id": 683444413,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQ0NDQxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683444413",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-30T17:00:32Z",
      "updated_at": "2020-08-30T17:00:32Z",
      "author_association": "MEMBER",
      "body": "I've been [looking into](https://github.com/gzhao408/bitcoin/commit/651ef496dbd82e3fffad73e220f51372cf76ca17) the port management stuff to see the limits of how many connections can be opened. Quick [example_test.py](https://github.com/gzhao408/bitcoin/blob/651ef496dbd82e3fffad73e220f51372cf76ca17/test/functional/example_test.py): add 8 outbounds and 2 blockrelays to `nodes[0]` and `nodes[1]` each. This branch fails especially if you don't specify `connect_id` explicitly in `add_outbound_p2p_connection()` - I don't think you can add more than 1 outbound p2p connection because it'll try to reuse the same port. I tinkered with it to make it pass.\r\n\r\nI'm not 100% sure I understand everything correctly but I think the explanation is:\r\n-For inbounds, we care about the `dstaddr`/`dstport` which would be the same for all p2ps connected to one node. i.e. they all have the same destination -> they initiate the connection. So we use 1 port per test node, which is why arg to `p2p_port` needs to within the MAX_NODES range.\r\n-For outbounds, there's no \"destination\" since the p2ps are not initiating the connection. You need each p2p to listen on a different port. I guess the TestNode that's connecting would be called the \"origin\" or something.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-683444413",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "reviewed",
      "id": 488885293,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODg1Mjkz",
      "url": null,
      "actor": null,
      "commit_id": "07dd3ba792bf25eb7e24833393406f559f68e8fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nThanks, it's unlocking a bunch of test coverage, e.g some behaviors of the inbound eviction logic.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-488885293",
      "submitted_at": "2020-09-15T17:06:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "commented",
      "id": 695199099,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE5OTA5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695199099",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-19T10:59:41Z",
      "updated_at": "2020-09-19T10:59:41Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-695199099",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3790947836,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc5MDk0NzgzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790947836",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T23:25:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3791017360,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc5MTAxNzM2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3791017360",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T00:03:18Z"
    },
    {
      "event": "unlabeled",
      "id": 3791058388,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5MTA1ODM4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3791058388",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T00:25:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 696470826,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQ3MDgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696470826",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T01:57:28Z",
      "updated_at": "2020-09-22T02:59:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you for all of this awesome feedback! üôåüèΩ\r\n\r\nand CI is green! üíÉüèº  \r\nthis PR is ready for the next round of review :) \r\n\r\nsome updates since last time: \r\n- rebased onto master \r\n- reworked the port logic (as described [here](https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419398)) \r\n- removed the `dstport` and `dstaddr` from `add_outbound_p2p_connection` & `peer_accept_connection` flow. It wasn't actually being set there because we don't know the port until its assigned in `NetworkThread.listen`, so this felt misleading.\r\n- added logic so `add_outbound_p2p_connection` is maintaining the connection index rather than requiring tests to manually manage.\r\n- added a test `p2p_add_connections` that sanity checks the behaviors of the test framework functionality \r\n\r\nopen questions / next steps: \r\n- RE `dstport` & `dstaddr`: right now, there is some awkward logging in `P2PConnection#connection_made`. Since `dstaddr` and `dstport` aren't able to be properly populated, if you run the tests you see `Connected & Listening: 0:0`. One option is to just have the logging behind an if statement that checks if there is a real value there, but I'd prefer a cleaner solution. I'll continue looking at it, but welcome any review suggestions. @MarcoFalke seems like you introduced these methods, do you have any ideas? \r\n\r\n- RE managing the connection index: I currently have added a `p2p_conn_index` field to `TestNode` to allow it to manage the index of various connections. I find it nicer for the test to not have to worry about keeping track & passing through the correct value. However, in an offline conversation with @ajtowns he expressed the preference towards having it be explicit, in favor of transparency and easier-to-debug failure scenarios. I'm curious what others think. I'm happy to switch back to tests managing index if that's preferable. \r\n\r\n- currently unsupported use case: with the node managing the index via a simple increment, there isn't the ability to reconnect to the same, existing P2P connection. two options for fixing this are 1. have test manage index as mentioned in previous bullet point, or 2. allow optionally passing through the index to `add_outbound_p2p_connection` for that circumstance. I don't currently have any examples of why we'd need to do this, so I've been more focused on getting the base cases working, but wanted to mention incase I should reprioritize / incorporate. \r\n\r\n- documentation: this stuff is complex. I've spent a long while trying to wrap my head around the mechanisms, and have to revisit often to really understand. I'm working on adding more documentation to hopefully make these code paths simpler to understand. \r\n\r\n",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-696470826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3791196921,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzc5MTE5NjkyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3791196921",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T01:57:28Z"
    },
    {
      "event": "subscribed",
      "id": 3791196923,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3OTExOTY5MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3791196923",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T01:57:28Z"
    },
    {
      "event": "mentioned",
      "id": 3791196925,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzc5MTE5NjkyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3791196925",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T01:57:28Z"
    },
    {
      "event": "subscribed",
      "id": 3791196928,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3OTExOTY5Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3791196928",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T01:57:28Z"
    },
    {
      "event": "labeled",
      "id": 3795248323,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3OTUyNDgzMjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3795248323",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T21:22:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3795366636,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc5NTM2NjYzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3795366636",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T22:05:29Z"
    },
    {
      "event": "unlabeled",
      "id": 3795554838,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5NTU1NDgzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3795554838",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T23:28:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 3799455218,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3OTk0NTUyMTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3799455218",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T18:21:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3800004397,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgwMDAwNDM5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3800004397",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T20:21:01Z"
    },
    {
      "event": "unlabeled",
      "id": 3800036318,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzgwMDAzNjMxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3800036318",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T20:27:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 3807894656,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4MDc4OTQ2NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3807894656",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-25T14:11:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3808747132,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgwODc0NzEzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3808747132",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-25T17:40:59Z"
    },
    {
      "event": "unlabeled",
      "id": 3808882651,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzgwODg4MjY1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3808882651",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-25T18:21:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 497100606,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTAwNjA2",
      "url": null,
      "actor": null,
      "commit_id": "b489886b533809c9a4ee2643ceba7d34c278e03e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. I already used this some days ago for testing some outbound getaddr behavior, and it worked great!",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-497100606",
      "submitted_at": "2020-09-27T18:41:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "commented",
      "id": 701112240,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTExMjI0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701112240",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T01:55:47Z",
      "updated_at": "2020-09-30T01:55:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "@mzumsande, thanks for taking a look :)  \r\n> I already used this some days ago for testing some outbound getaddr behavior, and it worked great!\r\n\r\nthats so awesome!! would it be a test we can permanently introduce with this patch? ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-701112240",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3822331217,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgyMjMzMTIxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3822331217",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T01:55:47Z"
    },
    {
      "event": "subscribed",
      "id": 3822331218,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MjIzMzEyMTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3822331218",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T01:55:47Z"
    },
    {
      "event": "commented",
      "id": 701571168,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTU3MTE2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701571168",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T18:39:18Z",
      "updated_at": "2020-09-30T18:39:18Z",
      "author_association": "MEMBER",
      "body": "> thats so awesome!! would it be a test we can permanently introduce with this patch?\r\n\r\nI think it would best be one of (hopefully several) follow-ups, using the new possibilities introduced by this PR!",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-701571168",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "reviewed",
      "id": 501903744,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTAzNzQ0",
      "url": null,
      "actor": null,
      "commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK b489886b533809c9a4ee2643ceba7d34c278e03e.\r\n\r\nI think that squashing of the first two commits could make reviewing much easier.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-501903744",
      "submitted_at": "2020-10-05T11:13:21Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "labeled",
      "id": 3863273727,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4NjMyNzM3Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863273727",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-11T02:23:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3929141346,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkyOTE0MTM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3929141346",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T03:08:58Z"
    },
    {
      "event": "unlabeled",
      "id": 3929203571,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzkyOTIwMzU3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3929203571",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T03:39:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3929211262,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkyOTIxMTI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3929211262",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T03:43:41Z"
    },
    {
      "event": "commented",
      "id": 717682865,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxNzY4Mjg2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/717682865",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T04:08:29Z",
      "updated_at": "2020-10-28T04:08:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased & incorporated @hebasto's suggestions",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-717682865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 3929258223,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzkyOTI1ODIyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3929258223",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T04:08:29Z"
    },
    {
      "event": "subscribed",
      "id": 3929258224,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5MjkyNTgyMjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3929258224",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T04:08:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3939285306,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkzOTI4NTMwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3939285306",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-30T03:13:19Z"
    },
    {
      "event": "commented",
      "id": 719195613,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTE5NTYxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719195613",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-30T05:21:39Z",
      "updated_at": "2020-10-30T05:21:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "fixed a silent merge conflict that was causing travis failure. \r\n\r\nready for review! ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-719195613",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "reviewed",
      "id": 528084558,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDg0NTU4",
      "url": null,
      "actor": null,
      "commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-528084558",
      "submitted_at": "2020-11-11T11:51:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "reviewed",
      "id": 528473200,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDczMjAw",
      "url": null,
      "actor": null,
      "commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-528473200",
      "submitted_at": "2020-11-11T19:32:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "labeled",
      "id": 3987961879,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM5ODc5NjE4Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3987961879",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-12T10:32:10Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4007699771,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAwNzY5OTc3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4007699771",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-17T21:51:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4012218010,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAxMjIxODAxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4012218010",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T18:46:31Z"
    },
    {
      "event": "commented",
      "id": 730017485,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDAxNzQ4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730017485",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T23:18:48Z",
      "updated_at": "2020-11-18T23:18:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "looks like the CI failure is just a generic timeout? if yes -> PR is ready for review. all review comments have been addressed",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730017485",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "commented",
      "id": 730274196,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDI3NDE5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730274196",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T10:19:36Z",
      "updated_at": "2020-11-19T10:19:36Z",
      "author_association": "MEMBER",
      "body": "> looks like the CI failure is just a generic timeout?\r\n\r\nI believe this is improved in master. @MarcoFalke would know. Perhaps try rebasing on latest master?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730274196",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 4015051770,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAxNTA1MTc3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015051770",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T10:19:36Z"
    },
    {
      "event": "subscribed",
      "id": 4015051772,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMTUwNTE3NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015051772",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T10:19:36Z"
    },
    {
      "event": "commented",
      "id": 730276841,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDI3Njg0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730276841",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T10:23:59Z",
      "updated_at": "2020-11-19T10:23:59Z",
      "author_association": "MEMBER",
      "body": "Yes, the valgrind fuzzer timeout issue was affecting everyone and was resolved in master a few days ago; rebasing fixed it for me. Will review.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730276841",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4017842489,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAxNzg0MjQ4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4017842489",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T20:50:21Z"
    },
    {
      "event": "commented",
      "id": 730802652,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDgwMjY1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730802652",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-20T02:19:36Z",
      "updated_at": "2020-11-20T02:19:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "thanks, rebased! and CI is green (appveyor pending) \r\n",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730802652",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "reviewed",
      "id": 535555222,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTU1MjIy",
      "url": null,
      "actor": null,
      "commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK  50720f411e05cf1bbaa91174b389c54f3c5287cf\r\n\r\nA few comments, feel free to pick and choose. \r\n\r\nNow or later on, it might be useful for `CConnman::OpenNetworkConnection` and `CConnman::AddConnection` to return the peer id (via an out param) in case of success, and the addconnection RPC could return a `\"peer id\": number` field in the result.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-535555222",
      "submitted_at": "2020-11-20T16:39:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4024371218,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAyNDM3MTIxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4024371218",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-22T01:53:31Z"
    },
    {
      "event": "commented",
      "id": 731884495,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMTg4NDQ5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731884495",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T01:21:27Z",
      "updated_at": "2020-11-23T01:21:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "thanks for the review @jonatack, I've taken most of your feedback (and left comments / questions on the rest) \r\n\r\nlooks like the [one CI failure](https://cirrus-ci.com/task/4545582645641216?command=ci#L3449) is indeed based on this code. In `p2p_add_connections`, in the section \"Disconnect p2p connections & try to re-open\", the call to `check_node_connections` is failing because it seems that `getnetworkinfo()['connections_out']` is returning 4 instead of 0. it seems strange because `TestNode.disconnect_p2ps()` waits until `self.getpeerinfo()` is 0 for all peers with `['subver']` set (aka p2p connections). I'm not currently seeing how this inconsistency can arise, so I'll have to dig deeper. Sharing here incase anybody has ideas or pointers :) \r\n",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-731884495",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 4025495045,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAyNTQ5NTA0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4025495045",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T01:21:27Z"
    },
    {
      "event": "subscribed",
      "id": 4025495047,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMjU0OTUwNDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4025495047",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T01:21:27Z"
    },
    {
      "event": "reviewed",
      "id": 536813087,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODEzMDg3",
      "url": null,
      "actor": null,
      "commit_id": "e400c7eb7dec42db50c2d667d72b0a87f0a25ab1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-536813087",
      "submitted_at": "2020-11-23T20:16:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "reviewed",
      "id": 536824378,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODI0Mzc4",
      "url": null,
      "actor": null,
      "commit_id": "e400c7eb7dec42db50c2d667d72b0a87f0a25ab1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-536824378",
      "submitted_at": "2020-11-23T20:33:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "commented",
      "id": 732418091,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMjQxODA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/732418091",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T20:49:21Z",
      "updated_at": "2020-11-23T20:53:27Z",
      "author_association": "MEMBER",
      "body": "> looks like the [one CI failure](https://cirrus-ci.com/task/4545582645641216?command=ci#L3449) is indeed based on this code. In `p2p_add_connections`, in the section \"Disconnect p2p connections & try to re-open\", the call to `check_node_connections` is failing because it seems that `getnetworkinfo()['connections_out']` is returning 4 instead of 0. it seems strange because `TestNode.disconnect_p2ps()` waits until `self.getpeerinfo()` is 0 for all peers with `['subver']` set (aka p2p connections). I'm not currently seeing how this inconsistency can arise, so I'll have to dig deeper. Sharing here incase anybody has ideas or pointers :)\r\n\r\nThe test passes for me locally. The issue is only in the multiprocess CI task. Maybe a data race? Edit: maybe compare with the getpeerinfo counts? Ignore me if that doesn't make sense; it's late.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-732418091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "referenced",
      "id": 4048245905,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwNDgyNDU5MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4048245905",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7ae86b3c6845873ca96650fc69beb4ae5285c801",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ae86b3c6845873ca96650fc69beb4ae5285c801",
      "created_at": "2020-11-28T17:08:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4048377504,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA0ODM3NzUwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4048377504",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-28T19:32:46Z"
    },
    {
      "event": "commented",
      "id": 735282520,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNTI4MjUyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735282520",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-28T19:48:57Z",
      "updated_at": "2020-11-30T23:50:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "All review comments are addressed. CI is green.\r\n\r\nThe CI failure was caused by a test framework issue addressed in #20522 (thanks for the find @jnewbery!) Rebased, so hopefully now CI will be green.\r\n\r\nI'm going to resolve comments that propose ideas for follow-ups, and am consolidating them here for convenient future reference \r\n- remove `p2p_blocksonly.py` wallet dependency by using `miniwallet` https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473866387\r\n- update `OpenNetworkConnection()` to return a boolean upon failure & handle appropriately from `addconnection` and `addnode` RPC endpoints https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521290049, including generalizing the error message https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521296406\r\n- add sanity tests for `addconnection` RPC endpoint \r\n\r\nAlso, a reminder for reviewers about https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-696470826, where I left some open questions around design choices, incase anyone wants to weigh in. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 4048388593,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA0ODM4ODU5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4048388593",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-28T19:48:57Z"
    },
    {
      "event": "subscribed",
      "id": 4048388596,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNDgzODg1OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4048388596",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-28T19:48:57Z"
    },
    {
      "event": "referenced",
      "id": 4049237027,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwNDkyMzcwMjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4049237027",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "795d0905a4515b669517bc98fd74e7b4b67356d6",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/795d0905a4515b669517bc98fd74e7b4b67356d6",
      "created_at": "2020-11-29T17:26:41Z"
    },
    {
      "event": "commented",
      "id": 736124441,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNjEyNDQ0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736124441",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-30T23:51:07Z",
      "updated_at": "2020-11-30T23:51:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "forgot to update- CI is green. this PR is ready for review! ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-736124441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "reviewed",
      "id": 541871547,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODcxNTQ3",
      "url": null,
      "actor": null,
      "commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good. I just have a few small comments in the python tests.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-541871547",
      "submitted_at": "2020-12-01T13:10:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "reviewed",
      "id": 542084165,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMDg0MTY1",
      "url": null,
      "actor": null,
      "commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Sounds good, light review on the test framework changes.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-542084165",
      "submitted_at": "2020-12-01T17:00:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "reviewed",
      "id": 542539699,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTM5Njk5",
      "url": null,
      "actor": null,
      "commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 22ba154178594c21e1342657f3d9a14c877623da\r\n\r\nCode review of addconnection RPC and associated CConnman method, and of the test framework changes, and of the new `p2p_add_connections.py` test.  Only a light review of the changes to the `p2p_blocksonly.py` test (just ensured that it was calling the new method correctly).\r\n\r\nIn addition to the comments below, I agree that some more documentation would be nice.  A good start might be method docstrings for the new methods in `P2PConnection`, `NetworkThread`, and `TestNode`.  I would suggest using the method docstrings to the other methods of `P2PConnection` (`connection_made`, `_on_data`, `send_message`, etc.) as a guide.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-542539699",
      "submitted_at": "2020-12-02T07:13:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "reviewed",
      "id": 542865494,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyODY1NDk0",
      "url": null,
      "actor": null,
      "commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-542865494",
      "submitted_at": "2020-12-02T14:04:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4065389858,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA2NTM4OTg1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4065389858",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-03T03:32:24Z"
    },
    {
      "event": "reviewed",
      "id": 543415029,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDE1MDI5",
      "url": null,
      "actor": null,
      "commit_id": "ae7f4fdfe7f7a1d42c35589a7d61e9d44c32091a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I'm biased, but looks pretty good.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-543415029",
      "submitted_at": "2020-12-03T07:15:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4097941333,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA5Nzk0MTMzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4097941333",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-11T01:04:40Z"
    },
    {
      "event": "commented",
      "id": 743408776,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzQwODc3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743408776",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-11T20:24:10Z",
      "updated_at": "2020-12-11T20:24:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you for these thoughtful reviews! \r\n\r\nreview comments addressed and CI is green ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-743408776",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "labeled",
      "id": 4121061186,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxMjEwNjExODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4121061186",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T18:02:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4121395667,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEyMTM5NTY2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4121395667",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T19:29:42Z"
    },
    {
      "event": "commented",
      "id": 746885067,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0Njg4NTA2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746885067",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T19:31:25Z",
      "updated_at": "2020-12-16T19:31:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-746885067",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "unlabeled",
      "id": 4121559090,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDEyMTU1OTA5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4121559090",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T20:13:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4122427078,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEyMjQyNzA3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4122427078",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T23:47:26Z"
    },
    {
      "event": "commented",
      "id": 747109525,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzEwOTUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747109525",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T23:49:34Z",
      "updated_at": "2020-12-16T23:49:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "small update to address aj's suggestion about variable name ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-747109525",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "labeled",
      "id": 4160046515,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxNjAwNDY1MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4160046515",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T17:59:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4160310784,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE2MDMxMDc4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4160310784",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T22:01:37Z"
    },
    {
      "event": "unlabeled",
      "id": 4160335803,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDE2MDMzNTgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4160335803",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T22:10:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 753370155,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzM3MDE1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753370155",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-01T19:15:50Z",
      "updated_at": "2021-01-01T19:15:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-753370155",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "commented",
      "id": 755048206,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NTA0ODIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755048206",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-06T03:11:40Z",
      "updated_at": "2021-01-06T03:11:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 092da16e89b42de7e44a83b184d95a967875f135\r\n\r\nWith some help from `git range-diff master 22ba154 HEAD`.\r\n\r\nThe changes to the python asyncio pieces (renames, refactors, comments) are great!\r\n",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-755048206",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "labeled",
      "id": 4180291850,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxODAyOTE4NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4180291850",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T15:07:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmMwNGU4ODM3YzA0NTI5MjNjZWJkMWI4MjNhODVlNWM0ZGNkZmE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
      "tree": {
        "sha": "53e4946c569cd17b054d7dc57854001f3630f569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53e4946c569cd17b054d7dc57854001f3630f569"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6a71b80d28c79796b557cdb6bae05abb34d1225",
          "sha": "b6a71b80d28c79796b557cdb6bae05abb34d1225",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b6a71b80d28c79796b557cdb6bae05abb34d1225"
        }
      ],
      "message": "[rpc/net] Introduce addconnection to test outbounds & blockrelay\n\nAdd a new RPC endpoint to enable opening outbound connections from\nthe tests. The functional test framework currently uses the addnode RPC, which\nhas different behavior than general outbound peers. These changes enable\ncreating both full-relay and block-relay-only connections. The new RPC\nendpoint calls through to a newly introduced AddConnection method on\nCConnman that ensures we stay within the allocated max.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-02T16:46:41Z"
      },
      "sha": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTk3YWI5MTU0NTFhNzAyZWVkMjE1M2EwNzI3YjBhNzhjMDQ1MGFj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3997ab915451a702eed2153a0727b0a78c0450ac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3997ab915451a702eed2153a0727b0a78c0450ac",
      "tree": {
        "sha": "9f92126cc96d68a032d2854cdfb8bd1e2b4582a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f92126cc96d68a032d2854cdfb8bd1e2b4582a2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
          "sha": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6"
        }
      ],
      "message": "[test] Add test framework support to create outbound connections.\n\nIn the interest of increasing our P2P test coverage, add support to create\nfull-relay or block-relay-only connections. To support this, a P2P connection\nspins up a listening thread & uses a callback to trigger the node initiating\nthe connection.\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-10T20:29:07Z"
      },
      "sha": "3997ab915451a702eed2153a0727b0a78c0450ac"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTc5MWU3NTYwZDQwYWQwOTRlYWE3M2UwYmUzOTg3NTgxMzM4ZTJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99791e7560d40ad094eaa73e0be3987581338e2d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/99791e7560d40ad094eaa73e0be3987581338e2d",
      "tree": {
        "sha": "8ed10c18db7227d4cf3fac1decc7dd913072ecb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed10c18db7227d4cf3fac1decc7dd913072ecb7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3997ab915451a702eed2153a0727b0a78c0450ac",
          "sha": "3997ab915451a702eed2153a0727b0a78c0450ac",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3997ab915451a702eed2153a0727b0a78c0450ac"
        }
      ],
      "message": "[test/refactor] P2PBlocksOnly - simplify transaction creation using blocktool helper.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-10T22:46:39Z"
      },
      "sha": "99791e7560d40ad094eaa73e0be3987581338e2d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmI2YmVhY2IxOTg2NGIxZmNhNzY2YjNlMTUzMzQ5YTMxZGMwNDU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bb6beacb19864b1fca766b3e153349a31dc0459",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8bb6beacb19864b1fca766b3e153349a31dc0459",
      "tree": {
        "sha": "709529d7c0e9a283b31ba15e04af71d6ece2c9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/709529d7c0e9a283b31ba15e04af71d6ece2c9d8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99791e7560d40ad094eaa73e0be3987581338e2d",
          "sha": "99791e7560d40ad094eaa73e0be3987581338e2d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/99791e7560d40ad094eaa73e0be3987581338e2d"
        }
      ],
      "message": "[test/refactor] P2PBlocksOnly - Extract transaction violation test into helper.\n\nThis is in preparation for use in the next commit.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-10T23:01:40Z"
      },
      "sha": "8bb6beacb19864b1fca766b3e153349a31dc0459"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDJlNjllNDI3OGYwZWQyNWM2NWZiNTY4YWIzOTVlNGM3Y2E5Y2Vi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
      "tree": {
        "sha": "1ecc3a0303c846dc04c96bb0c277e61b5807286d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ecc3a0303c846dc04c96bb0c277e61b5807286d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bb6beacb19864b1fca766b3e153349a31dc0459",
          "sha": "8bb6beacb19864b1fca766b3e153349a31dc0459",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8bb6beacb19864b1fca766b3e153349a31dc0459"
        }
      ],
      "message": "[test] P2PBlocksOnly - Test block-relay-only connections.\n\nEnsure we will disconnect if the peer sends us a transaction & we don't\nannounce transactions to the peer.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-09T01:40:18Z"
      },
      "sha": "602e69e4278f0ed25c65fb568ab395e4c7ca9ceb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGRkMmVmODAwOTcwM2I4MTIzNWUyZDlhMmE3MzZhM2E1ZTgxNTJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "tree": {
        "sha": "20b5afdc472ded22a00bf206107b0abc99708e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20b5afdc472ded22a00bf206107b0abc99708e9e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
          "sha": "602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb"
        }
      ],
      "message": "[test] Test the add_outbound_p2p_connection functionality\n\nOpen max number of full-relay and block-relay-only connections from a\nfunctional test with different sorts of behaviors to ensure it behaves as\nexpected.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-18T21:41:18Z"
      },
      "sha": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4181155987,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4MTE1NTk4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4181155987",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T18:31:05Z"
    },
    {
      "event": "commented",
      "id": 756298162,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjI5ODE2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756298162",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T18:31:22Z",
      "updated_at": "2021-01-07T18:31:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-756298162",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "commented",
      "id": 756298630,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjI5ODYzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756298630",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T18:32:08Z",
      "updated_at": "2021-01-07T18:32:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "thanks for the re-review @troygiorshev ! should be trivial to re-ack, the rebase was just because of adjacent lines in `net.h`",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-756298630",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 4181159579,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4MTE1OTU3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4181159579",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T18:32:08Z"
    },
    {
      "event": "subscribed",
      "id": 4181159585,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODExNTk1ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4181159585",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T18:32:08Z"
    },
    {
      "event": "unlabeled",
      "id": 4181336160,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDE4MTMzNjE2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4181336160",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T19:23:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 564148613,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MTQ4NjEz",
      "url": null,
      "actor": null,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK b4dd2ef8009703b81235e2d9a2a736a3a5e8152f\r\n\r\nJust some small style suggestions, which you can take or leave, or handle in a follow-up.\r\n\r\nThis is really useful test functionality. I'd love to see it merged soon.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-564148613",
      "submitted_at": "2021-01-08T11:00:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "commented",
      "id": 756697355,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjY5NzM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756697355",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:29Z",
      "updated_at": "2021-01-08T11:07:29Z",
      "author_association": "MEMBER",
      "body": "I think this is very close to being ready for merge.\r\n\r\nPrevious ACKs: @troygiorshev (https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-755048206)\r\nPrevious concept/approack ACKs: @ajtowns (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-543415029), @jonatack (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-535555222), @hebasto (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-501903744), @mzumsande (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-497100606), @ariard (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-488885293), @practicalswift (https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-683210775), @glozow (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-477723783), @robot-dreams (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-476841303), @MarcoFalke (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-474288186), @t-bast (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-442187488)",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-756697355",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "mentioned",
      "id": 4183940700,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940700",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:29Z"
    },
    {
      "event": "subscribed",
      "id": 4183940702,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940702",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:29Z"
    },
    {
      "event": "mentioned",
      "id": 4183940705,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940705",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:29Z"
    },
    {
      "event": "subscribed",
      "id": 4183940708,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940708",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940709,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDcwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940709",
      "actor": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940711,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940711",
      "actor": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940714,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940714",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940718,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940718",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940721,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDcyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940721",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940723,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940723",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940727,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDcyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940727",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940731,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940731",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940741,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDc0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940741",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940746,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940746",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940748,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDc0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940748",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940750,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940750",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940755,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDc1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940755",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940757,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3NTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940757",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940764,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940764",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 4183940768,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940768",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:30Z"
    },
    {
      "event": "mentioned",
      "id": 4183940771,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4Mzk0MDc3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940771",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:31Z"
    },
    {
      "event": "subscribed",
      "id": 4183940774,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODM5NDA3NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4183940774",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T11:07:31Z"
    },
    {
      "event": "commented",
      "id": 757025249,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzAyNTI0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757025249",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T22:13:47Z",
      "updated_at": "2021-01-08T22:13:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK b4dd2ef8009703b81235e2d9a2a736a3a5e8152f\r\n\r\nTrivial from my last ACK :)\r\n\r\nFor anyone interested resources on the python asyncio parts, [the python asyncio docs](https://docs.python.org/3/library/asyncio.html), especially the [transports and protocols page](https://docs.python.org/3/library/asyncio-protocol.html) and the examples on the bottom of that page are useful!",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-757025249",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19315"
    },
    {
      "event": "reviewed",
      "id": 565326029,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MzI2MDI5",
      "url": null,
      "actor": null,
      "commit_id": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK b4dd2ef8009703b81235e2d9a2a736a3a5e8152f üç¢\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nApproach ACK b4dd2ef8009703b81235e2d9a2a736a3a5e8152f üç¢\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUi8SQwAtkpDpuzJotuEB7qpK2DCtuR6u/mOzV6KXL8G6W4NrPkWffPEc2DJ0+4b\r\nZ2APDT0XKLjHSluduIQYkkJYewQNSn+kDbXqLG8fnGfHs0VPauSPr1YEWJ6ckM0C\r\nG9YKu02lX0P7iIao+PlLCUc/NRrG1eo3FmS8RCQBzn1CfnBXviwJAK3Btau6r2vW\r\nCC/4tyBANDD9cDqpS81bpWdnA/qggLjP/0p/cP3FIJ5kUVTdsfFhvnXW8rvk48bB\r\nhREsZxEP/HjF6/Tw91C4FR+AtOL3uwll94kgbf99U/ld++98TeEEZmOHu9+vVYF7\r\np1mfaVevvWAcY8r+88nSy99KKecEt5DxCW56MFnB+Xlhn2DCLZWNNjiWQDB9sxDo\r\njEQlDiRbypIqGlVwL0qCoJB4bCOaz+qhkErqJgEIHXL3wV7HVk1vkim08r5sIUPm\r\nrz7BY2lVy0lQpJAmQ2NUeZ3Ioms/fnvmUZJSFYFP5zXkX6ZXKdtdGTtCP2VC9iTT\r\n/68NLVfe\r\n=gZ6a\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `3232b0dd96dd7ba9660c084f1b93bc4661873271630eb1ba4b50fb2f2cb5803b  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401083232b0dd96dd7ba9660c084f1b93bc4661873271630eb1ba4b50fb2f2cb5803bf010a51715723056286cb675466a1ef34d1808fff01009b61c6a94932f8f0c3133f09bd1b71a08f1045ffca80bf008b0e60ad247a39c320083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff0106c608aaa25d0282dacc5c7b80dbf629908f1045ffca80af008d406a743fab10cab0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010a65b4f4992ae9b47e76d837dae52814a08f1045ffca80af00862c29354cf8a09e50083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010add5e000de17a8f00b3dbfca99040b0c08f1045ffca80af008c1931344ae567e620083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-565326029",
      "submitted_at": "2021-01-11T19:33:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
    },
    {
      "event": "merged",
      "id": 4192594411,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDE5MjU5NDQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4192594411",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6af013792f1bf85824803fc5283bf0d68a8fd080",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af013792f1bf85824803fc5283bf0d68a8fd080",
      "created_at": "2021-01-11T20:08:15Z"
    },
    {
      "event": "closed",
      "id": 4192594419,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDE5MjU5NDQxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4192594419",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-11T20:08:15Z"
    },
    {
      "event": "referenced",
      "id": 4193416000,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxOTM0MTYwMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4193416000",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b6cdb6cfae50d558637e42617cb078be20d946ae",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/b6cdb6cfae50d558637e42617cb078be20d946ae",
      "created_at": "2021-01-12T00:35:11Z"
    },
    {
      "event": "referenced",
      "id": 4944268948,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ5NDQyNjg5NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4944268948",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "87d57b45ac388cbd1d7fc70e2ba39efee1f2a916",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/87d57b45ac388cbd1d7fc70e2ba39efee1f2a916",
      "created_at": "2021-06-27T19:59:30Z"
    },
    {
      "event": "referenced",
      "id": 4944268950,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ5NDQyNjg5NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4944268950",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "78a6ae14e093f1bfe9b8c395e37262fd59af2dc6",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/78a6ae14e093f1bfe9b8c395e37262fd59af2dc6",
      "created_at": "2021-06-27T19:59:30Z"
    },
    {
      "event": "referenced",
      "id": 5918137332,
      "node_id": "REFE_lADOABII584mMRmGzwAAAAFgv5v0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5918137332",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e5254cd2e790e57ecfd992a2351d474d5ceb2d9a",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e5254cd2e790e57ecfd992a2351d474d5ceb2d9a",
      "created_at": "2022-01-19T14:33:07Z"
    },
    {
      "event": "locked",
      "id": 7199063258,
      "node_id": "LOE_lADOABII584mMRmGzwAAAAGtGPza",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199063258",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:11:32Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449410050",
      "pull_request_review_id": 442187488,
      "id": 449410050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMDA1MA==",
      "diff_hunk": "@@ -367,8 +367,10 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection, bool block_relay_only)\n+CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b43b7dba9feadcdad6bd966eac924b01bca59e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "very nit: `conn_type` or `connType`?",
      "created_at": "2020-07-03T06:59:16Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449410050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449410050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449412035",
      "pull_request_review_id": 442187488,
      "id": 449412035,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMjAzNQ==",
      "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument",
      "path": "src/net.h",
      "position": null,
      "original_position": 7,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b43b7dba9feadcdad6bd966eac924b01bca59e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My 2 cents (feel free to ignore as I'm clearly very new to the bitcoin codebase): it feels to me that the distinction manual vs non-manual (automatic?) is orthogonal to the connection type and could be a separate enum.\r\n\r\nIIUC `MANUAL` can be composed with either `OUTBOUND`, `FEELER`, `BLOCK_RELAY` or `ADDR_FETCH`.",
      "created_at": "2020-07-03T07:04:32Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449412035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449412035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449634741",
      "pull_request_review_id": 442478780,
      "id": 449634741,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYzNDc0MQ==",
      "diff_hunk": "@@ -367,8 +367,10 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection, bool block_relay_only)\n+CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b43b7dba9feadcdad6bd966eac924b01bca59e1c",
      "in_reply_to_id": 449410050,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`conn_type` is correct. See the developer guide: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c",
      "created_at": "2020-07-03T15:28:35Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449634741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449634741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449634943",
      "pull_request_review_id": 442479057,
      "id": 449634943,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYzNDk0Mw==",
      "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument",
      "path": "src/net.h",
      "position": null,
      "original_position": 7,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b43b7dba9feadcdad6bd966eac924b01bca59e1c",
      "in_reply_to_id": 449412035,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See rationale here: https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479 and here: https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649776062",
      "created_at": "2020-07-03T15:29:15Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449634943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449634943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449646549",
      "pull_request_review_id": 442493370,
      "id": 449646549,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0NjU0OQ==",
      "diff_hunk": "@@ -367,8 +367,10 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection, bool block_relay_only)\n+CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b43b7dba9feadcdad6bd966eac924b01bca59e1c",
      "in_reply_to_id": 449410050,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the pointer, I was wondering about the inconsistency between variables (`addrConnect` instead of `addr_connect`), but this probably falls under `These are preferred in new code, but are not required when doing so would need changes to significant pieces of existing code.`",
      "created_at": "2020-07-03T16:04:44Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449646549",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449646549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449647582",
      "pull_request_review_id": 442494612,
      "id": 449647582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0NzU4Mg==",
      "diff_hunk": "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument",
      "path": "src/net.h",
      "position": null,
      "original_position": 7,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b43b7dba9feadcdad6bd966eac924b01bca59e1c",
      "in_reply_to_id": 449412035,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I should have done my homework and read that PR first (as was clearly said in the PR description!).",
      "created_at": "2020-07-03T16:08:07Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449647582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449647582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473836629",
      "pull_request_review_id": 471442648,
      "id": 473836629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzNjYyOQ==",
      "diff_hunk": "@@ -841,6 +897,9 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n     { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n     { \"hidden\",             \"addpeeraddress\",         &addpeeraddress,         {\"address\", \"port\"} },\n+\n+    /* Not shown in help */",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Either remove this comment or place it above `addpeeraddress`, since they're both not shown in help.",
      "created_at": "2020-08-20T09:59:17Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473836629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473836629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473841451",
      "pull_request_review_id": 471442648,
      "id": 473841451,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MTQ1MQ==",
      "diff_hunk": "@@ -65,7 +65,7 @@\n     NODE_WITNESS,\n     sha256,\n )\n-from test_framework.util import wait_until\n+from test_framework.util import wait_until, MAX_NODES, p2p_port",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style: sort and place on separate lines",
      "created_at": "2020-08-20T10:04:43Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473841451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473841451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473856088",
      "pull_request_review_id": 471442648,
      "id": 473856088,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NjA4OA==",
      "diff_hunk": "@@ -139,12 +139,20 @@ def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+        self.peer_connect_helper(dstaddr, dstport, net, timeout_factor)\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n-        conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n-        return conn_gen\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        coroutine = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+        return lambda: loop.call_soon_threadsafe(loop.create_task, coroutine)\n+\n+    def peer_outbound_connect(self, dstaddr, dstport, connect_cb, connect_id=0, *, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 35,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider renaming this function (and the equivalents in `P2PInterface` and `TestNode`) to `peer_accept_connection()` or similar. From the perspective of the `P2PConnection`, this is an inbound connection since it's initiated by the bitcoind node.",
      "created_at": "2020-08-20T10:22:34Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473856088",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473856088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473860655",
      "pull_request_review_id": 471442648,
      "id": 473860655,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2MDY1NQ==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 109,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't actually test that the transaction won't get announced by the node, since transaction announcements are batched and only sent when the `nNextInvSend` timer pops. The `sync_with_ping()` above doesn't guarantee that there's nothing in the `setInventoryTxToSend` waiting to be sent (ie I think this test would still pass if this were an outbound-full-relay peer). I don't have any good suggestions except maybe adding a comment. Testing for the absence of something is hard!",
      "created_at": "2020-08-20T10:28:16Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473860655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473860655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473866387",
      "pull_request_review_id": 471442648,
      "id": 473866387,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2NjM4Nw==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`getnewaddress` requires a wallet, so this test fails without the wallet compiled. Can you replace it with a hard-coded address?",
      "created_at": "2020-08-20T10:35:25Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473866387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473866387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474970241",
      "pull_request_review_id": 472819489,
      "id": 474970241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MDI0MQ==",
      "diff_hunk": "@@ -139,12 +139,20 @@ def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+        self.peer_connect_helper(dstaddr, dstport, net, timeout_factor)\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n-        conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n-        return conn_gen\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        coroutine = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+        return lambda: loop.call_soon_threadsafe(loop.create_task, coroutine)\n+\n+    def peer_outbound_connect(self, dstaddr, dstport, connect_cb, connect_id=0, *, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 35,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473856088,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "great point. renaming this & the equivalent on `P2PInterface` to `peer_accept_connection()` is much clearer. \r\n\r\nbut for `TestNode`, I think `add_outbound_p2p_connection()` makes sense? its a connection from node -> p2p conn, so outbound for node. inbound / accept for the P2P connections.",
      "created_at": "2020-08-21T21:06:12Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r474970241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474970241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475454108",
      "pull_request_review_id": 473274510,
      "id": 475454108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1NDEwOA==",
      "diff_hunk": "@@ -139,12 +139,20 @@ def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+        self.peer_connect_helper(dstaddr, dstport, net, timeout_factor)\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n-        conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n-        return conn_gen\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        coroutine = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+        return lambda: loop.call_soon_threadsafe(loop.create_task, coroutine)\n+\n+    def peer_outbound_connect(self, dstaddr, dstport, connect_cb, connect_id=0, *, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 35,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473856088,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. It makes sense for the `TestNode` function to stay as `add_outbound_p2p_connection()`.",
      "created_at": "2020-08-24T09:17:58Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475454108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475454108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475884039",
      "pull_request_review_id": 473843859,
      "id": 475884039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4NDAzOQ==",
      "diff_hunk": "@@ -841,6 +897,9 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n     { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n     { \"hidden\",             \"addpeeraddress\",         &addpeeraddress,         {\"address\", \"port\"} },\n+\n+    /* Not shown in help */",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473836629,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-08-24T20:46:35Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475884039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475884039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475884229",
      "pull_request_review_id": 473844072,
      "id": 475884229,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4NDIyOQ==",
      "diff_hunk": "@@ -65,7 +65,7 @@\n     NODE_WITNESS,\n     sha256,\n )\n-from test_framework.util import wait_until\n+from test_framework.util import wait_until, MAX_NODES, p2p_port",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473841451,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-08-24T20:46:55Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475884229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475884229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475884574",
      "pull_request_review_id": 473844519,
      "id": 475884574,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4NDU3NA==",
      "diff_hunk": "@@ -139,12 +139,20 @@ def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+        self.peer_connect_helper(dstaddr, dstport, net, timeout_factor)\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n-        conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n-        return conn_gen\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        coroutine = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+        return lambda: loop.call_soon_threadsafe(loop.create_task, coroutine)\n+\n+    def peer_outbound_connect(self, dstaddr, dstport, connect_cb, connect_id=0, *, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 35,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473856088,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "renamed both instances of `peer_outbound_connect` to `peer_accept_connection`. thanks! ",
      "created_at": "2020-08-24T20:47:37Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475884574",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475884574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475887647",
      "pull_request_review_id": 473848452,
      "id": 475887647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4NzY0Nw==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 109,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473860655,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, yeah I missed that. luckily `nNextInvSend` is mockable so I'm able to bump time forward to ensure the transaction would send. I also fixed a bug with the matching condition (was comparing different types). I think the test now functions correctly- if you remove the `connection_type=\"blockrelay\"` param when adding the p2p conn, the tx sends and the test fails. what do you think? ",
      "created_at": "2020-08-24T20:53:37Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475887647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475887647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475888230",
      "pull_request_review_id": 473849198,
      "id": 475888230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4ODIzMA==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473866387,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "so simple! done :) ",
      "created_at": "2020-08-24T20:54:40Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475888230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475888230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476194074",
      "pull_request_review_id": 474154182,
      "id": 476194074,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NDA3NA==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473866387,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, looks like the blocktools helper uses wallet, so I ended up just adding `skip_if_no_wallet` and reverting this. ",
      "created_at": "2020-08-25T05:53:27Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476194074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476194074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476299424",
      "pull_request_review_id": 474288186,
      "id": 476299424,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5OTQyNA==",
      "diff_hunk": "@@ -282,6 +283,61 @@ static UniValue addnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue addconnection(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+    };\n+\n+    help.Check(request);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: For new code it might be good to use the non-deprecated constructor (see e.g. #19528) ",
      "created_at": "2020-08-25T09:09:43Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476299424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476299424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476300109",
      "pull_request_review_id": 474288186,
      "id": 476300109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMDEwOQ==",
      "diff_hunk": "@@ -840,7 +896,10 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"clearbanned\",            &clearbanned,            {} },\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n     { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n+\n+    /* Not shown in help */",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Would be good to either consistently mention this in every file where \"hidden\" is used or nowhere. Maybe just keep the newline?",
      "created_at": "2020-08-25T09:10:49Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476300109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476300109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476300969",
      "pull_request_review_id": 474288186,
      "id": 476300969,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMDk2OQ==",
      "diff_hunk": "@@ -2,62 +2,46 @@\n # Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test p2p blocksonly\"\"\"\n+\"\"\"Test p2p blocksonly mode & block-relay-only connections.\"\"\"\n \n-from test_framework.messages import msg_tx, CTransaction, FromHex\n-from test_framework.mininode import P2PInterface\n+import time\n+\n+from test_framework.blocktools import create_transaction\n+from test_framework.messages import msg_tx\n+from test_framework.mininode import P2PInterface, P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 17,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Any reason for this unrelated change? This also violates pep8",
      "created_at": "2020-08-25T09:12:18Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476300969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476300969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476304181",
      "pull_request_review_id": 474288186,
      "id": 476304181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwNDE4MQ==",
      "diff_hunk": "@@ -130,7 +134,7 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+    def peer_connect_helper(self, dstaddr, dstport, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Any reason to remove the star? I think keyword args that are simply passed on in python are denoted by `**kwargs` in intermediate function calls in the stack, not by explicitly listing them each. Though, I am not a python expert, so feel free to ignore.",
      "created_at": "2020-08-25T09:17:51Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476304181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476304181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476308135",
      "pull_request_review_id": 474288186,
      "id": 476308135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODEzNQ==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 108,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The line times out intermittently: https://cirrus-ci.com/task/5292757864415232?command=ci#L5215\r\n\r\n```\r\n test  2020-08-25T06:50:18.197000Z TestFramework.node0 (DEBUG): RPC successfully started \r\n node0 2020-08-25T06:50:18.198698Z [http] Received a POST request for / from 127.0.0.1:43672 \r\n node0 2020-08-25T06:50:18.199052Z [httpworker.2] ThreadRPCServer method=getnetworkinfo user=__cookie__ \r\n test  2020-08-25T06:50:18.202000Z TestFramework.mininode (DEBUG): Listening for Bitcoin Node: 0: \r\n node0 2020-08-25T06:50:19.011416Z [scheduler] Leaving InitialBlockDownload (latching to false) \r\n node0 2020-08-25T06:51:15.798367Z [scheduler] Feeding 32910 bytes of dynamic environment data into RNG \r\n test  2020-08-25T06:51:18.213000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: '''' \r\n                                           test_function = lambda: self.is_connected\r\n                                   '''\r\n test  2020-08-25T06:51:18.213000Z TestFramework (ERROR): Assertion failed \r\n                                   Traceback (most recent call last):\r\n                                     File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py\", line 118, in main\r\n                                       self.run_test()\r\n                                     File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/p2p_blocksonly.py\", line 26, in run_test\r\n                                       self.blocks_relay_conn_tests()\r\n                                     File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/p2p_blocksonly.py\", line 76, in blocks_relay_conn_tests\r\n                                       self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\r\n                                     File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_node.py\", line 561, in add_outbound_p2p_connection\r\n                                       p2p_conn.wait_for_connect()\r\n                                     File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/mininode.py\", line 422, in wait_for_connect\r\n                                       wait_until(test_function, timeout=timeout, lock=mininode_lock)\r\n                                     File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/util.py\", line 252, in wait_until\r\n                                       raise AssertionError(\"Predicate {} not true after {} seconds\".format(predicate_source, timeout))\r\n                                   AssertionError: Predicate ''''\r\n                                           test_function = lambda: self.is_connected\r\n                                   ''' not true after 60.0 seconds",
      "created_at": "2020-08-25T09:24:05Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476308135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476308135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476310077",
      "pull_request_review_id": 474301572,
      "id": 476310077,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDA3Nw==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473866387,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, it's a bit of a shame to require the wallet to be compiled to run this test. Ideally, I think we'd want just the `wallet_` tests to require the wallet, but we're a long way from that.\r\n\r\nNo need to change this here, but a useful future project would be to eliminate the wallet dependency from the non-wallet tests.",
      "created_at": "2020-08-25T09:27:14Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476310077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476310077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478509021",
      "pull_request_review_id": 476841303,
      "id": 478509021,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwOTAyMQ==",
      "diff_hunk": "@@ -130,7 +134,7 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+    def peer_connect_helper(self, dstaddr, dstport, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 476304181,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For context, it looks like the star forces subsequent arguments to be present and named:\r\n\r\n```\r\ndef foo(a, b, *, c):\r\n    print(a, b, c)\r\n\r\nfoo(1, 2)\r\n# TypeError: foo() missing 1 required keyword-only argument: 'c'\r\n\r\nfoo(1, 2, 3)\r\n# TypeError: foo() takes 2 positional arguments but 3 were given\r\n\r\nfoo(1, 2, c=3)\r\n# 1 2 3\r\n```",
      "created_at": "2020-08-27T15:32:07Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478509021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478509021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478529683",
      "pull_request_review_id": 476841303,
      "id": 478529683,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyOTY4Mw==",
      "diff_hunk": "@@ -542,6 +542,30 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, connection_type=\"outbound\", connect_id=0, **kwargs):\n+        \"\"\" Add an outbound p2p connection from node. Either\n+        full-relay(\"outbound\") or block-relay-only(\"blockrelay\") connection.\n+\n+        This method adds the p2p connection to the self.p2ps list and also\n+        returns the connection to the caller.\"\"\"\n+\n+        kwargs['dstport'] = p2p_port(self.index)",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 20,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like line 520 above checks `if 'dstport' not in kwargs:`; naive question, would this be needed here as well?",
      "created_at": "2020-08-27T16:02:32Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478529683",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478529683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 552,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478602722",
      "pull_request_review_id": 476841303,
      "id": 478602722,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwMjcyMg==",
      "diff_hunk": "@@ -524,6 +551,33 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=0):\n+        if port is None:\n+            assert idx >= 0 and idx < MAX_NODES\n+            port = p2p_port(MAX_NODES-idx)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 111,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure if I'm understanding this correctly, but if you have more than `MAX_NODES / 2` nodes, could you get a port conflict?\r\n\r\ne.g. with `MAX_NODES = 12`:\r\n\r\n- Some code for node 7 calls `p2p_port(12 - 7)` here to get a p2p port on the Python side\r\n- Some other code for node 5 calls `p2p_port(5)` to get a p2p port for a `bitcoind` process",
      "created_at": "2020-08-27T18:06:37Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478602722",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478602722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 558,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478611513",
      "pull_request_review_id": 476841303,
      "id": 478611513,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMTUxMw==",
      "diff_hunk": "@@ -524,6 +551,33 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=0):\n+        if port is None:\n+            assert idx >= 0 and idx < MAX_NODES\n+            port = p2p_port(MAX_NODES-idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+        coroutine = cls.create_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    def peer_listener(cls, addr, port):\n+        def pl():\n+            x = cls.protos.get((addr,port))\n+            cls.protos[(addr,port)] = None\n+            return x\n+        return pl\n+\n+    @classmethod\n+    async def create_server(cls, addr, port, callback, proto):\n+        if (addr, port) not in cls.listeners:\n+            listener = await cls.network_event_loop.create_server(cls.peer_listener(addr, port), addr, port)\n+            logger.debug(\"Listening server on %s:%d should be started\" % (addr, port))",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 129,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I looked into the flaky test a bit.\r\n\r\nLocally, I see this:\r\n\r\n\t2020-08-27T06:35:37.249000Z TestFramework.mininode (DEBUG): Listening for Bitcoin Node: 0:\r\n\t2020-08-27T06:35:37.250000Z TestFramework.mininode (DEBUG): Listening server on 127.0.0.1:15398 should be started\r\n\r\nHowever, in the CI logs, the \"Listening server on ...\" never appears:\r\n\r\n\t2020-08-25T06:50:18.202000Z TestFramework.mininode (DEBUG): Listening for Bitcoin Node: 0: \r\n\t2020-08-25T06:51:18.213000Z TestFramework.utils (ERROR): wait_until() failed.\r\n\t\r\nIt looks like on the CI servers, the `cls.network_event_loop.create_server` call didn't work:\r\n\r\n\tTraceback (most recent call last):\r\n\t  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/mininode.py\", line 575, in create_server\r\n\t    listener = await cls.network_event_loop.create_server(cls.peer_listener(addr, port), addr, port)\r\n\t  File \"/usr/lib/python3.8/asyncio/base_events.py\", line 1463, in create_server\r\n\t    raise OSError(err.errno, 'error while attempting '\r\n\tOSError: [Errno 98] error while attempting to bind on address ('127.0.0.1', 15020): address already in use\r\n\r\nUnfortunately, I have **no idea** why this port is already in use on the CI server‚Äîthe CI logs make no other mention of port 15020 before this error.\r\n\r\n- Can we guarantee that port 15020 isn't used by any other processes on the CI server?\r\n- If not, would it make sense to retry the `create_server` with different ports on failure?",
      "created_at": "2020-08-27T18:22:50Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478611513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478611513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 576,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478768406",
      "pull_request_review_id": 477169941,
      "id": 478768406,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2ODQwNg==",
      "diff_hunk": "@@ -130,7 +134,7 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+    def peer_connect_helper(self, dstaddr, dstport, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 476304181,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, the `*` forces subsequent params to be specified by keyword not position",
      "created_at": "2020-08-28T00:38:58Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478768406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478768406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479284359",
      "pull_request_review_id": 477723783,
      "id": 479284359,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4NDM1OQ==",
      "diff_hunk": "@@ -288,6 +288,15 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if at max connection capacity\n+     */\n+    bool AddConnection(const std::string& address, const ConnectionType conn_type);",
      "path": "src/net.h",
      "position": null,
      "original_position": 11,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add a comment here mentioning this is only used for tests? I think it could be confusing without the context (e.g. a newcomer thinking this is how connections are added in general).\r\nI initially thought it should be named `AddTestOutbound` or something but I imagine this could be used for something else in the future, so a comment makes more sense.",
      "created_at": "2020-08-28T13:23:06Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479284359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479284359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479293812",
      "pull_request_review_id": 477723783,
      "id": 479293812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5MzgxMg==",
      "diff_hunk": "@@ -298,18 +310,27 @@ def __init__(self):\n         # The network services received from the peer\n         self.nServices = 0\n \n+    def peer_connect_send_version(self, services):\n+        # Send a version msg\n+        vt = msg_version()\n+        vt.nServices = services\n+        vt.addrTo.ip = self.dstaddr\n+        vt.addrTo.port = self.dstport\n+        vt.addrFrom.ip = \"0.0.0.0\"\n+        vt.addrFrom.port = 0\n+        self.on_connection_send_msg = vt  # Will be sent soon after connection_made",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 59,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"soon\" is pretty vague... Since you're refactoring, maybe edit a little bit like this?\r\n```suggestion\r\n        self.on_connection_send_msg = vt  # Will be sent in connection_made callback\r\n```",
      "created_at": "2020-08-28T13:33:17Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479293812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479293812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479303202",
      "pull_request_review_id": 477723783,
      "id": 479303202,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzIwMg==",
      "diff_hunk": "@@ -542,6 +542,30 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, connection_type=\"outbound\", connect_id=0, **kwargs):\n+        \"\"\" Add an outbound p2p connection from node. Either\n+        full-relay(\"outbound\") or block-relay-only(\"blockrelay\") connection.\n+\n+        This method adds the p2p connection to the self.p2ps list and also\n+        returns the connection to the caller.\"\"\"",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tiny pep nit: remove space before Add\r\nAnd put the closing \"\"\" on a newline",
      "created_at": "2020-08-28T13:43:22Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479303202",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479303202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 546,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 550,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479312039",
      "pull_request_review_id": 477723783,
      "id": 479312039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxMjAzOQ==",
      "diff_hunk": "@@ -282,6 +283,61 @@ static UniValue addnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue addconnection(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+    };\n+\n+    help.Check(request);\n+\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    bool success = context.connman->AddConnection(address, conn_type);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n```suggestion\r\n    const bool success = context.connman->AddConnection(address, conn_type);\r\n```",
      "created_at": "2020-08-28T13:52:45Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479312039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479312039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479312802",
      "pull_request_review_id": 477723783,
      "id": 479312802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxMjgwMg==",
      "diff_hunk": "@@ -282,6 +283,61 @@ static UniValue addnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue addconnection(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+    };\n+\n+    help.Check(request);\n+\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    bool success = context.connman->AddConnection(address, conn_type);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479312039,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "or \r\n```suggestion\r\n    if(!context.connman->AddConnection(address, conn_type))\r\n```",
      "created_at": "2020-08-28T13:53:33Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479312802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479312802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479353496",
      "pull_request_review_id": 477723783,
      "id": 479353496,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1MzQ5Ng==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this needed? If the test fails, is it not ok to fail for `sendrawtransaction` validation/mempool reasons?",
      "created_at": "2020-08-28T14:46:29Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479353496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479353496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479354900",
      "pull_request_review_id": 477723783,
      "id": 479354900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1NDkwMA==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 103,
      "original_position": 100,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this to clear the mempool?",
      "created_at": "2020-08-28T14:48:51Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479354900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479354900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479358247",
      "pull_request_review_id": 477723783,
      "id": 479358247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1ODI0Nw==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 130,
      "original_position": 123,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think `height` would be more clear than `index`",
      "created_at": "2020-08-28T14:54:21Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479358247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479358247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 100,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488821301",
      "pull_request_review_id": 488885293,
      "id": 488821301,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMTMwMQ==",
      "diff_hunk": "@@ -1069,6 +1069,29 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address)\n+{\n+    int nOutboundFullRelay = 0;\n+\n+    {\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "07dd3ba792bf25eb7e24833393406f559f68e8fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note for the future, I think we could refactor out this code snippet in some accounting type helper. We're computing `nOutboundFullRelay`/`nOutboundBlockRelay` in diverse parts of the codebase, at least after #19858 \r\n\r\nLike returning a struct with an aliased int for each type we have.\r\n```\r\nstruct SetConnectionType {\r\n       int  full_relay;\r\n       int   blocksonly;\r\n       ...\r\n};\r\n\r\nGetConnectionTypeCount()\r\n```",
      "created_at": "2020-09-15T17:00:03Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r488821301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488821301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488823128",
      "pull_request_review_id": 488885293,
      "id": 488823128,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMzEyOA==",
      "diff_hunk": "@@ -2,15 +2,16 @@\n # Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test p2p blocksonly\"\"\"\n+\"\"\"Test p2p blocksonly mode & block-relay-only connections.\"\"\"",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If understand new test well, could you document the 2 behaviors tested, namely that sender doesn't relay transaction to a block-relay-only peer and that receiver disconnect a block-relay-only peer relaying transaction ?",
      "created_at": "2020-09-15T17:03:18Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r488823128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488823128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492403950",
      "pull_request_review_id": 493050008,
      "id": 492403950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwMzk1MA==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473866387,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I haven't looked too closely at #19800 yet, but I think I should now be able to replace this `create_transaction` call with `miniwallet.send_self_transfer` and remove the wallet dependency? does this sound right? cc @MarcoFalke ",
      "created_at": "2020-09-21T23:35:58Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492403950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492403950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492405564",
      "pull_request_review_id": 493051862,
      "id": 492405564,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNTU2NA==",
      "diff_hunk": "@@ -282,6 +283,61 @@ static UniValue addnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue addconnection(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+    };\n+\n+    help.Check(request);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 476299424,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done! how's it look now? \r\n\r\nq: is there anywhere that captures the current conventions around RPC functions? during original implementation I was looking around, but clearly wasn't able to successfully identify which methods are preferred",
      "created_at": "2020-09-21T23:41:37Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492405564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492405564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492405610",
      "pull_request_review_id": 493051907,
      "id": 492405610,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNTYxMA==",
      "diff_hunk": "@@ -840,7 +896,10 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"clearbanned\",            &clearbanned,            {} },\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n     { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n+\n+    /* Not shown in help */",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 476300109,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed ",
      "created_at": "2020-09-21T23:41:47Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492405610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492405610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492405748",
      "pull_request_review_id": 493052053,
      "id": 492405748,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNTc0OA==",
      "diff_hunk": "@@ -2,62 +2,46 @@\n # Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test p2p blocksonly\"\"\"\n+\"\"\"Test p2p blocksonly mode & block-relay-only connections.\"\"\"\n \n-from test_framework.messages import msg_tx, CTransaction, FromHex\n-from test_framework.mininode import P2PInterface\n+import time\n+\n+from test_framework.blocktools import create_transaction\n+from test_framework.messages import msg_tx\n+from test_framework.mininode import P2PInterface, P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 17,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 476300969,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops, fixed now",
      "created_at": "2020-09-21T23:42:15Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492405748",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492405748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492406400",
      "pull_request_review_id": 493052765,
      "id": 492406400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNjQwMA==",
      "diff_hunk": "@@ -130,7 +134,7 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+    def peer_connect_helper(self, dstaddr, dstport, net, timeout_factor):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 476304181,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yup, thats why I removed the `*` from the helper. \r\n\r\nalso note that the `*` is still present in the `peer_connect` function, just git is showing the diff since I added the helper. I don't fully understand what's going on here with the `*` on the actual functions though (`peer_connect`, `peer_accept_connection`), so please let me know if I'm missing something / should dig in more. ",
      "created_at": "2020-09-21T23:44:32Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492406400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492406400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492408256",
      "pull_request_review_id": 493054871,
      "id": 492408256,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwODI1Ng==",
      "diff_hunk": "@@ -542,6 +542,30 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, connection_type=\"outbound\", connect_id=0, **kwargs):\n+        \"\"\" Add an outbound p2p connection from node. Either\n+        full-relay(\"outbound\") or block-relay-only(\"blockrelay\") connection.\n+\n+        This method adds the p2p connection to the self.p2ps list and also\n+        returns the connection to the caller.\"\"\"\n+\n+        kwargs['dstport'] = p2p_port(self.index)",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 20,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 478529683,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point. I actually ended up removing `dstport` and `dstaddr` from the `peer_accept_connection` function signature, because they aren't being set here (we don't know the exact info until the listening server is spun up, which is why we pass a callback through)- so it seems more like a red herring.",
      "created_at": "2020-09-21T23:51:24Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492408256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492408256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 552,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492414635",
      "pull_request_review_id": 493061764,
      "id": 492414635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNDYzNQ==",
      "diff_hunk": "@@ -524,6 +551,33 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=0):\n+        if port is None:\n+            assert idx >= 0 and idx < MAX_NODES\n+            port = p2p_port(MAX_NODES-idx)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 111,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 478602722,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "great question! however, I don't _think_ this is a problem. here's why: the `p2p_port` function in `util.py` calculates in a few different factors, one of which is the `PortSeed.n`, which is set by the `BitcoinTestFramework`. It either explicitly sets this value or defaults to the process id, which would be different for each test. so I think this would only cause a conflict if there are conflicting uses within the same test. (but I very much welcome a double check- this stuff is CONFUSING!)",
      "created_at": "2020-09-22T00:15:03Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492414635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492414635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 558,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419398",
      "pull_request_review_id": 493066784,
      "id": 492419398,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTM5OA==",
      "diff_hunk": "@@ -524,6 +551,33 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=0):\n+        if port is None:\n+            assert idx >= 0 and idx < MAX_NODES\n+            port = p2p_port(MAX_NODES-idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+        coroutine = cls.create_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    def peer_listener(cls, addr, port):\n+        def pl():\n+            x = cls.protos.get((addr,port))\n+            cls.protos[(addr,port)] = None\n+            return x\n+        return pl\n+\n+    @classmethod\n+    async def create_server(cls, addr, port, callback, proto):\n+        if (addr, port) not in cls.listeners:\n+            listener = await cls.network_event_loop.create_server(cls.peer_listener(addr, port), addr, port)\n+            logger.debug(\"Listening server on %s:%d should be started\" % (addr, port))",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 129,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 478611513,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thank you very much for looking into the flaky test :) you are a brave soul! hahaha\r\n\r\nwith ~some~ a lot of help from @ajtowns, my best understanding of what was probably happening here is an off-by-one error. the port allocation is intended to have 12 unique slots for each test, allowing test runner to run multiple tests in parallel. previously, the idx was starting at 0, so p2p_port was being passed (MAX_NODES), which could lead to a port conflict with another test. to fix it, I'm starting the idx at 1 & have added the validations to check the proper range. let's see how CI does ü§ûüèΩ\r\n\r\nto be more specific, the port conflict I'm referring to would occur if a test had pid `x` and invoked `p2p_port(12)`, and the next test had pid `x+1` and invoked `p2p_port(0)`. ",
      "created_at": "2020-09-22T00:35:02Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 576,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419476",
      "pull_request_review_id": 493066866,
      "id": 492419476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTQ3Ng==",
      "diff_hunk": "@@ -288,6 +288,15 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if at max connection capacity\n+     */\n+    bool AddConnection(const std::string& address, const ConnectionType conn_type);",
      "path": "src/net.h",
      "position": null,
      "original_position": 11,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479284359,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-09-22T00:35:26Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419538",
      "pull_request_review_id": 493066942,
      "id": 492419538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTUzOA==",
      "diff_hunk": "@@ -298,18 +310,27 @@ def __init__(self):\n         # The network services received from the peer\n         self.nServices = 0\n \n+    def peer_connect_send_version(self, services):\n+        # Send a version msg\n+        vt = msg_version()\n+        vt.nServices = services\n+        vt.addrTo.ip = self.dstaddr\n+        vt.addrTo.port = self.dstport\n+        vt.addrFrom.ip = \"0.0.0.0\"\n+        vt.addrFrom.port = 0\n+        self.on_connection_send_msg = vt  # Will be sent soon after connection_made",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 59,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479293812,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-09-22T00:35:43Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419934",
      "pull_request_review_id": 493067399,
      "id": 492419934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTkzNA==",
      "diff_hunk": "@@ -542,6 +542,30 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, connection_type=\"outbound\", connect_id=0, **kwargs):\n+        \"\"\" Add an outbound p2p connection from node. Either\n+        full-relay(\"outbound\") or block-relay-only(\"blockrelay\") connection.\n+\n+        This method adds the p2p connection to the self.p2ps list and also\n+        returns the connection to the caller.\"\"\"",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479303202,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done\r\n\r\nTIL about the closing \"\"\" on a newline. looks like quite a lot of our docstrings don't follow this convention üòõ",
      "created_at": "2020-09-22T00:37:26Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492419934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 546,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 550,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492421394",
      "pull_request_review_id": 493068983,
      "id": 492421394,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTM5NA==",
      "diff_hunk": "@@ -282,6 +283,61 @@ static UniValue addnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue addconnection(const JSONRPCRequest& request)\n+{\n+    const RPCHelpMan help{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+    };\n+\n+    help.Check(request);\n+\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(help.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    bool success = context.connman->AddConnection(address, conn_type);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479312039,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, I know I could inline but I separated it into its own variable in an attempt to emphasize that this is where the actual work happens since it gets compiled out anyways. so I don't think the `const` does anything, but I threw it in there anyways",
      "created_at": "2020-09-22T00:43:48Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492421394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492421394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492421519",
      "pull_request_review_id": 493069106,
      "id": 492421519,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTUxOQ==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 103,
      "original_position": 100,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479354900,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yup, resetting to clean state for next test",
      "created_at": "2020-09-22T00:44:19Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492421519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492421519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492421829",
      "pull_request_review_id": 493069429,
      "id": 492421829,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTgyOQ==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 130,
      "original_position": 123,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479358247,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks but I'm a pass. its true that this number is used for block height, but I think index is more accurate to what's passed in, and height is how the index is used",
      "created_at": "2020-09-22T00:45:40Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492421829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492421829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 100,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492422923",
      "pull_request_review_id": 493070575,
      "id": 492422923,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjkyMw==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479353496,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't really understand this question- the test is essentially checking that there is a well formed transaction, submits it to the node, then checks if the p2p connection received the transaction. the goal is to isolate (as much as possible) the reason the conn didn't receive the transaction is due to being a block-relay-only connection.",
      "created_at": "2020-09-22T00:50:10Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492422923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492422923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492424295",
      "pull_request_review_id": 493071925,
      "id": 492424295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNDI5NQ==",
      "diff_hunk": "@@ -1069,6 +1069,29 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address)\n+{\n+    int nOutboundFullRelay = 0;\n+\n+    {\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "07dd3ba792bf25eb7e24833393406f559f68e8fb",
      "in_reply_to_id": 488821301,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sounds good for a future PR üëçüèΩ\r\n\r\ngoing to resolve this conversation to keep the review comments focused on these changes ",
      "created_at": "2020-09-22T00:55:45Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492424295",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492424295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492426039",
      "pull_request_review_id": 493073850,
      "id": 492426039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNjAzOQ==",
      "diff_hunk": "@@ -2,15 +2,16 @@\n # Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test p2p blocksonly\"\"\"\n+\"\"\"Test p2p blocksonly mode & block-relay-only connections.\"\"\"",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 488823128,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hm, yeah those are the main behavioral checks for the block-relay-only connection, but there are also tests for blocks-only mode. the checks seem pretty well documented in the test logs (`self.log.info`), is there a particular reason you'd find them helpful here as well? ",
      "created_at": "2020-09-22T01:03:51Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492426039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492426039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492821017",
      "pull_request_review_id": 493575352,
      "id": 492821017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgyMTAxNw==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473866387,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> does this sound right? cc @MarcoFalke\r\n\r\nno idea ;)\r\n\r\nJust try it and let me know if you run into any problems. If there are bugs in miniwallet, feel free to fix them along the way.",
      "created_at": "2020-09-22T15:16:42Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492821017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492821017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495517956",
      "pull_request_review_id": 497044375,
      "id": 495517956,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzk1Ng==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479353496,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, I guess I found it odd because `sendrawtransaction` will throw a JSONRPCError if validation fails just like `testmempoolaccept` would return False. I don't think they'd have different results unless mempool changes in between calls or something. So it seems like something unnecessary that the test needs to pass. It doesn't make the test incorrect or anything ofc, just seemed peculiar",
      "created_at": "2020-09-27T02:27:51Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r495517956",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495517956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495600743",
      "pull_request_review_id": 497100606,
      "id": 495600743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMDc0Mw==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal, disconnect_nodes\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):",
      "path": "test/functional/p2p_add_connections.py",
      "position": 34,
      "original_position": 29,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b489886b533809c9a4ee2643ceba7d34c278e03e",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When I change this from 2 to 3 I won't get an RPC error (\"at capacity for connection type\") as I would have expected, but an \"address in use\" OSError from the python asyncio. Would it be possible to have some tolerance here, so that the node behavior at maximum outbound connections can be tested?",
      "created_at": "2020-09-27T18:27:11Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r495600743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495600743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497199834",
      "pull_request_review_id": 499035278,
      "id": 497199834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5OTgzNA==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal, disconnect_nodes\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):",
      "path": "test/functional/p2p_add_connections.py",
      "position": 34,
      "original_position": 29,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b489886b533809c9a4ee2643ceba7d34c278e03e",
      "in_reply_to_id": 495600743,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ü§î good question. I expected there to be some room because we allow 12 `MAX_NODES` and here we are using 10 of those ports, but indeed, I get the same issue. somehow that port is already being used, but I don't understand by what. its none of the other connections. I'll continue digging in. \r\n\r\nbut will note that we can check the bounds of each type if they came first. eg. by adding 9 full-relay outbounds in previous loop, or adding 3 block-relay outbounds in the loop on line 33 (which come before the full relay for that node)",
      "created_at": "2020-09-30T01:54:35Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r497199834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497199834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499484755",
      "pull_request_review_id": 501903744,
      "id": 499484755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4NDc1NQ==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0958cbc7211b04e537b3742abd34213023196900\r\n\r\nCould add EOL and follow the current wording:\r\n```suggestion\r\n        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\r\n```\r\n?",
      "created_at": "2020-10-05T10:04:20Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499484755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499484755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499494832",
      "pull_request_review_id": 501903744,
      "id": 499494832,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5NDgzMg==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0958cbc7211b04e537b3742abd34213023196900\r\nnit: It seems readability could be better w/o this empty line, no?",
      "created_at": "2020-10-05T10:23:04Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499494832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499494832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499499590",
      "pull_request_review_id": 501903744,
      "id": 499499590,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTU5MA==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n+    }\n+\n+    RPCTypeCheckArgument(request.params, UniValue::VSTR);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0958cbc7211b04e537b3742abd34213023196900\r\n```suggestion\r\n    RPCTypeCheckArgument(request.params[0], UniValue::VSTR);\r\n```\r\n\r\nI know, that this LOC is changed in the next commit, but this commit is broken in its current state.",
      "created_at": "2020-10-05T10:31:27Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499499590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499499590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499503110",
      "pull_request_review_id": 501903744,
      "id": 499503110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMzExMA==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n+    }\n+\n+    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    const std::string address = request.params[0].get_str();\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0958cbc7211b04e537b3742abd34213023196900\r\nMind being consistent about full stops at the end of the error messages :)",
      "created_at": "2020-10-05T10:38:20Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499503110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499503110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 327,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499510944",
      "pull_request_review_id": 501903744,
      "id": 499510944,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMDk0NA==",
      "diff_hunk": "@@ -1080,6 +1080,29 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address)\n+{\n+    int nOutboundFullRelay = 0;",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0958cbc7211b04e537b3742abd34213023196900\r\nMind following naming convention?\r\n```suggestion\r\n    int outbound_full_relay = 0;\r\n```",
      "created_at": "2020-10-05T10:54:09Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499510944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499510944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1085,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499511188",
      "pull_request_review_id": 501903744,
      "id": 499511188,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMTE4OA==",
      "diff_hunk": "@@ -1080,6 +1080,29 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address)\n+{\n+    int nOutboundFullRelay = 0;\n+\n+    {\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++nOutboundFullRelay;\n+            }\n+        }\n+    }\n+\n+    if (nOutboundFullRelay >= m_max_outbound_full_relay) return false;\n+\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    CAddress addr{};\n+    OpenNetworkConnection(addr, false, &grant, address.c_str(), ConnectionType::OUTBOUND_FULL_RELAY);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0958cbc7211b04e537b3742abd34213023196900\r\n```suggestion\r\n    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), ConnectionType::OUTBOUND_FULL_RELAY);\r\n```",
      "created_at": "2020-10-05T10:54:39Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499511188",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499511188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 1101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499512363",
      "pull_request_review_id": 501903744,
      "id": 499512363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMjM2Mw==",
      "diff_hunk": "@@ -1080,26 +1080,35 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n-bool CConnman::AddConnection(const std::string& address)\n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n {\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n     int nOutboundFullRelay = 0;\n+    int nOutboundBlockRelay = 0;",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26\r\nMind following naming convention?\r\n```suggestion\r\n    int outbound_block_relay = 0;\r\n```",
      "created_at": "2020-10-05T10:56:55Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499512363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499512363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1088,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499515798",
      "pull_request_review_id": 501903744,
      "id": 499515798,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNTc5OA==",
      "diff_hunk": "@@ -303,15 +303,17 @@ static RPCHelpMan addconnection()\n         \"\\nOpen an outbound connection to a specified node (test only)\",\n         {\n             {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'\"},",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26\r\nWhy not keep consistency about full stops at the end of argument descriptions?",
      "created_at": "2020-10-05T11:03:46Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499515798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499515798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 305,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499519175",
      "pull_request_review_id": 501903744,
      "id": 499519175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxOTE3NQ==",
      "diff_hunk": "@@ -320,20 +322,31 @@ static RPCHelpMan addconnection()\n         throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n     }\n \n-    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n     const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n     NodeContext& context = EnsureNodeContext(request.context);\n     if (!context.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    const bool success = context.connman->AddConnection(address);\n+    const bool success = context.connman->AddConnection(address, conn_type);\n     if (!success) {\n-        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");",
      "path": "src/rpc/net.cpp",
      "position": 55,
      "original_position": 46,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26\r\nDoes this error message describe not having `grant` in the `AddConnection` function?",
      "created_at": "2020-10-05T11:10:28Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499519175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499519175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502860553",
      "pull_request_review_id": 506141031,
      "id": 502860553,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg2MDU1Mw==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal, disconnect_nodes\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):",
      "path": "test/functional/p2p_add_connections.py",
      "position": 34,
      "original_position": 29,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b489886b533809c9a4ee2643ceba7d34c278e03e",
      "in_reply_to_id": 495600743,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2 bitcoin nodes, 8 full relay outbounds, and 2 blocks-only outbounds fills up the `MAX_NODES==12` ports",
      "created_at": "2020-10-11T03:38:39Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r502860553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502860553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513158022",
      "pull_request_review_id": 518298927,
      "id": 513158022,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1ODAyMg==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": 499484755,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-28T03:27:29Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513158022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513158022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513161239",
      "pull_request_review_id": 518302339,
      "id": 513161239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2MTIzOQ==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": 499494832,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-28T03:39:39Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513161239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513161239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513161268",
      "pull_request_review_id": 518302366,
      "id": 513161268,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2MTI2OA==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n+    }\n+\n+    RPCTypeCheckArgument(request.params, UniValue::VSTR);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": 499499590,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed (by squashing the two commits) ",
      "created_at": "2020-10-28T03:39:46Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513161268",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513161268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164838",
      "pull_request_review_id": 518306034,
      "id": 513164838,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDgzOA==",
      "diff_hunk": "@@ -296,6 +297,49 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node (test only)\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n+    }\n+\n+    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    const std::string address = request.params[0].get_str();\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": 499503110,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "okay I think I got them all =P ",
      "created_at": "2020-10-28T03:52:45Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 327,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164866",
      "pull_request_review_id": 518306058,
      "id": 513164866,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDg2Ng==",
      "diff_hunk": "@@ -1080,6 +1080,29 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address)\n+{\n+    int nOutboundFullRelay = 0;",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": 499510944,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-28T03:52:50Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164866",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1085,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164912",
      "pull_request_review_id": 518306113,
      "id": 513164912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDkxMg==",
      "diff_hunk": "@@ -1080,6 +1080,29 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address)\n+{\n+    int nOutboundFullRelay = 0;\n+\n+    {\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++nOutboundFullRelay;\n+            }\n+        }\n+    }\n+\n+    if (nOutboundFullRelay >= m_max_outbound_full_relay) return false;\n+\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    CAddress addr{};\n+    OpenNetworkConnection(addr, false, &grant, address.c_str(), ConnectionType::OUTBOUND_FULL_RELAY);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0958cbc7211b04e537b3742abd34213023196900",
      "in_reply_to_id": 499511188,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-28T03:53:01Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164912",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 1101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164945",
      "pull_request_review_id": 518306153,
      "id": 513164945,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDk0NQ==",
      "diff_hunk": "@@ -1080,26 +1080,35 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n-bool CConnman::AddConnection(const std::string& address)\n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n {\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n     int nOutboundFullRelay = 0;\n+    int nOutboundBlockRelay = 0;",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": 499512363,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-28T03:53:09Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164945",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513164945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1088,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513165073",
      "pull_request_review_id": 518306317,
      "id": 513165073,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTA3Mw==",
      "diff_hunk": "@@ -303,15 +303,17 @@ static RPCHelpMan addconnection()\n         \"\\nOpen an outbound connection to a specified node (test only)\",\n         {\n             {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'\"},",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": 499515798,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2020-10-28T03:53:46Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513165073",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513165073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 305,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513166623",
      "pull_request_review_id": 518308043,
      "id": 513166623,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NjYyMw==",
      "diff_hunk": "@@ -320,20 +322,31 @@ static RPCHelpMan addconnection()\n         throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n     }\n \n-    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n     const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n     NodeContext& context = EnsureNodeContext(request.context);\n     if (!context.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    const bool success = context.connman->AddConnection(address);\n+    const bool success = context.connman->AddConnection(address, conn_type);\n     if (!success) {\n-        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");",
      "path": "src/rpc/net.cpp",
      "position": 55,
      "original_position": 46,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": 499519175,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "depends for what type. `AddConnection` goes through the nodes and counts how many full relays & block relays there currently are, then compares this to their respective max. it also checks the grant for the total outbound grants. if any of these fail, this error message is hit ",
      "created_at": "2020-10-28T04:00:08Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513166623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513166623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513168407",
      "pull_request_review_id": 518310083,
      "id": 513168407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2ODQwNw==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal, disconnect_nodes\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):",
      "path": "test/functional/p2p_add_connections.py",
      "position": 34,
      "original_position": 29,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b489886b533809c9a4ee2643ceba7d34c278e03e",
      "in_reply_to_id": 495600743,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@mzumsande do you think it would be useful to bump the port allocation, or does the workaround I proposed suffice for the use cases you're thinking about? I'm hesitant because of the potential of creating sporadic test framework issues, but I can look deeper into it if we have a good use case. ",
      "created_at": "2020-10-28T04:07:30Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513168407",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513168407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520916884",
      "pull_request_review_id": 527662228,
      "id": 520916884,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkxNjg4NA==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal, disconnect_nodes\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):",
      "path": "test/functional/p2p_add_connections.py",
      "position": 34,
      "original_position": 29,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b489886b533809c9a4ee2643ceba7d34c278e03e",
      "in_reply_to_id": 495600743,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure, but I tend to think it is ok to keep it as it is. For none of the use cases I can think of, two bitcoin nodes are necessary. ",
      "created_at": "2020-11-10T22:33:28Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r520916884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520916884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521290049",
      "pull_request_review_id": 528084558,
      "id": 521290049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5MDA0OQ==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There are several reasons that `OpenNetworkConnections()` can fail (eg a connection to that peer already exists, we fail to open a socket, etc). It'd be nice to change `OpenNetworkConnection()` to return a boolean and return that to the RPC caller.\r\n\r\nIf we don't return this value, then the RPC looks like it succeeded even if a connection has not been opened:\r\n\r\n```\r\n‚Üí .bitcoin-cli addconnection i-am-not-an-address outbound\r\n{\r\n  \"address\": \"i-am-not-an-address\",\r\n  \"connectiontype\": \"outbound\"\r\n}\r\n‚Üí ./bitcoin-cli getpeerinfo\r\n[\r\n]\r\n```",
      "created_at": "2020-11-11T11:21:52Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521290049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521290049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521293172",
      "pull_request_review_id": 528084558,
      "id": 521293172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5MzE3Mg==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You don't need to count the number both connection types if you're only going to test against one. It might also be clearer to use the standard library count_if rather than hand writing the loop.\r\n\r\nSee what you think of this:\r\n\r\n```suggestion\r\n    const int max_connections = conn_type == ConnectionType::OUTBOUND_FULL_RELAY ? m_max_outbound_full_relay :\r\n                                                                                   m_max_outbound_block_relay;\r\n\r\n    // Count existing connections\r\n    int existing_connections{0};\r\n    {\r\n        LOCK(cs_vNodes);\r\n        existing_connections = std::count_if(vNodes.begin(),\r\n                                             vNodes.end(),\r\n                                             [conn_type](CNode* node){return node->m_conn_type == conn_type;});\r\n    }\r\n\r\n    // Max connections of specified type already exist\r\n    if (existing_connections >= max_connections) return false;\r\n\r\n```",
      "created_at": "2020-11-11T11:28:00Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521293172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521293172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 1159,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521296406",
      "pull_request_review_id": 528084558,
      "id": 521296406,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5NjQwNg==",
      "diff_hunk": "@@ -62,6 +62,7 @@ enum RPCErrorCode\n     RPC_CLIENT_NODE_NOT_CONNECTED   = -29, //!< Node to disconnect not found in connected nodes\n     RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, //!< Invalid IP/Subnet\n     RPC_CLIENT_P2P_DISABLED         = -31, //!< No valid connection manager instance found\n+    RPC_CLIENT_NODE_CAPACITY_REACHED= -34, //!< Max number of outbound or block-relay connections already open",
      "path": "src/rpc/protocol.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps make this less specific (e.g. FAILED_TO_CONNECT).",
      "created_at": "2020-11-11T11:34:30Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521296406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521296406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521303287",
      "pull_request_review_id": 528084558,
      "id": 521303287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwMzI4Nw==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479353496,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. This doesn't seem necessary. You could just as easily call `sendrawtransaction` and then `getmempoolentry` to confirm that the transaction reached the mempool.",
      "created_at": "2020-11-11T11:48:24Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521303287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521303287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521304814",
      "pull_request_review_id": 528084558,
      "id": 521304814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwNDgxNA==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need some kind of sleep/setmocktime here? The node will only send out inventory to outbound connections every 2.5s on average, so this won't catch if we accidentally send out invs to this peer.",
      "created_at": "2020-11-11T11:51:27Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521304814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521304814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521500638",
      "pull_request_review_id": 528359578,
      "id": 521500638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwMDYzOA==",
      "diff_hunk": "@@ -2,15 +2,16 @@\n # Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test p2p blocksonly\"\"\"\n+\"\"\"Test p2p blocksonly mode & block-relay-only connections.\"\"\"",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 488823128,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IMO, it's quite nice to have a succinct high-level description of test coverage without necessary getting into the details.",
      "created_at": "2020-11-11T16:58:12Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521500638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521500638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521589772",
      "pull_request_review_id": 528473200,
      "id": 521589772,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4OTc3Mg==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);",
      "path": "src/net.cpp",
      "position": 18,
      "original_position": 28,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand exactly what `CSemaphoreGrant` is enforcing given that:\r\n* `semOutbound` is initialized with a value of `std::min(m_max_outbound, nMaxConnections)` (L2510 in `src/net.cpp`)\r\n* thread \"addconnection\" is accessing this semaphore L1179 in `src/net.cpp` with `fTry=true` thus calling `CSemaphoreGrant::TryAcquire`, decrementing the semaphore by one (L281 in `src/sync.h`) and returning a successful grant taking\r\n* thread \"addconnection is calling `OpenNetworkConnection` which itself calls `CSemaphoreGrant::MoveTo()` (L2205 in `src/net.cpp`) if connection opening is successful. `MoveTo()` calls `CSemaphoreGrant::Release()` then `CSemaphore::post()`. This last function _increments_ back the semaphore.\r\n* a thread `opencon` is accessing the semaphore in `ThreadOpenConnections` (L1918) and indirectly calls `CSemaphore::wait`, but the conditional predicate doesn't matter as `addconnection` thread incremented back the semaphore. Thus sooner or latter `wait()` will return and a new outbound should be established.\r\n\r\n`CSemaphoreGrant`/`CSemaphore`/`CConnman::semOutbound` are poorly documented so it's hard to understand what exactly it aims to achieve. So we might theoritcally bypass `m_max_outbound` but I wouldn't surprised you see nothing in practice as block-relay-only/full-relay are checked on their own and other outbound are short-lived ?",
      "created_at": "2020-11-11T19:30:36Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521589772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521589772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1149,
      "original_line": 1149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521590231",
      "pull_request_review_id": 528473200,
      "id": 521590231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5MDIzMQ==",
      "diff_hunk": "@@ -346,6 +346,15 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection. Currently only used from tests.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if at max connection capacity",
      "path": "src/net.h",
      "position": null,
      "original_position": 9,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"max outbound connection\"",
      "created_at": "2020-11-11T19:31:32Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521590231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521590231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522558783",
      "pull_request_review_id": 529645624,
      "id": 522558783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODc4Mw==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521290049,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`./bitcoin-cli addnode i-am-not-an-address onetry` gives the same result, as does trying with a valid but unreachable address. Even with NET logging enabled, I only see an error in debug.log for the unreachable address (\"connection to XXX timeout\"). Having a more reliable indication *somewhere* of what went wrong would probably be a good idea both here and for addnode might be good. Not sure that needs to be in this PR though, behaving no worse than the existing addnode doesn't seem too bad.",
      "created_at": "2020-11-13T01:53:19Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r522558783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522558783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522561165",
      "pull_request_review_id": 529648300,
      "id": 522561165,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MTE2NQ==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);",
      "path": "src/net.cpp",
      "position": 18,
      "original_position": 28,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521589772,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`a.MoveTo(b)` calls `b.Release()` -- but `b` in this case is a brand new `CSemaphoreGrant` that was default initialized, so `b.fHaveGrant` is false and `b.Release()` is a no-op, and `b.sem->post()` is not called.",
      "created_at": "2020-11-13T02:01:40Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r522561165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522561165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1149,
      "original_line": 1149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525413509",
      "pull_request_review_id": 532697174,
      "id": 525413509,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMzUwOQ==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521304814,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems related to your previous feedback https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473860655. thanks for helping me ensure this test is meaningful :) \r\n\r\nthe way I've sanity tested this assertion is by removing the `connection_type=\"blockrelay\"` arg to see that it fails. I think the mocktime bump a few lines up should be covering the `INVENTORY_BROADCAST_INTERVAL` delay. is that what you're referring to?\r\n\r\nhowever, even though it appropriately fails (when removing `blockrelay` arg) on my computer, it might still be worth adding a small delay (maybe 0.1 second sleep?) to ensure the `SendMessages` loop is actually hit on every machine? \r\n\r\nwhat do you think?",
      "created_at": "2020-11-17T19:04:21Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525413509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525413509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525414419",
      "pull_request_review_id": 532698272,
      "id": 525414419,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNDQxOQ==",
      "diff_hunk": "@@ -346,6 +346,15 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection. Currently only used from tests.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if at max connection capacity",
      "path": "src/net.h",
      "position": null,
      "original_position": 9,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521590231,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "? \r\n\r\nreturns false if its at max connection of the specified type (full relay or block relay), as well as checking total outbound connections ",
      "created_at": "2020-11-17T19:05:45Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525414419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525414419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525435591",
      "pull_request_review_id": 532745351,
      "id": 525435591,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNTU5MQ==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521290049,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree that this can be done separately if the behaviour here is the same as for `addnode`.",
      "created_at": "2020-11-17T19:35:45Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525435591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525435591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525437816",
      "pull_request_review_id": 532746669,
      "id": 525437816,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNzgxNg==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);",
      "path": "src/net.cpp",
      "position": 18,
      "original_position": 28,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521589772,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ariard I agree that `CSemaphoreGrant` is far-from-ideal, and that its strange / redundant that we also have the individual counts of our different types. However, I'm not understanding exactly what you're trying to suggest here. Are you saying that the overall design of this mechanism is confusing, and the guarantees minimal? Or are you saying that this proposed implementation is problematic? ",
      "created_at": "2020-11-17T19:37:42Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525437816",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525437816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1149,
      "original_line": 1149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525438953",
      "pull_request_review_id": 532747324,
      "id": 525438953,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzODk1Mw==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521304814,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cc @MarcoFalke, test sync expert üòõ",
      "created_at": "2020-11-17T19:38:37Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525438953",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525438953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525533443",
      "pull_request_review_id": 532823851,
      "id": 525533443,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMzQ0Mw==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 109,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473860655,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "resolving this conversation so we can continue over here: https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525413509",
      "created_at": "2020-11-17T21:23:38Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525533443",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525533443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525544492",
      "pull_request_review_id": 532837761,
      "id": 525544492,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NDQ5Mg==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479353496,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok. I didn't look closely at exactly what errors `testmempoolaccept` returns vs `sendrawtransaction`. I think I probably just copied the existing pattern in the tests. \r\n\r\n@glozow - are you suggesting I should just delete this line? (fine by me, just trying to understand)\r\n\r\n@jnewbery your suggestion just seems like an alternative that's about the same? ",
      "created_at": "2020-11-17T21:44:06Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525544492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525544492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525552821",
      "pull_request_review_id": 532847890,
      "id": 525552821,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjgyMQ==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521290049,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agree with the idea. I've started a branch to incorporate: https://github.com/amitiuttarwar/bitcoin/commits/2020-11-open-conn-improvements. I want to add some testing and review the failures / think through logging. but will do this as a follow up. ",
      "created_at": "2020-11-17T21:59:42Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525552821",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525552821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525552977",
      "pull_request_review_id": 532848065,
      "id": 525552977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1Mjk3Nw==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521293172,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is great! thank you! I've incorporated the suggestion ",
      "created_at": "2020-11-17T21:59:58Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525552977",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525552977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 1159,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525553290",
      "pull_request_review_id": 532848441,
      "id": 525553290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MzI5MA==",
      "diff_hunk": "@@ -62,6 +62,7 @@ enum RPCErrorCode\n     RPC_CLIENT_NODE_NOT_CONNECTED   = -29, //!< Node to disconnect not found in connected nodes\n     RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, //!< Invalid IP/Subnet\n     RPC_CLIENT_P2P_DISABLED         = -31, //!< No valid connection manager instance found\n+    RPC_CLIENT_NODE_CAPACITY_REACHED= -34, //!< Max number of outbound or block-relay connections already open",
      "path": "src/rpc/protocol.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521296406,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "leaving it for this PR since the specificity is accurate, but updating in the branch (https://github.com/amitiuttarwar/bitcoin/commits/2020-11-open-conn-improvements) that generalizes and returns more general failures",
      "created_at": "2020-11-17T22:00:33Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525553290",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525553290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525847965",
      "pull_request_review_id": 533142971,
      "id": 525847965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0Nzk2NQ==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479353496,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`sendrawtransaction` error handling is undocumented, but it will indeed return an jsonrpc error when the tx couldn't be added to the mempool",
      "created_at": "2020-11-18T06:45:13Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525847965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525847965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525848859",
      "pull_request_review_id": 533144031,
      "id": 525848859,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0ODg1OQ==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521304814,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "wouldn't the setmocktime be called after the tx has been added to the mempool?",
      "created_at": "2020-11-18T06:47:38Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525848859",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525848859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526336974",
      "pull_request_review_id": 533770159,
      "id": 526336974,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzNjk3NA==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521304814,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh great point. I think its working fine on my machine bc the window between bumping mocktime + making txn is small enough, but I've just pushed an update to have the right order.",
      "created_at": "2020-11-18T18:47:10Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r526336974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526336974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527789415",
      "pull_request_review_id": 535555222,
      "id": 527789415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4OTQxNQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d67371 argument name in snakecase and improved description\r\n```suggestion\r\n            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The type of connection to open, either (case insensitive) \\\"outbound\\\" or \\\"blockrelay\\\".\"},\r\n```",
      "created_at": "2020-11-20T16:00:06Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527789415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527789415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527790065",
      "pull_request_review_id": 535555222,
      "id": 527790065,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MDA2NQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d67371\r\n```suggestion\r\n                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\r\n```",
      "created_at": "2020-11-20T16:01:06Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527790065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527790065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527790484",
      "pull_request_review_id": 535555222,
      "id": 527790484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MDQ4NA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d673716f2eb37 trim and make case-insensitive\r\n```suggestion\r\n    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\r\n```\r\n",
      "created_at": "2020-11-20T16:01:46Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527790484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527790484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527791265",
      "pull_request_review_id": 535555222,
      "id": 527791265,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MTI2NQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address, conn_type);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");\n+    }\n+\n+    UniValue info(UniValue::VOBJ);\n+    info.pushKV(\"address\", address);\n+    info.pushKV(\"connectiontype\", conn_type_in);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d673716f2eb37\r\n```suggestion\r\n    info.pushKV(\"connection_type\", conn_type_in);\r\n```",
      "created_at": "2020-11-20T16:02:59Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527791265",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527791265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527791634",
      "pull_request_review_id": 535555222,
      "id": 527791634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MTYzNA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address, conn_type);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");\n+    }\n+\n+    UniValue info(UniValue::VOBJ);\n+    info.pushKV(\"address\", address);\n+    info.pushKV(\"connectiontype\", conn_type_in);\n+",
      "path": "src/rpc/net.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d673716f2eb37efdb81ad2d7d20f69de960b3 wishlist :)\r\n```diff\r\n+    info.pushKV(\"peer id\", number);\r\n+    info.pushKV(\"result\", \"...string description...\");\r\n```\r\n",
      "created_at": "2020-11-20T16:03:36Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527791634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527791634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 367,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527792294",
      "pull_request_review_id": 535555222,
      "id": 527792294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MjI5NA==",
      "diff_hunk": "@@ -906,7 +962,9 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"clearbanned\",            &clearbanned,            {} },\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n     { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n+\n     { \"hidden\",             \"addpeeraddress\",         &addpeeraddress,         {\"address\", \"port\"} },\n+    { \"hidden\",             \"addconnection\",          &addconnection,          {\"address\", \"connectiontype\"} },",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d673716f2eb37efdb81ad2d7d20f69de960b3 s/connectiontype/connection_type/ (nit, sort before addpeeraddress)",
      "created_at": "2020-11-20T16:04:39Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527792294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527792294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527793436",
      "pull_request_review_id": 535555222,
      "id": 527793436,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MzQzNg==",
      "diff_hunk": "@@ -1156,6 +1156,30 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d673716f2eb37efdb81ad2d7d20f69de960b3 nit, pass by value or by reference to const, but not const value, idem for the declaration in net.h\r\n```suggestion\r\nbool CConnman::AddConnection(const std::string& address, ConnectionType conn_type)\r\n```",
      "created_at": "2020-11-20T16:06:18Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527793436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527793436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527795332",
      "pull_request_review_id": 535555222,
      "id": 527795332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NTMzMg==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521290049,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0c4d673716f2eb37efdb81ad2d7d2\r\n\r\n```suggestion\r\n    OpenNetworkConnection(CAddress(), /* fCountFailure */ false, &grant, address.c_str(), conn_type);\r\n```",
      "created_at": "2020-11-20T16:09:25Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527795332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527795332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527796158",
      "pull_request_review_id": 535555222,
      "id": 527796158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NjE1OA==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521290049,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with returning a boolean; it may also be convenient for it to return the peer id of the connection via an out param.",
      "created_at": "2020-11-20T16:10:36Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527796158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527796158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527797992",
      "pull_request_review_id": 535555222,
      "id": 527797992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5Nzk5Mg==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50720f411e05 Suggest also testing passing \"outbound\" in one of these calls (and one with e.g. \"  OUTbound \" if you make it case-insensitive and trimmed)",
      "created_at": "2020-11-20T16:13:28Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527797992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527797992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527799898",
      "pull_request_review_id": 535555222,
      "id": 527799898,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5OTg5OA==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 36,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50720f411e05cf1bba fun nit, can use `product` here (thanks to @jnewbery for the tip a few months ago) to replace these two blocks:\r\n```diff\r\n+from itertools import product\r\n...\r\n-        self.log.info(\"Add 2 block-relay-only connections to node 0\")\r\n-        for i in range(2):\r\n-            self.log.info(\"block-relay-only: {}\".format(i))\r\n-            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\r\n-\r\n-        self.log.info(\"Add 2 block-relay-only connections to node 1\")\r\n-        for i in range(2):\r\n-            self.log.info(\"block-relay-only: {}\".format(i))\r\n-            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\r\n+        self.log.info(\"Add 2 block-relay-only connections to nodes 0 and 1\")\r\n+        for node, conn in product(range(2), range(2)):\r\n+            self.log.info(\"node {}, block-relay-only conn {}\".format(node, conn))\r\n+            self.nodes[node].add_outbound_p2p_connection(P2PInterface(), connection_type=\"BlockRelay\")\r\n```\r\n ",
      "created_at": "2020-11-20T16:16:24Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527799898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527799898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527801276",
      "pull_request_review_id": 535555222,
      "id": 527801276,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwMTI3Ng==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 15)\n+\n+        # check node0 has all outbound connections\n+        node0_peers = []\n+        for i in range(10):\n+            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n+        assert_equal(node0_peers.count(False), 10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 56,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50720f411e05c maybe log and simplify\r\n```diff\r\n-        # check node0 has all outbound connections\r\n-        node0_peers = []\r\n-        for i in range(10):\r\n-            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\r\n-        assert_equal(node0_peers.count(False), 10)\r\n+        self.log.info(\"Check node 0 has outbound connections only\")\r\n+        info = self.nodes[0].getnetworkinfo()\r\n+        assert_equal([0, 10], [info[\"connections_in\"], info[\"connections_out\"]])\r\n```",
      "created_at": "2020-11-20T16:18:38Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527801276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527801276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527802854",
      "pull_request_review_id": 535555222,
      "id": 527802854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwMjg1NA==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 15)\n+\n+        # check node0 has all outbound connections\n+        node0_peers = []\n+        for i in range(10):\n+            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n+        assert_equal(node0_peers.count(False), 10)\n+\n+        # check node1 has 10 outbounds & 5 inbounds\n+        node1_peers = []\n+        for i in range(15):\n+            node1_peers.append(self.nodes[1].getpeerinfo()[i]['inbound'])\n+\n+        assert_equal(node1_peers.count(False), 10)\n+        assert_equal(node1_peers.count(True), 5)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 64,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50720f411e05cf1bbaa91174b389c54f3c5287cf perhaps log and simplify\r\n```diff\r\n-        # check node1 has 10 outbounds & 5 inbounds\r\n-        node1_peers = []\r\n-        for i in range(15):\r\n-            node1_peers.append(self.nodes[1].getpeerinfo()[i]['inbound'])\r\n \r\n-        assert_equal(node1_peers.count(False), 10)\r\n-        assert_equal(node1_peers.count(True), 5)\r\n+        self.log.info(\"Check node 1 has 5 inbound and 10 outbound connections\")\r\n+        info = self.nodes[1].getnetworkinfo()\r\n+        assert_equal([5, 10], [info[\"connections_in\"], info[\"connections_out\"]])\r\n```\r\n",
      "created_at": "2020-11-20T16:20:50Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527802854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527802854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527803556",
      "pull_request_review_id": 535555222,
      "id": 527803556,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwMzU1Ng==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 15)\n+\n+        # check node0 has all outbound connections\n+        node0_peers = []\n+        for i in range(10):\n+            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n+        assert_equal(node0_peers.count(False), 10)\n+\n+        # check node1 has 10 outbounds & 5 inbounds\n+        node1_peers = []\n+        for i in range(15):\n+            node1_peers.append(self.nodes[1].getpeerinfo()[i]['inbound'])\n+\n+        assert_equal(node1_peers.count(False), 10)\n+        assert_equal(node1_peers.count(True), 5)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 90,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50720f411e05cf1bba added these as sanity checks. Could add a helper test that checks the passed number of in/out connections for each node, e.g. `self.test_conns([(0, 10), (5, 10)])` to assert these convienently \r\n```diff\r\n         self.log.info(\"Disconnect p2p connections & try to re-open\")\r\n         self.nodes[0].disconnect_p2ps()\r\n+        assert_equal(self.nodes[0].getnetworkinfo()[\"connections_out\"], 0)\r\n+        assert_equal(self.nodes[1].getnetworkinfo()[\"connections_in\"], 5)\r\n+        assert_equal(self.nodes[1].getnetworkinfo()[\"connections_out\"], 10)\r\n \r\n         self.log.info(\"Add 8 outbounds to node 0\")\r\n         for i in range(8):\r\n             self.log.info(\"outbound: {}\".format(i))\r\n             self.nodes[0].add_outbound_p2p_connection(P2PInterface())\r\n+        assert_equal(self.nodes[0].getnetworkinfo()[\"connections_out\"], 8)\r\n+        assert_equal(self.nodes[1].getnetworkinfo()[\"connections\"], 15)\r\n \r\n         self.log.info(\"Add 2 block-relay-only connections to node 0\")\r\n         for i in range(2):\r\n             self.log.info(\"block-relay-only: {}\".format(i))\r\n             self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\r\n+        assert_equal(self.nodes[0].getnetworkinfo()[\"connections_out\"], 10)\r\n+        assert_equal(self.nodes[1].getnetworkinfo()[\"connections\"], 15)\r\n \r\n         self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\r\n         self.restart_node(0)\r\n@@ -83,11 +82,15 @@ class P2PAddConnections(BitcoinTestFramework):\r\n         for i in range(8):\r\n             self.log.info(\"outbound: {}\".format(i))\r\n             self.nodes[0].add_outbound_p2p_connection(P2PInterface())\r\n+        assert_equal(self.nodes[0].getnetworkinfo()[\"connections_out\"], 8)\r\n+        assert_equal(self.nodes[1].getnetworkinfo()[\"connections\"], 15)\r\n \r\n         self.log.info(\"Add 2 block-relay-only connections to node 0\")\r\n         for i in range(2):\r\n             self.log.info(\"block-relay-only: {}\".format(i))\r\n             self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\r\n+        assert_equal(self.nodes[0].getnetworkinfo()[\"connections_out\"], 10)\r\n+        assert_equal(self.nodes[1].getnetworkinfo()[\"connections\"], 15)\r\n ```\r\n",
      "created_at": "2020-11-20T16:21:59Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527803556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527803556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527812329",
      "pull_request_review_id": 535555222,
      "id": 527812329,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxMjMyOQ==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473866387,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OCD nit, maybe enclose `50 - 0.001` in parens, or better yet, assign this magical entity to a well-named variable (or with a comment) that documents what/why",
      "created_at": "2020-11-20T16:35:08Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527812329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527812329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527816958",
      "pull_request_review_id": 535590786,
      "id": 527816958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNjk1OA==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 36,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527799898,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(\"BlockRelay\" in the suggestion because I was testing the case-insensitive code above)",
      "created_at": "2020-11-20T16:42:11Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527816958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527816958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527820759",
      "pull_request_review_id": 535595686,
      "id": 527820759,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyMDc1OQ==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 15)\n+\n+        # check node0 has all outbound connections\n+        node0_peers = []\n+        for i in range(10):\n+            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n+        assert_equal(node0_peers.count(False), 10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 56,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527801276,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(getnetworkinfo didn't have these two fields yet when you opened this PR)",
      "created_at": "2020-11-20T16:47:16Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527820759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527820759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528262717",
      "pull_request_review_id": 536019931,
      "id": 528262717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MjcxNw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address, conn_type);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");\n+    }\n+\n+    UniValue info(UniValue::VOBJ);\n+    info.pushKV(\"address\", address);\n+    info.pushKV(\"connectiontype\", conn_type_in);\n+",
      "path": "src/rpc/net.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527791634,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what would be described in the result field? ",
      "created_at": "2020-11-22T00:45:29Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528262717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528262717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 367,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268488",
      "pull_request_review_id": 536022695,
      "id": 528268488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2ODQ4OA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527789415,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-11-22T01:56:16Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268488",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268519",
      "pull_request_review_id": 536022708,
      "id": 528268519,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2ODUxOQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527790065,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-11-22T01:56:35Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268543",
      "pull_request_review_id": 536022724,
      "id": 528268543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2ODU0Mw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527790484,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cool, thanks. done ",
      "created_at": "2020-11-22T01:57:02Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268593",
      "pull_request_review_id": 536022743,
      "id": 528268593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2ODU5Mw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address, conn_type);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");\n+    }\n+\n+    UniValue info(UniValue::VOBJ);\n+    info.pushKV(\"address\", address);\n+    info.pushKV(\"connectiontype\", conn_type_in);\n+",
      "path": "src/rpc/net.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527791634,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also, what are some use cases you have in mind for returning the peer's id? ",
      "created_at": "2020-11-22T01:57:39Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 367,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268612",
      "pull_request_review_id": 536022752,
      "id": 528268612,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2ODYxMg==",
      "diff_hunk": "@@ -1156,6 +1156,30 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527793436,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-11-22T01:57:56Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268634",
      "pull_request_review_id": 536022764,
      "id": 528268634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2ODYzNA==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527797992,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added outbound to one and BlockRelay to another ",
      "created_at": "2020-11-22T01:58:17Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528268634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269456",
      "pull_request_review_id": 536023157,
      "id": 528269456,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQ1Ng==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 36,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527799898,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks but I am a pass, within the context of this test, I find this a bit less clear in terms of test structure (putting together node 0 & 1) and logging. ",
      "created_at": "2020-11-22T02:08:30Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269456",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269529",
      "pull_request_review_id": 536023186,
      "id": 528269529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTUyOQ==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 15)\n+\n+        # check node0 has all outbound connections\n+        node0_peers = []\n+        for i in range(10):\n+            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n+        assert_equal(node0_peers.count(False), 10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 56,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527801276,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cool thanks, incorporated the `getnetworkinfo` call. definitely cleaner.",
      "created_at": "2020-11-22T02:09:19Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269529",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269676",
      "pull_request_review_id": 536023237,
      "id": 528269676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTY3Ng==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 15)\n+\n+        # check node0 has all outbound connections\n+        node0_peers = []\n+        for i in range(10):\n+            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n+        assert_equal(node0_peers.count(False), 10)\n+\n+        # check node1 has 10 outbounds & 5 inbounds\n+        node1_peers = []\n+        for i in range(15):\n+            node1_peers.append(self.nodes[1].getpeerinfo()[i]['inbound'])\n+\n+        assert_equal(node1_peers.count(False), 10)\n+        assert_equal(node1_peers.count(True), 5)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 64,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527802854,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same as https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527801276, it's been updated",
      "created_at": "2020-11-22T02:10:34Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269702",
      "pull_request_review_id": 536023249,
      "id": 528269702,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTcwMg==",
      "diff_hunk": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 15)\n+\n+        # check node0 has all outbound connections\n+        node0_peers = []\n+        for i in range(10):\n+            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n+        assert_equal(node0_peers.count(False), 10)\n+\n+        # check node1 has 10 outbounds & 5 inbounds\n+        node1_peers = []\n+        for i in range(15):\n+            node1_peers.append(self.nodes[1].getpeerinfo()[i]['inbound'])\n+\n+        assert_equal(node1_peers.count(False), 10)\n+        assert_equal(node1_peers.count(True), 5)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 90,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527803556,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "üëç added a helper to compare connections using `getnetworkinfo` and added more checks. ",
      "created_at": "2020-11-22T02:11:01Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269854",
      "pull_request_review_id": 536023321,
      "id": 528269854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTg1NA==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521304814,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@MarcoFalke, @jnewbery if you get the chance, lmk if this looks good and I'll resolve. but leaving the thread open for now bc I want a second opinion on whether I've solved the issue ",
      "created_at": "2020-11-22T02:12:47Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528269854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528441996",
      "pull_request_review_id": 536145820,
      "id": 528441996,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MTk5Ng==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479353496,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, `testmempoolaccept` is unnecessary here. And if you need to make sure it's in mempool then submit + `getmempoolentry` is the move.",
      "created_at": "2020-11-23T02:01:01Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528441996",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528441996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528970423",
      "pull_request_review_id": 536813087,
      "id": 528970423,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MDQyMw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, num_node, num_in, num_out):\n+        info = self.nodes[num_node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"BlockRelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(0, 0, 10)\n+        self.check_node_connections(1, 5, 10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 55,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e400c7eb7dec42db50c2d667d72b0a87f0a25ab1",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "New helper :+1:, just add named args in the callers (maybe drop the `num_` prefixes).\r\n```suggestion\r\n        self.check_node_connections(num_node=1, num_in=5, num_out=10)\r\n```",
      "created_at": "2020-11-23T20:16:25Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528970423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528970423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528979140",
      "pull_request_review_id": 536824378,
      "id": 528979140,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3OTE0MA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, num_node, num_in, num_out):\n+        info = self.nodes[num_node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e400c7eb7dec42db50c2d667d72b0a87f0a25ab1",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there any point in also testing calls like\r\n```python\r\nself.nodes[0].addconnection(\"127.0.0.1:36848\", \"outbound\")\r\n```\r\n",
      "created_at": "2020-11-23T20:33:51Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528979140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528979140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528984312",
      "pull_request_review_id": 536830825,
      "id": 528984312,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDMxMg==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address, conn_type);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");\n+    }\n+\n+    UniValue info(UniValue::VOBJ);\n+    info.pushKV(\"address\", address);\n+    info.pushKV(\"connectiontype\", conn_type_in);\n+",
      "path": "src/rpc/net.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527791634,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Off-hand, I imagined the peer id might be useful for testing, but that can wait until there is an actual use case or need for it. The result might be a success (`\"result\": \"connection successful\"`) or failure (`\"error\": \"unable to connect\"`), but I'm not sure how much `addconnection` would be used manually in the CLI or like https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528979140 that returns the object (I didn't look at how to introspect  test_framework.p2p.P2PInterface objects yet). At any rate, I don't want to hold this up. We need more p2p testing tools.",
      "created_at": "2020-11-23T20:44:07Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528984312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528984312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 367,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531729151",
      "pull_request_review_id": 540136505,
      "id": 531729151,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyOTE1MQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connectiontype\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'outbound' or 'blockrelay'.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connectiontype\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);\n+    if (!context.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n+    }\n+\n+    const bool success = context.connman->AddConnection(address, conn_type);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");\n+    }\n+\n+    UniValue info(UniValue::VOBJ);\n+    info.pushKV(\"address\", address);\n+    info.pushKV(\"connectiontype\", conn_type_in);\n+",
      "path": "src/rpc/net.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "50720f411e05cf1bbaa91174b389c54f3c5287cf",
      "in_reply_to_id": 527791634,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "okay, I'm going to resolve this comment. we can revisit once there are specific use cases",
      "created_at": "2020-11-27T18:39:50Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r531729151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531729151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 367,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532096690",
      "pull_request_review_id": 540412202,
      "id": 532096690,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5NjY5MA==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 118,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479353496,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed `testmempoolaccept` call ",
      "created_at": "2020-11-28T19:22:55Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532096690",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532096690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099463",
      "pull_request_review_id": 540413701,
      "id": 532099463,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTQ2Mw==",
      "diff_hunk": "@@ -69,18 +49,55 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(txid not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=50 - 0.001)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": null,
      "original_position": 114,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e00848600f27c1495ff1bbc5e6aaa3d4f0cf5c95",
      "in_reply_to_id": 473866387,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "resolving this conversation, tracking as a future improvement at https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520",
      "created_at": "2020-11-28T19:50:17Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099696",
      "pull_request_review_id": 540413855,
      "id": 532099696,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTY5Ng==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521290049,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "resolving this conversation, tracking better return value from OpenNetworkConnection as a future improvement in https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520",
      "created_at": "2020-11-28T19:53:07Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099720",
      "pull_request_review_id": 540413873,
      "id": 532099720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTcyMA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, num_node, num_in, num_out):\n+        info = self.nodes[num_node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"BlockRelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(0, 0, 10)\n+        self.check_node_connections(1, 5, 10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 55,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e400c7eb7dec42db50c2d667d72b0a87f0a25ab1",
      "in_reply_to_id": 528970423,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added named args",
      "created_at": "2020-11-28T19:53:36Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099993",
      "pull_request_review_id": 540414002,
      "id": 532099993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTk5Mw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, num_node, num_in, num_out):\n+        info = self.nodes[num_node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "e400c7eb7dec42db50c2d667d72b0a87f0a25ab1",
      "in_reply_to_id": 528979140,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`addconnection` currently doesn't have sanity tests to the RPC endpoint, but I'm leaving that as a future improvement since I'm trying to maximize reviewability and the added benefit seems small (esp since its a test-only RPC endpoint). this future improvement is tracked in https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520",
      "created_at": "2020-11-28T19:56:04Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532099993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533388268",
      "pull_request_review_id": 541868752,
      "id": 533388268,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4ODI2OA==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521304814,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The average delay between sending INVs to outbound peers is 2.5s, so bumping mocktime by 5 seconds is only double the mean. Is there any downside in bumping it by a minute so there's overwhelming probability that the node's timer for sending an INV to this peer has popped?\r\n\r\nYou could also update this to call `sync_with_ping()` twice to ensure that the node has called `SendMessages()` for this peer. Without that, there's a window where the node calls `ProcessMessages()` for the peer, sends the `pong` response and the test moves on to the `assert(int(txid, 16) not in conn.get_invs())` without the node hitting `SendMessages()`. Syncing twice with pings ensures that `ProcessMessages()` is called twice, which means that `SendMessages()` must have been called once.",
      "created_at": "2020-12-01T12:58:43Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533388268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533388268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533390362",
      "pull_request_review_id": 541871547,
      "id": 533390362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5MDM2Mg==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 20,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You always call this function with all arguments, so no need to have defaults (and in fact the function would fail if you called it without arguments because `self.nodes[None]` is a TypeError.",
      "created_at": "2020-12-01T13:02:26Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533390362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533390362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533392053",
      "pull_request_review_id": 541871547,
      "id": 533392053,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5MjA1Mw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 20,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533390362,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You could also change this to be a standalone function rather than a method in the P2PAddConnections class and just take a node as an argument rather than an index:\r\n\r\n```python\r\ndef check_node_connections(node, num_in, num_out):\r\n    info = node.getnetworkinfo()\r\n    assert_equal(info[\"connections_in\"], num_in)\r\n    assert_equal(info[\"connections_out\"], num_out)\r\n```",
      "created_at": "2020-12-01T13:05:22Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533392053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533392053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533393627",
      "pull_request_review_id": 541871547,
      "id": 533393627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5MzYyNw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rather than connecting two nodes and then disconnecting them, you can just not have them connect to each other by overriding the `setup_network()` method:\r\n\r\n```python\r\ndef setup_network(self):\r\n    self.setup_nodes()\r\n    # Don't connect the nodes\r\n```",
      "created_at": "2020-12-01T13:08:06Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533393627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533393627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533394134",
      "pull_request_review_id": 541871547,
      "id": 533394134,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5NDEzNA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.check_node_connections(node=1, num_in=5, num_out=10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 88,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there any reason for this line?",
      "created_at": "2020-12-01T13:08:55Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533394134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533394134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533394335",
      "pull_request_review_id": 541871547,
      "id": 533394335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5NDMzNQ==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 8,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sort",
      "created_at": "2020-12-01T13:09:15Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533394335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533394335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 7,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533394769",
      "pull_request_review_id": 541871547,
      "id": 533394769,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5NDc2OQ==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 19,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove this. The test can run without a wallet.",
      "created_at": "2020-12-01T13:09:58Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533394769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533394769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 17,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533455822",
      "pull_request_review_id": 541962127,
      "id": 533455822,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NTgyMg==",
      "diff_hunk": "@@ -346,6 +346,15 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection. Currently only used from tests.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if at max connection capacity",
      "path": "src/net.h",
      "position": null,
      "original_position": 9,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521590231,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That was a nit, to specify _outbound_ at argument comment :p ",
      "created_at": "2020-12-01T14:38:33Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533455822",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533455822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533473895",
      "pull_request_review_id": 541979845,
      "id": 533473895,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3Mzg5NQ==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);",
      "path": "src/net.cpp",
      "position": 18,
      "original_position": 28,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521589772,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks @ajtowns  for the code reading correction! Okay so the semaphore should accomplish its design of preventing to open too much outbound connections.\r\n\r\n@amitiuttarwar yes I was saying the overall design of this mechanism is confusing thus making it hard to understand the proposed implementation, but not an issue introduced by the present PR. `CSemaphoreGrant` would gain to be documented better but not proposing myself for this :see_no_evil: ",
      "created_at": "2020-12-01T14:54:13Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533473895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533473895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1149,
      "original_line": 1149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533553730",
      "pull_request_review_id": 542084165,
      "id": 533553730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MzczMA==",
      "diff_hunk": "@@ -320,20 +322,31 @@ static RPCHelpMan addconnection()\n         throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n     }\n \n-    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n     const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n     NodeContext& context = EnsureNodeContext(request.context);\n     if (!context.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    const bool success = context.connman->AddConnection(address);\n+    const bool success = context.connman->AddConnection(address, conn_type);\n     if (!success) {\n-        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");",
      "path": "src/rpc/net.cpp",
      "position": 55,
      "original_position": 46,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": 499519175,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess that hebasto point is this message could be \"Error: Already at capacity for specified connection type or max total outbound connection already exist\" to cover both failure cases.",
      "created_at": "2020-12-01T16:35:02Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533553730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533553730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533554882",
      "pull_request_review_id": 542084165,
      "id": 533554882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1NDg4Mg==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()",
      "path": "src/rpc/net.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this RPC returns an error if the connection is already existent, like RPC_CLIENT_NODE_ALREADY_ADDED ? It's for test-only but at least it would catch this kind of logic bug in test framework ?",
      "created_at": "2020-12-01T16:36:32Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533554882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533554882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 318,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533557365",
      "pull_request_review_id": 542084165,
      "id": 533557365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1NzM2NQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn't this redundant as this information is already passed by caller and RPC won't swap connection type for any reason ? Maybe remove this result field ?",
      "created_at": "2020-12-01T16:39:48Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533557365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533557365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533562928",
      "pull_request_review_id": 542084165,
      "id": 533562928,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MjkyOA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"Add 5 inbound connections...\" ?",
      "created_at": "2020-12-01T16:47:17Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533562928",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533562928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533932612",
      "pull_request_review_id": 542539699,
      "id": 533932612,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMjYxMg==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.check_node_connections(node=1, num_in=5, num_out=10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 88,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533394134,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Possibly it's nice to check that nothing has happened to node 1 since disconnecting and reconnecting the peers of node 0.\r\n\r\nNote: This is a reply to a thread.",
      "created_at": "2020-12-02T06:49:17Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533932612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533932612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533934701",
      "pull_request_review_id": 542539699,
      "id": 533934701,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDcwMQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is checking `IsMockableChain` the best way to ensure we're in a test?  Have you considered checking `NetworkIDString != CBaseChainParams::REGTEST` instead?",
      "created_at": "2020-12-02T06:55:02Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533934701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533934701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533936622",
      "pull_request_review_id": 542539699,
      "id": 533936622,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNjYyMg==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably `throw JSONRPCError(RPC_INVALID_PARAMS, \"Something...\");` is better here.  `RPC_INVALID_PARAMS` is a standard JSON-RPC 2.0 error.  However, we seem to use our custom `RPC_INVALID_PARAMETER` more often, so maybe that's a better choice.  (2 instances to 136 instances)",
      "created_at": "2020-12-02T07:00:12Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533936622",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533936622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533939178",
      "pull_request_review_id": 542539699,
      "id": 533939178,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzOTE3OA==",
      "diff_hunk": "@@ -539,6 +566,33 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\n+        if port is None:\n+            assert 0 < idx <= MAX_NODES\n+            port = p2p_port(MAX_NODES - idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+        coroutine = cls.create_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    def peer_listener(cls, addr, port):\n+        def pl():\n+            x = cls.protos.get((addr,port))\n+            cls.protos[(addr,port)] = None\n+            return x\n+        return pl\n+\n+    @classmethod\n+    async def create_server(cls, addr, port, callback, proto):",
      "path": "test/functional/test_framework/p2p.py",
      "position": null,
      "original_position": 127,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I'm really not fond of this name, being that it appears to be an intentional collision with `asyncio`'s `create_server`.  It's hard enough to tell _who's_ calling _what_ and _when_ in concurrent python, and this makes it harder.  Maybe something like `listen_helper`?",
      "created_at": "2020-12-02T07:06:50Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533939178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533939178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 588,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533941575",
      "pull_request_review_id": 542539699,
      "id": 533941575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0MTU3NQ==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 86,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this is a sanity check, it would be nice if the values weren't the same as when we called this before restarting the node.  Maybe add only 7 outbounds and a few inbounds?",
      "created_at": "2020-12-02T07:12:44Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533941575",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533941575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533943505",
      "pull_request_review_id": 542552445,
      "id": 533943505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0MzUwNQ==",
      "diff_hunk": "@@ -346,6 +346,15 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection. Currently only used from tests.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if at max connection capacity",
      "path": "src/net.h",
      "position": null,
      "original_position": 9,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521590231,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with ariard here, I would prefer this comment was longer and more verbose.  \"Returns false if at max connection capacity for given connection type or at max total outbound connection capacity\"",
      "created_at": "2020-12-02T07:17:22Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533943505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533943505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533944308",
      "pull_request_review_id": 542553393,
      "id": 533944308,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0NDMwOA==",
      "diff_hunk": "@@ -320,20 +322,31 @@ static RPCHelpMan addconnection()\n         throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n     }\n \n-    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n     const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n     NodeContext& context = EnsureNodeContext(request.context);\n     if (!context.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    const bool success = context.connman->AddConnection(address);\n+    const bool success = context.connman->AddConnection(address, conn_type);\n     if (!success) {\n-        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");",
      "path": "src/rpc/net.cpp",
      "position": 55,
      "original_position": 46,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": 499519175,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same as https://github.com/bitcoin/bitcoin/pull/19315/files#r533943505, consider making this more detailed?  I could see this being misleading if the RPC fails because of max total outbound capacity, as opposed to max capacity for the given type.",
      "created_at": "2020-12-02T07:19:18Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533944308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533944308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534033801",
      "pull_request_review_id": 542665208,
      "id": 534033801,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzMzgwMQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This field confirms what the RPC parsed from the user input per Postel's Law. If you pass \" BLOCKRELAY   \", it's good to know, without needing to check the source code, that it was correctly understood as \"blockrelay\".",
      "created_at": "2020-12-02T09:52:48Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534033801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534033801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534052888",
      "pull_request_review_id": 542689276,
      "id": 534052888,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1Mjg4OA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If the args can't be parsed, a parse failure will be thrown already https://github.com/bitcoin/bitcoin/pull/19315/files#r533936622\r\n",
      "created_at": "2020-12-02T10:20:11Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534052888",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534052888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534056768",
      "pull_request_review_id": 542693994,
      "id": 534056768,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1Njc2OA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 20,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533390362,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree with @jnewbery's suggestions. @MarcoFalke also reminded me recently in https://github.com/bitcoin/bitcoin/pull/20403#discussion_r530307834 that you can enforce use of named args with the splat. [Example](https://github.com/bitcoin/bitcoin/pull/20391/files#diff-5450eea6e8ed6364028357e2f1abc3dfcf458177655f518336266f08190f0dcfR323).\r\n```suggestion\r\n    def check_node_connections(*, node, num_in, num_out):\r\n```",
      "created_at": "2020-12-02T10:25:47Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534056768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534056768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534059297",
      "pull_request_review_id": 542697262,
      "id": 534059297,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1OTI5Nw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, but in the absence of failure, feedback is better than uncertainty or requiring the user to check the source code.",
      "created_at": "2020-12-02T10:29:32Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534059297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534059297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534190714",
      "pull_request_review_id": 542865494,
      "id": 534190714,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MDcxNA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 63,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, now that the minimum Python version has been bumped to 3.6 (in #19504), you can use Python f-strings instead of `format` for new code.",
      "created_at": "2020-12-02T14:04:47Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534190714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534190714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534587053",
      "pull_request_review_id": 543360556,
      "id": 534587053,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU4NzA1Mw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.check_node_connections(node=1, num_in=5, num_out=10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 88,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533394134,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yup exactly, sanity check that there aren't unexpected interactions ",
      "created_at": "2020-12-03T01:00:05Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534587053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534587053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534617752",
      "pull_request_review_id": 543391673,
      "id": 534617752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYxNzc1Mg==",
      "diff_hunk": "@@ -320,20 +322,31 @@ static RPCHelpMan addconnection()\n         throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n     }\n \n-    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n     const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n     NodeContext& context = EnsureNodeContext(request.context);\n     if (!context.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    const bool success = context.connman->AddConnection(address);\n+    const bool success = context.connman->AddConnection(address, conn_type);\n     if (!success) {\n-        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");",
      "path": "src/rpc/net.cpp",
      "position": 55,
      "original_position": 46,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": 499519175,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it's hard to hit the total max without hitting the max for the type :) \r\n\r\nthe max values are \r\noutbound: 8\r\nblock-relay-only: 2\r\ntotal: 10 ",
      "created_at": "2020-12-03T02:21:36Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534617752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534617752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534633804",
      "pull_request_review_id": 543408191,
      "id": 534633804,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzMzgwNA==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);",
      "path": "src/net.cpp",
      "position": 21,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521290049,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Filed an issue for this at #20552",
      "created_at": "2020-12-03T03:07:29Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534633804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534633804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534640401",
      "pull_request_review_id": 543415029,
      "id": 534640401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0MDQwMQ==",
      "diff_hunk": "@@ -1143,6 +1143,30 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    const int max_connections = conn_type == ConnectionType::OUTBOUND_FULL_RELAY ? m_max_outbound_full_relay : m_max_outbound_block_relay;\n+\n+    // Count existing connections\n+    int existing_connections{0};\n+    {\n+        LOCK(cs_vNodes);\n+        existing_connections = std::count_if(vNodes.begin(), vNodes.end(), [conn_type](CNode* node) { return node->m_conn_type == conn_type; });\n+    }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "ae7f4fdfe7f7a1d42c35589a7d61e9d44c32091a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could shorten it to:\r\n\r\n```c++\r\n    int existing_connections = WITH_LOCK(cs_vNodes,\r\n        return std::count_if(vNodes.begin(), vNodes.end(), [conn_type](CNode* node) { return node->m_conn_type == conn_type; });-\r\n    );\r\n```\r\n\r\n(EDIT: remove redundant `{}`)\r\n\r\nI think there's a race condition here in that you could decide there's currently one block relay outbound so it's fine to create a second while at the same time another thread draws the same conclusion and also attempts to make a new outbound block relay, and you end up with three instead of two. Probably reasonably hard to get to that state though, and this is a test-only API, so shouldn't matter.",
      "created_at": "2020-12-03T03:27:25Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534640401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534640401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534643176",
      "pull_request_review_id": 543418027,
      "id": 534643176,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0MzE3Ng==",
      "diff_hunk": "@@ -78,13 +62,54 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 128,
      "original_position": 126,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521304814,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point & clever trick! I've bumped the mocktime by a minute, added two calls to `sync_with_ping()` and a comment explaining this reasoning. \r\n\r\nthanks for this thoughtful response! going to resolve the comment now, let me know incase there's anything else I should be thinking about.",
      "created_at": "2020-12-03T03:36:25Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534643176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534643176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": 97,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534643978",
      "pull_request_review_id": 543418886,
      "id": 534643978,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0Mzk3OA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 20,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533390362,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, yes I put in the defaults to try to enforce the named args. cool splat trick @jonatack.\r\n\r\nalso converted to standalone function ",
      "created_at": "2020-12-03T03:39:01Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534643978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534643978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534644050",
      "pull_request_review_id": 543418957,
      "id": 534644050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NDA1MA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533393627,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "üëçüèΩ done",
      "created_at": "2020-12-03T03:39:17Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534644050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534644050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534644227",
      "pull_request_review_id": 543419152,
      "id": 534644227,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NDIyNw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.check_node_connections(node=1, num_in=5, num_out=10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 88,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533394134,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "since this test is 50% sanity checks & I don't think it detracts to leave this one in, I'm resolving this conversation. ",
      "created_at": "2020-12-03T03:39:55Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534644227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534644227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534644613",
      "pull_request_review_id": 543419518,
      "id": 534644613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NDYxMw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 8,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533394335,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-12-03T03:41:07Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534644613",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534644613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 7,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534645028",
      "pull_request_review_id": 543419918,
      "id": 534645028,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NTAyOA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 19,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533394769,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "üí°\r\n\r\nthanks :) ",
      "created_at": "2020-12-03T03:42:24Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534645028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534645028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": 17,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646521",
      "pull_request_review_id": 543421434,
      "id": 534646521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjUyMQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I feel completely indifferent as to whether there's a return result or not. I believe the initial implementation left it out but then I got review comments requesting it be added. \r\n\r\nHappy to do whatever reviewers prefer. To me it doesn't feel super important one way or the other since its a test-only RPC so we don't have to adhere to normal RPC deprecation rules. ",
      "created_at": "2020-12-03T03:47:21Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646659",
      "pull_request_review_id": 543421566,
      "id": 534646659,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjY1OQ==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533562928,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-12-03T03:47:44Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646707",
      "pull_request_review_id": 543415029,
      "id": 534646707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjcwNw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think the `ToLower` here is a good idea. The RPC interface is, in general, case-sensitive -- eg, `addnode .. OneTry` will give an error, changing the capitalisation of a wallet name refers to a different wallet, and calling `AddConnection` instead of `addconnection` will give `Method not found`. Special-casing this particular argument just seems confusing.",
      "created_at": "2020-12-03T03:47:56Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646857",
      "pull_request_review_id": 543421799,
      "id": 534646857,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0Njg1Nw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533934701,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh nice, that is more direct / explicit. done.",
      "created_at": "2020-12-03T03:48:25Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646857",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534646857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534647465",
      "pull_request_review_id": 543422354,
      "id": 534647465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NzQ2NQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533936622,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.\r\n\r\nyeah interesting that we have both `RPC_INVALID_PARAMS` and `RPC_INVALID_PARAMETER`. opted for the second since its more used. ",
      "created_at": "2020-12-03T03:50:12Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534647465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534647465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534648609",
      "pull_request_review_id": 543423521,
      "id": 534648609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0ODYwOQ==",
      "diff_hunk": "@@ -539,6 +566,33 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\n+        if port is None:\n+            assert 0 < idx <= MAX_NODES\n+            port = p2p_port(MAX_NODES - idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+        coroutine = cls.create_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    def peer_listener(cls, addr, port):\n+        def pl():\n+            x = cls.protos.get((addr,port))\n+            cls.protos[(addr,port)] = None\n+            return x\n+        return pl\n+\n+    @classmethod\n+    async def create_server(cls, addr, port, callback, proto):",
      "path": "test/functional/test_framework/p2p.py",
      "position": null,
      "original_position": 127,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533939178,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah that's reasonable, I updated to `create_listen_server` ",
      "created_at": "2020-12-03T03:54:06Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534648609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534648609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 588,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534648639",
      "pull_request_review_id": 543423560,
      "id": 534648639,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0ODYzOQ==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface())\n+        self.check_node_connections(node=0, num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 86,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533941575,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "kewl, done.",
      "created_at": "2020-12-03T03:54:14Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534648639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534648639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534648707",
      "pull_request_review_id": 543423605,
      "id": 534648707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0ODcwNw==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.p2p import P2PInterface\n+from test_framework.util import assert_equal\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def check_node_connections(self, node=None, num_in=None, num_out=None):\n+        info = self.nodes[node].getnetworkinfo()\n+        assert_equal(info[\"connections_in\"], num_in)\n+        assert_equal(info[\"connections_out\"], num_out)\n+\n+    def run_test(self):\n+        self.disconnect_nodes(0, 1)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"outbound\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(\"block-relay-only: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+\n+        self.log.info(\"Add some inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(\"inbound: {}\".format(i))\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        self.check_node_connections(node=0, num_in=0, num_out=10)\n+        self.check_node_connections(node=1, num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        self.check_node_connections(node=0, num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(\"outbound: {}\".format(i))",
      "path": "test/functional/p2p_add_connections.py",
      "position": null,
      "original_position": 63,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 534190714,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-12-03T03:54:23Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534648707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534648707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534650523",
      "pull_request_review_id": 543425475,
      "id": 534650523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MDUyMw==",
      "diff_hunk": "@@ -1152,6 +1152,37 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, const ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    int outbound_full_relay = 0;\n+    int outbound_block_relay = 0;\n+\n+    {\n+        // count existing connections for each type\n+        LOCK(cs_vNodes);\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY) {\n+                ++outbound_full_relay;\n+            } else if (pnode->m_conn_type == ConnectionType::BLOCK_RELAY) {\n+                ++outbound_block_relay;\n+            }\n+        }\n+    }\n+\n+    // max connections of specified type already exist\n+    if (conn_type == ConnectionType::OUTBOUND_FULL_RELAY && outbound_full_relay >= m_max_outbound_full_relay) return false;\n+    if (conn_type == ConnectionType::BLOCK_RELAY && outbound_block_relay >= m_max_outbound_block_relay) return false;\n+\n+    // max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);",
      "path": "src/net.cpp",
      "position": 18,
      "original_position": 28,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "f51006b8184a56fe18a5e64f43846f38fb982993",
      "in_reply_to_id": 521589772,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "haha, I fully agree üòõ\r\n\r\ngoing to resolve this conversation to help me keep track of outstanding issues on this PR",
      "created_at": "2020-12-03T04:00:00Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534650523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534650523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1149,
      "original_line": 1149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534668415",
      "pull_request_review_id": 543415029,
      "id": 534668415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2ODQxNQ==",
      "diff_hunk": "@@ -1143,6 +1143,30 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this just return `false` for different connection types rather than assert?",
      "created_at": "2020-12-03T04:56:45Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534668415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534668415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534669600",
      "pull_request_review_id": 543415029,
      "id": 534669600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2OTYwMA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't these match `ConnectionTypeAsString()` -- ie `outbound-full-relay` and `block-relay-only` ?",
      "created_at": "2020-12-03T05:00:37Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534669600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534669600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534669954",
      "pull_request_review_id": 543415029,
      "id": 534669954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2OTk1NA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is `NodeContext& node` everywhere else?",
      "created_at": "2020-12-03T05:01:44Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534669954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534669954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534747237",
      "pull_request_review_id": 543415029,
      "id": 534747237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NzIzNw==",
      "diff_hunk": "@@ -539,6 +566,34 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\n+        if port is None:\n+            assert 0 < idx <= MAX_NODES\n+            port = p2p_port(MAX_NODES - idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+        coroutine = cls.create_listen_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    def peer_listener(cls, addr, port):\n+        def pl():\n+            x = cls.protos.get((addr, port))\n+            cls.protos[(addr, port)] = None\n+            return x\n+        return pl\n+\n+    @classmethod\n+    async def create_listen_server(cls, addr, port, callback, proto):\n+        if (addr, port) not in cls.listeners:\n+            listener = await cls.network_event_loop.create_server(cls.peer_listener(addr, port), addr, port)\n+            logger.debug(\"Listening server on %s:%d should be started\" % (addr, port))\n+            cls.listeners[(addr, port)] = listener\n+        cls.protos[(addr, port)] = proto\n+        callback(addr, port)",
      "path": "test/functional/test_framework/p2p.py",
      "position": 147,
      "original_position": 133,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "6e53cfba586e599151cdbc1396accb81deff0830",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this could use some refactoring and comments. Maybe something like:\r\n\r\n```python\r\n    @classmethod\r\n    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\r\n        \"\"\"Ensure a listening server is running on the given port, and run the protocol\r\n           specified by `p2p` on the next connection to it. Once ready for connections,\r\n           call `callback`.\"\"\"\r\n\r\n        if port is None:\r\n            assert 0 < idx <= MAX_NODES\r\n            port = p2p_port(MAX_NODES - idx)\r\n        if addr is None:\r\n            addr = '127.0.0.1'\r\n\r\n        coroutine = cls.create_server(addr, port, callback, p2p)\r\n        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\r\n\r\n    @classmethod\r\n    async def create_server(cls, addr, port, callback, proto):\r\n        def peer_protocol():\r\n            \"\"\"Returns a function that does the protocol handling for a new connection.\r\n               To allow different connections to have different behaviour, the protocol\r\n               function is put in the cls.protos dict first, then the connection is made,\r\n               at which point this function removes the protocol function from that\r\n               dict, and returns it so that the event loop can start executing it.\"\"\"\r\n            response = cls.protos.get((addr, port))\r\n            cls.protos[(addr, port)] = None\r\n            return response\r\n\r\n        if (addr, port) not in cls.listeners:\r\n            # When creating a listener on a given addr,port we only need to do it once;\r\n            # even if we want different behaviours for different connections we can do\r\n            # that by providing different `proto` function.\r\n\r\n            listener = await cls.network_event_loop.create_server(peer_protocol, addr, port)\r\n            logger.debug(\"Listening server on %s:%d should be started\" % (addr, port))\r\n            cls.listeners[(addr, port)] = listener\r\n\r\n        cls.protos[(addr, port)] = proto\r\n        callback(addr,port)\r\n```\r\n",
      "created_at": "2020-12-03T06:47:40Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534747237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534747237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 611,
      "original_line": 611,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534751258",
      "pull_request_review_id": 543415029,
      "id": 534751258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MTI1OA==",
      "diff_hunk": "@@ -542,6 +546,29 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, connection_type=\"outbound\", **kwargs):",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "6e53cfba586e599151cdbc1396accb81deff0830",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think specifying the `p2p_conn_index` explicitly, eg with\r\n\r\n```python\r\ndef add_outbound_p2p_connection(self, p2p_conn, *, p2pidx, connection_type=\"outbound\", **kwargs)\r\n```\r\nand calling it as:\r\n\r\n```python\r\nconn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), p2pidx=1, connection_type=\"blockrelay\")\r\n```\r\n\r\nwould make the tests clearer. At present it's very hard to track what port `add_outbound_p2p_connection` will be trying to connect to, which is probably mostly okay while it's not used very intensively, but if it does lead to bugs they'll be hard to find and hard to fix with an automagic api...\r\n\r\nMight be worth thinking about how to extend the api to allow testing #17428 -- I think that would be much more comprehensible with an explicit `p2pidx`.",
      "created_at": "2020-12-03T06:51:28Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534751258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534751258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534874538",
      "pull_request_review_id": 543693312,
      "id": 534874538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg3NDUzOA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534646707,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Many RPCs (sendtoaddress, sendmany, send, fundrawtransaction, walletcreatefundedpsbt, and bumpfee) have a case-insensitive string param, estimate_mode, that is also indicated as case insensitive in the various helps.",
      "created_at": "2020-12-03T08:08:10Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534874538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534874538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535063313",
      "pull_request_review_id": 543807720,
      "id": 535063313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA2MzMxMw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534646707,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @ajtowns. We should be strict about capitalization in rpc arguments. Adding a special case here doesn't make sense.",
      "created_at": "2020-12-03T10:23:37Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r535063313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535063313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535071140",
      "pull_request_review_id": 543813804,
      "id": 535071140,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA3MTE0MA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534646707,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thnk `estimate_mode` only allows case-insensitivity because it initially required all-uppercase, see https://github.com/bitcoin/bitcoin/pull/11413#pullrequestreview-271355849 . Doesn't seem like a good example to replicate.",
      "created_at": "2020-12-03T10:30:21Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r535071140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535071140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535330737",
      "pull_request_review_id": 544076315,
      "id": 535330737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMDczNw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534646707,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, noted. Grepping a bit, it looks like `estimate_mode` is the only one.",
      "created_at": "2020-12-03T15:28:16Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r535330737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535330737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540305220",
      "pull_request_review_id": 549369999,
      "id": 540305220,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNTIyMA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jonatack I don't have a strong opinion on this, I was more surprised to notify the discrepancy with other usual RPCs. \r\n\r\nMaybe this RPC design principle should be documented in https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md ? The Postel's Law sounds a rational good enough to me but I'm not heavily developing against Core RPC so don't feel competent here to evaluate here :) ",
      "created_at": "2020-12-10T16:22:02Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540305220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540305220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540621380",
      "pull_request_review_id": 549737305,
      "id": 540621380,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMTM4MA==",
      "diff_hunk": "@@ -1143,6 +1143,30 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);\n+\n+    const int max_connections = conn_type == ConnectionType::OUTBOUND_FULL_RELAY ? m_max_outbound_full_relay : m_max_outbound_block_relay;\n+\n+    // Count existing connections\n+    int existing_connections{0};\n+    {\n+        LOCK(cs_vNodes);\n+        existing_connections = std::count_if(vNodes.begin(), vNodes.end(), [conn_type](CNode* node) { return node->m_conn_type == conn_type; });\n+    }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "ae7f4fdfe7f7a1d42c35589a7d61e9d44c32091a",
      "in_reply_to_id": 534640401,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated to `WITH_LOCK` syntax. \r\n\r\nwe discussed this offline, but to document here for other reviewers- \r\n\r\nSince we hold the `cs_vNodes` lock for counting open connections but then release it before invoking `OpenNetworkConnection`, `AddConnection` and `ThreadOpenConnections` could both count, determine there's space for an extra, and attempt to open a block-relay-only. We could fix this by having a counter / boolean that indicates opening a connection is \"in progress\", but that seems unnecessary here because its a low likelihood and this is a test-only API. ",
      "created_at": "2020-12-11T01:25:01Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540621380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540621380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540621708",
      "pull_request_review_id": 549737622,
      "id": 540621708,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMTcwOA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534646707,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "reverted to being case sensitive ",
      "created_at": "2020-12-11T01:25:56Z",
      "updated_at": "2021-01-07T18:31:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540621708",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540621708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623057",
      "pull_request_review_id": 549738840,
      "id": 540623057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMzA1Nw==",
      "diff_hunk": "@@ -1143,6 +1143,30 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, ConnectionType conn_type)\n+{\n+    assert(conn_type == ConnectionType::OUTBOUND_FULL_RELAY || conn_type == ConnectionType::BLOCK_RELAY);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534668415,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sure. the `addconnection` RPC currently interprets `false` to be `Error: Already at capacity for specified connection type.`, which I think is reasonable enough that I've kept it (capacity for other connection types is 0.) I'm also planning to make this net wider in the follow-up, as discussed here:  https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525552821. For now, I've updated to return false and added documentation in the header comment for `AddConnection`. ",
      "created_at": "2020-12-11T01:29:39Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623169",
      "pull_request_review_id": 549738948,
      "id": 540623169,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMzE2OQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534669600,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes definitely. thanks, fixed.",
      "created_at": "2020-12-11T01:29:59Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623277",
      "pull_request_review_id": 549739058,
      "id": 540623277,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMzI3Nw==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534669954,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah but I find that pretty confusing so I made it context üòÖ",
      "created_at": "2020-12-11T01:30:19Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623816",
      "pull_request_review_id": 549739595,
      "id": 540623816,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMzgxNg==",
      "diff_hunk": "@@ -542,6 +546,29 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, connection_type=\"outbound\", **kwargs):",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 31,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "6e53cfba586e599151cdbc1396accb81deff0830",
      "in_reply_to_id": 534751258,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok AJ, you have convinced me, I made the counter explicit :) ",
      "created_at": "2020-12-11T01:31:56Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623816",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540623816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540632078",
      "pull_request_review_id": 549747214,
      "id": 540632078,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzMjA3OA==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()",
      "path": "src/rpc/net.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533554882,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hmmm, I see that `addnode` RPC returns this error, but seems like that's what is indicated by the bool that the `AddNode` function returns since it's comparing to `vAddedNodes`. In the current implementation, we don't currently know that information until we call through to `OpenNetworkConnection`, which simply returns if we are  `AlreadyConnectedToAddress(addrConnect))`. We could add a call from `AddConnection` to check that and return early. And then it would have to populate a boolean as an in/out param (since the existing return value indicates whether there is sufficient capacity). This is all doable, but I'm not really seeing the additional value. It would be able to catch a bug in the test framework logic I'm adding, but that bug would also be caught by the tests in `p2p_add_connections.py`. And I don't think this would be helpful for additional tests that use the test framework utilities? What do you think? ",
      "created_at": "2020-12-11T01:55:14Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540632078",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540632078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 318,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540632971",
      "pull_request_review_id": 549747991,
      "id": 540632971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzMjk3MQ==",
      "diff_hunk": "@@ -539,6 +566,34 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\n+        if port is None:\n+            assert 0 < idx <= MAX_NODES\n+            port = p2p_port(MAX_NODES - idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+        coroutine = cls.create_listen_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    def peer_listener(cls, addr, port):\n+        def pl():\n+            x = cls.protos.get((addr, port))\n+            cls.protos[(addr, port)] = None\n+            return x\n+        return pl\n+\n+    @classmethod\n+    async def create_listen_server(cls, addr, port, callback, proto):\n+        if (addr, port) not in cls.listeners:\n+            listener = await cls.network_event_loop.create_server(cls.peer_listener(addr, port), addr, port)\n+            logger.debug(\"Listening server on %s:%d should be started\" % (addr, port))\n+            cls.listeners[(addr, port)] = listener\n+        cls.protos[(addr, port)] = proto\n+        callback(addr, port)",
      "path": "test/functional/test_framework/p2p.py",
      "position": 147,
      "original_position": 133,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "6e53cfba586e599151cdbc1396accb81deff0830",
      "in_reply_to_id": 534747237,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes this looks great, thank you üôåüèΩ\r\n\r\nI like the refactor into making `peer_protocol` a part of `create_server`. Helps makes the usage pattern more apparent. \r\n\r\nAlso appreciate the comments. I was struggling to write helpful words. \r\n\r\nTook the patch pretty much as is. Convenient that you are already a co-author on the commit :) ",
      "created_at": "2020-12-11T01:57:24Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540632971",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540632971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 611,
      "original_line": 611,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544639295",
      "pull_request_review_id": 554102983,
      "id": 544639295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzOTI5NQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534669954,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"node\" seems much less confusing to me; `node` gives you access to all the bits of the node, `request.context` gives you the overall context available for the rpc. In general, picking a convention and sticking with it makes the codebase much easier to navigate.",
      "created_at": "2020-12-16T21:34:58Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r544639295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544639295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544705501",
      "pull_request_review_id": 554176377,
      "id": 544705501,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNTUwMQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, self.ToString());\n+    }\n+\n+    NodeContext& context = EnsureNodeContext(request.context);",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "d010c5ef0664514f0aedc8ee14d68b4226fafe35",
      "in_reply_to_id": 534669954,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "alright, I definitely agree with the rationale of staying consistent with conventions, so I pushed a fix ",
      "created_at": "2020-12-16T23:48:26Z",
      "updated_at": "2021-01-07T18:31:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r544705501",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544705501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553855408",
      "pull_request_review_id": 564144934,
      "id": 553855408,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1NTQwOA==",
      "diff_hunk": "@@ -320,20 +322,31 @@ static RPCHelpMan addconnection()\n         throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only\");\n     }\n \n-    RPCTypeCheckArgument(request.params, UniValue::VSTR);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n     const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in = request.params[1].get_str();\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"blockrelay\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw std::runtime_error(self.ToString());\n+    }\n+\n     NodeContext& context = EnsureNodeContext(request.context);\n     if (!context.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    const bool success = context.connman->AddConnection(address);\n+    const bool success = context.connman->AddConnection(address, conn_type);\n     if (!success) {\n-        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Max number of outbound full relay connections already open.\");\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");",
      "path": "src/rpc/net.cpp",
      "position": 55,
      "original_position": 46,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "0fb4635bbabb1bea10a215bde4c803ceb5bc5f26",
      "in_reply_to_id": 499519175,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems like an appropriate amount of detail for an error message (especially one for an RPC which is test-only).",
      "created_at": "2021-01-08T10:11:43Z",
      "updated_at": "2021-01-08T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553855408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553855408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553856609",
      "pull_request_review_id": 564146644,
      "id": 553856609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1NjYwOQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()",
      "path": "src/rpc/net.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533554882,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Similar to https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525435591, I think more detailed error reporting can be done in a follow-up PR.",
      "created_at": "2021-01-08T10:14:17Z",
      "updated_at": "2021-01-08T10:14:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553856609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553856609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 318,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553856841",
      "pull_request_review_id": 564146979,
      "id": 553856841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1Njg0MQ==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems no-one has a strong opinion on this. I think it's fine as is. Resolve?",
      "created_at": "2021-01-08T10:14:47Z",
      "updated_at": "2021-01-08T10:14:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553856841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553856841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553858110",
      "pull_request_review_id": 564148613,
      "id": 553858110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1ODExMA==",
      "diff_hunk": "@@ -148,12 +152,20 @@ def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+        self.peer_connect_helper(dstaddr, dstport, net, timeout_factor)\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n-        conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n-        return conn_gen\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))",
      "path": "test/functional/test_framework/p2p.py",
      "position": 35,
      "original_position": 35,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Only if you have to retouch this branch for other reasons): use new style string formatting (`\"{}\".format(var)`) here, or even better, f-strings (`f\"{var}\"`).",
      "created_at": "2021-01-08T10:17:19Z",
      "updated_at": "2021-01-08T11:00:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553858110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553858110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553859419",
      "pull_request_review_id": 564148613,
      "id": 553859419,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1OTQxOQ==",
      "diff_hunk": "@@ -542,6 +569,48 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\n+        \"\"\" Ensure a listening server is running on the given port, and run the\n+        protocol specified by `p2p` on the next connection to it. Once ready\n+        for connections, call `callback`.\"\"\"\n+\n+        if port is None:\n+            assert 0 < idx <= MAX_NODES\n+            port = p2p_port(MAX_NODES - idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+\n+        coroutine = cls.create_listen_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    async def create_listen_server(cls, addr, port, callback, proto):\n+        def peer_protocol():\n+            \"\"\"Returns a function that does the protocol handling for a new\n+            connection. To allow different connections to have different\n+            behaviors, the protocol function is first put in the cls.protos\n+            dict. When the connection is made, the function removes the\n+            protocol function from that dict, and returns it so the event loop\n+            can start executing it.\"\"\"\n+            response = cls.protos.get((addr, port))\n+            cls.protos[(addr, port)] = None\n+            return response\n+\n+        if (addr, port) not in cls.listeners:\n+            # When creating a listener on a given (addr, port) we only need to\n+            # do it once. If we want different behaviors for different\n+            # connections, we can accomplish this by providing different\n+            # `proto` functions\n+\n+            listener = await cls.network_event_loop.create_server(peer_protocol, addr, port)\n+            logger.debug(\"Listening server on %s:%d should be started\" % (addr, port))",
      "path": "test/functional/test_framework/p2p.py",
      "position": 143,
      "original_position": 143,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure what \"should be\" means here. I think the log could just say \"Listening server on x started\". Also, could use new style string formatting or f-strings.\r\n\r\nThis isn't a big deal. Only change it if you need to retouch the branch.",
      "created_at": "2021-01-08T10:20:02Z",
      "updated_at": "2021-01-08T11:00:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553859419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553859419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 607,
      "original_line": 607,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553876856",
      "pull_request_review_id": 564148613,
      "id": 553876856,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3Njg1Ng==",
      "diff_hunk": "@@ -69,18 +53,58 @@ def run_test(self):\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n         assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from forcerelay first_peer is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the forcerelay peer is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Forcerelay peer's transaction is accepted and relayed\")\n \n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), connection_type=\"blockrelay\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), connection_type=\"blockrelay\")\n+\n+        # bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 5)\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 130,
      "original_position": 123,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3bb87e7fb200637e61d25f07ce20672081fad4ab",
      "in_reply_to_id": 479358247,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(re: https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479358247)\r\n\r\nI don't think you need to pass the height at all. Just get the block at the tip:\r\n\r\n```diff\r\ndiff --git a/test/functional/p2p_blocksonly.py b/test/functional/p2p_blocksonly.py\r\nindex c592ab52b1..e6c3f75955 100755\r\n--- a/test/functional/p2p_blocksonly.py\r\n+++ b/test/functional/p2p_blocksonly.py\r\n@@ -80,7 +80,7 @@ class P2PBlocksOnly(BitcoinTestFramework):\r\n         # Ensure we disconnect if a block-relay-only connection sends us a transaction\r\n         self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"block-relay-only\")\r\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\r\n-        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\r\n+        _, txid, tx_hex = self.check_p2p_tx_violation()\r\n \r\n         self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\r\n         conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), p2p_idx=1, connection_type=\"block-relay-only\")\r\n@@ -97,9 +97,10 @@ class P2PBlocksOnly(BitcoinTestFramework):\r\n         conn.sync_with_ping()\r\n         assert(int(txid, 16) not in conn.get_invs())\r\n \r\n-    def check_p2p_tx_violation(self, index=1):\r\n+    def check_p2p_tx_violation(self):\r\n         self.log.info('Check that txs from P2P are rejected and result in disconnect')\r\n-        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\r\n+\r\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getbestblockhash(), 2)['tx'][0]['txid']\r\n         tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=(50 - 0.001))\r\n         txid = tx.rehash()\r\n         tx_hex = tx.serialize().hex()\r\n```",
      "created_at": "2021-01-08T10:56:02Z",
      "updated_at": "2021-01-08T11:01:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553876856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553876856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 100,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555025874",
      "pull_request_review_id": 565326029,
      "id": 555025874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAyNTg3NA==",
      "diff_hunk": "@@ -955,6 +955,19 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection. Currently only used from tests.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if there are no available\n+     *                          slots for this connection:\n+     *                          - conn_type not a supported ConnectionType\n+     *                          - Max total outbound connection capacity filled\n+     *                          - Max connection capacity for type is filled\n+     */\n+    bool AddConnection(const std::string& address, ConnectionType conn_type);",
      "path": "src/net.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6:\r\n\r\nIf this is only used in test, why not call it `AddTestConnection`? Otherwise someone might use it in \"production\".",
      "created_at": "2021-01-11T12:53:14Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555025874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555025874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 969,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555121932",
      "pull_request_review_id": 565326029,
      "id": 555121932,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEyMTkzMg==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I still think this should be removed. If this can't be parsed, a parse-failure will already be thrown.\r\n\r\nThough, can be done in a follow-up to not invalidate reviews.\r\n\r\nUnrelated, but posels' law is probably not applicable to security sensitive software, see http://www.langsec.org/papers/postel-patch.pdf",
      "created_at": "2021-01-11T15:21:41Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555121932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555121932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555127628",
      "pull_request_review_id": 565326029,
      "id": 555127628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEyNzYyOA==",
      "diff_hunk": "@@ -314,6 +315,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound-full-relay\\\" or \\\"block-relay-only\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound-full-relay\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound-full-relay\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{TrimString(request.params[1].get_str())};",
      "path": "src/rpc/net.cpp",
      "position": 38,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same commit: Any reason to trim the string? We don't do this anywhere else.",
      "created_at": "2021-01-11T15:29:38Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555127628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555127628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 344,
      "original_line": 344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555230229",
      "pull_request_review_id": 565326029,
      "id": 555230229,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTIzMDIyOQ==",
      "diff_hunk": "@@ -71,6 +71,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitc\n         \"\"\"\n \n         self.index = i\n+        self.p2p_conn_index = 1",
      "path": "test/functional/test_framework/test_node.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3997ab915451a702eed2153a0727b0a78c0450ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3997ab915451a702eed2153a0727b0a78c0450ac:\r\n\r\nWhat is this?",
      "created_at": "2021-01-11T17:48:04Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555230229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555230229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555230459",
      "pull_request_review_id": 565326029,
      "id": 555230459,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTIzMDQ1OQ==",
      "diff_hunk": "@@ -546,6 +547,29 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, p2p_idx, connection_type=\"outbound-full-relay\", **kwargs):\n+        \"\"\"Add an outbound p2p connection from node. Either\n+        full-relay(\"outbound-full-relay\") or\n+        block-relay-only(\"block-relay-only\") connection.\n+\n+        This method adds the p2p connection to the self.p2ps list and returns\n+        the connection to the caller.\n+        \"\"\"\n+\n+        def addconnection_callback(address, port):\n+            self.log.debug(\"Connecting to %s:%d %s\" % (address, port, connection_type))\n+            self.addconnection('%s:%d' % (address, port), connection_type)\n+\n+        p2p_conn.peer_accept_connection(connect_cb=addconnection_callback, connect_id=p2p_idx + 1, net=self.chain, timeout_factor=self.timeout_factor, **kwargs)()",
      "path": "test/functional/test_framework/test_node.py",
      "position": 34,
      "original_position": 34,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3997ab915451a702eed2153a0727b0a78c0450ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3997ab915451a702eed2153a0727b0a78c0450ac: The `+1` seems like a layer violation that should be done in the p2p module instead.",
      "created_at": "2021-01-11T17:48:26Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555230459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555230459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555246808",
      "pull_request_review_id": 565326029,
      "id": 555246808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0NjgwOA==",
      "diff_hunk": "@@ -148,12 +152,20 @@ def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+        self.peer_connect_helper(dstaddr, dstport, net, timeout_factor)\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n-        conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n-        return conn_gen\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        coroutine = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+        return lambda: loop.call_soon_threadsafe(loop.create_task, coroutine)\n+\n+    def peer_accept_connection(self, connect_id, connect_cb=lambda: None, *, net, timeout_factor):",
      "path": "test/functional/test_framework/p2p.py",
      "position": 39,
      "original_position": 39,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3997ab915451a702eed2153a0727b0a78c0450ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3997ab915451a702eed2153a0727b0a78c0450ac:\r\n\r\nAny reason to add default arguments for an arg that is set in all call sites? I don't think it makes sense to skip the connect_cb here?\r\n\r\nAlso could enforce named args with `*`",
      "created_at": "2021-01-11T18:16:28Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555246808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555246808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555249793",
      "pull_request_review_id": 565326029,
      "id": 555249793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0OTc5Mw==",
      "diff_hunk": "@@ -414,6 +435,10 @@ def test_function():\n \n         wait_until_helper(test_function, timeout=timeout, lock=p2p_lock, timeout_factor=self.timeout_factor)\n \n+    def wait_for_connect(self, timeout=60):\n+        test_function = lambda: self.is_connected\n+        wait_until_helper(test_function, timeout=timeout, lock=p2p_lock)",
      "path": "test/functional/test_framework/p2p.py",
      "position": 90,
      "original_position": 90,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3997ab915451a702eed2153a0727b0a78c0450ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3997ab9:\r\n\r\nWould be nice to not use the helper unless necessary. It doesn't matter here, but  it won't propagate the scaling factor",
      "created_at": "2021-01-11T18:21:46Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555249793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555249793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555253158",
      "pull_request_review_id": 565326029,
      "id": 555253158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1MzE1OA==",
      "diff_hunk": "@@ -542,6 +569,48 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=1):",
      "path": "test/functional/test_framework/p2p.py",
      "position": 109,
      "original_position": 109,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "3997ab915451a702eed2153a0727b0a78c0450ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same commit:\r\n\r\nWhat is the point of allowing those args when they are never set? I'd say *if* there is ever a test that needs them set, that pull can make the needed changes here. Because other changes are required for this anyway to work.",
      "created_at": "2021-01-11T18:27:46Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555253158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555253158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 573,
      "original_line": 573,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555274018",
      "pull_request_review_id": 565326029,
      "id": 555274018,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI3NDAxOA==",
      "diff_hunk": "@@ -51,13 +40,13 @@ def run_test(self):\n \n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 69,
      "original_position": 58,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "99791e7560d40ad094eaa73e0be3987581338e2d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "99791e7560d40ad094eaa73e0be3987581338e2d: If you touch this, I'd prefer to remove it. This doesn't check anything",
      "created_at": "2021-01-11T19:05:30Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555274018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555274018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555274399",
      "pull_request_review_id": 565326029,
      "id": 555274399,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI3NDM5OQ==",
      "diff_hunk": "@@ -67,8 +56,7 @@ def run_test(self):\n         assert_equal(peer_1_info['permissions'], ['relay'])\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['permissions'], ['relay'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)",
      "path": "test/functional/p2p_blocksonly.py",
      "position": 86,
      "original_position": 75,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "99791e7560d40ad094eaa73e0be3987581338e2d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "99791e7560d40ad094eaa73e0be3987581338e2d: Same",
      "created_at": "2021-01-11T19:06:08Z",
      "updated_at": "2021-01-11T19:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555274399",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555274399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555320342",
      "pull_request_review_id": 565714923,
      "id": 555320342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyMDM0Mg==",
      "diff_hunk": "@@ -322,6 +323,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound\\\" or \\\"blockrelay\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },",
      "path": "src/rpc/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "22ba154178594c21e1342657f3d9a14c877623da",
      "in_reply_to_id": 533557365,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That paper on Postel's Law appears to discuss issues of computational complexity involving difficult parsing or high ambiguity, which IIRC isn't the case for this RPC, and states among other things that a balance should be struck, which I agree with. In security-sensitive missions for airports, power grids, industry manufacturers, etc., my experience was that it depended on the context, stakeholders and product managers. Usually, anyone whose code didn't handle simple, unambiguous input in a robust and non-annoying way got a bug report and a phone call by a PM or scrum master, so it became an instinct to do so and not provide reasons for them to beat us over the head--which I'm unlearning here to adapt to the consensus of the stakeholders on this project. It's a process!",
      "created_at": "2021-01-11T20:33:12Z",
      "updated_at": "2021-01-11T20:36:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555320342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555320342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555331970",
      "pull_request_review_id": 565729834,
      "id": 555331970,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMTk3MA==",
      "diff_hunk": "@@ -314,6 +315,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound-full-relay\\\" or \\\"block-relay-only\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound-full-relay\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound-full-relay\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{TrimString(request.params[1].get_str())};",
      "path": "src/rpc/net.cpp",
      "position": 38,
      "original_position": 38,
      "commit_id": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "original_commit_id": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
      "in_reply_to_id": 555127628,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was my fault--I suggested it earlier on.",
      "created_at": "2021-01-11T20:56:04Z",
      "updated_at": "2021-01-11T20:56:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555331970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555331970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19315"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 344,
      "original_line": 344,
      "side": "RIGHT"
    }
  ]
}